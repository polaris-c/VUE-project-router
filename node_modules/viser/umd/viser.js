(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Viser"] = factory();
	else
		root["Viser"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 82);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var freeGlobal = __webpack_require__(51);

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(9),
    getRawTag = __webpack_require__(87),
    objectToString = __webpack_require__(88);

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),
/* 3 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

var baseClone = __webpack_require__(62);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

module.exports = cloneDeep;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var baseKeys = __webpack_require__(49),
    getTag = __webpack_require__(30),
    isArguments = __webpack_require__(19),
    isArray = __webpack_require__(0),
    isArrayLike = __webpack_require__(10),
    isBuffer = __webpack_require__(20),
    isPrototype = __webpack_require__(17),
    isTypedArray = __webpack_require__(34);

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) &&
      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }
  var tag = getTag(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

module.exports = isEmpty;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsNative = __webpack_require__(85),
    getValue = __webpack_require__(91);

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;


/***/ }),
/* 7 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),
/* 8 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is `null` or `undefined`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
 * @example
 *
 * _.isNil(null);
 * // => true
 *
 * _.isNil(void 0);
 * // => true
 *
 * _.isNil(NaN);
 * // => false
 */
function isNil(value) {
  return value == null;
}

module.exports = isNil;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(1);

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(18),
    isLength = __webpack_require__(32);

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(41);

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _isEmpty2 = __webpack_require__(5);

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

exports.setSEvent = setSEvent;
exports.setEvent = setEvent;

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var regEventName = /on(.+)(MouseEnter|MouseMove|MouseLeave|Click|DdlClick|MouseDown|MouseUp|TouchStart|TouchMove|TouchEnd)/;
function setSEvent(chart, itemname, keyname, content) {
    if ((0, _isEmpty3.default)(keyname)) {
        return;
    }
    var parseEventItem = regEventName.exec(keyname);
    if (!parseEventItem || parseEventItem.length <= 2) {
        return;
    }
    var lowerEventItem = parseEventItem[1].toLowerCase();
    var lowerEventName = parseEventItem[2].toLowerCase();
    var eventItem = itemname + "-" + lowerEventItem;
    chart.on(eventItem + ":" + lowerEventName, content);
}
function setEvent(chart, name, item) {
    if ((0, _isEmpty3.default)(item)) {
        return;
    }
    var events = Object.keys(item).filter(function (entry) {
        return (/^on/.test(entry)
        );
    });
    if ((0, _isEmpty3.default)(events)) {
        return;
    }
    events.forEach(function (entry) {
        var eventName = entry.slice(2, entry.length);
        var eventLowerCase = eventName.toLowerCase();
        var content = item[entry];
        if (name) {
            chart.on(name + ":" + eventLowerCase, content);
        } else {
            chart.on(eventLowerCase, content);
        }
    });
}
//# sourceMappingURL=EventUtils.js.map

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(61),
    baseKeys = __webpack_require__(49),
    isArrayLike = __webpack_require__(10);

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

var isSymbol = __webpack_require__(27);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__(43),
    baseClone = __webpack_require__(62),
    baseUnset = __webpack_require__(159),
    castPath = __webpack_require__(26),
    copyObject = __webpack_require__(16),
    customOmitClone = __webpack_require__(163),
    flatRest = __webpack_require__(164),
    getAllKeysIn = __webpack_require__(68);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * The opposite of `_.pick`; this method creates an object composed of the
 * own and inherited enumerable property paths of `object` that are not omitted.
 *
 * **Note:** This method is considerably slower than `_.pick`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to omit.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omit(object, ['a', 'c']);
 * // => { 'b': '2' }
 */
var omit = flatRest(function(object, paths) {
  var result = {};
  if (object == null) {
    return result;
  }
  var isDeep = false;
  paths = arrayMap(paths, function(path) {
    path = castPath(path, object);
    isDeep || (isDeep = path.length > 1);
    return path;
  });
  copyObject(object, getAllKeysIn(object), result);
  if (isDeep) {
    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
  }
  var length = paths.length;
  while (length--) {
    baseUnset(result, paths[length]);
  }
  return result;
});

module.exports = omit;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(63),
    baseAssignValue = __webpack_require__(64);

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;


/***/ }),
/* 17 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(2),
    isObject = __webpack_require__(7);

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsArguments = __webpack_require__(95),
    isObjectLike = __webpack_require__(3);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(1),
    stubFalse = __webpack_require__(96);

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(33)(module)))

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

var listCacheClear = __webpack_require__(102),
    listCacheDelete = __webpack_require__(103),
    listCacheGet = __webpack_require__(104),
    listCacheHas = __webpack_require__(105),
    listCacheSet = __webpack_require__(106);

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__(23);

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),
/* 23 */
/***/ (function(module, exports) {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(6);

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

var isKeyable = __webpack_require__(120);

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(0),
    isKey = __webpack_require__(42),
    stringToPath = __webpack_require__(133),
    toString = __webpack_require__(136);

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(2),
    isObjectLike = __webpack_require__(3);

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),
/* 28 */
/***/ (function(module, exports) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__formatDecimal__ = __webpack_require__(48);


/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return x = Object(__WEBPACK_IMPORTED_MODULE_0__formatDecimal__["a" /* default */])(Math.abs(x)), x ? x[1] : NaN;
});


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

var DataView = __webpack_require__(84),
    Map = __webpack_require__(31),
    Promise = __webpack_require__(92),
    Set = __webpack_require__(93),
    WeakMap = __webpack_require__(94),
    baseGetTag = __webpack_require__(2),
    toSource = __webpack_require__(52);

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(6),
    root = __webpack_require__(1);

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;


/***/ }),
/* 32 */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;


/***/ }),
/* 33 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsTypedArray = __webpack_require__(97),
    baseUnary = __webpack_require__(53),
    nodeUtil = __webpack_require__(98);

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqualDeep = __webpack_require__(101),
    isObjectLike = __webpack_require__(3);

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(21),
    stackClear = __webpack_require__(107),
    stackDelete = __webpack_require__(108),
    stackGet = __webpack_require__(109),
    stackHas = __webpack_require__(110),
    stackSet = __webpack_require__(111);

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

var mapCacheClear = __webpack_require__(112),
    mapCacheDelete = __webpack_require__(119),
    mapCacheGet = __webpack_require__(121),
    mapCacheHas = __webpack_require__(122),
    mapCacheSet = __webpack_require__(123);

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;


/***/ }),
/* 38 */
/***/ (function(module, exports) {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

var arrayFilter = __webpack_require__(131),
    stubArray = __webpack_require__(60);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;


/***/ }),
/* 40 */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(26),
    toKey = __webpack_require__(14);

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(0),
    isSymbol = __webpack_require__(27);

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;


/***/ }),
/* 43 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(50);

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

var Uint8Array = __webpack_require__(55);

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var G2 = __webpack_require__(47);
var registerShape = exports.registerShape = function registerShape(geoName, shapeName, shapeFun) {
    G2.Shape.registerShape(geoName, shapeName, shapeFun);
};
var registerAnimation = exports.registerAnimation = function registerAnimation(animationType, animationName, animationFun) {
    G2.Animate.registerAnimation(animationType, animationName, animationFun);
};
//# sourceMappingURL=CustomizeUtils.js.map

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["G2_3"] = factory();
	else
		root["G2_3"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 125);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview The util method based on the lodash.
 * @author dxq613@gmail.com
 * @see https://github.com/lodash/lodash
 */

var MAX_LEVEL = 5;

function _mix(dist, obj) {
  for (var k in obj) {
    if (obj.hasOwnProperty(k) && k !== 'constructor' && obj[k] !== undefined) {
      dist[k] = obj[k];
    }
  }
}

var Util = {
  each: __webpack_require__(126),
  map: __webpack_require__(141),
  isObject: __webpack_require__(7),
  isNumber: __webpack_require__(192),
  isString: __webpack_require__(89),
  isFunction: __webpack_require__(48),
  isFinite: __webpack_require__(193),
  isBoolean: __webpack_require__(194),
  isEmpty: __webpack_require__(195),
  lowerFirst: __webpack_require__(196),
  upperFirst: __webpack_require__(201),
  upperCase: __webpack_require__(202),
  isNil: __webpack_require__(93),
  isNull: __webpack_require__(211),
  isArray: __webpack_require__(3),
  isDate: __webpack_require__(212),
  isPlainObject: __webpack_require__(214),
  toArray: __webpack_require__(215),
  indexOf: __webpack_require__(219),
  assign: __webpack_require__(60),
  groupBy: __webpack_require__(230),
  cloneDeep: __webpack_require__(102),
  maxBy: __webpack_require__(255),
  minBy: __webpack_require__(257),
  round: __webpack_require__(259),
  filter: __webpack_require__(261),
  isEqualWith: __webpack_require__(263),
  isEqual: __webpack_require__(264),
  replace: __webpack_require__(265),
  union: __webpack_require__(266),
  pick: __webpack_require__(274),
  snapEqual: function snapEqual(v1, v2) {
    return Math.abs(v1 - v2) < 0.001;
  },
  fixedBase: function fixedBase(v, base) {
    var str = base.toString();
    var index = str.indexOf('.');
    if (index === -1) {
      return Math.round(v);
    }
    var length = str.substr(index + 1).length;
    if (length > 20) {
      length = 20;
    }
    return parseFloat(v.toFixed(length));
  },
  mix: function mix(dist, obj1, obj2, obj3) {
    if (obj1) {
      _mix(dist, obj1);
    }

    if (obj2) {
      _mix(dist, obj2);
    }

    if (obj3) {
      _mix(dist, obj3);
    }
    return dist;
  },
  inArray: function inArray(arr, value) {
    return arr.indexOf(value) >= 0;
  },

  /**
   * 封装事件，便于使用上下文this,和便于解除事件时使用
   * @protected
   * @param  {Object} obj   对象
   * @param  {String} action 事件名称
   * @return {Function}        返回事件处理函数
   */
  wrapBehavior: function wrapBehavior(obj, action) {
    if (obj['_wrap_' + action]) {
      return obj['_wrap_' + action];
    }
    var method = function method(e) {
      obj[action](e);
    };
    obj['_wrap_' + action] = method;
    return method;
  },

  /**
   * 获取封装的事件
   * @protected
   * @param  {Object} obj   对象
   * @param  {String} action 事件名称
   * @return {Function}        返回事件处理函数
   */
  getWrapBehavior: function getWrapBehavior(obj, action) {
    return obj['_wrap_' + action];
  },

  /**
   * 将用户输入的 padding 转换成 [top, right, bottom, right] 的模式
   * @param  {Number|Array} padding 输入的padding
   * @return {Array} 四个padding 值
   */
  toAllPadding: function toAllPadding(padding) {
    var top = 0;
    var left = 0;
    var right = 0;
    var bottom = 0;

    if (Util.isNumber(padding) || Util.isString(padding)) {
      top = left = right = bottom = padding;
    } else if (Util.isArray(padding)) {
      top = padding[0];
      right = !Util.isNil(padding[1]) ? padding[1] : padding[0];
      bottom = !Util.isNil(padding[2]) ? padding[2] : padding[0];
      left = !Util.isNil(padding[3]) ? padding[3] : right;
    } else if (Util.isObject(padding)) {
      top = padding.top || 0;
      right = padding.right || 0;
      bottom = padding.bottom || 0;
      left = padding.left || 0;
    }
    return [top, right, bottom, left];
  },

  /**
   * 替换字符串中的字段.
   * @param {String} str 模版字符串
   * @param {Object} o json data
   * @return {String}     替换后的字符串
   */
  substitute: function substitute(str, o) {
    if (!str || !o) {
      return str;
    }
    return str.replace(/\\?\{([^{}]+)\}/g, function (match, name) {
      if (match.charAt(0) === '\\') {
        return match.slice(1);
      }
      return o[name] === undefined ? '' : o[name];
    });
  }
};

function deepMix(dst, src, level) {
  level = level || 0;
  for (var k in src) {
    if (src.hasOwnProperty(k)) {
      var value = src[k];
      if (value !== null && Util.isPlainObject(value)) {
        if (!Util.isPlainObject(dst[k])) {
          dst[k] = {};
        }
        if (level < MAX_LEVEL) {
          deepMix(dst[k], src[k], level + 1);
        } else {
          dst[k] = src[k];
        }
      } else if (Util.isArray(value)) {
        dst[k] = [];
        dst[k] = dst[k].concat(value);
      } else if (value !== undefined) {
        dst[k] = src[k];
      }
    }
  }
}

Util.deepMix = function () {
  var args = Util.toArray(arguments);
  var rst = args[0];
  for (var i = 1; i < args.length; i++) {
    var source = args[i];
    deepMix(rst, source);
  }
  return rst;
};

Util.Array = {
  merge: function merge(dataArray) {
    var rst = [];
    for (var i = 0; i < dataArray.length; i++) {
      rst = rst.concat(dataArray[i]);
    }
    return rst;
  },
  values: function values(data, name) {
    var rst = [];
    var tmpMap = {};
    for (var i = 0; i < data.length; i++) {
      var obj = data[i];
      var value = obj[name];
      if (!Util.isNil(value)) {
        if (!Util.isArray(value)) {
          value = [value];
        }
        Util.each(value, function (val) {
          if (!tmpMap[val]) {
            rst.push(val);
            tmpMap[val] = true;
          }
        });
      }
    }
    return rst;
  },
  getRange: function getRange(values) {
    if (!values.length) {
      // 如果没有数值则直接返回0
      return {
        min: 0,
        max: 0
      };
    }
    if (Util.isArray(values[0])) {
      var tmp = [];
      for (var i = 0; i < values.length; i++) {
        tmp = tmp.concat(values[i]);
      }
      values = tmp;
    }
    var max = Math.max.apply(null, values);
    var min = Math.min.apply(null, values);
    return {
      min: min,
      max: max
    };
  },
  firstValue: function firstValue(data, name) {
    var rst = null;
    for (var i = 0; i < data.length; i++) {
      var obj = data[i];
      var value = obj[name];
      if (!Util.isNil(value)) {
        if (Util.isArray(value)) {
          rst = value[0];
        } else {
          rst = value;
        }
        break;
      }
    }
    return rst;
  },
  group: function group(data, condition) {
    if (!condition) {
      return [data];
    }
    var groups = Util.Array.groupToMap(data, condition);
    var array = [];
    for (var i in groups) {
      array.push(groups[i]);
    }
    return array;
  },
  groupToMap: function groupToMap(data, condition) {
    if (!condition) {
      return {
        0: data
      };
    }
    if (!Util.isFunction(condition)) {
      var paramsCondition = Util.isArray(condition) ? condition : condition.replace(/\s+/g, '').split('*');
      condition = function condition(row) {
        var unique = '_'; // 避免出现数字作为Key的情况，会进行按照数字的排序
        for (var i = 0, l = paramsCondition.length; i < l; i++) {
          unique += row[paramsCondition[i]] && row[paramsCondition[i]].toString();
        }
        return unique;
      };
    }
    var groups = Util.groupBy(data, condition);
    return groups;
  },
  remove: function remove(arr, obj) {
    var index = Util.indexOf(arr, obj);
    if (index !== -1) {
      arr.splice(index, 1);
    }
  }
};

module.exports = Util;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview 全局变量
 * @author dxq613
 */
var Util = __webpack_require__(0);
var Theme = __webpack_require__(291);

var Global = {};
var Default = {
  version: '3.0.1',
  trackable: true,
  animate: true,
  snapArray: [0, 1, 2, 4, 5, 10],
  // 指定固定 tick 数的逼近值
  snapCountArray: [0, 1, 1.2, 1.5, 1.6, 2, 2.2, 2.4, 3, 4, 5, 6, 7.5, 8, 10],
  widthRatio: { // 宽度所占的分类的比例
    column: 1 / 2, // 一般的柱状图占比 1/2
    rose: 0.9999999, // 玫瑰图柱状占比 1
    multiplePie: 1 / 1.3 // 多层的饼图、环图
  },
  // 折线图、区域图、path 当只有一个数据时，是否显示成点
  showSinglePoint: false,
  connectNulls: false,
  scales: {}
};

function setTheme(theme) {
  for (var k in Global) {
    if (Global.hasOwnProperty(k)) {
      delete Global[k];
    }
  }

  var newTheme = {};
  if (Util.isObject(theme)) {
    newTheme = theme;
  } else if (Util.indexOf(Object.keys(Theme), theme) !== -1) {
    newTheme = Theme[theme];
  } else {
    newTheme = Theme.default;
  }
  Util.deepMix(Global, Default, newTheme);
  Global.setTheme = setTheme;
}

setTheme('default');

module.exports = Global;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function webpackUniversalModuleDefinition(root, factory) {
  if (( false ? 'undefined' : _typeof2(exports)) === 'object' && ( false ? 'undefined' : _typeof2(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === 'undefined' ? 'undefined' : _typeof2(exports)) === 'object') exports["G"] = factory();else root["G"] = factory();
})(this, function () {
  return (/******/function (modules) {
      // webpackBootstrap
      /******/ // The module cache
      /******/var installedModules = {};
      /******/
      /******/ // The require function
      /******/function __webpack_require__(moduleId) {
        /******/
        /******/ // Check if module is in cache
        /******/if (installedModules[moduleId]) {
          /******/return installedModules[moduleId].exports;
          /******/
        }
        /******/ // Create a new module (and put it into the cache)
        /******/var module = installedModules[moduleId] = {
          /******/i: moduleId,
          /******/l: false,
          /******/exports: {}
          /******/ };
        /******/
        /******/ // Execute the module function
        /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ // Flag the module as loaded
        /******/module.l = true;
        /******/
        /******/ // Return the exports of the module
        /******/return module.exports;
        /******/
      }
      /******/
      /******/
      /******/ // expose the modules object (__webpack_modules__)
      /******/__webpack_require__.m = modules;
      /******/
      /******/ // expose the module cache
      /******/__webpack_require__.c = installedModules;
      /******/
      /******/ // define getter function for harmony exports
      /******/__webpack_require__.d = function (exports, name, getter) {
        /******/if (!__webpack_require__.o(exports, name)) {
          /******/Object.defineProperty(exports, name, {
            /******/configurable: false,
            /******/enumerable: true,
            /******/get: getter
            /******/ });
          /******/
        }
        /******/
      };
      /******/
      /******/ // getDefaultExport function for compatibility with non-harmony modules
      /******/__webpack_require__.n = function (module) {
        /******/var getter = module && module.__esModule ?
        /******/function getDefault() {
          return module['default'];
        } :
        /******/function getModuleExports() {
          return module;
        };
        /******/__webpack_require__.d(getter, 'a', getter);
        /******/return getter;
        /******/
      };
      /******/
      /******/ // Object.prototype.hasOwnProperty.call
      /******/__webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/
      /******/ // __webpack_public_path__
      /******/__webpack_require__.p = "";
      /******/
      /******/ // Load entry module and return exports
      /******/return __webpack_require__(__webpack_require__.s = 112);
      /******/
    }(
    /************************************************************************/
    /******/[
    /* 0 */
    /***/function (module, exports, __webpack_require__) {

      var CommonUtil = __webpack_require__(31);
      var DomUtil = __webpack_require__(85);

      var Util = {};

      CommonUtil.merge(Util, CommonUtil, DomUtil, {
        mixin: function mixin(c, mixins) {
          var Param = c.CFG ? 'CFG' : 'ATTRS';
          if (c && mixins) {
            c._mixins = mixins;
            c[Param] = c[Param] || {};
            var temp = {};
            Util.each(mixins, function (mixin) {
              Util.augment(c, mixin);
              var attrs = mixin[Param];
              if (attrs) {
                Util.merge(temp, attrs);
              }
            });
            c[Param] = Util.merge(temp, c[Param]);
          }
        }
      });

      module.exports = Util;

      /***/
    },
    /* 1 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var Element = __webpack_require__(88);
      var Inside = __webpack_require__(2);

      var Shape = function Shape(cfg) {
        Shape.superclass.constructor.call(this, cfg);
      };

      Shape.ATTRS = {};

      Util.extend(Shape, Element);

      Util.augment(Shape, {
        isShape: true,
        createPath: function createPath() {},
        drawInner: function drawInner(context) {
          var self = this;
          var attrs = self.__attrs;
          self.createPath(context);
          var originOpacity = context.globalAlpha;
          if (self.hasFill()) {
            var fillOpacity = attrs.fillOpacity;
            if (!Util.isNil(fillOpacity) && fillOpacity !== 1) {
              context.globalAlpha = fillOpacity;
              context.fill();
              context.globalAlpha = originOpacity;
            } else {
              context.fill();
            }
          }
          if (self.hasStroke()) {
            var lineWidth = self.__attrs.lineWidth;
            if (lineWidth > 0) {
              var strokeOpacity = attrs.strokeOpacity;
              if (!Util.isNil(strokeOpacity) && strokeOpacity !== 1) {
                context.globalAlpha = strokeOpacity;
              }
              context.stroke();
            }
          }
        },

        /**
         * 节点是否在图形中
         * @param  {Number}  x x 坐标
         * @param  {Number}  y y 坐标
         * @return {Boolean}  是否在图形中
         */
        isPointInPath: function isPointInPath() {
          return false;
        },

        /**
         * 击中图形时是否进行包围盒判断
         * @return {Boolean} [description]
         */
        isHitBox: function isHitBox() {
          return true;
        },

        /**
         * 节点是否能够被击中
         * @param {Number} x x坐标
         * @param {Number} y y坐标
         * @return {Boolean} 是否在图形中
         */
        isHit: function isHit(x, y) {
          var self = this;
          var v = [x, y, 1];
          self.invert(v); // canvas

          if (self.isHitBox()) {
            var box = self.getBBox();
            if (box && !Inside.box(box.minX, box.maxX, box.minY, box.maxY, v[0], v[1])) {
              return false;
            }
          }
          var clip = self.__attrs.clip;
          if (clip) {
            if (clip.inside(x, y)) {
              return self.isPointInPath(v[0], v[1]);
            }
          } else {
            return self.isPointInPath(v[0], v[1]);
          }
          return false;
        },

        /**
         * @protected
         * 计算包围盒
         * @return {Object} 包围盒
         */
        calculateBox: function calculateBox() {
          return null;
        },

        // 清除当前的矩阵
        clearTotalMatrix: function clearTotalMatrix() {
          this.__cfg.totalMatrix = null;
          this.__cfg.region = null;
        },
        clearBBox: function clearBBox() {
          this.__cfg.box = null;
          this.__cfg.region = null;
        },
        getBBox: function getBBox() {
          var box = this.__cfg.box;
          // 延迟计算
          if (!box) {
            box = this.calculateBox();
            if (box) {
              box.x = box.minX;
              box.y = box.minY;
              box.width = box.maxX - box.minX;
              box.height = box.maxY - box.minY;
            }
            this.__cfg.box = box;
          }
          return box;
        }
      });

      module.exports = Shape;

      /***/
    },
    /* 2 */
    /***/function (module, exports, __webpack_require__) {

      var Line = __webpack_require__(52);
      var Quadratic = __webpack_require__(53);
      var Cubic = __webpack_require__(30);
      var Arc = __webpack_require__(54);

      module.exports = {
        line: function line(x1, y1, x2, y2, lineWidth, x, y) {
          var box = Line.box(x1, y1, x2, y2, lineWidth);

          if (!this.box(box.minX, box.maxX, box.minY, box.maxY, x, y)) {
            return false;
          }

          var d = Line.pointDistance(x1, y1, x2, y2, x, y);
          if (isNaN(d)) {
            return false;
          }
          return d <= lineWidth / 2;
        },
        polyline: function polyline(points, lineWidth, x, y) {
          var l = points.length - 1;
          if (l < 1) {
            return false;
          }
          for (var i = 0; i < l; i++) {
            var x1 = points[i][0];
            var y1 = points[i][1];
            var x2 = points[i + 1][0];
            var y2 = points[i + 1][1];

            if (this.line(x1, y1, x2, y2, lineWidth, x, y)) {
              return true;
            }
          }

          return false;
        },
        cubicline: function cubicline(x1, y1, x2, y2, x3, y3, x4, y4, lineWidth, x, y) {
          return Cubic.pointDistance(x1, y1, x2, y2, x3, y3, x4, y4, x, y) <= lineWidth / 2;
        },
        quadraticline: function quadraticline(x1, y1, x2, y2, x3, y3, lineWidth, x, y) {
          return Quadratic.pointDistance(x1, y1, x2, y2, x3, y3, x, y) <= lineWidth / 2;
        },
        arcline: function arcline(cx, cy, r, startAngle, endAngle, clockwise, lineWidth, x, y) {
          return Arc.pointDistance(cx, cy, r, startAngle, endAngle, clockwise, x, y) <= lineWidth / 2;
        },
        rect: function rect(rx, ry, width, height, x, y) {
          return rx <= x && x <= rx + width && ry <= y && y <= ry + height;
        },
        circle: function circle(cx, cy, r, x, y) {
          return Math.pow(x - cx, 2) + Math.pow(y - cy, 2) <= Math.pow(r, 2);
        },
        box: function box(minX, maxX, minY, maxY, x, y) {
          return minX <= x && x <= maxX && minY <= y && y <= maxY;
        }
      };

      /***/
    },
    /* 3 */
    /***/function (module, exports, __webpack_require__) {

      var CommonUtil = __webpack_require__(31);
      var mat3 = __webpack_require__(230);
      var vec3 = __webpack_require__(231);
      var vec2 = __webpack_require__(232);

      vec2.angle = function (v1, v2) {
        var theta = vec2.dot(v1, v2) / (vec2.length(v1) * vec2.length(v2));
        return Math.acos(CommonUtil.clamp(theta, -1, 1));
      };
      /**
       * 向量 v1 到 向量 v2 夹角的方向
       * @param  {Array} v1 向量
       * @param  {Array} v2 向量
       * @return {Boolean} >= 0 顺时针 < 0 逆时针
       */
      vec2.direction = function (v1, v2) {
        return v1[0] * v2[1] - v2[0] * v1[1];
      };
      vec2.angleTo = function (v1, v2, direct) {
        var angle = vec2.angle(v1, v2);
        var angleLargeThanPI = vec2.direction(v1, v2) >= 0;
        if (direct) {
          if (angleLargeThanPI) {
            return Math.PI * 2 - angle;
          }

          return angle;
        }

        if (angleLargeThanPI) {
          return angle;
        }
        return Math.PI * 2 - angle;
      };
      vec2.vertical = function (out, v, flag) {
        if (flag) {
          out[0] = v[1];
          out[1] = -1 * v[0];
        } else {
          out[0] = -1 * v[1];
          out[1] = v[0];
        }

        return out;
      };

      mat3.translate = function (out, a, v) {
        var transMat = new Array(9);
        mat3.fromTranslation(transMat, v);
        return mat3.multiply(out, transMat, a);
      };

      mat3.rotate = function (out, a, rad) {
        var rotateMat = new Array(9);
        mat3.fromRotation(rotateMat, rad);
        return mat3.multiply(out, rotateMat, a);
      };

      mat3.scale = function (out, a, v) {
        var scaleMat = new Array(9);
        mat3.fromScaling(scaleMat, v);
        return mat3.multiply(out, scaleMat, a);
      };

      module.exports = {
        mat3: mat3,
        vec2: vec2,
        vec3: vec3,
        transform: function transform(m, ts) {
          m = CommonUtil.clone(m);
          CommonUtil.each(ts, function (t) {
            switch (t[0]) {
              case 't':
                mat3.translate(m, m, [t[1], t[2]]);
                break;
              case 's':
                mat3.scale(m, m, [t[1], t[2]]);
                break;
              case 'r':
                mat3.rotate(m, m, t[1]);
                break;
              case 'm':
                mat3.multiply(m, m, t[1]);
                break;
              default:
                return false;
            }
          });
          return m;
        }
      };

      /***/
    },
    /* 4 */
    /***/function (module, exports, __webpack_require__) {

      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      };

      var freeGlobal = __webpack_require__(55);

      /** Detect free variable `self`. */
      var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;

      /** Used as a reference to the global object. */
      var root = freeGlobal || freeSelf || Function('return this')();

      module.exports = root;

      /***/
    },
    /* 5 */
    /***/function (module, exports) {

      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      };

      /**
       * Checks if `value` is object-like. A value is object-like if it's not `null`
       * and has a `typeof` result of "object".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       * @example
       *
       * _.isObjectLike({});
       * // => true
       *
       * _.isObjectLike([1, 2, 3]);
       * // => true
       *
       * _.isObjectLike(_.noop);
       * // => false
       *
       * _.isObjectLike(null);
       * // => false
       */
      function isObjectLike(value) {
        return value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
      }

      module.exports = isObjectLike;

      /***/
    },
    /* 6 */
    /***/function (module, exports) {

      /**
       * Checks if `value` is classified as an `Array` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array, else `false`.
       * @example
       *
       * _.isArray([1, 2, 3]);
       * // => true
       *
       * _.isArray(document.body.children);
       * // => false
       *
       * _.isArray('abc');
       * // => false
       *
       * _.isArray(_.noop);
       * // => false
       */
      var isArray = Array.isArray;

      module.exports = isArray;

      /***/
    },
    /* 7 */
    /***/function (module, exports, __webpack_require__) {

      var _Symbol = __webpack_require__(11),
          getRawTag = __webpack_require__(115),
          objectToString = __webpack_require__(116);

      /** `Object#toString` result references. */
      var nullTag = '[object Null]',
          undefinedTag = '[object Undefined]';

      /** Built-in value references. */
      var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

      /**
       * The base implementation of `getTag` without fallbacks for buggy environments.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      function baseGetTag(value) {
        if (value == null) {
          return value === undefined ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }

      module.exports = baseGetTag;

      /***/
    },
    /* 8 */
    /***/function (module, exports) {

      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      };

      /**
       * Checks if `value` is the
       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
       * @example
       *
       * _.isObject({});
       * // => true
       *
       * _.isObject([1, 2, 3]);
       * // => true
       *
       * _.isObject(_.noop);
       * // => true
       *
       * _.isObject(null);
       * // => false
       */
      function isObject(value) {
        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
        return value != null && (type == 'object' || type == 'function');
      }

      module.exports = isObject;

      /***/
    },
    /* 9 */
    /***/function (module, exports, __webpack_require__) {

      var isFunction = __webpack_require__(20),
          isLength = __webpack_require__(60);

      /**
       * Checks if `value` is array-like. A value is considered array-like if it's
       * not a function and has a `value.length` that's an integer greater than or
       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
       * @example
       *
       * _.isArrayLike([1, 2, 3]);
       * // => true
       *
       * _.isArrayLike(document.body.children);
       * // => true
       *
       * _.isArrayLike('abc');
       * // => true
       *
       * _.isArrayLike(_.noop);
       * // => false
       */
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }

      module.exports = isArrayLike;

      /***/
    },
    /* 10 */
    /***/function (module, exports, __webpack_require__) {

      var baseIsNative = __webpack_require__(123),
          getValue = __webpack_require__(126);

      /**
       * Gets the native function at `key` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the method to get.
       * @returns {*} Returns the function if it's native, else `undefined`.
       */
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined;
      }

      module.exports = getNative;

      /***/
    },
    /* 11 */
    /***/function (module, exports, __webpack_require__) {

      var root = __webpack_require__(4);

      /** Built-in value references. */
      var _Symbol = root.Symbol;

      module.exports = _Symbol;

      /***/
    },
    /* 12 */
    /***/function (module, exports, __webpack_require__) {

      var assignValue = __webpack_require__(37),
          baseAssignValue = __webpack_require__(38);

      /**
       * Copies properties of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy properties from.
       * @param {Array} props The property identifiers to copy.
       * @param {Object} [object={}] The object to copy properties to.
       * @param {Function} [customizer] The function to customize copied values.
       * @returns {Object} Returns `object`.
       */
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});

        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];

          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

          if (newValue === undefined) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }

      module.exports = copyObject;

      /***/
    },
    /* 13 */
    /***/function (module, exports, __webpack_require__) {

      var arrayLikeKeys = __webpack_require__(66),
          baseKeys = __webpack_require__(57),
          isArrayLike = __webpack_require__(9);

      /**
       * Creates an array of the own enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects. See the
       * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * for more details.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keys(new Foo);
       * // => ['a', 'b'] (iteration order is not guaranteed)
       *
       * _.keys('hi');
       * // => ['0', '1']
       */
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }

      module.exports = keys;

      /***/
    },
    /* 14 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0__src_color__ = __webpack_require__(49);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "a", function () {
        return __WEBPACK_IMPORTED_MODULE_0__src_color__["e"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "f", function () {
        return __WEBPACK_IMPORTED_MODULE_0__src_color__["g"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "d", function () {
        return __WEBPACK_IMPORTED_MODULE_0__src_color__["f"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__src_lab__ = __webpack_require__(249);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "e", function () {
        return __WEBPACK_IMPORTED_MODULE_1__src_lab__["a"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
        return __WEBPACK_IMPORTED_MODULE_1__src_lab__["b"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__src_cubehelix__ = __webpack_require__(250);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
        return __WEBPACK_IMPORTED_MODULE_2__src_cubehelix__["a"];
      });

      /***/
    },
    /* 15 */
    /***/function (module, exports) {

      var PI = Math.PI;
      var sin = Math.sin;
      var cos = Math.cos;
      var atan2 = Math.atan2;
      var DEFAULT_LENGTH = 10;
      var DEFAULT_ANGLE = PI / 3;

      function _addArrow(ctx, attrs, x1, y1, x2, y2) {
        var leftX = void 0;
        var leftY = void 0;
        var rightX = void 0;
        var rightY = void 0;
        var offsetX = void 0;
        var offsetY = void 0;
        var angle = void 0;

        if (!attrs.fill) {
          // 闭合的不绘制箭头
          var arrowLength = attrs.arrowLength || DEFAULT_LENGTH;
          var arrowAngle = attrs.arrowAngle ? attrs.arrowAngle * PI / 180 : DEFAULT_ANGLE; // 转换为弧度

          // Calculate angle
          angle = atan2(y2 - y1, x2 - x1);
          // Adjust angle correctly
          angle -= PI;
          // Calculate offset to place arrow at edge of path
          offsetX = attrs.lineWidth * cos(angle);
          offsetY = attrs.lineWidth * sin(angle);

          // Calculate coordinates for left half of arrow
          leftX = x2 + arrowLength * cos(angle + arrowAngle / 2);
          leftY = y2 + arrowLength * sin(angle + arrowAngle / 2);
          // Calculate coordinates for right half of arrow
          rightX = x2 + arrowLength * cos(angle - arrowAngle / 2);
          rightY = y2 + arrowLength * sin(angle - arrowAngle / 2);

          // Draw left half of arrow
          ctx.moveTo(leftX - offsetX, leftY - offsetY);
          ctx.lineTo(x2 - offsetX, y2 - offsetY);
          // Draw right half of arrow
          ctx.lineTo(rightX - offsetX, rightY - offsetY);

          // Visually connect arrow to path
          ctx.moveTo(x2 - offsetX, y2 - offsetY);
          ctx.lineTo(x2 + offsetX, y2 + offsetY);
          // Move back to end of path
          ctx.moveTo(x2, y2);
        }
      }

      module.exports = {
        addStartArrow: function addStartArrow(ctx, attrs, x1, y1, x2, y2) {
          if (attrs.startArrow) {
            _addArrow(ctx, attrs, x1, y1, x2, y2);
          }
        },
        addEndArrow: function addEndArrow(ctx, attrs, x1, y1, x2, y2) {
          if (attrs.endArrow) {
            _addArrow(ctx, attrs, x1, y1, x2, y2);
          }
        }
      };

      /***/
    },
    /* 16 */
    /***/function (module, exports) {

      /** Used for built-in method references. */
      var objectProto = Object.prototype;

      /**
       * Checks if `value` is likely a prototype object.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
       */
      function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

        return value === proto;
      }

      module.exports = isPrototype;

      /***/
    },
    /* 17 */
    /***/function (module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function (module) {
        var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
          return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
        } : function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
        };

        var root = __webpack_require__(4),
            stubFalse = __webpack_require__(131);

        /** Detect free variable `exports`. */
        var freeExports = (false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

        /** Detect free variable `module`. */
        var freeModule = freeExports && (false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports;

        /** Built-in value references. */
        var Buffer = moduleExports ? root.Buffer : undefined;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

        /**
         * Checks if `value` is a buffer.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
         * @example
         *
         * _.isBuffer(new Buffer(2));
         * // => true
         *
         * _.isBuffer(new Uint8Array(2));
         * // => false
         */
        var isBuffer = nativeIsBuffer || stubFalse;

        module.exports = isBuffer;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(34)(module));

      /***/
    },
    /* 18 */
    /***/function (module, exports) {

      /**
       * Performs a
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * comparison between two values to determine if they are equivalent.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.eq(object, object);
       * // => true
       *
       * _.eq(object, other);
       * // => false
       *
       * _.eq('a', 'a');
       * // => true
       *
       * _.eq('a', Object('a'));
       * // => false
       *
       * _.eq(NaN, NaN);
       * // => true
       */
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }

      module.exports = eq;

      /***/
    },
    /* 19 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["c"] = hue;
      /* harmony export (immutable) */__webpack_exports__["b"] = gamma;
      /* harmony export (immutable) */__webpack_exports__["a"] = nogamma;
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__constant__ = __webpack_require__(92);

      function linear(a, d) {
        return function (t) {
          return a + t * d;
        };
      }

      function exponential(a, b, y) {
        return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
          return Math.pow(a + t * b, y);
        };
      }

      function hue(a, b) {
        var d = b - a;
        return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
      }

      function gamma(y) {
        return (y = +y) === 1 ? nogamma : function (a, b) {
          return b - a ? exponential(a, b, y) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
        };
      }

      function nogamma(a, b) {
        var d = b - a;
        return d ? linear(a, d) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
      }

      /***/
    },
    /* 20 */
    /***/function (module, exports, __webpack_require__) {

      var baseGetTag = __webpack_require__(7),
          isObject = __webpack_require__(8);

      /** `Object#toString` result references. */
      var asyncTag = '[object AsyncFunction]',
          funcTag = '[object Function]',
          genTag = '[object GeneratorFunction]',
          proxyTag = '[object Proxy]';

      /**
       * Checks if `value` is classified as a `Function` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a function, else `false`.
       * @example
       *
       * _.isFunction(_);
       * // => true
       *
       * _.isFunction(/abc/);
       * // => false
       */
      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }
        // The use of `Object#toString` avoids issues with the `typeof` operator
        // in Safari 9 which returns 'object' for typed arrays and other constructors.
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }

      module.exports = isFunction;

      /***/
    },
    /* 21 */
    /***/function (module, exports, __webpack_require__) {

      var DataView = __webpack_require__(122),
          Map = __webpack_require__(32),
          Promise = __webpack_require__(127),
          Set = __webpack_require__(128),
          WeakMap = __webpack_require__(129),
          baseGetTag = __webpack_require__(7),
          toSource = __webpack_require__(59);

      /** `Object#toString` result references. */
      var mapTag = '[object Map]',
          objectTag = '[object Object]',
          promiseTag = '[object Promise]',
          setTag = '[object Set]',
          weakMapTag = '[object WeakMap]';

      var dataViewTag = '[object DataView]';

      /** Used to detect maps, sets, and weakmaps. */
      var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);

      /**
       * Gets the `toStringTag` of `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      var getTag = baseGetTag;

      // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
        getTag = function getTag(value) {
          var result = baseGetTag(value),
              Ctor = result == objectTag ? value.constructor : undefined,
              ctorString = Ctor ? toSource(Ctor) : '';

          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result;
        };
      }

      module.exports = getTag;

      /***/
    },
    /* 22 */
    /***/function (module, exports, __webpack_require__) {

      var baseIsTypedArray = __webpack_require__(132),
          baseUnary = __webpack_require__(61),
          nodeUtil = __webpack_require__(133);

      /* Node.js helper references. */
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

      /**
       * Checks if `value` is classified as a typed array.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       * @example
       *
       * _.isTypedArray(new Uint8Array);
       * // => true
       *
       * _.isTypedArray([]);
       * // => false
       */
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

      module.exports = isTypedArray;

      /***/
    },
    /* 23 */
    /***/function (module, exports, __webpack_require__) {

      var listCacheClear = __webpack_require__(139),
          listCacheDelete = __webpack_require__(140),
          listCacheGet = __webpack_require__(141),
          listCacheHas = __webpack_require__(142),
          listCacheSet = __webpack_require__(143);

      /**
       * Creates an list cache object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      // Add methods to `ListCache`.
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype['delete'] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;

      module.exports = ListCache;

      /***/
    },
    /* 24 */
    /***/function (module, exports, __webpack_require__) {

      var eq = __webpack_require__(18);

      /**
       * Gets the index at which the `key` is found in `array` of key-value pairs.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} key The key to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }

      module.exports = assocIndexOf;

      /***/
    },
    /* 25 */
    /***/function (module, exports, __webpack_require__) {

      var getNative = __webpack_require__(10);

      /* Built-in method references that are verified to be native. */
      var nativeCreate = getNative(Object, 'create');

      module.exports = nativeCreate;

      /***/
    },
    /* 26 */
    /***/function (module, exports, __webpack_require__) {

      var isKeyable = __webpack_require__(157);

      /**
       * Gets the data for `map`.
       *
       * @private
       * @param {Object} map The map to query.
       * @param {string} key The reference key.
       * @returns {*} Returns the map data.
       */
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
      }

      module.exports = getMapData;

      /***/
    },
    /* 27 */
    /***/function (module, exports, __webpack_require__) {

      var arrayLikeKeys = __webpack_require__(66),
          baseKeysIn = __webpack_require__(164),
          isArrayLike = __webpack_require__(9);

      /**
       * Creates an array of the own and inherited enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keysIn(new Foo);
       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
       */
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }

      module.exports = keysIn;

      /***/
    },
    /* 28 */
    /***/function (module, exports) {

      /**
       * Copies the values of `source` to `array`.
       *
       * @private
       * @param {Array} source The array to copy values from.
       * @param {Array} [array=[]] The array to copy values to.
       * @returns {Array} Returns `array`.
       */
      function copyArray(source, array) {
        var index = -1,
            length = source.length;

        array || (array = Array(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }

      module.exports = copyArray;

      /***/
    },
    /* 29 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony default export */
      __webpack_exports__["a"] = function (a, b) {
        return a = +a, b -= a, function (t) {
          return a + b * t;
        };
      };

      /***/
    },
    /* 30 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var vec2 = __webpack_require__(3).vec2;

      function cubicAt(p0, p1, p2, p3, t) {
        var onet = 1 - t;
        return onet * onet * (onet * p3 + 3 * t * p2) + t * t * (t * p0 + 3 * onet * p1);
      }

      function cubicDerivativeAt(p0, p1, p2, p3, t) {
        var onet = 1 - t;
        return 3 * (((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet + (p3 - p2) * t * t);
      }

      function cubicProjectPoint(x1, y1, x2, y2, x3, y3, x4, y4, x, y, out) {
        var t = void 0;
        var interval = 0.005;
        var d = Infinity;
        var _t = void 0;
        var v1 = void 0;
        var d1 = void 0;
        var d2 = void 0;
        var v2 = void 0;
        var prev = void 0;
        var next = void 0;
        var EPSILON = 0.0001;
        var v0 = [x, y];

        for (_t = 0; _t < 1; _t += 0.05) {
          v1 = [cubicAt(x1, x2, x3, x4, _t), cubicAt(y1, y2, y3, y4, _t)];

          d1 = vec2.squaredDistance(v0, v1);
          if (d1 < d) {
            t = _t;
            d = d1;
          }
        }
        d = Infinity;

        for (var i = 0; i < 32; i++) {
          if (interval < EPSILON) {
            break;
          }

          prev = t - interval;
          next = t + interval;

          v1 = [cubicAt(x1, x2, x3, x4, prev), cubicAt(y1, y2, y3, y4, prev)];

          d1 = vec2.squaredDistance(v0, v1);

          if (prev >= 0 && d1 < d) {
            t = prev;
            d = d1;
          } else {
            v2 = [cubicAt(x1, x2, x3, x4, next), cubicAt(y1, y2, y3, y4, next)];

            d2 = vec2.squaredDistance(v0, v2);

            if (next <= 1 && d2 < d) {
              t = next;
              d = d2;
            } else {
              interval *= 0.5;
            }
          }
        }

        if (out) {
          out.x = cubicAt(x1, x2, x3, x4, t);
          out.y = cubicAt(y1, y2, y3, y4, t);
        }

        return Math.sqrt(d);
      }

      function cubicExtrema(p0, p1, p2, p3) {
        var a = 3 * p0 - 9 * p1 + 9 * p2 - 3 * p3;
        var b = 6 * p1 - 12 * p2 + 6 * p3;
        var c = 3 * p2 - 3 * p3;
        var extrema = [];
        var t1 = void 0;
        var t2 = void 0;
        var discSqrt = void 0;

        if (Util.isNumberEqual(a, 0)) {
          if (!Util.isNumberEqual(b, 0)) {
            t1 = -c / b;
            if (t1 >= 0 && t1 <= 1) {
              extrema.push(t1);
            }
          }
        } else {
          var disc = b * b - 4 * a * c;
          if (Util.isNumberEqual(disc, 0)) {
            extrema.push(-b / (2 * a));
          } else if (disc > 0) {
            discSqrt = Math.sqrt(disc);
            t1 = (-b + discSqrt) / (2 * a);
            t2 = (-b - discSqrt) / (2 * a);
            if (t1 >= 0 && t1 <= 1) {
              extrema.push(t1);
            }
            if (t2 >= 0 && t2 <= 1) {
              extrema.push(t2);
            }
          }
        }
        return extrema;
      }

      function base3(t, p1, p2, p3, p4) {
        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4;
        var t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;
        return t * t2 - 3 * p1 + 3 * p2;
      }

      function cubiclLen(x1, y1, x2, y2, x3, y3, x4, y4, z) {
        if (Util.isNil(z)) {
          z = 1;
        }
        z = z > 1 ? 1 : z < 0 ? 0 : z;
        var z2 = z / 2;
        var n = 12;
        var Tvalues = [-0.1252, 0.1252, -0.3678, 0.3678, -0.5873, 0.5873, -0.7699, 0.7699, -0.9041, 0.9041, -0.9816, 0.9816];
        var Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472];
        var sum = 0;
        for (var i = 0; i < n; i++) {
          var ct = z2 * Tvalues[i] + z2;
          var xbase = base3(ct, x1, x2, x3, x4);
          var ybase = base3(ct, y1, y2, y3, y4);
          var comb = xbase * xbase + ybase * ybase;
          sum += Cvalues[i] * Math.sqrt(comb);
        }
        return z2 * sum;
      }

      module.exports = {
        at: cubicAt,
        derivativeAt: cubicDerivativeAt,
        projectPoint: function projectPoint(x1, y1, x2, y2, x3, y3, x4, y4, x, y) {
          var rst = {};
          cubicProjectPoint(x1, y1, x2, y2, x3, y3, x4, y4, x, y, rst);
          return rst;
        },

        pointDistance: cubicProjectPoint,
        extrema: cubicExtrema,
        len: cubiclLen
      };

      /***/
    },
    /* 31 */
    /***/function (module, exports, __webpack_require__) {

      var PRECISION = 0.00001; // 常量，据的精度，小于这个精度认为是0
      var RADIAN = Math.PI / 180;
      var DEGREE = 180 / Math.PI;

      module.exports = {
        isFunction: __webpack_require__(20),
        isObject: __webpack_require__(8),
        isBoolean: __webpack_require__(117),
        isNil: __webpack_require__(118),
        isString: __webpack_require__(56),
        isArray: __webpack_require__(6),
        isNumber: __webpack_require__(119),
        isEmpty: __webpack_require__(120), // isBlank
        uniqueId: __webpack_require__(134),
        clone: __webpack_require__(137),
        assign: __webpack_require__(180), // simpleMix
        merge: __webpack_require__(188), // mix
        upperFirst: __webpack_require__(195), // ucfirst
        remove: __webpack_require__(201),
        each: __webpack_require__(209),
        isEqual: __webpack_require__(214),
        toArray: __webpack_require__(224),
        extend: function extend(subclass, superclass, overrides, staticOverrides) {
          // 如果只提供父类构造函数，则自动生成子类构造函数
          if (!this.isFunction(superclass)) {
            overrides = superclass;
            superclass = subclass;
            subclass = function subclass() {};
          }

          var create = Object.create ? function (proto, c) {
            return Object.create(proto, {
              constructor: {
                value: c
              }
            });
          } : function (proto, c) {
            function F() {}

            F.prototype = proto;
            var o = new F();
            o.constructor = c;
            return o;
          };

          var superObj = create(superclass.prototype, subclass); // new superclass(),//实例化父类作为子类的prototype
          subclass.prototype = this.merge(superObj, subclass.prototype); // 指定子类的prototype
          subclass.superclass = create(superclass.prototype, superclass);
          this.merge(superObj, overrides);
          this.merge(subclass, staticOverrides);
          return subclass;
        },
        augment: function augment(c) {
          var args = this.toArray(arguments);
          for (var i = 1; i < args.length; i++) {
            var obj = args[i];
            if (this.isFunction(obj)) {
              obj = obj.prototype;
            }
            this.merge(c.prototype, obj);
          }
        },

        /**
         * 判断两个数是否相等
         * @param {Number} a 数
         * @param {Number} b 数
         * @return {Boolean} 是否相等
         **/
        isNumberEqual: function isNumberEqual(a, b) {
          return Math.abs(a - b) < PRECISION;
        },

        /**
         * 获取角度对应的弧度
         * @param {Number} degree 角度
         * @return {Number} 弧度
         **/
        toRadian: function toRadian(degree) {
          return RADIAN * degree;
        },

        /**
         * 获取弧度对应的角度
         * @param {Number} radian 弧度
         * @return {Number} 角度
         **/
        toDegree: function toDegree(radian) {
          return DEGREE * radian;
        },

        /**
         * 广义取模运算
         * @param {Number} n 被取模的值
         * @param {Number} m 模
         * @return {Number} 返回n 被 m 取模的结果
         */
        mod: function mod(n, m) {
          return (n % m + m) % m;
        },

        /**
         * 把a夹在min，max中间, 低于min的返回min，高于max的返回max，否则返回自身
         * @param {Number} a 数
         * @param {Number} min 下限
         * @param {Number} max 上限
         * @return {Number} 返回结果值
         **/
        clamp: function clamp(a, min, max) {
          if (a < min) {
            return min;
          } else if (a > max) {
            return max;
          }

          return a;
        }
      };

      /***/
    },
    /* 32 */
    /***/function (module, exports, __webpack_require__) {

      var getNative = __webpack_require__(10),
          root = __webpack_require__(4);

      /* Built-in method references that are verified to be native. */
      var Map = getNative(root, 'Map');

      module.exports = Map;

      /***/
    },
    /* 33 */
    /***/function (module, exports, __webpack_require__) {

      var baseIsArguments = __webpack_require__(130),
          isObjectLike = __webpack_require__(5);

      /** Used for built-in method references. */
      var objectProto = Object.prototype;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /** Built-in value references. */
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;

      /**
       * Checks if `value` is likely an `arguments` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       *  else `false`.
       * @example
       *
       * _.isArguments(function() { return arguments; }());
       * // => true
       *
       * _.isArguments([1, 2, 3]);
       * // => false
       */
      var isArguments = baseIsArguments(function () {
        return arguments;
      }()) ? baseIsArguments : function (value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
      };

      module.exports = isArguments;

      /***/
    },
    /* 34 */
    /***/function (module, exports) {

      module.exports = function (module) {
        if (!module.webpackPolyfill) {
          module.deprecate = function () {};
          module.paths = [];
          // module.parent = undefined by default
          if (!module.children) module.children = [];
          Object.defineProperty(module, "loaded", {
            enumerable: true,
            get: function get() {
              return module.l;
            }
          });
          Object.defineProperty(module, "id", {
            enumerable: true,
            get: function get() {
              return module.i;
            }
          });
          module.webpackPolyfill = 1;
        }
        return module;
      };

      /***/
    },
    /* 35 */
    /***/function (module, exports) {

      /**
       * A specialized version of `_.map` for arrays without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */
      function arrayMap(array, iteratee) {
        var index = -1,
            length = array == null ? 0 : array.length,
            result = Array(length);

        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }

      module.exports = arrayMap;

      /***/
    },
    /* 36 */
    /***/function (module, exports, __webpack_require__) {

      var ListCache = __webpack_require__(23),
          stackClear = __webpack_require__(144),
          stackDelete = __webpack_require__(145),
          stackGet = __webpack_require__(146),
          stackHas = __webpack_require__(147),
          stackSet = __webpack_require__(148);

      /**
       * Creates a stack cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }

      // Add methods to `Stack`.
      Stack.prototype.clear = stackClear;
      Stack.prototype['delete'] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;

      module.exports = Stack;

      /***/
    },
    /* 37 */
    /***/function (module, exports, __webpack_require__) {

      var baseAssignValue = __webpack_require__(38),
          eq = __webpack_require__(18);

      /** Used for built-in method references. */
      var objectProto = Object.prototype;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /**
       * Assigns `value` to `key` of `object` if the existing value is not equivalent
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }

      module.exports = assignValue;

      /***/
    },
    /* 38 */
    /***/function (module, exports, __webpack_require__) {

      var defineProperty = __webpack_require__(65);

      /**
       * The base implementation of `assignValue` and `assignMergeValue` without
       * value checks.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function baseAssignValue(object, key, value) {
        if (key == '__proto__' && defineProperty) {
          defineProperty(object, key, {
            'configurable': true,
            'enumerable': true,
            'value': value,
            'writable': true
          });
        } else {
          object[key] = value;
        }
      }

      module.exports = baseAssignValue;

      /***/
    },
    /* 39 */
    /***/function (module, exports, __webpack_require__) {

      var arrayFilter = __webpack_require__(167),
          stubArray = __webpack_require__(69);

      /** Used for built-in method references. */
      var objectProto = Object.prototype;

      /** Built-in value references. */
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;

      /* Built-in method references for those with the same name as other `lodash` methods. */
      var nativeGetSymbols = Object.getOwnPropertySymbols;

      /**
       * Creates an array of the own enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */
      var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function (symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };

      module.exports = getSymbols;

      /***/
    },
    /* 40 */
    /***/function (module, exports, __webpack_require__) {

      var overArg = __webpack_require__(58);

      /** Built-in value references. */
      var getPrototype = overArg(Object.getPrototypeOf, Object);

      module.exports = getPrototype;

      /***/
    },
    /* 41 */
    /***/function (module, exports, __webpack_require__) {

      var Uint8Array = __webpack_require__(74);

      /**
       * Creates a clone of `arrayBuffer`.
       *
       * @private
       * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
       * @returns {ArrayBuffer} Returns the cloned array buffer.
       */
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
        return result;
      }

      module.exports = cloneArrayBuffer;

      /***/
    },
    /* 42 */
    /***/function (module, exports) {

      /**
       * Converts `map` to its key-value pairs.
       *
       * @private
       * @param {Object} map The map to convert.
       * @returns {Array} Returns the key-value pairs.
       */
      function mapToArray(map) {
        var index = -1,
            result = Array(map.size);

        map.forEach(function (value, key) {
          result[++index] = [key, value];
        });
        return result;
      }

      module.exports = mapToArray;

      /***/
    },
    /* 43 */
    /***/function (module, exports) {

      /**
       * Converts `set` to an array of its values.
       *
       * @private
       * @param {Object} set The set to convert.
       * @returns {Array} Returns the values.
       */
      function setToArray(set) {
        var index = -1,
            result = Array(set.size);

        set.forEach(function (value) {
          result[++index] = value;
        });
        return result;
      }

      module.exports = setToArray;

      /***/
    },
    /* 44 */
    /***/function (module, exports) {

      /**
       * This method returns the first argument it receives.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {*} value Any value.
       * @returns {*} Returns `value`.
       * @example
       *
       * var object = { 'a': 1 };
       *
       * console.log(_.identity(object) === object);
       * // => true
       */
      function identity(value) {
        return value;
      }

      module.exports = identity;

      /***/
    },
    /* 45 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "b", function () {
        return EPSILON;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "a", function () {
        return ARRAY_TYPE;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
        return RANDOM;
      });
      /* unused harmony export setMatrixArrayType */
      /* unused harmony export toRadian */
      /* unused harmony export equals */
      /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
      
      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:
      
      The above copyright notice and this permission notice shall be included in
      all copies or substantial portions of the Software.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
      THE SOFTWARE. */

      /**
       * Common utilities
       * @module glMatrix
       */

      // Configuration Constants
      var EPSILON = 0.000001;
      var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
      var RANDOM = Math.random;

      /**
       * Sets the type of array used when creating new vectors and matrices
       *
       * @param {Type} type Array type, such as Float32Array or Array
       */
      function setMatrixArrayType(type) {
        ARRAY_TYPE = type;
      }

      var degree = Math.PI / 180;

      /**
       * Convert Degree To Radian
       *
       * @param {Number} a Angle in Degrees
       */
      function toRadian(a) {
        return a * degree;
      }

      /**
       * Tests whether or not the arguments have approximately the same value, within an absolute
       * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
       * than or equal to 1.0, and a relative tolerance is used for larger values)
       *
       * @param {Number} a The first number to test.
       * @param {Number} b The second number to test.
       * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
       */
      function equals(a, b) {
        return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
      }

      /***/
    },
    /* 46 */
    /***/function (module, exports, __webpack_require__) {

      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      };

      var Util = __webpack_require__(31);
      var SPACES = '\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029';
      var PATH_COMMAND = new RegExp('([a-z])[' + SPACES + ',]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[' + SPACES + ']*,?[' + SPACES + ']*)+)', 'ig');
      var PATH_VALUES = new RegExp('(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[' + SPACES + ']*,?[' + SPACES + ']*', 'ig');

      // Parses given path string into an array of arrays of path segments
      var parsePathString = function parsePathString(pathString) {
        if (!pathString) {
          return null;
        }

        if ((typeof pathString === 'undefined' ? 'undefined' : _typeof(pathString)) === _typeof([])) {
          return pathString;
        }
        var paramCounts = {
          a: 7,
          c: 6,
          o: 2,
          h: 1,
          l: 2,
          m: 2,
          r: 4,
          q: 4,
          s: 4,
          t: 2,
          v: 1,
          u: 3,
          z: 0
        };
        var data = [];

        String(pathString).replace(PATH_COMMAND, function (a, b, c) {
          var params = [];
          var name = b.toLowerCase();
          c.replace(PATH_VALUES, function (a, b) {
            b && params.push(+b);
          });
          if (name === 'm' && params.length > 2) {
            data.push([b].concat(params.splice(0, 2)));
            name = 'l';
            b = b === 'm' ? 'l' : 'L';
          }
          if (name === 'o' && params.length === 1) {
            data.push([b, params[0]]);
          }
          if (name === 'r') {
            data.push([b].concat(params));
          } else {
            while (params.length >= paramCounts[name]) {
              data.push([b].concat(params.splice(0, paramCounts[name])));
              if (!paramCounts[name]) {
                break;
              }
            }
          }
        });

        return data;
      };

      // http://schepers.cc/getting-to-the-point
      var catmullRom2bezier = function catmullRom2bezier(crp, z) {
        var d = [];
        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {
          var p = [{
            x: +crp[i - 2],
            y: +crp[i - 1]
          }, {
            x: +crp[i],
            y: +crp[i + 1]
          }, {
            x: +crp[i + 2],
            y: +crp[i + 3]
          }, {
            x: +crp[i + 4],
            y: +crp[i + 5]
          }];
          if (z) {
            if (!i) {
              p[0] = {
                x: +crp[iLen - 2],
                y: +crp[iLen - 1]
              };
            } else if (iLen - 4 === i) {
              p[3] = {
                x: +crp[0],
                y: +crp[1]
              };
            } else if (iLen - 2 === i) {
              p[2] = {
                x: +crp[0],
                y: +crp[1]
              };
              p[3] = {
                x: +crp[2],
                y: +crp[3]
              };
            }
          } else {
            if (iLen - 4 === i) {
              p[3] = p[2];
            } else if (!i) {
              p[0] = {
                x: +crp[i],
                y: +crp[i + 1]
              };
            }
          }
          d.push(['C', (-p[0].x + 6 * p[1].x + p[2].x) / 6, (-p[0].y + 6 * p[1].y + p[2].y) / 6, (p[1].x + 6 * p[2].x - p[3].x) / 6, (p[1].y + 6 * p[2].y - p[3].y) / 6, p[2].x, p[2].y]);
        }

        return d;
      };

      var ellipsePath = function ellipsePath(x, y, rx, ry, a) {
        var res = [];
        if (a === null && ry === null) {
          ry = rx;
        }
        x = +x;
        y = +y;
        rx = +rx;
        ry = +ry;
        if (a !== null) {
          var rad = Math.PI / 180;
          var x1 = x + rx * Math.cos(-ry * rad);
          var x2 = x + rx * Math.cos(-a * rad);
          var y1 = y + rx * Math.sin(-ry * rad);
          var y2 = y + rx * Math.sin(-a * rad);
          res = [['M', x1, y1], ['A', rx, rx, 0, +(a - ry > 180), 0, x2, y2]];
        } else {
          res = [['M', x, y], ['m', 0, -ry], ['a', rx, ry, 0, 1, 1, 0, 2 * ry], ['a', rx, ry, 0, 1, 1, 0, -2 * ry], ['z']];
        }
        return res;
      };

      var pathToAbsolute = function pathToAbsolute(pathArray) {
        pathArray = parsePathString(pathArray);

        if (!pathArray || !pathArray.length) {
          return [['M', 0, 0]];
        }
        var res = [];
        var x = 0;
        var y = 0;
        var mx = 0;
        var my = 0;
        var start = 0;
        var pa0 = void 0;
        var dots = void 0;
        if (pathArray[0][0] === 'M') {
          x = +pathArray[0][1];
          y = +pathArray[0][2];
          mx = x;
          my = y;
          start++;
          res[0] = ['M', x, y];
        }
        var crz = pathArray.length === 3 && pathArray[0][0] === 'M' && pathArray[1][0].toUpperCase() === 'R' && pathArray[2][0].toUpperCase() === 'Z';
        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {
          res.push(r = []);
          pa = pathArray[i];
          pa0 = pa[0];
          if (pa0 !== pa0.toUpperCase()) {
            r[0] = pa0.toUpperCase();
            switch (r[0]) {
              case 'A':
                r[1] = pa[1];
                r[2] = pa[2];
                r[3] = pa[3];
                r[4] = pa[4];
                r[5] = pa[5];
                r[6] = +pa[6] + x;
                r[7] = +pa[7] + y;
                break;
              case 'V':
                r[1] = +pa[1] + y;
                break;
              case 'H':
                r[1] = +pa[1] + x;
                break;
              case 'R':
                dots = [x, y].concat(pa.slice(1));
                for (var j = 2, jj = dots.length; j < jj; j++) {
                  dots[j] = +dots[j] + x;
                  dots[++j] = +dots[j] + y;
                }
                res.pop();
                res = res.concat(catmullRom2bezier(dots, crz));
                break;
              case 'O':
                res.pop();
                dots = ellipsePath(x, y, pa[1], pa[2]);
                dots.push(dots[0]);
                res = res.concat(dots);
                break;
              case 'U':
                res.pop();
                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));
                r = ['U'].concat(res[res.length - 1].slice(-2));
                break;
              case 'M':
                mx = +pa[1] + x;
                my = +pa[2] + y;
                break; // for lint
              default:
                for (var _j = 1, _jj = pa.length; _j < _jj; _j++) {
                  r[_j] = +pa[_j] + (_j % 2 ? x : y);
                }
            }
          } else if (pa0 === 'R') {
            dots = [x, y].concat(pa.slice(1));
            res.pop();
            res = res.concat(catmullRom2bezier(dots, crz));
            r = ['R'].concat(pa.slice(-2));
          } else if (pa0 === 'O') {
            res.pop();
            dots = ellipsePath(x, y, pa[1], pa[2]);
            dots.push(dots[0]);
            res = res.concat(dots);
          } else if (pa0 === 'U') {
            res.pop();
            res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));
            r = ['U'].concat(res[res.length - 1].slice(-2));
          } else {
            for (var k = 0, kk = pa.length; k < kk; k++) {
              r[k] = pa[k];
            }
          }
          pa0 = pa0.toUpperCase();
          if (pa0 !== 'O') {
            switch (r[0]) {
              case 'Z':
                x = +mx;
                y = +my;
                break;
              case 'H':
                x = r[1];
                break;
              case 'V':
                y = r[1];
                break;
              case 'M':
                mx = r[r.length - 2];
                my = r[r.length - 1];
                break; // for lint
              default:
                x = r[r.length - 2];
                y = r[r.length - 1];
            }
          }
        }

        return res;
      };

      var l2c = function l2c(x1, y1, x2, y2) {
        return [x1, y1, x2, y2, x2, y2];
      };

      var q2c = function q2c(x1, y1, ax, ay, x2, y2) {
        var _13 = 1 / 3;
        var _23 = 2 / 3;
        return [_13 * x1 + _23 * ax, _13 * y1 + _23 * ay, _13 * x2 + _23 * ax, _13 * y2 + _23 * ay, x2, y2];
      };

      var a2c = function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {
        // for more information of where this math came from visit:
        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
        if (rx === ry) {
          rx += 1;
        }

        var _120 = Math.PI * 120 / 180;
        var rad = Math.PI / 180 * (+angle || 0);
        var res = [];
        var xy = void 0;
        var f1 = void 0;
        var f2 = void 0;
        var cx = void 0;
        var cy = void 0;
        var rotate = function rotate(x, y, rad) {
          var X = x * Math.cos(rad) - y * Math.sin(rad);
          var Y = x * Math.sin(rad) + y * Math.cos(rad);
          return {
            x: X,
            y: Y
          };
        };
        if (!recursive) {
          xy = rotate(x1, y1, -rad);
          x1 = xy.x;
          y1 = xy.y;
          xy = rotate(x2, y2, -rad);
          x2 = xy.x;
          y2 = xy.y;
          if (x1 === x2 && y1 === y2) {
            // 若弧的起始点和终点重叠则错开一点
            x2 += 1;
            y2 += 1;
          }
          // const cos = Math.cos(Math.PI / 180 * angle);
          // const sin = Math.sin(Math.PI / 180 * angle);
          var x = (x1 - x2) / 2;
          var y = (y1 - y2) / 2;
          var h = x * x / (rx * rx) + y * y / (ry * ry);
          if (h > 1) {
            h = Math.sqrt(h);
            rx = h * rx;
            ry = h * ry;
          }
          var rx2 = rx * rx;
          var ry2 = ry * ry;
          var k = (large_arc_flag === sweep_flag ? -1 : 1) * Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)));
          cx = k * rx * y / ry + (x1 + x2) / 2;
          cy = k * -ry * x / rx + (y1 + y2) / 2;
          f1 = Math.asin(((y1 - cy) / ry).toFixed(9));
          f2 = Math.asin(((y2 - cy) / ry).toFixed(9));

          f1 = x1 < cx ? Math.PI - f1 : f1;
          f2 = x2 < cx ? Math.PI - f2 : f2;
          f1 < 0 && (f1 = Math.PI * 2 + f1);
          f2 < 0 && (f2 = Math.PI * 2 + f2);
          if (sweep_flag && f1 > f2) {
            f1 = f1 - Math.PI * 2;
          }
          if (!sweep_flag && f2 > f1) {
            f2 = f2 - Math.PI * 2;
          }
        } else {
          f1 = recursive[0];
          f2 = recursive[1];
          cx = recursive[2];
          cy = recursive[3];
        }
        var df = f2 - f1;
        if (Math.abs(df) > _120) {
          var f2old = f2;
          var x2old = x2;
          var y2old = y2;
          f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
          x2 = cx + rx * Math.cos(f2);
          y2 = cy + ry * Math.sin(f2);
          res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);
        }
        df = f2 - f1;
        var c1 = Math.cos(f1);
        var s1 = Math.sin(f1);
        var c2 = Math.cos(f2);
        var s2 = Math.sin(f2);
        var t = Math.tan(df / 4);
        var hx = 4 / 3 * rx * t;
        var hy = 4 / 3 * ry * t;
        var m1 = [x1, y1];
        var m2 = [x1 + hx * s1, y1 - hy * c1];
        var m3 = [x2 + hx * s2, y2 - hy * c2];
        var m4 = [x2, y2];
        m2[0] = 2 * m1[0] - m2[0];
        m2[1] = 2 * m1[1] - m2[1];
        if (recursive) {
          return [m2, m3, m4].concat(res);
        }
        res = [m2, m3, m4].concat(res).join().split(',');
        var newres = [];
        for (var i = 0, ii = res.length; i < ii; i++) {
          newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;
        }
        return newres;
      };

      var pathTocurve = function pathTocurve(path, path2) {
        var pcoms1 = []; // path commands of original path p
        var pcoms2 = []; // path commands of original path p2
        var p = pathToAbsolute(path);
        var p2 = path2 && pathToAbsolute(path2);
        var attrs = {
          x: 0,
          y: 0,
          bx: 0,
          by: 0,
          X: 0,
          Y: 0,
          qx: null,
          qy: null
        };
        var attrs2 = {
          x: 0,
          y: 0,
          bx: 0,
          by: 0,
          X: 0,
          Y: 0,
          qx: null,
          qy: null
        };
        var processPath = function processPath(path, d, pcom) {
          var nx = void 0;
          var ny = void 0;
          if (!path) {
            return ['C', d.x, d.y, d.x, d.y, d.x, d.y];
          }!(path[0] in {
            T: 1,
            Q: 1
          }) && (d.qx = d.qy = null);
          switch (path[0]) {
            case 'M':
              d.X = path[1];
              d.Y = path[2];
              break;
            case 'A':
              path = ['C'].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));
              break;
            case 'S':
              if (pcom === 'C' || pcom === 'S') {
                // In "S" case we have to take into account, if the previous command is C/S.
                nx = d.x * 2 - d.bx; // And reflect the previous
                ny = d.y * 2 - d.by; // command's control point relative to the current point.
              } else {
                // or some else or nothing
                nx = d.x;
                ny = d.y;
              }
              path = ['C', nx, ny].concat(path.slice(1));
              break;
            case 'T':
              if (pcom === 'Q' || pcom === 'T') {
                // In "T" case we have to take into account, if the previous command is Q/T.
                d.qx = d.x * 2 - d.qx; // And make a reflection similar
                d.qy = d.y * 2 - d.qy; // to case "S".
              } else {
                // or something else or nothing
                d.qx = d.x;
                d.qy = d.y;
              }
              path = ['C'].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));
              break;
            case 'Q':
              d.qx = path[1];
              d.qy = path[2];
              path = ['C'].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));
              break;
            case 'L':
              path = ['C'].concat(l2c(d.x, d.y, path[1], path[2]));
              break;
            case 'H':
              path = ['C'].concat(l2c(d.x, d.y, path[1], d.y));
              break;
            case 'V':
              path = ['C'].concat(l2c(d.x, d.y, d.x, path[1]));
              break;
            case 'Z':
              path = ['C'].concat(l2c(d.x, d.y, d.X, d.Y));
              break;
            default:
              path = []; // for lint
          }
          return path;
        };
        var fixArc = function fixArc(pp, i) {
          if (pp[i].length > 7) {
            pp[i].shift();
            var pi = pp[i];
            while (pi.length) {
              pcoms1[i] = 'A'; // if created multiple C:s, their original seg is saved
              p2 && (pcoms2[i] = 'A'); // the same as above
              pp.splice(i++, 0, ['C'].concat(pi.splice(0, 6)));
            }
            pp.splice(i, 1);
            // ii = Math.max(p.length, p2 && p2.length || 0);
          }
        };
        var fixM = function fixM(path1, path2, a1, a2, i) {
          if (path1 && path2 && path1[i][0] === 'M' && path2[i][0] !== 'M') {
            path2.splice(i, 0, ['M', a2.x, a2.y]);
            a1.bx = 0;
            a1.by = 0;
            a1.x = path1[i][1];
            a1.y = path1[i][2];
            // ii = Math.max(p.length, p2 && p2.length || 0);
          }
        };
        var pfirst = ''; // temporary holder for original path command
        var pcom = ''; // holder for previous path command of original path
        for (var i = 0, ii = Math.max(p.length, p2 && p2.length || 0); i < ii; i++) {
          p[i] && (pfirst = p[i][0]); // save current path command

          if (pfirst !== 'C') {
            // C is not saved yet, because it may be result of conversion
            pcoms1[i] = pfirst; // Save current path command
            i && (pcom = pcoms1[i - 1]); // Get previous path command pcom
          }
          p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath

          if (pcoms1[i] !== 'A' && pfirst === 'C') pcoms1[i] = 'C'; // A is the only command
          // which may produce multiple C:s
          // so we have to make sure that C is also C in original path

          fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1

          if (p2) {
            // the same procedures is done to p2
            p2[i] && (pfirst = p2[i][0]);
            if (pfirst !== 'C') {
              pcoms2[i] = pfirst;
              i && (pcom = pcoms2[i - 1]);
            }
            p2[i] = processPath(p2[i], attrs2, pcom);

            if (pcoms2[i] !== 'A' && pfirst === 'C') {
              pcoms2[i] = 'C';
            }

            fixArc(p2, i);
          }
          fixM(p, p2, attrs, attrs2, i);
          fixM(p2, p, attrs2, attrs, i);
          var seg = p[i];
          var seg2 = p2 && p2[i];
          var seglen = seg.length;
          var seg2len = p2 && seg2.length;
          attrs.x = seg[seglen - 2];
          attrs.y = seg[seglen - 1];
          attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;
          attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;
          attrs2.bx = p2 && (parseFloat(seg2[seg2len - 4]) || attrs2.x);
          attrs2.by = p2 && (parseFloat(seg2[seg2len - 3]) || attrs2.y);
          attrs2.x = p2 && seg2[seg2len - 2];
          attrs2.y = p2 && seg2[seg2len - 1];
        }

        return p2 ? [p, p2] : p;
      };

      var p2s = /,?([a-z]),?/gi;
      var parsePathArray = function parsePathArray(path) {
        return path.join(',').replace(p2s, '$1');
      };

      var base3 = function base3(t, p1, p2, p3, p4) {
        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4;
        var t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;
        return t * t2 - 3 * p1 + 3 * p2;
      };

      var bezlen = function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {
        if (z === null) {
          z = 1;
        }
        z = z > 1 ? 1 : z < 0 ? 0 : z;
        var z2 = z / 2;
        var n = 12;
        var Tvalues = [-0.1252, 0.1252, -0.3678, 0.3678, -0.5873, 0.5873, -0.7699, 0.7699, -0.9041, 0.9041, -0.9816, 0.9816];
        var Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472];
        var sum = 0;
        for (var i = 0; i < n; i++) {
          var ct = z2 * Tvalues[i] + z2;
          var xbase = base3(ct, x1, x2, x3, x4);
          var ybase = base3(ct, y1, y2, y3, y4);
          var comb = xbase * xbase + ybase * ybase;
          sum += Cvalues[i] * Math.sqrt(comb);
        }
        return z2 * sum;
      };

      var curveDim = function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {
        var tvalues = [];
        var bounds = [[], []];
        var a = void 0;
        var b = void 0;
        var c = void 0;
        var t = void 0;

        for (var i = 0; i < 2; ++i) {
          if (i === 0) {
            b = 6 * x0 - 12 * x1 + 6 * x2;
            a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
            c = 3 * x1 - 3 * x0;
          } else {
            b = 6 * y0 - 12 * y1 + 6 * y2;
            a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
            c = 3 * y1 - 3 * y0;
          }
          if (Math.abs(a) < 1e-12) {
            if (Math.abs(b) < 1e-12) {
              continue;
            }
            t = -c / b;
            if (t > 0 && t < 1) {
              tvalues.push(t);
            }
            continue;
          }
          var b2ac = b * b - 4 * c * a;
          var sqrtb2ac = Math.sqrt(b2ac);
          if (b2ac < 0) {
            continue;
          }
          var t1 = (-b + sqrtb2ac) / (2 * a);
          if (t1 > 0 && t1 < 1) {
            tvalues.push(t1);
          }
          var t2 = (-b - sqrtb2ac) / (2 * a);
          if (t2 > 0 && t2 < 1) {
            tvalues.push(t2);
          }
        }

        var j = tvalues.length;
        var jlen = j;
        var mt = void 0;
        while (j--) {
          t = tvalues[j];
          mt = 1 - t;
          bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;
          bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;
        }

        bounds[0][jlen] = x0;
        bounds[1][jlen] = y0;
        bounds[0][jlen + 1] = x3;
        bounds[1][jlen + 1] = y3;
        bounds[0].length = bounds[1].length = jlen + 2;

        return {
          min: {
            x: Math.min.apply(0, bounds[0]),
            y: Math.min.apply(0, bounds[1])
          },
          max: {
            x: Math.max.apply(0, bounds[0]),
            y: Math.max.apply(0, bounds[1])
          }
        };
      };

      var intersect = function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {
        if (Math.max(x1, x2) < Math.min(x3, x4) || Math.min(x1, x2) > Math.max(x3, x4) || Math.max(y1, y2) < Math.min(y3, y4) || Math.min(y1, y2) > Math.max(y3, y4)) {
          return;
        }
        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4);
        var ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4);
        var denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);

        if (!denominator) {
          return;
        }
        var px = nx / denominator;
        var py = ny / denominator;
        var px2 = +px.toFixed(2);
        var py2 = +py.toFixed(2);
        if (px2 < +Math.min(x1, x2).toFixed(2) || px2 > +Math.max(x1, x2).toFixed(2) || px2 < +Math.min(x3, x4).toFixed(2) || px2 > +Math.max(x3, x4).toFixed(2) || py2 < +Math.min(y1, y2).toFixed(2) || py2 > +Math.max(y1, y2).toFixed(2) || py2 < +Math.min(y3, y4).toFixed(2) || py2 > +Math.max(y3, y4).toFixed(2)) {
          return;
        }
        return {
          x: px,
          y: py
        };
      };

      var isPointInsideBBox = function isPointInsideBBox(bbox, x, y) {
        return x >= bbox.x && x <= bbox.x + bbox.width && y >= bbox.y && y <= bbox.y + bbox.height;
      };

      var rectPath = function rectPath(x, y, w, h, r) {
        if (r) {
          return [['M', +x + +r, y], ['l', w - r * 2, 0], ['a', r, r, 0, 0, 1, r, r], ['l', 0, h - r * 2], ['a', r, r, 0, 0, 1, -r, r], ['l', r * 2 - w, 0], ['a', r, r, 0, 0, 1, -r, -r], ['l', 0, r * 2 - h], ['a', r, r, 0, 0, 1, r, -r], ['z']];
        }
        var res = [['M', x, y], ['l', w, 0], ['l', 0, h], ['l', -w, 0], ['z']];
        res.parsePathArray = parsePathArray;
        return res;
      };

      var box = function box(x, y, width, height) {
        if (x === null) {
          x = y = width = height = 0;
        }
        if (y === null) {
          y = x.y;
          width = x.width;
          height = x.height;
          x = x.x;
        }
        return {
          x: x,
          y: y,
          width: width,
          w: width,
          height: height,
          h: height,
          x2: x + width,
          y2: y + height,
          cx: x + width / 2,
          cy: y + height / 2,
          r1: Math.min(width, height) / 2,
          r2: Math.max(width, height) / 2,
          r0: Math.sqrt(width * width + height * height) / 2,
          path: rectPath(x, y, width, height),
          vb: [x, y, width, height].join(' ')
        };
      };

      var isBBoxIntersect = function isBBoxIntersect(bbox1, bbox2) {
        bbox1 = box(bbox1);
        bbox2 = box(bbox2);
        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2) || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x) && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);
      };

      var bezierBBox = function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {
        if (!Util.isArray(p1x)) {
          p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];
        }
        var bbox = curveDim.apply(null, p1x);
        return box(bbox.min.x, bbox.min.y, bbox.max.x - bbox.min.x, bbox.max.y - bbox.min.y);
      };

      var findDotsAtSegment = function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {
        var t1 = 1 - t;
        var t13 = Math.pow(t1, 3);
        var t12 = Math.pow(t1, 2);
        var t2 = t * t;
        var t3 = t2 * t;
        var x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x;
        var y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;
        var mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x);
        var my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y);
        var nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x);
        var ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y);
        var ax = t1 * p1x + t * c1x;
        var ay = t1 * p1y + t * c1y;
        var cx = t1 * c2x + t * p2x;
        var cy = t1 * c2y + t * p2y;
        var alpha = 90 - Math.atan2(mx - nx, my - ny) * 180 / Math.PI;
        // (mx > nx || my < ny) && (alpha += 180);
        return {
          x: x,
          y: y,
          m: {
            x: mx,
            y: my
          },
          n: {
            x: nx,
            y: ny
          },
          start: {
            x: ax,
            y: ay
          },
          end: {
            x: cx,
            y: cy
          },
          alpha: alpha
        };
      };

      var interHelper = function interHelper(bez1, bez2, justCount) {
        var bbox1 = bezierBBox(bez1);
        var bbox2 = bezierBBox(bez2);
        if (!isBBoxIntersect(bbox1, bbox2)) {
          return justCount ? 0 : [];
        }
        var l1 = bezlen.apply(0, bez1);
        var l2 = bezlen.apply(0, bez2);
        var n1 = ~~(l1 / 8);
        var n2 = ~~(l2 / 8);
        var dots1 = [];
        var dots2 = [];
        var xy = {};
        var res = justCount ? 0 : [];
        for (var i = 0; i < n1 + 1; i++) {
          var d = findDotsAtSegment.apply(0, bez1.concat(i / n1));
          dots1.push({
            x: d.x,
            y: d.y,
            t: i / n1
          });
        }
        for (var _i = 0; _i < n2 + 1; _i++) {
          var _d = findDotsAtSegment.apply(0, bez2.concat(_i / n2));
          dots2.push({
            x: _d.x,
            y: _d.y,
            t: _i / n2
          });
        }
        for (var _i2 = 0; _i2 < n1; _i2++) {
          for (var j = 0; j < n2; j++) {
            var di = dots1[_i2];
            var di1 = dots1[_i2 + 1];
            var dj = dots2[j];
            var dj1 = dots2[j + 1];
            var ci = Math.abs(di1.x - di.x) < 0.001 ? 'y' : 'x';
            var cj = Math.abs(dj1.x - dj.x) < 0.001 ? 'y' : 'x';
            var is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);
            if (is) {
              if (xy[is.x.toFixed(4)] === is.y.toFixed(4)) {
                continue;
              }
              xy[is.x.toFixed(4)] = is.y.toFixed(4);
              var t1 = di.t + Math.abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t);
              var t2 = dj.t + Math.abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);
              if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {
                if (justCount) {
                  res++;
                } else {
                  res.push({
                    x: is.x,
                    y: is.y,
                    t1: t1,
                    t2: t2
                  });
                }
              }
            }
          }
        }
        return res;
      };

      var interPathHelper = function interPathHelper(path1, path2, justCount) {
        path1 = pathTocurve(path1);
        path2 = pathTocurve(path2);
        var x1 = void 0;
        var y1 = void 0;
        var x2 = void 0;
        var y2 = void 0;
        var x1m = void 0;
        var y1m = void 0;
        var x2m = void 0;
        var y2m = void 0;
        var bez1 = void 0;
        var bez2 = void 0;
        var res = justCount ? 0 : [];
        for (var i = 0, ii = path1.length; i < ii; i++) {
          var pi = path1[i];
          if (pi[0] === 'M') {
            x1 = x1m = pi[1];
            y1 = y1m = pi[2];
          } else {
            if (pi[0] === 'C') {
              bez1 = [x1, y1].concat(pi.slice(1));
              x1 = bez1[6];
              y1 = bez1[7];
            } else {
              bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];
              x1 = x1m;
              y1 = y1m;
            }
            for (var j = 0, jj = path2.length; j < jj; j++) {
              var pj = path2[j];
              if (pj[0] === 'M') {
                x2 = x2m = pj[1];
                y2 = y2m = pj[2];
              } else {
                if (pj[0] === 'C') {
                  bez2 = [x2, y2].concat(pj.slice(1));
                  x2 = bez2[6];
                  y2 = bez2[7];
                } else {
                  bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];
                  x2 = x2m;
                  y2 = y2m;
                }
                var intr = interHelper(bez1, bez2, justCount);
                if (justCount) {
                  res += intr;
                } else {
                  for (var k = 0, kk = intr.length; k < kk; k++) {
                    intr[k].segment1 = i;
                    intr[k].segment2 = j;
                    intr[k].bez1 = bez1;
                    intr[k].bez2 = bez2;
                  }
                  res = res.concat(intr);
                }
              }
            }
          }
        }
        return res;
      };

      var pathIntersection = function pathIntersection(path1, path2) {
        return interPathHelper(path1, path2);
      };

      module.exports = {
        parsePathString: parsePathString,
        parsePathArray: parsePathArray,
        pathTocurve: pathTocurve,
        pathToAbsolute: pathToAbsolute,
        catmullRomToBezier: catmullRom2bezier,
        rectPath: rectPath,
        intersection: pathIntersection
      };

      /***/
    },
    /* 47 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["b"] = now;
      /* harmony export (immutable) */__webpack_exports__["a"] = Timer;
      /* harmony export (immutable) */__webpack_exports__["c"] = timer;
      /* harmony export (immutable) */__webpack_exports__["d"] = timerFlush;
      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      };

      var frame = 0,

      // is an animation frame pending?
      timeout = 0,

      // is a timeout pending?
      interval = 0,

      // are any timers active?
      pokeDelay = 1000,

      // how frequently we check for clock skew
      taskHead,
          taskTail,
          clockLast = 0,
          clockNow = 0,
          clockSkew = 0,
          clock = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === "object" && performance.now ? performance : Date,
          setFrame = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
        setTimeout(f, 17);
      };

      function now() {
        return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
      }

      function clearNow() {
        clockNow = 0;
      }

      function Timer() {
        this._call = this._time = this._next = null;
      }

      Timer.prototype = timer.prototype = {
        constructor: Timer,
        restart: function restart(callback, delay, time) {
          if (typeof callback !== "function") throw new TypeError("callback is not a function");
          time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
          if (!this._next && taskTail !== this) {
            if (taskTail) taskTail._next = this;else taskHead = this;
            taskTail = this;
          }
          this._call = callback;
          this._time = time;
          sleep();
        },
        stop: function stop() {
          if (this._call) {
            this._call = null;
            this._time = Infinity;
            sleep();
          }
        }
      };

      function timer(callback, delay, time) {
        var t = new Timer();
        t.restart(callback, delay, time);
        return t;
      }

      function timerFlush() {
        now(); // Get the current time, if not already set.
        ++frame; // Pretend we’ve set an alarm, if we haven’t already.
        var t = taskHead,
            e;
        while (t) {
          if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
          t = t._next;
        }
        --frame;
      }

      function wake() {
        clockNow = (clockLast = clock.now()) + clockSkew;
        frame = timeout = 0;
        try {
          timerFlush();
        } finally {
          frame = 0;
          nap();
          clockNow = 0;
        }
      }

      function poke() {
        var now = clock.now(),
            delay = now - clockLast;
        if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
      }

      function nap() {
        var t0,
            t1 = taskHead,
            t2,
            time = Infinity;
        while (t1) {
          if (t1._call) {
            if (time > t1._time) time = t1._time;
            t0 = t1, t1 = t1._next;
          } else {
            t2 = t1._next, t1._next = null;
            t1 = t0 ? t0._next = t2 : taskHead = t2;
          }
        }
        taskTail = t0;
        sleep(time);
      }

      function sleep(time) {
        if (frame) return; // Soonest alarm already set, or will be.
        if (timeout) timeout = clearTimeout(timeout);
        var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
        if (delay > 24) {
          if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
          if (interval) interval = clearInterval(interval);
        } else {
          if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
          frame = 1, setFrame(wake);
        }
      }

      /***/
    },
    /* 48 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(14);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__rgb__ = __webpack_require__(90);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__array__ = __webpack_require__(93);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__date__ = __webpack_require__(94);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__number__ = __webpack_require__(29);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__object__ = __webpack_require__(95);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__string__ = __webpack_require__(96);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_7__constant__ = __webpack_require__(92);
      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      };

      /* harmony default export */__webpack_exports__["a"] = function (a, b) {
        var t = typeof b === "undefined" ? "undefined" : _typeof(b),
            c;
        return b == null || t === "boolean" ? Object(__WEBPACK_IMPORTED_MODULE_7__constant__["a" /* default */])(b) : (t === "number" ? __WEBPACK_IMPORTED_MODULE_4__number__["a" /* default */] : t === "string" ? (c = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */])(b)) ? (b = c, __WEBPACK_IMPORTED_MODULE_1__rgb__["a" /* default */]) : __WEBPACK_IMPORTED_MODULE_6__string__["a" /* default */] : b instanceof __WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */] ? __WEBPACK_IMPORTED_MODULE_1__rgb__["a" /* default */] : b instanceof Date ? __WEBPACK_IMPORTED_MODULE_3__date__["a" /* default */] : Array.isArray(b) ? __WEBPACK_IMPORTED_MODULE_2__array__["a" /* default */] : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? __WEBPACK_IMPORTED_MODULE_5__object__["a" /* default */] : __WEBPACK_IMPORTED_MODULE_4__number__["a" /* default */])(a, b);
      };

      /***/
    },
    /* 49 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["a"] = Color;
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "d", function () {
        return _darker;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
        return _brighter;
      });
      /* harmony export (immutable) */__webpack_exports__["e"] = color;
      /* harmony export (immutable) */__webpack_exports__["h"] = rgbConvert;
      /* harmony export (immutable) */__webpack_exports__["g"] = rgb;
      /* harmony export (immutable) */__webpack_exports__["b"] = Rgb;
      /* unused harmony export hslConvert */
      /* harmony export (immutable) */__webpack_exports__["f"] = hsl;
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(50);

      function Color() {}

      var _darker = 0.7;

      var _brighter = 1 / _darker;

      var reI = "\\s*([+-]?\\d+)\\s*",
          reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
          reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
          reHex3 = /^#([0-9a-f]{3})$/,
          reHex6 = /^#([0-9a-f]{6})$/,
          reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
          reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
          reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
          reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
          reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
          reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

      var named = {
        aliceblue: 0xf0f8ff,
        antiquewhite: 0xfaebd7,
        aqua: 0x00ffff,
        aquamarine: 0x7fffd4,
        azure: 0xf0ffff,
        beige: 0xf5f5dc,
        bisque: 0xffe4c4,
        black: 0x000000,
        blanchedalmond: 0xffebcd,
        blue: 0x0000ff,
        blueviolet: 0x8a2be2,
        brown: 0xa52a2a,
        burlywood: 0xdeb887,
        cadetblue: 0x5f9ea0,
        chartreuse: 0x7fff00,
        chocolate: 0xd2691e,
        coral: 0xff7f50,
        cornflowerblue: 0x6495ed,
        cornsilk: 0xfff8dc,
        crimson: 0xdc143c,
        cyan: 0x00ffff,
        darkblue: 0x00008b,
        darkcyan: 0x008b8b,
        darkgoldenrod: 0xb8860b,
        darkgray: 0xa9a9a9,
        darkgreen: 0x006400,
        darkgrey: 0xa9a9a9,
        darkkhaki: 0xbdb76b,
        darkmagenta: 0x8b008b,
        darkolivegreen: 0x556b2f,
        darkorange: 0xff8c00,
        darkorchid: 0x9932cc,
        darkred: 0x8b0000,
        darksalmon: 0xe9967a,
        darkseagreen: 0x8fbc8f,
        darkslateblue: 0x483d8b,
        darkslategray: 0x2f4f4f,
        darkslategrey: 0x2f4f4f,
        darkturquoise: 0x00ced1,
        darkviolet: 0x9400d3,
        deeppink: 0xff1493,
        deepskyblue: 0x00bfff,
        dimgray: 0x696969,
        dimgrey: 0x696969,
        dodgerblue: 0x1e90ff,
        firebrick: 0xb22222,
        floralwhite: 0xfffaf0,
        forestgreen: 0x228b22,
        fuchsia: 0xff00ff,
        gainsboro: 0xdcdcdc,
        ghostwhite: 0xf8f8ff,
        gold: 0xffd700,
        goldenrod: 0xdaa520,
        gray: 0x808080,
        green: 0x008000,
        greenyellow: 0xadff2f,
        grey: 0x808080,
        honeydew: 0xf0fff0,
        hotpink: 0xff69b4,
        indianred: 0xcd5c5c,
        indigo: 0x4b0082,
        ivory: 0xfffff0,
        khaki: 0xf0e68c,
        lavender: 0xe6e6fa,
        lavenderblush: 0xfff0f5,
        lawngreen: 0x7cfc00,
        lemonchiffon: 0xfffacd,
        lightblue: 0xadd8e6,
        lightcoral: 0xf08080,
        lightcyan: 0xe0ffff,
        lightgoldenrodyellow: 0xfafad2,
        lightgray: 0xd3d3d3,
        lightgreen: 0x90ee90,
        lightgrey: 0xd3d3d3,
        lightpink: 0xffb6c1,
        lightsalmon: 0xffa07a,
        lightseagreen: 0x20b2aa,
        lightskyblue: 0x87cefa,
        lightslategray: 0x778899,
        lightslategrey: 0x778899,
        lightsteelblue: 0xb0c4de,
        lightyellow: 0xffffe0,
        lime: 0x00ff00,
        limegreen: 0x32cd32,
        linen: 0xfaf0e6,
        magenta: 0xff00ff,
        maroon: 0x800000,
        mediumaquamarine: 0x66cdaa,
        mediumblue: 0x0000cd,
        mediumorchid: 0xba55d3,
        mediumpurple: 0x9370db,
        mediumseagreen: 0x3cb371,
        mediumslateblue: 0x7b68ee,
        mediumspringgreen: 0x00fa9a,
        mediumturquoise: 0x48d1cc,
        mediumvioletred: 0xc71585,
        midnightblue: 0x191970,
        mintcream: 0xf5fffa,
        mistyrose: 0xffe4e1,
        moccasin: 0xffe4b5,
        navajowhite: 0xffdead,
        navy: 0x000080,
        oldlace: 0xfdf5e6,
        olive: 0x808000,
        olivedrab: 0x6b8e23,
        orange: 0xffa500,
        orangered: 0xff4500,
        orchid: 0xda70d6,
        palegoldenrod: 0xeee8aa,
        palegreen: 0x98fb98,
        paleturquoise: 0xafeeee,
        palevioletred: 0xdb7093,
        papayawhip: 0xffefd5,
        peachpuff: 0xffdab9,
        peru: 0xcd853f,
        pink: 0xffc0cb,
        plum: 0xdda0dd,
        powderblue: 0xb0e0e6,
        purple: 0x800080,
        rebeccapurple: 0x663399,
        red: 0xff0000,
        rosybrown: 0xbc8f8f,
        royalblue: 0x4169e1,
        saddlebrown: 0x8b4513,
        salmon: 0xfa8072,
        sandybrown: 0xf4a460,
        seagreen: 0x2e8b57,
        seashell: 0xfff5ee,
        sienna: 0xa0522d,
        silver: 0xc0c0c0,
        skyblue: 0x87ceeb,
        slateblue: 0x6a5acd,
        slategray: 0x708090,
        slategrey: 0x708090,
        snow: 0xfffafa,
        springgreen: 0x00ff7f,
        steelblue: 0x4682b4,
        tan: 0xd2b48c,
        teal: 0x008080,
        thistle: 0xd8bfd8,
        tomato: 0xff6347,
        turquoise: 0x40e0d0,
        violet: 0xee82ee,
        wheat: 0xf5deb3,
        white: 0xffffff,
        whitesmoke: 0xf5f5f5,
        yellow: 0xffff00,
        yellowgreen: 0x9acd32
      };

      Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Color, color, {
        displayable: function displayable() {
          return this.rgb().displayable();
        },
        toString: function toString() {
          return this.rgb() + "";
        }
      });

      function color(format) {
        var m;
        format = (format + "").trim().toLowerCase();
        return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb(m >> 8 & 0xf | m >> 4 & 0x0f0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
        ) : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
        : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
        : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
        : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
        : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
        : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
        : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
        : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
      }

      function rgbn(n) {
        return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
      }

      function rgba(r, g, b, a) {
        if (a <= 0) r = g = b = NaN;
        return new Rgb(r, g, b, a);
      }

      function rgbConvert(o) {
        if (!(o instanceof Color)) o = color(o);
        if (!o) return new Rgb();
        o = o.rgb();
        return new Rgb(o.r, o.g, o.b, o.opacity);
      }

      function rgb(r, g, b, opacity) {
        return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
      }

      function Rgb(r, g, b, opacity) {
        this.r = +r;
        this.g = +g;
        this.b = +b;
        this.opacity = +opacity;
      }

      Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Rgb, rgb, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(Color, {
        brighter: function brighter(k) {
          k = k == null ? _brighter : Math.pow(_brighter, k);
          return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
        },
        darker: function darker(k) {
          k = k == null ? _darker : Math.pow(_darker, k);
          return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
        },
        rgb: function rgb() {
          return this;
        },
        displayable: function displayable() {
          return 0 <= this.r && this.r <= 255 && 0 <= this.g && this.g <= 255 && 0 <= this.b && this.b <= 255 && 0 <= this.opacity && this.opacity <= 1;
        },
        toString: function toString() {
          var a = this.opacity;a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
          return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
        }
      }));

      function hsla(h, s, l, a) {
        if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
        return new Hsl(h, s, l, a);
      }

      function hslConvert(o) {
        if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
        if (!(o instanceof Color)) o = color(o);
        if (!o) return new Hsl();
        if (o instanceof Hsl) return o;
        o = o.rgb();
        var r = o.r / 255,
            g = o.g / 255,
            b = o.b / 255,
            min = Math.min(r, g, b),
            max = Math.max(r, g, b),
            h = NaN,
            s = max - min,
            l = (max + min) / 2;
        if (s) {
          if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
          s /= l < 0.5 ? max + min : 2 - max - min;
          h *= 60;
        } else {
          s = l > 0 && l < 1 ? 0 : h;
        }
        return new Hsl(h, s, l, o.opacity);
      }

      function hsl(h, s, l, opacity) {
        return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
      }

      function Hsl(h, s, l, opacity) {
        this.h = +h;
        this.s = +s;
        this.l = +l;
        this.opacity = +opacity;
      }

      Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Hsl, hsl, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(Color, {
        brighter: function brighter(k) {
          k = k == null ? _brighter : Math.pow(_brighter, k);
          return new Hsl(this.h, this.s, this.l * k, this.opacity);
        },
        darker: function darker(k) {
          k = k == null ? _darker : Math.pow(_darker, k);
          return new Hsl(this.h, this.s, this.l * k, this.opacity);
        },
        rgb: function rgb() {
          var h = this.h % 360 + (this.h < 0) * 360,
              s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
              l = this.l,
              m2 = l + (l < 0.5 ? l : 1 - l) * s,
              m1 = 2 * l - m2;
          return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
        },
        displayable: function displayable() {
          return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
        }
      }));

      /* From FvD 13.37, CSS Color Module Level 3 */
      function hsl2rgb(h, m1, m2) {
        return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
      }

      /***/
    },
    /* 50 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["b"] = extend;
      /* harmony default export */__webpack_exports__["a"] = function (constructor, factory, prototype) {
        constructor.prototype = factory.prototype = prototype;
        prototype.constructor = constructor;
      };

      function extend(parent, definition) {
        var prototype = Object.create(parent.prototype);
        for (var key in definition) {
          prototype[key] = definition[key];
        }return prototype;
      }

      /***/
    },
    /* 51 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["a"] = basis;
      function basis(t1, v0, v1, v2, v3) {
        var t2 = t1 * t1,
            t3 = t2 * t1;
        return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
      }

      /* harmony default export */__webpack_exports__["b"] = function (values) {
        var n = values.length - 1;
        return function (t) {
          var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
              v1 = values[i],
              v2 = values[i + 1],
              v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
              v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
          return basis((t - i / n) * n, v0, v1, v2, v3);
        };
      };

      /***/
    },
    /* 52 */
    /***/function (module, exports, __webpack_require__) {

      var vec2 = __webpack_require__(3).vec2;

      module.exports = {
        at: function at(p1, p2, t) {
          return (p2 - p1) * t + p1;
        },
        pointDistance: function pointDistance(x1, y1, x2, y2, x, y) {
          var d = [x2 - x1, y2 - y1];
          if (vec2.exactEquals(d, [0, 0])) {
            return NaN;
          }

          var u = [-d[1], d[0]];
          vec2.normalize(u, u);
          var a = [x - x1, y - y1];
          return Math.abs(vec2.dot(a, u));
        },
        box: function box(x1, y1, x2, y2, lineWidth) {
          var halfWidth = lineWidth / 2;
          var minX = Math.min(x1, x2);
          var maxX = Math.max(x1, x2);
          var minY = Math.min(y1, y2);
          var maxY = Math.max(y1, y2);

          return {
            minX: minX - halfWidth,
            minY: minY - halfWidth,
            maxX: maxX + halfWidth,
            maxY: maxY + halfWidth
          };
        },
        len: function len(x1, y1, x2, y2) {
          return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
        }
      };

      /***/
    },
    /* 53 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var vec2 = __webpack_require__(3).vec2;

      function quadraticAt(p0, p1, p2, t) {
        var onet = 1 - t;
        return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
      }

      function quadraticProjectPoint(x1, y1, x2, y2, x3, y3, x, y, out) {
        var t = void 0;
        var interval = 0.005;
        var d = Infinity;
        var d1 = void 0;
        var v1 = void 0;
        var v2 = void 0;
        var _t = void 0;
        var d2 = void 0;
        var i = void 0;
        var EPSILON = 0.0001;
        var v0 = [x, y];

        for (_t = 0; _t < 1; _t += 0.05) {
          v1 = [quadraticAt(x1, x2, x3, _t), quadraticAt(y1, y2, y3, _t)];

          d1 = vec2.squaredDistance(v0, v1);
          if (d1 < d) {
            t = _t;
            d = d1;
          }
        }
        d = Infinity;

        for (i = 0; i < 32; i++) {
          if (interval < EPSILON) {
            break;
          }

          var prev = t - interval;
          var next = t + interval;

          v1 = [quadraticAt(x1, x2, x3, prev), quadraticAt(y1, y2, y3, prev)];

          d1 = vec2.squaredDistance(v0, v1);

          if (prev >= 0 && d1 < d) {
            t = prev;
            d = d1;
          } else {
            v2 = [quadraticAt(x1, x2, x3, next), quadraticAt(y1, y2, y3, next)];

            d2 = vec2.squaredDistance(v0, v2);

            if (next <= 1 && d2 < d) {
              t = next;
              d = d2;
            } else {
              interval *= 0.5;
            }
          }
        }

        if (out) {
          out.x = quadraticAt(x1, x2, x3, t);
          out.y = quadraticAt(y1, y2, y3, t);
        }

        return Math.sqrt(d);
      }

      function quadraticExtrema(p0, p1, p2) {
        var a = p0 + p2 - 2 * p1;
        if (Util.isNumberEqual(a, 0)) {
          return [0.5];
        }
        var rst = (p0 - p1) / a;
        if (rst <= 1 && rst >= 0) {
          return [rst];
        }
        return [];
      }

      module.exports = {
        at: quadraticAt,
        projectPoint: function projectPoint(x1, y1, x2, y2, x3, y3, x, y) {
          var rst = {};
          quadraticProjectPoint(x1, y1, x2, y2, x3, y3, x, y, rst);
          return rst;
        },

        pointDistance: quadraticProjectPoint,
        extrema: quadraticExtrema
      };

      /***/
    },
    /* 54 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var vec2 = __webpack_require__(3).vec2;

      function circlePoint(cx, cy, r, angle) {
        return {
          x: Math.cos(angle) * r + cx,
          y: Math.sin(angle) * r + cy
        };
      }

      function angleNearTo(angle, min, max, out) {
        var v1 = void 0;
        var v2 = void 0;
        if (out) {
          if (angle < min) {
            v1 = min - angle;
            v2 = Math.PI * 2 - max + angle;
          } else if (angle > max) {
            v1 = Math.PI * 2 - angle + min;
            v2 = angle - max;
          }
        } else {
          v1 = angle - min;
          v2 = max - angle;
        }

        return v1 > v2 ? max : min;
      }

      function nearAngle(angle, startAngle, endAngle, clockwise) {
        var plus = 0;
        if (endAngle - startAngle >= Math.PI * 2) {
          plus = Math.PI * 2;
        }
        startAngle = Util.mod(startAngle, Math.PI * 2);
        endAngle = Util.mod(endAngle, Math.PI * 2) + plus;
        angle = Util.mod(angle, Math.PI * 2);
        if (clockwise) {
          if (startAngle >= endAngle) {
            if (angle > endAngle && angle < startAngle) {
              return angle;
            }
            return angleNearTo(angle, endAngle, startAngle, true);
          }
          if (angle < startAngle || angle > endAngle) {
            return angle;
          }
          return angleNearTo(angle, startAngle, endAngle);
        }
        if (startAngle <= endAngle) {
          if (startAngle < angle && angle < endAngle) {
            return angle;
          }
          return angleNearTo(angle, startAngle, endAngle, true);
        }
        if (angle > startAngle || angle < endAngle) {
          return angle;
        }
        return angleNearTo(angle, endAngle, startAngle);
      }

      function arcProjectPoint(cx, cy, r, startAngle, endAngle, clockwise, x, y, out) {
        var v = [x, y];
        var v0 = [cx, cy];
        var v1 = [1, 0];
        var subv = vec2.subtract([], v, v0);
        var angle = vec2.angleTo(v1, subv);

        angle = nearAngle(angle, startAngle, endAngle, clockwise);
        var vpoint = [r * Math.cos(angle) + cx, r * Math.sin(angle) + cy];
        if (out) {
          out.x = vpoint[0];
          out.y = vpoint[1];
        }
        var d = vec2.distance(vpoint, v);
        return d;
      }

      function arcBox(cx, cy, r, startAngle, endAngle, clockwise) {
        var angleRight = 0;
        var angleBottom = Math.PI / 2;
        var angleLeft = Math.PI;
        var angleTop = Math.PI * 3 / 2;
        var points = [];
        var angle = nearAngle(angleRight, startAngle, endAngle, clockwise);
        if (angle === angleRight) {
          points.push(circlePoint(cx, cy, r, angleRight));
        }

        angle = nearAngle(angleBottom, startAngle, endAngle, clockwise);
        if (angle === angleBottom) {
          points.push(circlePoint(cx, cy, r, angleBottom));
        }

        angle = nearAngle(angleLeft, startAngle, endAngle, clockwise);
        if (angle === angleLeft) {
          points.push(circlePoint(cx, cy, r, angleLeft));
        }

        angle = nearAngle(angleTop, startAngle, endAngle, clockwise);
        if (angle === angleTop) {
          points.push(circlePoint(cx, cy, r, angleTop));
        }

        points.push(circlePoint(cx, cy, r, startAngle));
        points.push(circlePoint(cx, cy, r, endAngle));
        var minX = Infinity;
        var maxX = -Infinity;
        var minY = Infinity;
        var maxY = -Infinity;
        Util.each(points, function (point) {
          if (minX > point.x) {
            minX = point.x;
          }
          if (maxX < point.x) {
            maxX = point.x;
          }
          if (minY > point.y) {
            minY = point.y;
          }
          if (maxY < point.y) {
            maxY = point.y;
          }
        });

        return {
          minX: minX,
          minY: minY,
          maxX: maxX,
          maxY: maxY
        };
      }

      module.exports = {
        nearAngle: nearAngle,
        projectPoint: function projectPoint(cx, cy, r, startAngle, endAngle, clockwise, x, y) {
          var rst = {};
          arcProjectPoint(cx, cy, r, startAngle, endAngle, clockwise, x, y, rst);
          return rst;
        },

        pointDistance: arcProjectPoint,
        box: arcBox
      };

      /***/
    },
    /* 55 */
    /***/function (module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function (global) {
        var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
          return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
        } : function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
        };

        /** Detect free variable `global` from Node.js. */
        var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;

        module.exports = freeGlobal;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(114));

      /***/
    },
    /* 56 */
    /***/function (module, exports, __webpack_require__) {

      var baseGetTag = __webpack_require__(7),
          isArray = __webpack_require__(6),
          isObjectLike = __webpack_require__(5);

      /** `Object#toString` result references. */
      var stringTag = '[object String]';

      /**
       * Checks if `value` is classified as a `String` primitive or object.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a string, else `false`.
       * @example
       *
       * _.isString('abc');
       * // => true
       *
       * _.isString(1);
       * // => false
       */
      function isString(value) {
        return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
      }

      module.exports = isString;

      /***/
    },
    /* 57 */
    /***/function (module, exports, __webpack_require__) {

      var isPrototype = __webpack_require__(16),
          nativeKeys = __webpack_require__(121);

      /** Used for built-in method references. */
      var objectProto = Object.prototype;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /**
       * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
          }
        }
        return result;
      }

      module.exports = baseKeys;

      /***/
    },
    /* 58 */
    /***/function (module, exports) {

      /**
       * Creates a unary function that invokes `func` with its argument transformed.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {Function} transform The argument transform.
       * @returns {Function} Returns the new function.
       */
      function overArg(func, transform) {
        return function (arg) {
          return func(transform(arg));
        };
      }

      module.exports = overArg;

      /***/
    },
    /* 59 */
    /***/function (module, exports) {

      /** Used for built-in method references. */
      var funcProto = Function.prototype;

      /** Used to resolve the decompiled source of functions. */
      var funcToString = funcProto.toString;

      /**
       * Converts `func` to its source code.
       *
       * @private
       * @param {Function} func The function to convert.
       * @returns {string} Returns the source code.
       */
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}
          try {
            return func + '';
          } catch (e) {}
        }
        return '';
      }

      module.exports = toSource;

      /***/
    },
    /* 60 */
    /***/function (module, exports) {

      /** Used as references for various `Number` constants. */
      var MAX_SAFE_INTEGER = 9007199254740991;

      /**
       * Checks if `value` is a valid array-like length.
       *
       * **Note:** This method is loosely based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
       * @example
       *
       * _.isLength(3);
       * // => true
       *
       * _.isLength(Number.MIN_VALUE);
       * // => false
       *
       * _.isLength(Infinity);
       * // => false
       *
       * _.isLength('3');
       * // => false
       */
      function isLength(value) {
        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }

      module.exports = isLength;

      /***/
    },
    /* 61 */
    /***/function (module, exports) {

      /**
       * The base implementation of `_.unary` without support for storing metadata.
       *
       * @private
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       */
      function baseUnary(func) {
        return function (value) {
          return func(value);
        };
      }

      module.exports = baseUnary;

      /***/
    },
    /* 62 */
    /***/function (module, exports, __webpack_require__) {

      var baseToString = __webpack_require__(135);

      /**
       * Converts `value` to a string. An empty string is returned for `null`
       * and `undefined` values. The sign of `-0` is preserved.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.toString(null);
       * // => ''
       *
       * _.toString(-0);
       * // => '-0'
       *
       * _.toString([1, 2, 3]);
       * // => '1,2,3'
       */
      function toString(value) {
        return value == null ? '' : baseToString(value);
      }

      module.exports = toString;

      /***/
    },
    /* 63 */
    /***/function (module, exports, __webpack_require__) {

      var mapCacheClear = __webpack_require__(149),
          mapCacheDelete = __webpack_require__(156),
          mapCacheGet = __webpack_require__(158),
          mapCacheHas = __webpack_require__(159),
          mapCacheSet = __webpack_require__(160);

      /**
       * Creates a map cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      // Add methods to `MapCache`.
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype['delete'] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;

      module.exports = MapCache;

      /***/
    },
    /* 64 */
    /***/function (module, exports) {

      /**
       * A specialized version of `_.forEach` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns `array`.
       */
      function arrayEach(array, iteratee) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }

      module.exports = arrayEach;

      /***/
    },
    /* 65 */
    /***/function (module, exports, __webpack_require__) {

      var getNative = __webpack_require__(10);

      var defineProperty = function () {
        try {
          var func = getNative(Object, 'defineProperty');
          func({}, '', {});
          return func;
        } catch (e) {}
      }();

      module.exports = defineProperty;

      /***/
    },
    /* 66 */
    /***/function (module, exports, __webpack_require__) {

      var baseTimes = __webpack_require__(162),
          isArguments = __webpack_require__(33),
          isArray = __webpack_require__(6),
          isBuffer = __webpack_require__(17),
          isIndex = __webpack_require__(67),
          isTypedArray = __webpack_require__(22);

      /** Used for built-in method references. */
      var objectProto = Object.prototype;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /**
       * Creates an array of the enumerable property names of the array-like `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @param {boolean} inherited Specify returning inherited property names.
       * @returns {Array} Returns the array of property names.
       */
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;

        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (
          // Safari 9 has enumerable `arguments.length` in strict mode.
          key == 'length' ||
          // Node.js 0.10 has enumerable non-index properties on buffers.
          isBuff && (key == 'offset' || key == 'parent') ||
          // PhantomJS 2 has enumerable non-index properties on typed arrays.
          isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
          // Skip index properties.
          isIndex(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }

      module.exports = arrayLikeKeys;

      /***/
    },
    /* 67 */
    /***/function (module, exports) {

      /** Used as references for various `Number` constants. */
      var MAX_SAFE_INTEGER = 9007199254740991;

      /** Used to detect unsigned integer values. */
      var reIsUint = /^(?:0|[1-9]\d*)$/;

      /**
       * Checks if `value` is a valid array-like index.
       *
       * @private
       * @param {*} value The value to check.
       * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
       * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
       */
      function isIndex(value, length) {
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
      }

      module.exports = isIndex;

      /***/
    },
    /* 68 */
    /***/function (module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function (module) {
        var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
          return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
        } : function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
        };

        var root = __webpack_require__(4);

        /** Detect free variable `exports`. */
        var freeExports = (false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

        /** Detect free variable `module`. */
        var freeModule = freeExports && (false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports;

        /** Built-in value references. */
        var Buffer = moduleExports ? root.Buffer : undefined,
            allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

        /**
         * Creates a clone of  `buffer`.
         *
         * @private
         * @param {Buffer} buffer The buffer to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Buffer} Returns the cloned buffer.
         */
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length,
              result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

          buffer.copy(result);
          return result;
        }

        module.exports = cloneBuffer;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(34)(module));

      /***/
    },
    /* 69 */
    /***/function (module, exports) {

      /**
       * This method returns a new empty array.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Array} Returns the new empty array.
       * @example
       *
       * var arrays = _.times(2, _.stubArray);
       *
       * console.log(arrays);
       * // => [[], []]
       *
       * console.log(arrays[0] === arrays[1]);
       * // => false
       */
      function stubArray() {
        return [];
      }

      module.exports = stubArray;

      /***/
    },
    /* 70 */
    /***/function (module, exports, __webpack_require__) {

      var arrayPush = __webpack_require__(71),
          getPrototype = __webpack_require__(40),
          getSymbols = __webpack_require__(39),
          stubArray = __webpack_require__(69);

      /* Built-in method references for those with the same name as other `lodash` methods. */
      var nativeGetSymbols = Object.getOwnPropertySymbols;

      /**
       * Creates an array of the own and inherited enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
        var result = [];
        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }
        return result;
      };

      module.exports = getSymbolsIn;

      /***/
    },
    /* 71 */
    /***/function (module, exports) {

      /**
       * Appends the elements of `values` to `array`.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to append.
       * @returns {Array} Returns `array`.
       */
      function arrayPush(array, values) {
        var index = -1,
            length = values.length,
            offset = array.length;

        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }

      module.exports = arrayPush;

      /***/
    },
    /* 72 */
    /***/function (module, exports, __webpack_require__) {

      var baseGetAllKeys = __webpack_require__(73),
          getSymbols = __webpack_require__(39),
          keys = __webpack_require__(13);

      /**
       * Creates an array of own enumerable property names and symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }

      module.exports = getAllKeys;

      /***/
    },
    /* 73 */
    /***/function (module, exports, __webpack_require__) {

      var arrayPush = __webpack_require__(71),
          isArray = __webpack_require__(6);

      /**
       * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
       * `keysFunc` and `symbolsFunc` to get the enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @param {Function} symbolsFunc The function to get the symbols of `object`.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }

      module.exports = baseGetAllKeys;

      /***/
    },
    /* 74 */
    /***/function (module, exports, __webpack_require__) {

      var root = __webpack_require__(4);

      /** Built-in value references. */
      var Uint8Array = root.Uint8Array;

      module.exports = Uint8Array;

      /***/
    },
    /* 75 */
    /***/function (module, exports) {

      /**
       * A specialized version of `_.reduce` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @param {boolean} [initAccum] Specify using the first element of `array` as
       *  the initial value.
       * @returns {*} Returns the accumulated value.
       */
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1,
            length = array == null ? 0 : array.length;

        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }

      module.exports = arrayReduce;

      /***/
    },
    /* 76 */
    /***/function (module, exports, __webpack_require__) {

      var cloneArrayBuffer = __webpack_require__(41);

      /**
       * Creates a clone of `typedArray`.
       *
       * @private
       * @param {Object} typedArray The typed array to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned typed array.
       */
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }

      module.exports = cloneTypedArray;

      /***/
    },
    /* 77 */
    /***/function (module, exports, __webpack_require__) {

      var baseCreate = __webpack_require__(179),
          getPrototype = __webpack_require__(40),
          isPrototype = __webpack_require__(16);

      /**
       * Initializes an object clone.
       *
       * @private
       * @param {Object} object The object to clone.
       * @returns {Object} Returns the initialized clone.
       */
      function initCloneObject(object) {
        return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }

      module.exports = initCloneObject;

      /***/
    },
    /* 78 */
    /***/function (module, exports, __webpack_require__) {

      var baseRest = __webpack_require__(79),
          isIterateeCall = __webpack_require__(187);

      /**
       * Creates a function like `_.assign`.
       *
       * @private
       * @param {Function} assigner The function to assign values.
       * @returns {Function} Returns the new assigner function.
       */
      function createAssigner(assigner) {
        return baseRest(function (object, sources) {
          var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined,
              guard = length > 2 ? sources[2] : undefined;

          customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }

      module.exports = createAssigner;

      /***/
    },
    /* 79 */
    /***/function (module, exports, __webpack_require__) {

      var identity = __webpack_require__(44),
          overRest = __webpack_require__(181),
          setToString = __webpack_require__(183);

      /**
       * The base implementation of `_.rest` which doesn't validate or coerce arguments.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       */
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + '');
      }

      module.exports = baseRest;

      /***/
    },
    /* 80 */
    /***/function (module, exports, __webpack_require__) {

      var baseAssignValue = __webpack_require__(38),
          eq = __webpack_require__(18);

      /**
       * This function is like `assignValue` except that it doesn't assign
       * `undefined` values.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function assignMergeValue(object, key, value) {
        if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }

      module.exports = assignMergeValue;

      /***/
    },
    /* 81 */
    /***/function (module, exports, __webpack_require__) {

      var createBaseFor = __webpack_require__(190);

      /**
       * The base implementation of `baseForOwn` which iterates over `object`
       * properties returned by `keysFunc` and invokes `iteratee` for each property.
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */
      var baseFor = createBaseFor();

      module.exports = baseFor;

      /***/
    },
    /* 82 */
    /***/function (module, exports) {

      /** Used to compose unicode character classes. */
      var rsAstralRange = '\\ud800-\\udfff',
          rsComboMarksRange = '\\u0300-\\u036f',
          reComboHalfMarksRange = '\\ufe20-\\ufe2f',
          rsComboSymbolsRange = '\\u20d0-\\u20ff',
          rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
          rsVarRange = '\\ufe0e\\ufe0f';

      /** Used to compose unicode capture groups. */
      var rsZWJ = '\\u200d';

      /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
      var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

      /**
       * Checks if `string` contains Unicode symbols.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {boolean} Returns `true` if a symbol is found, else `false`.
       */
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }

      module.exports = hasUnicode;

      /***/
    },
    /* 83 */
    /***/function (module, exports, __webpack_require__) {

      var asciiToArray = __webpack_require__(199),
          hasUnicode = __webpack_require__(82),
          unicodeToArray = __webpack_require__(200);

      /**
       * Converts `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }

      module.exports = stringToArray;

      /***/
    },
    /* 84 */
    /***/function (module, exports, __webpack_require__) {

      var SetCache = __webpack_require__(217),
          arraySome = __webpack_require__(220),
          cacheHas = __webpack_require__(221);

      /** Used to compose bitmasks for value comparisons. */
      var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

      /**
       * A specialized version of `baseIsEqualDeep` for arrays with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Array} array The array to compare.
       * @param {Array} other The other array to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `array` and `other` objects.
       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
       */
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(array);
        if (stacked && stack.get(other)) {
          return stacked == other;
        }
        var index = -1,
            result = true,
            seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

        stack.set(array, other);
        stack.set(other, array);

        // Ignore non-index properties.
        while (++index < arrLength) {
          var arrValue = array[index],
              othValue = other[index];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== undefined) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          // Recursively compare arrays (susceptible to call stack limits).
          if (seen) {
            if (!arraySome(other, function (othValue, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }
        stack['delete'](array);
        stack['delete'](other);
        return result;
      }

      module.exports = equalArrays;

      /***/
    },
    /* 85 */
    /***/function (module, exports) {

      var TABLE = document.createElement('table');
      var TABLE_TR = document.createElement('tr');
      var FRAGMENT_REG = /^\s*<(\w+|!)[^>]*>/;
      var CONTAINERS = {
        tr: document.createElement('tbody'),
        tbody: TABLE,
        thead: TABLE,
        tfoot: TABLE,
        td: TABLE_TR,
        th: TABLE_TR,
        '*': document.createElement('div')
      };

      module.exports = {
        getBoundingClientRect: function getBoundingClientRect(node) {
          var rect = node.getBoundingClientRect();
          var top = document.documentElement.clientTop;
          var left = document.documentElement.clientLeft;
          return {
            top: rect.top - top,
            bottom: rect.bottom - top,
            left: rect.left - left,
            right: rect.right - left
          };
        },

        /**
         * 获取样式
         * @param  {Object} dom DOM节点
         * @param  {String} name 样式名
         * @return {String} 属性值
         */
        getStyle: function getStyle(dom, name) {
          if (window.getComputedStyle) {
            return window.getComputedStyle(dom, null)[name];
          }
          return dom.currentStyle[name];
        },
        modifyCSS: function modifyCSS(dom, css) {
          for (var key in css) {
            if (css.hasOwnProperty(key)) {
              dom.style[key] = css[key];
            }
          }
          return dom;
        },

        /**
         * 创建DOM 节点
         * @param  {String} str Dom 字符串
         * @return {HTMLElement}  DOM 节点
         */
        createDom: function createDom(str) {
          var name = FRAGMENT_REG.test(str) && RegExp.$1;
          if (!(name in CONTAINERS)) {
            name = '*';
          }
          var container = CONTAINERS[name];
          str = str.replace(/(^\s*)|(\s*$)/g, '');
          container.innerHTML = '' + str;
          return container.childNodes[0];
        },
        getRatio: function getRatio() {
          return window.devicePixelRatio ? window.devicePixelRatio : 2;
        },

        /**
         * 获取宽度
         * @param  {HTMLElement} el  dom节点
         * @return {Number} 宽度
         */
        getWidth: function getWidth(el) {
          var width = this.getStyle(el, 'width');
          if (width === 'auto') {
            width = el.offsetWidth;
          }
          return parseFloat(width);
        },

        /**
         * 获取高度
         * @param  {HTMLElement} el dom节点
         * @return {Number} 高度
         */
        getHeight: function getHeight(el) {
          var height = this.getStyle(el, 'height');
          if (height === 'auto') {
            height = el.offsetHeight;
          }
          return parseFloat(height);
        },

        /**
         * 获取外层高度
         * @param  {HTMLElement} el dom节点
         * @return {Number} 高度
         */
        getOuterHeight: function getOuterHeight(el) {
          var height = this.getHeight(el);
          var bTop = parseFloat(this.getStyle(el, 'borderTopWidth')) || 0;
          var pTop = parseFloat(this.getStyle(el, 'paddingTop'));
          var pBottom = parseFloat(this.getStyle(el, 'paddingBottom'));
          var bBottom = parseFloat(this.getStyle(el, 'borderBottomWidth')) || 0;
          return height + bTop + bBottom + pTop + pBottom;
        },

        /**
         * 获取外层宽度
         * @param  {HTMLElement} el dom节点
         * @return {Number} 宽度
         */
        getOuterWidth: function getOuterWidth(el) {
          var width = this.getWidth(el);
          var bLeft = parseFloat(this.getStyle(el, 'borderLeftWidth')) || 0;
          var pLeft = parseFloat(this.getStyle(el, 'paddingLeft'));
          var pRight = parseFloat(this.getStyle(el, 'paddingRight'));
          var bRight = parseFloat(this.getStyle(el, 'borderRightWidth')) || 0;
          return width + bLeft + bRight + pLeft + pRight;
        },

        /**
         * 添加事件监听器
         * @param  {Object} target DOM对象
         * @param  {String} eventType 事件名
         * @param  {Funtion} callback 回调函数
         * @return {Object} 返回对象
         */
        addEventListener: function addEventListener(target, eventType, callback) {
          if (target.addEventListener) {
            target.addEventListener(eventType, callback, false);
            return {
              remove: function remove() {
                target.removeEventListener(eventType, callback, false);
              }
            };
          } else if (target.attachEvent) {
            target.attachEvent('on' + eventType, callback);
            return {
              remove: function remove() {
                target.detachEvent('on' + eventType, callback);
              }
            };
          }
        },
        requestAnimationFrame: function requestAnimationFrame(fn) {
          var method = window.requestAnimationFrame || window.webkitRequestAnimationFrame || function (fn) {
            return setTimeout(fn, 16);
          };

          return method(fn);
        }
      };

      /***/
    },
    /* 86 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);

      var Event = function Event(type, event, bubbles, cancelable) {
        this.type = type; // 事件类型
        this.target = null; // 目标
        this.currentTarget = null; // 当前目标
        this.bubbles = bubbles; // 冒泡
        this.cancelable = cancelable; // 是否能够阻止
        this.timeStamp = new Date().getTime(); // 时间戳
        this.defaultPrevented = false; // 阻止默认
        this.propagationStopped = false; // 阻止冒泡
        this.removed = false; // 是否被移除
        this.event = event; // 触发的原生事件
      };

      Util.augment(Event, {
        preventDefault: function preventDefault() {
          this.defaultPrevented = this.cancelable && true;
        },
        stopPropagation: function stopPropagation() {
          this.propagationStopped = true;
        },
        remove: function remove() {
          this.remove = true;
        },
        clone: function clone() {
          return Util.clone(this);
        },
        toString: function toString() {
          return '[Event (type=' + this.type + ')]';
        }
      });

      module.exports = Event;

      /***/
    },
    /* 87 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var Element = __webpack_require__(88);
      var Shape = __webpack_require__(262);
      var SHAPE_MAP = {}; // 缓存图形类型
      var INDEX = '_INDEX';

      function find(children, x, y) {
        var rst = void 0;
        for (var i = children.length - 1; i >= 0; i--) {
          var child = children[i];
          if (child.__cfg.visible && child.__cfg.capture) {
            if (child.isGroup) {
              rst = child.getShape(x, y);
            } else if (child.isHit(x, y)) {
              rst = child;
            }
          }
          if (rst) {
            break;
          }
        }
        return rst;
      }

      function getComparer(compare) {
        return function (left, right) {
          var result = compare(left, right);
          return result === 0 ? left[INDEX] - right[INDEX] : result;
        };
      }

      var Group = function Group(cfg) {
        Group.superclass.constructor.call(this, cfg);
        this.set('children', []);

        this._beforeRenderUI();
        this._renderUI();
        this._bindUI();
      };

      function initClassCfgs(c) {
        if (c.__cfg || c === Group) {
          return;
        }
        var superCon = c.superclass.constructor;
        if (superCon && !superCon.__cfg) {
          initClassCfgs(superCon);
        }
        c.__cfg = {};

        Util.merge(c.__cfg, superCon.__cfg);
        Util.merge(c.__cfg, c.CFG);
      }

      Util.extend(Group, Element);

      Util.augment(Group, {
        isGroup: true,
        canFill: true,
        canStroke: true,
        getDefaultCfg: function getDefaultCfg() {
          initClassCfgs(this.constructor);
          return Util.merge({}, this.constructor.__cfg);
        },
        _beforeRenderUI: function _beforeRenderUI() {},
        _renderUI: function _renderUI() {},
        _bindUI: function _bindUI() {},
        addShape: function addShape(type, cfg) {
          var canvas = this.get('canvas');
          cfg = cfg || {};
          var shapeType = SHAPE_MAP[type];
          if (!shapeType) {
            shapeType = Util.upperFirst(type);
            SHAPE_MAP[type] = shapeType;
          }
          if (cfg.attrs) {
            var attrs = cfg.attrs;
            if (type === 'text') {
              // 临时解决
              var topFontFamily = canvas.get('fontFamily');
              if (topFontFamily) {
                attrs.fontFamily = attrs.fontFamily ? attrs.fontFamily : topFontFamily;
              }
            }
          }
          cfg.canvas = canvas;
          cfg.type = type;
          var rst = new Shape[shapeType](cfg);
          this.add(rst);
          return rst;
        },

        /** 添加图组
         * @param  {Function|Object|undefined} param 图组类
         * @param  {Object} cfg 配置项
         * @return {Object} rst 图组
         */
        addGroup: function addGroup(param, cfg) {
          var canvas = this.get('canvas');
          var rst = void 0;
          cfg = Util.merge({}, cfg);
          if (Util.isFunction(param)) {
            if (cfg) {
              cfg.canvas = canvas;
              cfg.parent = this;
              rst = new param(cfg);
            } else {
              rst = new param({
                canvas: canvas,
                parent: this
              });
            }
            this.add(rst);
          } else if (Util.isObject(param)) {
            param.canvas = canvas;
            rst = new Group(param);
            this.add(rst);
          } else if (param === undefined) {
            rst = new Group();
            this.add(rst);
          } else {
            return false;
          }
          return rst;
        },

        /** 绘制背景
         * @param  {Array} padding 内边距
         * @param  {Attrs} attrs 图形属性
         * @param  {Shape} backShape 背景图形
         * @return {Object} 背景层对象
         */
        renderBack: function renderBack(padding, attrs) {
          var backShape = this.get('backShape');
          var innerBox = this.getBBox();
          // const parent = this.get('parent'); // getParent
          Util.merge(attrs, {
            x: innerBox.minX - padding[3],
            y: innerBox.minY - padding[0],
            width: innerBox.width + padding[1] + padding[3],
            height: innerBox.height + padding[0] + padding[2]
          });
          if (backShape) {
            backShape.attr(attrs);
          } else {
            backShape = this.addShape('rect', {
              zIndex: -1,
              attrs: attrs
            });
          }
          this.set('backShape', backShape);
          this.sort();
          return backShape;
        },
        removeChild: function removeChild(item, destroy) {
          if (arguments.length >= 2) {
            if (this.contain(item)) {
              item.remove(destroy);
            }
          } else {
            if (arguments.length === 1) {
              if (Util.isBoolean(item)) {
                destroy = item;
              } else {
                if (this.contain(item)) {
                  item.remove(true);
                }
                return this;
              }
            }
            if (arguments.length === 0) {
              destroy = true;
            }

            Group.superclass.remove.call(this, destroy);
          }
          return this;
        },

        /**
         * 向组中添加shape或者group
         * @param {Object} items 图形或者分组
         * @return {Object} group 本尊
         */
        add: function add(items) {
          var self = this;
          var children = self.get('children');
          if (Util.isArray(items)) {
            Util.each(items, function (item) {
              var parent = item.get('parent');
              if (parent) {
                parent.removeChild(item, false);
              }
              self.__setEvn(item);
            });
            children.push.apply(children, items);
          } else {
            var item = items;
            var parent = item.get('parent');
            if (parent) {
              parent.removeChild(item, false);
            }
            self.__setEvn(item);
            children.push(item);
          }
          return self;
        },
        contain: function contain(item) {
          var children = this.get('children');
          return children.indexOf(item) > -1;
        },
        getChildByIndex: function getChildByIndex(index) {
          var children = this.get('children');
          return children[index];
        },
        getFirst: function getFirst() {
          return this.getChildByIndex(0);
        },
        getLast: function getLast() {
          var lastIndex = this.get('children').length - 1;
          return this.getChildByIndex(lastIndex);
        },
        __setEvn: function __setEvn(item) {
          var self = this;
          item.__cfg.parent = self;
          item.__cfg.context = self.__cfg.context;
          item.__cfg.canvas = self.__cfg.canvas;
          var clip = item.__attrs.clip;
          if (clip) {
            clip.setSilent('parent', self);
            clip.setSilent('context', self.get('context'));
          }
          var children = item.__cfg.children;
          if (children) {
            Util.each(children, function (child) {
              item.__setEvn(child);
            });
          }
        },
        getBBox: function getBBox() {
          var self = this;
          var minX = Infinity;
          var maxX = -Infinity;
          var minY = Infinity;
          var maxY = -Infinity;
          var children = self.get('children');
          Util.each(children, function (child) {
            if (child.get('visible')) {
              var _box = child.getBBox();
              if (!_box) {
                return true;
              }

              var leftTop = [_box.minX, _box.minY, 1];
              var leftBottom = [_box.minX, _box.maxY, 1];
              var rightTop = [_box.maxX, _box.minY, 1];
              var rightBottom = [_box.maxX, _box.maxY, 1];

              child.apply(leftTop);
              child.apply(leftBottom);
              child.apply(rightTop);
              child.apply(rightBottom);

              var boxMinX = Math.min(leftTop[0], leftBottom[0], rightTop[0], rightBottom[0]);
              var boxMaxX = Math.max(leftTop[0], leftBottom[0], rightTop[0], rightBottom[0]);
              var boxMinY = Math.min(leftTop[1], leftBottom[1], rightTop[1], rightBottom[1]);
              var boxMaxY = Math.max(leftTop[1], leftBottom[1], rightTop[1], rightBottom[1]);

              if (boxMinX < minX) {
                minX = boxMinX;
              }

              if (boxMaxX > maxX) {
                maxX = boxMaxX;
              }

              if (boxMinY < minY) {
                minY = boxMinY;
              }

              if (boxMaxY > maxY) {
                maxY = boxMaxY;
              }
            }
          });
          var box = {
            minX: minX,
            minY: minY,
            maxX: maxX,
            maxY: maxY
          };
          box.x = box.minX;
          box.y = box.minY;
          box.width = box.maxX - box.minX;
          box.height = box.maxY - box.minY;
          return box;
        },
        drawInner: function drawInner(context) {
          var children = this.get('children');
          for (var i = 0; i < children.length; i++) {
            var child = children[i];
            child.draw(context);
          }
          return this;
        },
        getCount: function getCount() {
          return this.get('children').length;
        },
        sort: function sort() {
          var children = this.get('children');
          // 稳定排序
          Util.each(children, function (child, index) {
            child[INDEX] = index;
            return child;
          });

          children.sort(getComparer(function (obj1, obj2) {
            return obj1.get('zIndex') - obj2.get('zIndex');
          }));

          return this;
        },
        find: function find(id) {
          return this.findBy(function (item) {
            return item.get('id') === id;
          });
        },

        /**
         * 根据查找函数查找分组或者图形
         * @param  {Function} fn 匹配函数
         * @return {Canvas.Base} 分组或者图形
         */
        findBy: function findBy(fn) {
          var children = this.get('children');
          var rst = null;

          Util.each(children, function (item) {
            if (fn(item)) {
              rst = item;
            } else if (item.findBy) {
              rst = item.findBy(fn);
            }
            if (rst) {
              return false;
            }
          });
          return rst;
        },
        findAllBy: function findAllBy(fn) {
          var children = this.get('children');
          var rst = [];
          var childRst = [];
          Util.each(children, function (item) {
            if (fn(item)) {
              rst.push(item);
            }
            if (item.findAllBy) {
              childRst = item.findAllBy(fn);
              rst = rst.concat(childRst);
            }
          });
          return rst;
        },

        /**
         * 根据x，y轴坐标获取对应的图形
         * @param  {Number} x x坐标
         * @param  {Number} y y坐标
         * @return {Object}  最上面的图形
         */
        getShape: function getShape(x, y) {
          var self = this;
          var clip = self.__attrs.clip;
          var children = self.__cfg.children;
          var rst = void 0;
          if (clip) {
            if (clip.inside(x, y)) {
              rst = find(children, x, y);
            }
          } else {
            rst = find(children, x, y);
          }
          return rst;
        },
        clearTotalMatrix: function clearTotalMatrix() {
          var m = this.get('totalMatrix');
          if (m) {
            this.setSilent('totalMatrix', null);
            var children = this.__cfg.children;
            for (var i = 0; i < children.length; i++) {
              var child = children[i];
              child.clearTotalMatrix();
            }
          }
        },
        clear: function clear() {
          var children = this.get('children');

          while (children.length !== 0) {
            children[children.length - 1].remove();
          }
          return this;
        },
        destroy: function destroy() {
          if (this.get('destroyed')) {
            return;
          }
          this.clear();
          Group.superclass.destroy.call(this);
        }
      });

      module.exports = Group;

      /***/
    },
    /* 88 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var Attribute = __webpack_require__(228);
      var Transform = __webpack_require__(229);
      var Animate = __webpack_require__(233);
      var Format = __webpack_require__(97);
      var EventEmitter = __webpack_require__(261);

      var SHAPE_ATTRS = ['fillStyle', 'font', 'globalAlpha', 'lineCap', 'lineWidth', 'lineJoin', 'miterLimit', 'shadowBlur', 'shadowColor', 'shadowOffsetX', 'shadowOffsetY', 'strokeStyle', 'textAlign', 'textBaseline', 'lineDash'];

      var Element = function Element(cfg) {
        this.__cfg = {
          zIndex: 0,
          capture: true,
          visible: true,
          destroyed: false
        }; // 配置存放地

        Util.assign(this.__cfg, this.getDefaultCfg(), cfg); // Element.CFG不合并，提升性能 合并默认配置，用户配置->继承默认配置->Element默认配置
        this.initAttrs(this.__cfg.attrs); // 初始化绘图属性
        this.initTransform(); // 初始化变换
        this.init(); // 类型初始化
      };

      Element.CFG = {
        /**
         * 唯一标示
         * @type {Number}
         */
        id: null,
        /**
         * Z轴的层叠关系，Z值越大离用户越近
         * @type {Number}
         */
        zIndex: 0,
        /**
         * Canvas对象
         * @type: {Object}
         */
        canvas: null,
        /**
         * 父元素指针
         * @type {Object}
         */
        parent: null,
        /**
         * 用来设置当前对象是否能被捕捉
         * true 能
         * false 不能
         * 对象默认是都可以被捕捉的, 当capture为false时，group.getShape(x, y)方法无法获得该元素
         * 通过将不必要捕捉的元素的该属性设置成false, 来提高捕捉性能
         * @type {Boolean}
         **/
        capture: true,
        /**
         * 画布的上下文
         * @type {Object}
         */
        context: null,
        /**
         * 是否显示
         * @type {Boolean}
         */
        visible: true,
        /**
         * 是否被销毁
         * @type: {Boolean}
         */
        destroyed: false
      };

      Util.augment(Element, Attribute, Transform, EventEmitter, Animate, {
        init: function init() {
          this.setSilent('animable', true);
          this.setSilent('animating', false); // 初始时不处于动画状态
          var attrs = this.__attrs;
          if (attrs && attrs.rotate) {
            this.rotateAtStart(attrs.rotate);
          }
        },
        getParent: function getParent() {
          return this.get('parent');
        },

        /**
         * 获取默认的配置信息
         * @protected
         * @return {Object} 默认的属性
         */
        getDefaultCfg: function getDefaultCfg() {
          return {};
        },
        set: function set(name, value) {
          var m = '__set' + Util.upperFirst(name);

          if (this[m]) {
            value = this[m](value);
          }
          this.__cfg[name] = value;
          return this;
        },
        setSilent: function setSilent(name, value) {
          this.__cfg[name] = value;
        },
        get: function get(name) {
          return this.__cfg[name];
        },
        draw: function draw(context) {
          if (this.get('destroyed')) {
            return;
          }
          if (this.get('visible')) {
            this.setContext(context);
            this.drawInner(context);
            this.restoreContext(context);
          }
        },
        setContext: function setContext(context) {
          var clip = this.__attrs.clip;
          context.save();
          if (clip) {
            // context.save();
            clip.resetTransform(context);
            clip.createPath(context);
            context.clip();
            // context.restore();
          }
          this.resetContext(context);
          this.resetTransform(context);
        },
        restoreContext: function restoreContext(context) {
          context.restore();
        },
        resetContext: function resetContext(context) {
          var elAttrs = this.__attrs;
          // var canvas = this.get('canvas');
          if (!this.isGroup) {
            // canvas.registShape(this); // 快速拾取方案暂时不执行
            for (var k in elAttrs) {
              if (SHAPE_ATTRS.indexOf(k) > -1) {
                // 非canvas属性不附加
                var v = elAttrs[k];
                if (k === 'fillStyle') {
                  v = Format.parseStyle(v, this);
                }
                if (k === 'strokeStyle') {
                  v = Format.parseStyle(v, this);
                }
                if (k === 'lineDash' && context.setLineDash) {
                  if (Util.isArray(v)) {
                    context.setLineDash(v);
                  } else if (Util.isString(v)) {
                    context.setLineDash(v.split(' '));
                  }
                } else {
                  context[k] = v;
                }
              }
            }
          }
        },
        drawInner: function drawInner() /* context */{},
        show: function show() {
          this.set('visible', true);
          return this;
        },
        hide: function hide() {
          this.set('visible', false);
          return this;
        },
        remove: function remove(destroy) {
          if (destroy === undefined) {
            destroy = true;
          }

          if (this.get('parent')) {
            var parent = this.get('parent');
            var children = parent.get('children');
            Util.remove(children, this);
          }

          if (destroy) {
            this.destroy();
          }

          return this;
        },
        destroy: function destroy() {
          var destroyed = this.get('destroyed');

          if (destroyed) {
            return;
          }
          this.__cfg = {};
          this.__attrs = null;
          this.removeEvent(); // 移除所有的事件
          this.set('destroyed', true);
        },
        __setZIndex: function __setZIndex(zIndex) {
          this.__cfg.zIndex = zIndex;

          if (!Util.isNil(this.get('parent'))) {
            this.get('parent').sort();
          }
          return zIndex;
        },
        __setAttrs: function __setAttrs(attrs) {
          this.attr(attrs);
          return attrs;
        },
        setZIndex: function setZIndex(zIndex) {
          this.__cfg.zIndex = zIndex;
          return zIndex;
        },
        clone: function clone() {
          return Util.clone(this);
        },
        getBBox: function getBBox() {
          return {
            minX: 0,
            maxX: 0,
            minY: 0,
            maxY: 0
          };
        }
      });

      module.exports = Element;

      /***/
    },
    /* 89 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "a", function () {
        return deg2rad;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
        return rad2deg;
      });
      var deg2rad = Math.PI / 180;
      var rad2deg = 180 / Math.PI;

      /***/
    },
    /* 90 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "b", function () {
        return rgbBasis;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
        return rgbBasisClosed;
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(14);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__basis__ = __webpack_require__(51);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__basisClosed__ = __webpack_require__(91);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__color__ = __webpack_require__(19);

      /* harmony default export */__webpack_exports__["a"] = function rgbGamma(y) {
        var color = Object(__WEBPACK_IMPORTED_MODULE_3__color__["b" /* gamma */])(y);

        function rgb(start, end) {
          var r = color((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(start)).r, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(end)).r),
              g = color(start.g, end.g),
              b = color(start.b, end.b),
              opacity = Object(__WEBPACK_IMPORTED_MODULE_3__color__["a" /* default */])(start.opacity, end.opacity);
          return function (t) {
            start.r = r(t);
            start.g = g(t);
            start.b = b(t);
            start.opacity = opacity(t);
            return start + "";
          };
        }

        rgb.gamma = rgbGamma;

        return rgb;
      }(1);

      function rgbSpline(spline) {
        return function (colors) {
          var n = colors.length,
              r = new Array(n),
              g = new Array(n),
              b = new Array(n),
              i,
              color;
          for (i = 0; i < n; ++i) {
            color = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(colors[i]);
            r[i] = color.r || 0;
            g[i] = color.g || 0;
            b[i] = color.b || 0;
          }
          r = spline(r);
          g = spline(g);
          b = spline(b);
          color.opacity = 1;
          return function (t) {
            color.r = r(t);
            color.g = g(t);
            color.b = b(t);
            return color + "";
          };
        };
      }

      var rgbBasis = rgbSpline(__WEBPACK_IMPORTED_MODULE_1__basis__["b" /* default */]);
      var rgbBasisClosed = rgbSpline(__WEBPACK_IMPORTED_MODULE_2__basisClosed__["a" /* default */]);

      /***/
    },
    /* 91 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0__basis__ = __webpack_require__(51);

      /* harmony default export */__webpack_exports__["a"] = function (values) {
        var n = values.length;
        return function (t) {
          var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
              v0 = values[(i + n - 1) % n],
              v1 = values[i % n],
              v2 = values[(i + 1) % n],
              v3 = values[(i + 2) % n];
          return Object(__WEBPACK_IMPORTED_MODULE_0__basis__["a" /* basis */])((t - i / n) * n, v0, v1, v2, v3);
        };
      };

      /***/
    },
    /* 92 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony default export */
      __webpack_exports__["a"] = function (x) {
        return function () {
          return x;
        };
      };

      /***/
    },
    /* 93 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0__value__ = __webpack_require__(48);

      /* harmony default export */__webpack_exports__["a"] = function (a, b) {
        var nb = b ? b.length : 0,
            na = a ? Math.min(nb, a.length) : 0,
            x = new Array(na),
            c = new Array(nb),
            i;

        for (i = 0; i < na; ++i) {
          x[i] = Object(__WEBPACK_IMPORTED_MODULE_0__value__["a" /* default */])(a[i], b[i]);
        }for (; i < nb; ++i) {
          c[i] = b[i];
        }return function (t) {
          for (i = 0; i < na; ++i) {
            c[i] = x[i](t);
          }return c;
        };
      };

      /***/
    },
    /* 94 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony default export */
      __webpack_exports__["a"] = function (a, b) {
        var d = new Date();
        return a = +a, b -= a, function (t) {
          return d.setTime(a + b * t), d;
        };
      };

      /***/
    },
    /* 95 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0__value__ = __webpack_require__(48);
      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      };

      /* harmony default export */__webpack_exports__["a"] = function (a, b) {
        var i = {},
            c = {},
            k;

        if (a === null || (typeof a === "undefined" ? "undefined" : _typeof(a)) !== "object") a = {};
        if (b === null || (typeof b === "undefined" ? "undefined" : _typeof(b)) !== "object") b = {};

        for (k in b) {
          if (k in a) {
            i[k] = Object(__WEBPACK_IMPORTED_MODULE_0__value__["a" /* default */])(a[k], b[k]);
          } else {
            c[k] = b[k];
          }
        }

        return function (t) {
          for (k in i) {
            c[k] = i[k](t);
          }return c;
        };
      };

      /***/
    },
    /* 96 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(29);

      var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
          reB = new RegExp(reA.source, "g");

      function zero(b) {
        return function () {
          return b;
        };
      }

      function one(b) {
        return function (t) {
          return b(t) + "";
        };
      }

      /* harmony default export */__webpack_exports__["a"] = function (a, b) {
        var bi = reA.lastIndex = reB.lastIndex = 0,

        // scan index for next number in b
        am,

        // current match in a
        bm,

        // current match in b
        bs,

        // string preceding current number in b, if any
        i = -1,

        // index in s
        s = [],

        // string constants and placeholders
        q = []; // number interpolators

        // Coerce inputs to strings.
        a = a + "", b = b + "";

        // Interpolate pairs of numbers in a & b.
        while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
          if ((bs = bm.index) > bi) {
            // a string precedes the next number in b
            bs = b.slice(bi, bs);
            if (s[i]) s[i] += bs; // coalesce with previous string
            else s[++i] = bs;
          }
          if ((am = am[0]) === (bm = bm[0])) {
            // numbers in a & b match
            if (s[i]) s[i] += bm; // coalesce with previous string
            else s[++i] = bm;
          } else {
            // interpolate non-matching numbers
            s[++i] = null;
            q.push({ i: i, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(am, bm) });
          }
          bi = reB.lastIndex;
        }

        // Add remains of b.
        if (bi < b.length) {
          bs = b.slice(bi);
          if (s[i]) s[i] += bs; // coalesce with previous string
          else s[++i] = bs;
        }

        // Special optimization for only a single match.
        // Otherwise, interpolate each of the numbers and rejoin the string.
        return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
          for (var i = 0, o; i < b; ++i) {
            s[(o = q[i]).i] = o.x(t);
          }return s.join("");
        });
      };

      /***/
    },
    /* 97 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);

      var regexTags = /[MLHVQTCSAZ]([^MLHVQTCSAZ]*)/ig;
      var regexDot = /[^\s\,]+/ig;
      var regexLG = /^l\s*\(\s*([\d.]+)\s*\)\s*(.*)/i;
      var regexRG = /^r\s*\(\s*([\d.]+)\s*,\s*([\d.]+)\s*,\s*([\d.]+)\s*\)\s*(.*)/i;
      var regexPR = /^p\s*\(\s*([axyn])\s*\)\s*(.*)/i;
      var regexColorStop = /[\d.]+:(#[^\s]+|[^\)]+\))/ig;
      var numColorCache = {};

      function addStop(steps, gradient) {
        var arr = steps.match(regexColorStop);
        Util.each(arr, function (item) {
          item = item.split(':');
          gradient.addColorStop(item[0], item[1]);
        });
      }

      function parseLineGradient(color, self) {
        var arr = regexLG.exec(color);
        var angle = Util.mod(Util.toRadian(parseFloat(arr[1])), Math.PI * 2);
        var steps = arr[2];
        var box = self.getBBox();
        var start = void 0;
        var end = void 0;

        if (angle >= 0 && angle < 0.5 * Math.PI) {
          start = {
            x: box.minX,
            y: box.minY
          };
          end = {
            x: box.maxX,
            y: box.maxY
          };
        } else if (0.5 * Math.PI <= angle && angle < Math.PI) {
          start = {
            x: box.maxX,
            y: box.minY
          };
          end = {
            x: box.minX,
            y: box.maxY
          };
        } else if (Math.PI <= angle && angle < 1.5 * Math.PI) {
          start = {
            x: box.maxX,
            y: box.maxY
          };
          end = {
            x: box.minX,
            y: box.minY
          };
        } else {
          start = {
            x: box.minX,
            y: box.maxY
          };
          end = {
            x: box.maxX,
            y: box.minY
          };
        }

        var tanTheta = Math.tan(angle);
        var tanTheta2 = tanTheta * tanTheta;

        var x = (end.x - start.x + tanTheta * (end.y - start.y)) / (tanTheta2 + 1) + start.x;
        var y = tanTheta * (end.x - start.x + tanTheta * (end.y - start.y)) / (tanTheta2 + 1) + start.y;
        var context = self.get('context');
        var gradient = context.createLinearGradient(start.x, start.y, x, y);
        addStop(steps, gradient);
        return gradient;
      }

      function parseRadialGradient(color, self) {
        var arr = regexRG.exec(color);
        var fx = parseFloat(arr[1]);
        var fy = parseFloat(arr[2]);
        var fr = parseFloat(arr[3]);
        var steps = arr[4];
        var box = self.getBBox();
        var context = self.get('context');
        var width = box.maxX - box.minX;
        var height = box.maxY - box.minY;
        var r = Math.sqrt(width * width + height * height) / 2;
        var gradient = context.createRadialGradient(box.minX + width * fx, box.minY + height * fy, fr * r, box.minX + width / 2, box.minY + height / 2, r);
        addStop(steps, gradient);
        return gradient;
      }

      function parsePattern(color, self) {
        if (self.get('patternSource') && self.get('patternSource') === color) {
          return self.get('pattern');
        }
        var pattern = void 0;
        var img = void 0;
        var arr = regexPR.exec(color);
        var repeat = arr[1];
        var source = arr[2];

        // Function to be called when pattern loads
        function onload() {
          // Create pattern
          var context = self.get('context');
          pattern = context.createPattern(img, repeat);
          self.setSilent('pattern', pattern); // be a cache
          self.setSilent('patternSource', color);
        }

        switch (repeat) {
          case 'a':
            repeat = 'repeat';
            break;
          case 'x':
            repeat = 'repeat-x';
            break;
          case 'y':
            repeat = 'repeat-y';
            break;
          case 'n':
            repeat = 'no-repeat';
            break;
          default:
            repeat = 'no-repeat';
        }

        img = new Image();
        // If source URL is not a data URL
        if (!source.match(/^data:/i)) {
          // Set crossOrigin for this image
          img.crossOrigin = 'Anonymous';
        }
        img.src = source;

        if (img.complete) {
          onload();
        } else {
          img.onload = onload;
          // Fix onload() bug in IE9
          img.src = img.src;
        }

        return pattern;
      }

      module.exports = {
        parsePath: function parsePath(path) {
          path = path || [];
          if (Util.isArray(path)) {
            return path;
          }

          if (Util.isString(path)) {
            path = path.match(regexTags);
            Util.each(path, function (item, index) {
              item = item.match(regexDot);
              if (item[0].length > 1) {
                var tag = item[0].charAt(0);
                item.splice(1, 0, item[0].substr(1));
                item[0] = tag;
              }
              Util.each(item, function (sub, i) {
                if (!isNaN(sub)) {
                  item[i] = +sub;
                }
              });
              path[index] = item;
            });
            return path;
          }
        },
        parseStyle: function parseStyle(color, self) {
          if (Util.isString(color)) {
            if (color[1] === '(' || color[2] === '(') {
              if (color[0] === 'l') {
                // regexLG.test(color)
                return parseLineGradient(color, self);
              } else if (color[0] === 'r') {
                // regexRG.test(color)
                return parseRadialGradient(color, self);
              } else if (color[0] === 'p') {
                // regexPR.test(color)
                return parsePattern(color, self);
              }
            }
            return color;
          }
        },
        numberToColor: function numberToColor(num) {
          // 增加缓存
          var color = numColorCache[num];
          if (!color) {
            var str = num.toString(16);
            for (var i = str.length; i < 6; i++) {
              str = '0' + str;
            }
            color = '#' + str;
            numColorCache[num] = color;
          }
          return color;
        }
      };

      /***/
    },
    /* 98 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var Shape = __webpack_require__(1);
      var Inside = __webpack_require__(2);

      var Rect = function Rect(cfg) {
        Rect.superclass.constructor.call(this, cfg);
      };

      Rect.ATTRS = {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
        radius: 0,
        lineWidth: 1
      };

      Util.extend(Rect, Shape);

      Util.augment(Rect, {
        canFill: true,
        canStroke: true,
        type: 'rect',
        getDefaultAttrs: function getDefaultAttrs() {
          return {
            lineWidth: 1,
            radius: 0
          };
        },
        calculateBox: function calculateBox() {
          var self = this;
          var attrs = self.__attrs;
          var x = attrs.x;
          var y = attrs.y;
          var width = attrs.width;
          var height = attrs.height;
          var lineWidth = attrs.lineWidth;

          var halfWidth = lineWidth / 2;
          return {
            minX: x - halfWidth,
            minY: y - halfWidth,
            maxX: x + width + halfWidth,
            maxY: y + height + halfWidth
          };
        },
        isPointInPath: function isPointInPath(x, y) {
          var self = this;
          var fill = self.hasFill();
          var stroke = self.hasStroke();

          if (fill && stroke) {
            return self.__isPointInFill(x, y) || self.__isPointInStroke(x, y);
          }

          if (fill) {
            return self.__isPointInFill(x, y);
          }

          if (stroke) {
            return self.__isPointInStroke(x, y);
          }

          return false;
        },
        __isPointInFill: function __isPointInFill(x, y) {
          var context = this.get('context');

          if (!context) return false;
          this.createPath();
          return context.isPointInPath(x, y);
        },
        __isPointInStroke: function __isPointInStroke(x, y) {
          var self = this;
          var attrs = self.__attrs;
          var rx = attrs.x;
          var ry = attrs.y;
          var width = attrs.width;
          var height = attrs.height;
          var radius = attrs.radius;
          var lineWidth = attrs.lineWidth;

          if (radius === 0) {
            var halfWidth = lineWidth / 2;
            return Inside.line(rx - halfWidth, ry, rx + width + halfWidth, ry, lineWidth, x, y) || Inside.line(rx + width, ry - halfWidth, rx + width, ry + height + halfWidth, lineWidth, x, y) || Inside.line(rx + width + halfWidth, ry + height, rx - halfWidth, ry + height, lineWidth, x, y) || Inside.line(rx, ry + height + halfWidth, rx, ry - halfWidth, lineWidth, x, y);
          }

          return Inside.line(rx + radius, ry, rx + width - radius, ry, lineWidth, x, y) || Inside.line(rx + width, ry + radius, rx + width, ry + height - radius, lineWidth, x, y) || Inside.line(rx + width - radius, ry + height, rx + radius, ry + height, lineWidth, x, y) || Inside.line(rx, ry + height - radius, rx, ry + radius, lineWidth, x, y) || Inside.arcline(rx + width - radius, ry + radius, radius, 1.5 * Math.PI, 2 * Math.PI, false, lineWidth, x, y) || Inside.arcline(rx + width - radius, ry + height - radius, radius, 0, 0.5 * Math.PI, false, lineWidth, x, y) || Inside.arcline(rx + radius, ry + height - radius, radius, 0.5 * Math.PI, Math.PI, false, lineWidth, x, y) || Inside.arcline(rx + radius, ry + radius, radius, Math.PI, 1.5 * Math.PI, false, lineWidth, x, y);
        },
        createPath: function createPath(context) {
          var self = this;
          var attrs = self.__attrs;
          var x = attrs.x;
          var y = attrs.y;
          var width = attrs.width;
          var height = attrs.height;
          var radius = attrs.radius;
          context = context || self.get('context');

          context.beginPath();
          if (radius === 0) {
            // 改成原生的rect方法
            context.rect(x, y, width, height);
          } else {
            context.moveTo(x + radius, y);
            context.lineTo(x + width - radius, y);
            context.arc(x + width - radius, y + radius, radius, -Math.PI / 2, 0, false);
            context.lineTo(x + width, y + height - radius);
            context.arc(x + width - radius, y + height - radius, radius, 0, Math.PI / 2, false);
            context.lineTo(x + radius, y + height);
            context.arc(x + radius, y + height - radius, radius, Math.PI / 2, Math.PI, false);
            context.lineTo(x, y + radius);
            context.arc(x + radius, y + radius, radius, Math.PI, Math.PI * 3 / 2, false);
            context.closePath();
          }
        }
      });

      module.exports = Rect;

      /***/
    },
    /* 99 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var Shape = __webpack_require__(1);
      var Inside = __webpack_require__(2);

      var Circle = function Circle(cfg) {
        Circle.superclass.constructor.call(this, cfg);
      };

      Circle.ATTRS = {
        x: 0,
        y: 0,
        r: 0,
        lineWidth: 1
      };

      Util.extend(Circle, Shape);

      Util.augment(Circle, {
        canFill: true,
        canStroke: true,
        type: 'circle',
        getDefaultAttrs: function getDefaultAttrs() {
          return {
            lineWidth: 1
          };
        },
        calculateBox: function calculateBox() {
          var attrs = this.__attrs;
          var cx = attrs.x;
          var cy = attrs.y;
          var r = attrs.r;
          var lineWidth = attrs.lineWidth;
          var halfWidth = lineWidth / 2 + r;
          return {
            minX: cx - halfWidth,
            minY: cy - halfWidth,
            maxX: cx + halfWidth,
            maxY: cy + halfWidth
          };
        },
        isPointInPath: function isPointInPath(x, y) {
          var fill = this.hasFill();
          var stroke = this.hasStroke();
          if (fill && stroke) {
            return this.__isPointInFill(x, y) || this.__isPointInStroke(x, y);
          }

          if (fill) {
            return this.__isPointInFill(x, y);
          }

          if (stroke) {
            return this.__isPointInStroke(x, y);
          }

          return false;
        },
        __isPointInFill: function __isPointInFill(x, y) {
          var attrs = this.__attrs;
          var cx = attrs.x;
          var cy = attrs.y;
          var r = attrs.r;

          return Inside.circle(cx, cy, r, x, y);
        },
        __isPointInStroke: function __isPointInStroke(x, y) {
          var attrs = this.__attrs;
          var cx = attrs.x;
          var cy = attrs.y;
          var r = attrs.r;
          var lineWidth = attrs.lineWidth;

          return Inside.arcline(cx, cy, r, 0, Math.PI * 2, false, lineWidth, x, y);
        },
        createPath: function createPath(context) {
          var attrs = this.__attrs;
          var cx = attrs.x;
          var cy = attrs.y;
          var r = attrs.r;
          context = context || self.get('context');

          context.beginPath();
          context.arc(cx, cy, r, 0, Math.PI * 2, false);
        }
      });

      module.exports = Circle;

      /***/
    },
    /* 100 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var Shape = __webpack_require__(1);
      var Inside = __webpack_require__(2);
      var mat3 = __webpack_require__(3).mat3;
      var vec3 = __webpack_require__(3).vec3;

      var Ellipse = function Ellipse(cfg) {
        Ellipse.superclass.constructor.call(this, cfg);
      };

      Ellipse.ATTRS = {
        x: 0,
        y: 0,
        rx: 1,
        ry: 1,
        lineWidth: 1
      };

      Util.extend(Ellipse, Shape);

      Util.augment(Ellipse, {
        canFill: true,
        canStroke: true,
        type: 'ellipse',
        getDefaultAttrs: function getDefaultAttrs() {
          return {
            lineWidth: 1
          };
        },
        calculateBox: function calculateBox() {
          var attrs = this.__attrs;
          var cx = attrs.x;
          var cy = attrs.y;
          var rx = attrs.rx;
          var ry = attrs.ry;
          var lineWidth = attrs.lineWidth;
          var halfXWidth = rx + lineWidth / 2;
          var halfYWidth = ry + lineWidth / 2;

          return {
            minX: cx - halfXWidth,
            minY: cy - halfYWidth,
            maxX: cx + halfXWidth,
            maxY: cy + halfYWidth
          };
        },
        isPointInPath: function isPointInPath(x, y) {
          var fill = this.hasFill();
          var stroke = this.hasStroke();

          if (fill && stroke) {
            return this.__isPointInFill(x, y) || this.__isPointInStroke(x, y);
          }

          if (fill) {
            return this.__isPointInFill(x, y);
          }

          if (stroke) {
            return this.__isPointInStroke(x, y);
          }

          return false;
        },
        __isPointInFill: function __isPointInFill(x, y) {
          var attrs = this.__attrs;
          var cx = attrs.x;
          var cy = attrs.y;
          var rx = attrs.rx;
          var ry = attrs.ry;

          var r = rx > ry ? rx : ry;
          var scaleX = rx > ry ? 1 : rx / ry;
          var scaleY = rx > ry ? ry / rx : 1;

          var p = [x, y, 1];
          var m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
          mat3.scale(m, m, [scaleX, scaleY]);
          mat3.translate(m, m, [cx, cy]);
          var inm = mat3.invert([], m);
          vec3.transformMat3(p, p, inm);

          return Inside.circle(0, 0, r, p[0], p[1]);
        },
        __isPointInStroke: function __isPointInStroke(x, y) {
          var attrs = this.__attrs;
          var cx = attrs.x;
          var cy = attrs.y;
          var rx = attrs.rx;
          var ry = attrs.ry;
          var lineWidth = attrs.lineWidth;

          var r = rx > ry ? rx : ry;
          var scaleX = rx > ry ? 1 : rx / ry;
          var scaleY = rx > ry ? ry / rx : 1;
          var p = [x, y, 1];
          var m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
          mat3.scale(m, m, [scaleX, scaleY]);
          mat3.translate(m, m, [cx, cy]);
          var inm = mat3.invert([], m);
          vec3.transformMat3(p, p, inm);

          return Inside.arcline(0, 0, r, 0, Math.PI * 2, false, lineWidth, p[0], p[1]);
        },
        createPath: function createPath(context) {
          var attrs = this.__attrs;
          var cx = attrs.x;
          var cy = attrs.y;
          var rx = attrs.rx;
          var ry = attrs.ry;

          context = context || self.get('context');
          var r = rx > ry ? rx : ry;
          var scaleX = rx > ry ? 1 : rx / ry;
          var scaleY = rx > ry ? ry / rx : 1;

          var m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
          mat3.scale(m, m, [scaleX, scaleY]);
          mat3.translate(m, m, [cx, cy]);
          context.beginPath();
          context.save();
          context.transform(m[0], m[1], m[3], m[4], m[6], m[7]);
          context.arc(0, 0, r, 0, Math.PI * 2);
          context.restore();
          context.closePath();
        }
      });

      module.exports = Ellipse;

      /***/
    },
    /* 101 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var Shape = __webpack_require__(1);
      var PathSegment = __webpack_require__(263);
      var Format = __webpack_require__(97);
      var Arrow = __webpack_require__(15);
      var PathUtil = __webpack_require__(46);
      var CubicMath = __webpack_require__(30);

      var Path = function Path(cfg) {
        Path.superclass.constructor.call(this, cfg);
      };

      Path.ATTRS = {
        path: null,
        lineWidth: 1,
        curve: null, // 曲线path
        tCache: null,
        startArrow: false,
        endArrow: false
      };

      Util.extend(Path, Shape);

      Util.augment(Path, {
        canFill: true,
        canStroke: true,
        type: 'path',
        getDefaultAttrs: function getDefaultAttrs() {
          return {
            lineWidth: 1,
            startArrow: false,
            endArrow: false
          };
        },
        __afterSetAttrPath: function __afterSetAttrPath(path) {
          var self = this;
          if (Util.isNil(path)) {
            self.setSilent('segments', null);
            self.setSilent('box', undefined);
            return;
          }
          var pathArray = Format.parsePath(path);
          var preSegment = void 0;
          var segments = [];

          if (!Util.isArray(pathArray) || pathArray.length === 0 || pathArray[0][0] !== 'M' && pathArray[0][0] !== 'm') {
            return;
          }
          var count = pathArray.length;
          for (var i = 0; i < pathArray.length; i++) {
            var item = pathArray[i];
            preSegment = new PathSegment(item, preSegment, i === count - 1);
            segments.push(preSegment);
          }
          self.setSilent('segments', segments);
          self.set('tCache', null);
          this.setSilent('box', null);
        },
        __afterSetAttrAll: function __afterSetAttrAll(objs) {
          if (objs.path) {
            this.__afterSetAttrPath(objs.path);
          }
        },
        calculateBox: function calculateBox() {
          var self = this;
          var attrs = self.__attrs;
          var lineWidth = attrs.lineWidth;
          var lineAppendWidth = attrs.lineAppendWidth || 0;
          var segments = self.get('segments');

          if (!segments) {
            return null;
          }
          lineWidth += lineAppendWidth;
          var minX = Infinity;
          var maxX = -Infinity;
          var minY = Infinity;
          var maxY = -Infinity;
          Util.each(segments, function (segment) {
            segment.getBBox(lineWidth);
            var box = segment.box;
            if (box) {
              if (box.minX < minX) {
                minX = box.minX;
              }

              if (box.maxX > maxX) {
                maxX = box.maxX;
              }

              if (box.minY < minY) {
                minY = box.minY;
              }

              if (box.maxY > maxY) {
                maxY = box.maxY;
              }
            }
          });
          return {
            minX: minX,
            minY: minY,
            maxX: maxX,
            maxY: maxY
          };
        },
        isPointInPath: function isPointInPath(x, y) {
          var self = this;
          var fill = self.hasFill();
          var stroke = self.hasStroke();

          if (fill && stroke) {
            return self.__isPointInFill(x, y) || self.__isPointInStroke(x, y);
          }

          if (fill) {
            return self.__isPointInFill(x, y);
          }

          if (stroke) {
            return self.__isPointInStroke(x, y);
          }

          return false;
        },
        __isPointInFill: function __isPointInFill(x, y) {
          var self = this;
          var context = self.get('context');
          if (!context) return undefined;
          self.createPath();
          return context.isPointInPath(x, y);
        },
        __isPointInStroke: function __isPointInStroke(x, y) {
          var self = this;
          var segments = self.get('segments');
          if (!Util.isEmpty(segments)) {
            var attrs = self.__attrs;
            var lineWidth = attrs.lineWidth;
            var appendWidth = attrs.lineAppendWidth || 0;
            lineWidth += appendWidth;
            for (var i = 0, l = segments.length; i < l; i++) {
              if (segments[i].isInside(x, y, lineWidth)) {
                return true;
              }
            }
          }

          return false;
        },
        __setTcache: function __setTcache() {
          var totalLength = 0;
          var tempLength = 0;
          var tCache = [];
          var segmentT = void 0;
          var segmentL = void 0;
          var segmentN = void 0;
          var l = void 0;
          var curve = this.curve;

          if (!curve) {
            return;
          }

          Util.each(curve, function (segment, i) {
            segmentN = curve[i + 1];
            l = segment.length;
            if (segmentN) {
              totalLength += CubicMath.len(segment[l - 2], segment[l - 1], segmentN[1], segmentN[2], segmentN[3], segmentN[4], segmentN[5], segmentN[6]);
            }
          });

          Util.each(curve, function (segment, i) {
            segmentN = curve[i + 1];
            l = segment.length;
            if (segmentN) {
              segmentT = [];
              segmentT[0] = tempLength / totalLength;
              segmentL = CubicMath.len(segment[l - 2], segment[l - 1], segmentN[1], segmentN[2], segmentN[3], segmentN[4], segmentN[5], segmentN[6]);
              tempLength += segmentL;
              segmentT[1] = tempLength / totalLength;
              tCache.push(segmentT);
            }
          });

          this.tCache = tCache;
        },
        __calculateCurve: function __calculateCurve() {
          var self = this;
          var attrs = self.__attrs;
          var path = attrs.path;
          this.curve = PathUtil.pathTocurve(path);
        },
        getPoint: function getPoint(t) {
          var tCache = this.tCache;
          var subt = void 0;
          var index = void 0;

          if (!tCache) {
            this.__calculateCurve();
            this.__setTcache();
            tCache = this.tCache;
          }

          var curve = this.curve;

          if (!tCache) {
            if (curve) {
              return {
                x: curve[0][1],
                y: curve[0][2]
              };
            }
            return null;
          }
          Util.each(tCache, function (v, i) {
            if (t >= v[0] && t <= v[1]) {
              subt = (t - v[0]) / (v[1] - v[0]);
              index = i;
            }
          });
          var seg = curve[index];
          if (Util.isNil(seg) || Util.isNil(index)) {
            return null;
          }
          var l = seg.length;
          var nextSeg = curve[index + 1];
          return {
            x: CubicMath.at(seg[l - 2], nextSeg[1], nextSeg[3], nextSeg[5], 1 - subt),
            y: CubicMath.at(seg[l - 1], nextSeg[2], nextSeg[4], nextSeg[6], 1 - subt)
          };
        },
        createPath: function createPath(context) {
          var self = this;
          var attrs = self.__attrs;
          var segments = self.get('segments');

          if (!Util.isArray(segments)) return;

          context = context || self.get('context');

          context.beginPath();

          var path = attrs.path;
          var startPoint = void 0;
          var endPoint = void 0;
          var closed = false;
          if (path[path.length - 1] === 'z' || path[path.length - 1] === 'Z' || attrs.fill) {
            // 闭合路径不绘制箭头
            closed = true;
          }

          var segmentsLen = segments.length;
          if (segmentsLen > 1 && !closed) {
            startPoint = segments[0].endPoint;
            endPoint = segments[1].endPoint;
            Arrow.addStartArrow(context, attrs, endPoint.x, endPoint.y, startPoint.x, startPoint.y);
          }

          for (var i = 0, l = segmentsLen; i < l; i++) {
            segments[i].draw(context);
          }

          if (segmentsLen > 1 && !closed) {
            startPoint = segments[segmentsLen - 2].endPoint;
            endPoint = segments[segmentsLen - 1].endPoint;
            Arrow.addEndArrow(context, attrs, startPoint.x, startPoint.y, endPoint.x, endPoint.y);
          }
        }
      });

      module.exports = Path;

      /***/
    },
    /* 102 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var Shape = __webpack_require__(1);
      var Inside = __webpack_require__(2);

      var CText = function CText(cfg) {
        CText.superclass.constructor.call(this, cfg);
      };

      CText.ATTRS = {
        x: 0,
        y: 0,
        text: null,
        fontSize: 12,
        fontFamily: 'sans-serif',
        fontStyle: 'normal',
        fontWeight: 'normal',
        fontVariant: 'normal',
        textAlign: 'start',
        textBaseline: 'bottom',
        lineHeight: null,
        textArr: null
      };

      Util.extend(CText, Shape);

      Util.augment(CText, {
        canFill: true,
        canStroke: true,
        type: 'text',
        getDefaultAttrs: function getDefaultAttrs() {
          return {
            lineWidth: 1,
            lineCount: 1,
            fontSize: 12,
            fontFamily: 'sans-serif',
            fontStyle: 'normal',
            fontWeight: 'normal',
            fontVariant: 'normal',
            textAlign: 'start',
            textBaseline: 'bottom'
          };
        },
        initTransform: function initTransform() {
          this.attr('matrix', [1, 0, 0, 0, 1, 0, 0, 0, 1]);
          var fontSize = this.__attrs.fontSize;
          if (fontSize && +fontSize < 12) {
            // 小于 12 像素的文本进行 scale 处理
            this.transform([['t', -1 * this.__attrs.x, -1 * this.__attrs.y], ['s', +fontSize / 12, +fontSize / 12], ['t', this.__attrs.x, this.__attrs.y]]);
          }
        },
        __assembleFont: function __assembleFont() {
          // var self = this;
          var attrs = this.__attrs;
          var fontSize = attrs.fontSize;
          var fontFamily = attrs.fontFamily;
          var fontWeight = attrs.fontWeight;
          var fontStyle = attrs.fontStyle; // self.attr('fontStyle');
          var fontVariant = attrs.fontVariant; // self.attr('fontVariant');
          // self.attr('font', [fontStyle, fontVariant, fontWeight, fontSize + 'px', fontFamily].join(' '));
          attrs.font = [fontStyle, fontVariant, fontWeight, fontSize + 'px', fontFamily].join(' ');
        },
        __afterSetAttrFontSize: function __afterSetAttrFontSize() {
          /* this.attr({
            height: this.__getTextHeight()
          }); */
          this.__assembleFont();
        },
        __afterSetAttrFontFamily: function __afterSetAttrFontFamily() {
          this.__assembleFont();
        },
        __afterSetAttrFontWeight: function __afterSetAttrFontWeight() {
          this.__assembleFont();
        },
        __afterSetAttrFontStyle: function __afterSetAttrFontStyle() {
          this.__assembleFont();
        },
        __afterSetAttrFontVariant: function __afterSetAttrFontVariant() {
          this.__assembleFont();
        },
        __afterSetAttrFont: function __afterSetAttrFont() {
          // this.attr('width', this.measureText());
        },
        __afterSetAttrText: function __afterSetAttrText() {
          var attrs = this.__attrs;
          var text = attrs.text;
          var textArr = void 0;
          if (Util.isString(text) && text.indexOf('\n') !== -1) {
            textArr = text.split('\n');
            var lineCount = textArr.length;
            attrs.lineCount = lineCount;
            attrs.textArr = textArr;
          }
          // attrs.height = this.__getTextHeight();
          // attrs.width = this.measureText();
        },
        __getTextHeight: function __getTextHeight() {
          var attrs = this.__attrs;
          var lineCount = attrs.lineCount;
          var fontSize = attrs.fontSize * 1;
          if (lineCount > 1) {
            var spaceingY = this.__getSpaceingY();
            return fontSize * lineCount + spaceingY * (lineCount - 1);
          }
          return fontSize;
        },

        // 计算浪费，效率低，待优化
        __afterSetAttrAll: function __afterSetAttrAll(objs) {
          var self = this;
          if ('fontSize' in objs || 'fontWeight' in objs || 'fontStyle' in objs || 'fontVariant' in objs || 'fontFamily' in objs) {
            self.__assembleFont();
          }

          if ('text' in objs) {
            self.__afterSetAttrText(objs.text);
          }
        },
        isHitBox: function isHitBox() {
          return false;
        },
        calculateBox: function calculateBox() {
          var self = this;
          var attrs = self.__attrs;
          var x = attrs.x;
          var y = attrs.y;
          var width = self.measureText(); // attrs.width
          if (!width) {
            // 如果width不存在，四点共其实点
            return {
              minX: x,
              minY: y,
              maxX: x,
              maxY: y
            };
          }
          var height = self.__getTextHeight(); // attrs.height
          var textAlign = attrs.textAlign;
          var textBaseline = attrs.textBaseline;
          var lineWidth = attrs.lineWidth;
          var point = {
            x: x,
            y: y - height
          };

          if (textAlign) {
            if (textAlign === 'end' || textAlign === 'right') {
              point.x -= width;
            } else if (textAlign === 'center') {
              point.x -= width / 2;
            }
          }

          if (textBaseline) {
            if (textBaseline === 'top') {
              point.y += height;
            } else if (textBaseline === 'middle') {
              point.y += height / 2;
            }
          }

          this.set('startPoint', point);
          var halfWidth = lineWidth / 2;
          return {
            minX: point.x - halfWidth,
            minY: point.y - halfWidth,
            maxX: point.x + width + halfWidth,
            maxY: point.y + height + halfWidth
          };
        },
        __getSpaceingY: function __getSpaceingY() {
          var attrs = this.__attrs;
          var lineHeight = attrs.lineHeight;
          var fontSize = attrs.fontSize * 1;
          return lineHeight ? lineHeight - fontSize : fontSize * 0.14;
        },
        isPointInPath: function isPointInPath(x, y) {
          var self = this;
          var box = self.getBBox();
          if (self.hasFill() || self.hasStroke()) {
            return Inside.box(box.minX, box.maxX, box.minY, box.maxY, x, y);
          }
        },
        drawInner: function drawInner(context) {
          var self = this;
          var attrs = self.__attrs;
          var text = attrs.text;
          if (!text) {
            return;
          }
          var textArr = attrs.textArr;
          var fontSize = attrs.fontSize * 1;
          var spaceingY = self.__getSpaceingY();
          var x = attrs.x;
          var y = attrs.y;
          var textBaseline = attrs.textBaseline;
          var height = void 0;
          if (textArr) {
            var box = self.getBBox();
            height = box.maxY - box.minY;
          }
          var subY = void 0;

          context.beginPath();
          if (self.hasFill()) {
            var fillOpacity = attrs.fillOpacity;
            if (!Util.isNil(fillOpacity) && fillOpacity !== 1) {
              context.globalAlpha = fillOpacity;
            }
            if (textArr) {
              Util.each(textArr, function (subText, index) {
                subY = y + index * (spaceingY + fontSize) - height + fontSize; // bottom;
                if (textBaseline === 'middle') subY += height - fontSize - (height - fontSize) / 2;
                if (textBaseline === 'top') subY += height - fontSize;
                context.fillText(subText, x, subY);
              });
            } else {
              context.fillText(text, x, y);
            }
          }

          if (self.hasStroke()) {
            if (textArr) {
              Util.each(textArr, function (subText, index) {
                subY = y + index * (spaceingY + fontSize) - height + fontSize; // bottom;
                if (textBaseline === 'middle') subY += height - fontSize - (height - fontSize) / 2;
                if (textBaseline === 'top') subY += height - fontSize;
                context.strokeText(subText, x, subY);
              });
            } else {
              context.strokeText(text, x, y);
            }
          }
        },
        measureText: function measureText() {
          var self = this;
          var attrs = self.__attrs;
          var text = attrs.text;
          var font = attrs.font;
          var textArr = attrs.textArr;
          var measureWidth = void 0;
          var width = 0;

          if (Util.isNil(text)) return undefined;
          var context = document.createElement('canvas').getContext('2d');
          context.save();
          context.font = font;
          if (textArr) {
            Util.each(textArr, function (subText) {
              measureWidth = context.measureText(subText).width;
              if (width < measureWidth) {
                width = measureWidth;
              }
              context.restore();
            });
          } else {
            width = context.measureText(text).width;
            context.restore();
          }
          return width;
        }
      });

      module.exports = CText;

      /***/
    },
    /* 103 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var Shape = __webpack_require__(1);
      var Inside = __webpack_require__(2);
      var Arrow = __webpack_require__(15);
      var LineMath = __webpack_require__(52);

      var Line = function Line(cfg) {
        Line.superclass.constructor.call(this, cfg);
      };

      Line.ATTRS = {
        x1: 0,
        y1: 0,
        x2: 0,
        y2: 0,
        lineWidth: 1,
        startArrow: false,
        endArrow: false
      };

      Util.extend(Line, Shape);

      Util.augment(Line, {
        canStroke: true,
        type: 'line',
        getDefaultAttrs: function getDefaultAttrs() {
          return {
            lineWidth: 1,
            startArrow: false,
            endArrow: false
          };
        },
        calculateBox: function calculateBox() {
          var attrs = this.__attrs;
          var x1 = attrs.x1,
              y1 = attrs.y1,
              x2 = attrs.x2,
              y2 = attrs.y2,
              lineWidth = attrs.lineWidth;

          return LineMath.box(x1, y1, x2, y2, lineWidth);
        },
        isPointInPath: function isPointInPath(x, y) {
          var attrs = this.__attrs;
          var x1 = attrs.x1,
              y1 = attrs.y1,
              x2 = attrs.x2,
              y2 = attrs.y2,
              lineWidth = attrs.lineWidth;

          if (this.hasStroke()) {
            return Inside.line(x1, y1, x2, y2, lineWidth, x, y);
          }

          return false;
        },
        createPath: function createPath(context) {
          var attrs = this.__attrs;
          var x1 = attrs.x1,
              y1 = attrs.y1,
              x2 = attrs.x2,
              y2 = attrs.y2;

          context = context || self.get('context');
          context.beginPath();

          Arrow.addStartArrow(context, attrs, x1, y1, x2, y2);
          context.moveTo(x1, y1);
          context.lineTo(x2, y2);
          Arrow.addEndArrow(context, attrs, x2, y2, x1, y1);
        },
        getPoint: function getPoint(t) {
          var attrs = this.__attrs;
          return {
            x: LineMath.at(attrs.x1, attrs.x2, t),
            y: LineMath.at(attrs.y1, attrs.y2, t)
          };
        }
      });

      module.exports = Line;

      /***/
    },
    /* 104 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var Shape = __webpack_require__(1);
      var Inside = __webpack_require__(2);

      var CImage = function CImage(cfg) {
        CImage.superclass.constructor.call(this, cfg);
      };

      CImage.ATTRS = {
        x: 0,
        y: 0,
        img: undefined,
        width: 0,
        height: 0,
        sx: null,
        sy: null,
        swidth: null,
        sheight: null
      };

      Util.extend(CImage, Shape);

      Util.augment(CImage, {
        type: 'image',
        __afterSetAttrImg: function __afterSetAttrImg(img) {
          this.__setAttrImg(img);
        },
        __afterSetAttrAll: function __afterSetAttrAll(params) {
          if (params.img) {
            this.__setAttrImg(params.img);
          }
        },
        isHitBox: function isHitBox() {
          return false;
        },
        calculateBox: function calculateBox() {
          var attrs = this.__attrs;
          var x = attrs.x;
          var y = attrs.y;
          var width = attrs.width;
          var height = attrs.height;

          return {
            minX: x,
            minY: y,
            maxX: x + width,
            maxY: y + height
          };
        },
        isPointInPath: function isPointInPath(x, y) {
          var attrs = this.__attrs;
          if (this.get('toDraw') || !attrs.img) {
            return false;
          }
          var rx = attrs.x;
          var ry = attrs.y;
          var width = attrs.width;
          var height = attrs.height;
          return Inside.rect(rx, ry, width, height, x, y);
        },
        __setLoading: function __setLoading(loading) {
          var canvas = this.get('canvas');
          if (loading === false && this.get('toDraw') === true) {
            this.__cfg.loading = false;
            canvas.draw();
          }
          return loading;
        },
        __setAttrImg: function __setAttrImg(img) {
          var self = this;
          var attrs = self.__attrs;
          if (Util.isString(img)) {
            var image = new Image();
            image.onload = function () {
              if (self.get('destroyed')) return false;
              self.attr('imgSrc', img);
              self.attr('img', image);
              var callback = self.get('callback');
              if (callback) {
                callback.call(self);
              }
              self.set('loading', false);
            };
            image.src = img;
            self.set('loading', true);
          } else if (img instanceof Image) {
            if (!attrs.width) {
              self.attr('width', img.width);
            }

            if (!attrs.height) {
              self.attr('height', img.height);
            }
            return img;
          } else if (img instanceof HTMLElement && Util.isString(img.nodeName) && img.nodeName.toUpperCase() === 'CANVAS') {
            if (!attrs.width) {
              self.attr('width', Number(img.getAttribute('width')));
            }

            if (!attrs.height) {
              self.attr('height', Number(img.getAttribute('height')));
            }
            return img;
          } else if (img instanceof ImageData) {
            if (!attrs.width) {
              self.attr('width', img.width);
            }

            if (!attrs.height) {
              self.attr('height', img.height);
            }
            return img;
          } else {
            return null;
          }
        },
        drawInner: function drawInner(context) {
          if (this.get('loading')) {
            this.set('toDraw', true);
            return;
          }
          this.__drawImage(context);
        },
        __drawImage: function __drawImage(context) {
          var attrs = this.__attrs;
          var x = attrs.x;
          var y = attrs.y;
          var img = attrs.img;
          var width = attrs.width;
          var height = attrs.height;
          var sx = attrs.sx;
          var sy = attrs.sy;
          var swidth = attrs.swidth;
          var sheight = attrs.sheight;
          this.set('toDraw', false);

          if (img instanceof Image || img instanceof HTMLElement && Util.isString(img.nodeName) && img.nodeName.toUpperCase() === 'CANVAS') {
            if (Util.isNil(sx) || Util.isNil(sy) || Util.isNil(swidth) || Util.isNil(sheight)) {
              context.drawImage(img, x, y, width, height);
              return;
            }
            if (!Util.isNil(sx) && !Util.isNil(sy) && !Util.isNil(swidth) && !Util.isNil(sheight)) {
              context.drawImage(img, sx, sy, swidth, sheight, x, y, width, height);
              return;
            }
          } else if (img instanceof ImageData) {
            context.putImageData(img, x, y, sx || 0, sy || 0, swidth || width, sheight || height);
            return;
          }
          return;
        }
      });

      module.exports = CImage;

      /***/
    },
    /* 105 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var Shape = __webpack_require__(1);
      var Inside = __webpack_require__(2);

      var Polygon = function Polygon(cfg) {
        Polygon.superclass.constructor.call(this, cfg);
      };

      Polygon.ATTRS = {
        points: null,
        lineWidth: 1
      };

      Util.extend(Polygon, Shape);

      Util.augment(Polygon, {
        canFill: true,
        canStroke: true,
        type: 'polygon',
        getDefaultAttrs: function getDefaultAttrs() {
          return {
            lineWidth: 1
          };
        },
        calculateBox: function calculateBox() {
          var self = this;
          var attrs = self.__attrs;
          var points = attrs.points;
          var lineWidth = attrs.lineWidth;
          if (!points || points.length === 0) {
            return null;
          }
          var minX = Infinity;
          var minY = Infinity;
          var maxX = -Infinity;
          var maxY = -Infinity;

          Util.each(points, function (point) {
            var x = point[0];
            var y = point[1];
            if (x < minX) {
              minX = x;
            }
            if (x > maxX) {
              maxX = x;
            }

            if (y < minY) {
              minY = y;
            }

            if (y > maxY) {
              maxY = y;
            }
          });

          var halfWidth = lineWidth / 2;
          return {
            minX: minX - halfWidth,
            minY: minY - halfWidth,
            maxX: maxX + halfWidth,
            maxY: maxY + halfWidth
          };
        },
        isPointInPath: function isPointInPath(x, y) {
          var self = this;
          var fill = self.hasFill();
          var stroke = self.hasStroke();

          if (fill && stroke) {
            return self.__isPointInFill(x, y) || self.__isPointInStroke(x, y);
          }

          if (fill) {
            return self.__isPointInFill(x, y);
          }

          if (stroke) {
            return self.__isPointInStroke(x, y);
          }

          return false;
        },
        __isPointInFill: function __isPointInFill(x, y) {
          var self = this;
          var context = self.get('context');
          self.createPath();
          return context.isPointInPath(x, y);
        },
        __isPointInStroke: function __isPointInStroke(x, y) {
          var self = this;
          var attrs = self.__attrs;
          var points = attrs.points;
          if (points.length < 2) {
            return false;
          }
          var lineWidth = attrs.lineWidth;
          var outPoints = points.slice(0);
          if (points.length >= 3) {
            outPoints.push(points[0]);
          }

          return Inside.polyline(outPoints, lineWidth, x, y);
        },
        createPath: function createPath(context) {
          var self = this;
          var attrs = self.__attrs;
          var points = attrs.points;
          if (points.length < 2) {
            return;
          }
          context = context || self.get('context');
          context.beginPath();
          Util.each(points, function (point, index) {
            if (index === 0) {
              context.moveTo(point[0], point[1]);
            } else {
              context.lineTo(point[0], point[1]);
            }
          });
          context.closePath();
        }
      });

      module.exports = Polygon;

      /***/
    },
    /* 106 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var Shape = __webpack_require__(1);
      var Inside = __webpack_require__(2);
      var Arrow = __webpack_require__(15);
      var LineMath = __webpack_require__(52);

      var Polyline = function Polyline(cfg) {
        Polyline.superclass.constructor.call(this, cfg);
      };

      Polyline.ATTRS = {
        points: null,
        lineWidth: 1,
        startArrow: false,
        endArrow: false,
        tCache: null
      };

      Util.extend(Polyline, Shape);

      Util.augment(Polyline, {
        canStroke: true,
        type: 'polyline',
        tCache: null, // 缓存各点的t
        getDefaultAttrs: function getDefaultAttrs() {
          return {
            lineWidth: 1,
            startArrow: false,
            endArrow: false
          };
        },
        calculateBox: function calculateBox() {
          var self = this;
          var attrs = self.__attrs;
          var lineWidth = attrs.lineWidth;
          var points = attrs.points;
          if (!points || points.length === 0) {
            return null;
          }
          var minX = Infinity;
          var minY = Infinity;
          var maxX = -Infinity;
          var maxY = -Infinity;

          Util.each(points, function (point) {
            var x = point[0];
            var y = point[1];
            if (x < minX) {
              minX = x;
            }
            if (x > maxX) {
              maxX = x;
            }

            if (y < minY) {
              minY = y;
            }

            if (y > maxY) {
              maxY = y;
            }
          });

          var halfWidth = lineWidth / 2;
          return {
            minX: minX - halfWidth,
            minY: minY - halfWidth,
            maxX: maxX + halfWidth,
            maxY: maxY + halfWidth
          };
        },
        __setTcache: function __setTcache() {
          var self = this;
          var attrs = self.__attrs;
          var points = attrs.points;
          var totalLength = 0;
          var tempLength = 0;
          var tCache = [];
          var segmentT = void 0;
          var segmentL = void 0;
          if (!points || points.length === 0) {
            return;
          }

          Util.each(points, function (p, i) {
            if (points[i + 1]) {
              totalLength += LineMath.len(p[0], p[1], points[i + 1][0], points[i + 1][1]);
            }
          });
          if (totalLength <= 0) {
            return;
          }
          Util.each(points, function (p, i) {
            if (points[i + 1]) {
              segmentT = [];
              segmentT[0] = tempLength / totalLength;
              segmentL = LineMath.len(p[0], p[1], points[i + 1][0], points[i + 1][1]);
              tempLength += segmentL;
              segmentT[1] = tempLength / totalLength;
              tCache.push(segmentT);
            }
          });
          this.tCache = tCache;
        },
        isPointInPath: function isPointInPath(x, y) {
          var self = this;
          var attrs = self.__attrs;
          if (self.hasStroke()) {
            var points = attrs.points;
            if (points.length < 2) {
              return false;
            }
            var lineWidth = attrs.lineWidth;
            return Inside.polyline(points, lineWidth, x, y);
          }
          return false;
        },
        createPath: function createPath(context) {
          var self = this;
          var attrs = self.__attrs;
          var points = attrs.points;
          var l = void 0;
          var i = void 0;

          if (points.length < 2) {
            return;
          }
          context = context || self.get('context');
          context.beginPath();

          Arrow.addStartArrow(context, attrs, points[1][0], points[1][1], points[0][0], points[0][1]);
          context.moveTo(points[0][0], points[0][1]);
          for (i = 1, l = points.length - 1; i < l; i++) {
            context.lineTo(points[i][0], points[i][1]);
          }
          context.lineTo(points[l][0], points[l][1]);
          Arrow.addEndArrow(context, attrs, points[l - 1][0], points[l - 1][1], points[l][0], points[l][1]);
        },
        getPoint: function getPoint(t) {
          var attrs = this.__attrs;
          var points = attrs.points;
          var tCache = this.tCache;
          var subt = void 0;
          var index = void 0;
          if (!tCache) {
            this.__setTcache();
            tCache = this.tCache;
          }
          Util.each(tCache, function (v, i) {
            if (t >= v[0] && t <= v[1]) {
              subt = (t - v[0]) / (v[1] - v[0]);
              index = i;
            }
          });
          return {
            x: LineMath.at(points[index][0], points[index + 1][0], subt),
            y: LineMath.at(points[index][1], points[index + 1][1], subt)
          };
        }
      });

      module.exports = Polyline;

      /***/
    },
    /* 107 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var Shape = __webpack_require__(1);
      var Inside = __webpack_require__(2);
      var ArcMath = __webpack_require__(54);
      var Arrow = __webpack_require__(15);

      function _getArcX(x, radius, angle) {
        return x + radius * Math.cos(angle);
      }
      function _getArcY(y, radius, angle) {
        return y + radius * Math.sin(angle);
      }

      var Arc = function Arc(cfg) {
        Arc.superclass.constructor.call(this, cfg);
      };

      Arc.ATTRS = {
        x: 0,
        y: 0,
        r: 0,
        startAngle: 0,
        endAngle: 0,
        clockwise: false,
        lineWidth: 1,
        startArrow: false,
        endArrow: false
      };

      Util.extend(Arc, Shape);

      Util.augment(Arc, {
        canStroke: true,
        type: 'arc',
        getDefaultAttrs: function getDefaultAttrs() {
          return {
            x: 0,
            y: 0,
            r: 0,
            startAngle: 0,
            endAngle: 0,
            clockwise: false,
            lineWidth: 1,
            startArrow: false,
            endArrow: false
          };
        },
        calculateBox: function calculateBox() {
          var attrs = this.__attrs;
          var x = attrs.x,
              y = attrs.y,
              r = attrs.r,
              startAngle = attrs.startAngle,
              endAngle = attrs.endAngle,
              clockwise = attrs.clockwise,
              lineWidth = attrs.lineWidth;

          var halfWidth = lineWidth / 2;
          var box = ArcMath.box(x, y, r, startAngle, endAngle, clockwise);
          box.minX -= halfWidth;
          box.minY -= halfWidth;
          box.maxX += halfWidth;
          box.maxY += halfWidth;
          return box;
        },
        isPointInPath: function isPointInPath(x, y) {
          var attrs = this.__attrs;
          var cx = attrs.x;
          var cy = attrs.y;
          var r = attrs.r,
              startAngle = attrs.startAngle,
              endAngle = attrs.endAngle,
              clockwise = attrs.clockwise,
              lineWidth = attrs.lineWidth;

          if (this.hasStroke()) {
            return Inside.arcline(cx, cy, r, startAngle, endAngle, clockwise, lineWidth, x, y);
          }
          return false;
        },
        createPath: function createPath(context) {
          var attrs = this.__attrs;
          var x = attrs.x,
              y = attrs.y,
              r = attrs.r,
              startAngle = attrs.startAngle,
              endAngle = attrs.endAngle,
              clockwise = attrs.clockwise;

          var diff = void 0;
          var x1 = void 0;
          var y1 = void 0;
          var x2 = void 0;
          var y2 = void 0;

          context = context || self.get('context');
          context.beginPath();

          if (attrs.startArrow) {
            diff = Math.PI / 180;
            if (clockwise) {
              diff *= -1;
            }

            // Calculate coordinates for start arrow
            x1 = _getArcX(x, r, startAngle + diff);
            y1 = _getArcY(y, r, startAngle + diff);
            x2 = _getArcX(x, r, startAngle);
            y2 = _getArcY(y, r, startAngle);
            Arrow.addStartArrow(context, attrs, x1, y1, x2, y2);
          }
          context.arc(x, y, r, startAngle, endAngle, clockwise);

          if (attrs.endArrow) {
            diff = Math.PI / 180;
            if (clockwise) {
              diff *= -1;
            }

            // Calculate coordinates for start arrow
            x1 = _getArcX(x, r, endAngle + diff);
            y1 = _getArcY(y, r, endAngle + diff);
            x2 = _getArcX(x, r, endAngle);
            y2 = _getArcY(y, r, endAngle);
            Arrow.addEndArrow(context, attrs, x2, y2, x1, y1);
          }
        }
      });

      module.exports = Arc;

      /***/
    },
    /* 108 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var Shape = __webpack_require__(1);
      var Inside = __webpack_require__(2);
      var ArcMath = __webpack_require__(54);
      var vec2 = __webpack_require__(3).vec2;

      var Fan = function Fan(cfg) {
        Fan.superclass.constructor.call(this, cfg);
      };

      Fan.ATTRS = {
        x: 0,
        y: 0,
        rs: 0,
        re: 0,
        startAngle: 0,
        endAngle: 0,
        clockwise: false,
        lineWidth: 1
      };

      Util.extend(Fan, Shape);

      Util.augment(Fan, {
        canFill: true,
        canStroke: true,
        type: 'fan',
        getDefaultAttrs: function getDefaultAttrs() {
          return {
            clockwise: false,
            lineWidth: 1,
            rs: 0,
            re: 0
          };
        },
        calculateBox: function calculateBox() {
          var self = this;
          var attrs = self.__attrs;
          var cx = attrs.x;
          var cy = attrs.y;
          var rs = attrs.rs;
          var re = attrs.re;
          var startAngle = attrs.startAngle;
          var endAngle = attrs.endAngle;
          var clockwise = attrs.clockwise;
          var lineWidth = attrs.lineWidth;

          var boxs = ArcMath.box(cx, cy, rs, startAngle, endAngle, clockwise);
          var boxe = ArcMath.box(cx, cy, re, startAngle, endAngle, clockwise);
          var minX = Math.min(boxs.minX, boxe.minX);
          var minY = Math.min(boxs.minY, boxe.minY);
          var maxX = Math.max(boxs.maxX, boxe.maxX);
          var maxY = Math.max(boxs.maxY, boxe.maxY);

          var halfWidth = lineWidth / 2;
          return {
            minX: minX - halfWidth,
            minY: minY - halfWidth,
            maxX: maxX + halfWidth,
            maxY: maxY + halfWidth
          };
        },
        isPointInPath: function isPointInPath(x, y) {
          var fill = this.hasFill();
          var stroke = this.hasStroke();

          if (fill && stroke) {
            return this.__isPointInFill(x, y) || this.__isPointInStroke(x, y);
          }

          if (fill) {
            return this.__isPointInFill(x, y);
          }

          if (stroke) {
            return this.__isPointInStroke(x, y);
          }
          return false;
        },
        __isPointInFill: function __isPointInFill(x, y) {
          var attrs = this.__attrs;
          var cx = attrs.x;
          var cy = attrs.y;
          var rs = attrs.rs;
          var re = attrs.re;
          var startAngle = attrs.startAngle;
          var endAngle = attrs.endAngle;
          var clockwise = attrs.clockwise;
          var v1 = [1, 0];
          var subv = [x - cx, y - cy];
          var angle = vec2.angleTo(v1, subv);

          var angle1 = ArcMath.nearAngle(angle, startAngle, endAngle, clockwise);

          if (Util.isNumberEqual(angle, angle1)) {
            var ls = vec2.squaredLength(subv);
            if (rs * rs <= ls && ls <= re * re) {
              return true;
            }
          }
          return false;
        },
        __isPointInStroke: function __isPointInStroke(x, y) {
          var attrs = this.__attrs;
          var cx = attrs.x;
          var cy = attrs.y;
          var rs = attrs.rs;
          var re = attrs.re;
          var startAngle = attrs.startAngle;
          var endAngle = attrs.endAngle;
          var clockwise = attrs.clockwise;
          var lineWidth = attrs.lineWidth;

          var ssp = {
            x: Math.cos(startAngle) * rs + cx,
            y: Math.sin(startAngle) * rs + cy
          };
          var sep = {
            x: Math.cos(startAngle) * re + cx,
            y: Math.sin(startAngle) * re + cy
          };
          var esp = {
            x: Math.cos(endAngle) * rs + cx,
            y: Math.sin(endAngle) * rs + cy
          };
          var eep = {
            x: Math.cos(endAngle) * re + cx,
            y: Math.sin(endAngle) * re + cy
          };

          if (Inside.line(ssp.x, ssp.y, sep.x, sep.y, lineWidth, x, y)) {
            return true;
          }

          if (Inside.line(esp.x, esp.y, eep.x, eep.y, lineWidth, x, y)) {
            return true;
          }

          if (Inside.arcline(cx, cy, rs, startAngle, endAngle, clockwise, lineWidth, x, y)) {
            return true;
          }

          if (Inside.arcline(cx, cy, re, startAngle, endAngle, clockwise, lineWidth, x, y)) {
            return true;
          }

          return false;
        },
        createPath: function createPath(context) {
          var attrs = this.__attrs;
          var cx = attrs.x;
          var cy = attrs.y;
          var rs = attrs.rs;
          var re = attrs.re;
          var startAngle = attrs.startAngle;
          var endAngle = attrs.endAngle;
          var clockwise = attrs.clockwise;

          var ssp = {
            x: Math.cos(startAngle) * rs + cx,
            y: Math.sin(startAngle) * rs + cy
          };
          var sep = {
            x: Math.cos(startAngle) * re + cx,
            y: Math.sin(startAngle) * re + cy
          };
          var esp = {
            x: Math.cos(endAngle) * rs + cx,
            y: Math.sin(endAngle) * rs + cy
          };

          context = context || self.get('context');
          context.beginPath();
          context.moveTo(ssp.x, ssp.y);
          context.lineTo(sep.x, sep.y);
          context.arc(cx, cy, re, startAngle, endAngle, clockwise);
          context.lineTo(esp.x, esp.y);
          context.arc(cx, cy, rs, endAngle, startAngle, !clockwise);
          context.closePath();
        }
      });

      module.exports = Fan;

      /***/
    },
    /* 109 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var Shape = __webpack_require__(1);
      var Inside = __webpack_require__(2);
      var Arrow = __webpack_require__(15);
      var CubicMath = __webpack_require__(30);

      var Cubic = function Cubic(cfg) {
        Cubic.superclass.constructor.call(this, cfg);
      };

      Cubic.ATTRS = {
        p1: null, // 起始点
        p2: null, // 第一个控制点
        p3: null, // 第二个控制点
        p4: null, // 终点
        lineWidth: 1,
        startArrow: false,
        endArrow: false
      };

      Util.extend(Cubic, Shape);

      Util.augment(Cubic, {
        canStroke: true,
        type: 'cubic',
        getDefaultAttrs: function getDefaultAttrs() {
          return {
            lineWidth: 1,
            startArrow: false,
            endArrow: false
          };
        },
        calculateBox: function calculateBox() {
          var attrs = this.__attrs;
          var p1 = attrs.p1,
              p2 = attrs.p2,
              p3 = attrs.p3,
              p4 = attrs.p4,
              lineWidth = attrs.lineWidth;

          var i = void 0;
          var l = void 0;

          if (Util.isNil(p1) || Util.isNil(p2) || Util.isNil(p3) || Util.isNil(p4)) {
            return null;
          }
          var halfWidth = lineWidth / 2;

          var xDim = CubicMath.extrema(p1[0], p2[0], p3[0], p4[0]);
          for (i = 0, l = xDim.length; i < l; i++) {
            xDim[i] = CubicMath.at(p1[0], p2[0], p3[0], p4[0], xDim[i]);
          }
          var yDim = CubicMath.extrema(p1[1], p2[1], p3[1], p4[1]);
          for (i = 0, l = yDim.length; i < l; i++) {
            yDim[i] = CubicMath.at(p1[1], p2[1], p3[1], p4[1], yDim[i]);
          }
          xDim.push(p1[0], p4[0]);
          yDim.push(p1[1], p4[1]);

          return {
            minX: Math.min.apply(Math, xDim) - halfWidth,
            maxX: Math.max.apply(Math, xDim) + halfWidth,
            minY: Math.min.apply(Math, yDim) - halfWidth,
            maxY: Math.max.apply(Math, yDim) + halfWidth
          };
        },
        isPointInPath: function isPointInPath(x, y) {
          var attrs = this.__attrs;
          var p1 = attrs.p1,
              p2 = attrs.p2,
              p3 = attrs.p3,
              p4 = attrs.p4,
              lineWidth = attrs.lineWidth;

          return Inside.cubicline(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1], p4[0], p4[1], lineWidth, x, y);
        },
        createPath: function createPath(context) {
          var attrs = this.__attrs;
          var p1 = attrs.p1,
              p2 = attrs.p2,
              p3 = attrs.p3,
              p4 = attrs.p4;

          context = context || self.get('context');
          if (Util.isNil(p1) || Util.isNil(p2) || Util.isNil(p3) || Util.isNil(p4)) {
            return;
          }

          context.beginPath();

          Arrow.addStartArrow(context, attrs, p2[0], p2[1], p1[0], p1[1]);
          context.moveTo(p1[0], p1[1]);
          context.bezierCurveTo(p2[0], p2[1], p3[0], p3[1], p4[0], p4[1]);
          Arrow.addEndArrow(context, attrs, p3[0], p3[1], p4[0], p4[1]);
        },
        getPoint: function getPoint(t) {
          var attrs = this.__attrs;
          return {
            x: CubicMath.at(attrs.p4[0], attrs.p3[0], attrs.p2[0], attrs.p1[0], t),
            y: CubicMath.at(attrs.p4[1], attrs.p3[1], attrs.p2[1], attrs.p1[1], t)
          };
        }
      });

      module.exports = Cubic;

      /***/
    },
    /* 110 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var Shape = __webpack_require__(1);
      var Inside = __webpack_require__(2);
      var Arrow = __webpack_require__(15);
      var QuadraticMath = __webpack_require__(53);

      var Quadratic = function Quadratic(cfg) {
        Quadratic.superclass.constructor.call(this, cfg);
      };

      Quadratic.ATTRS = {
        p1: null, // 起始点
        p2: null, // 控制点
        p3: null, // 结束点
        lineWidth: 1,
        startArrow: false,
        endArrow: false
      };

      Util.extend(Quadratic, Shape);

      Util.augment(Quadratic, {
        canStroke: true,
        type: 'quadratic',
        getDefaultAttrs: function getDefaultAttrs() {
          return {
            lineWidth: 1,
            startArrow: false,
            endArrow: false
          };
        },
        calculateBox: function calculateBox() {
          var self = this;
          var attrs = self.__attrs;
          var p1 = attrs.p1,
              p2 = attrs.p2,
              p3 = attrs.p3,
              lineWidth = attrs.lineWidth;

          var i = void 0;
          var l = void 0;

          if (Util.isNil(p1) || Util.isNil(p2) || Util.isNil(p3)) {
            return null;
          }
          var halfWidth = lineWidth / 2;
          var xDims = QuadraticMath.extrema(p1[0], p2[0], p3[0]);
          for (i = 0, l = xDims.length; i < l; i++) {
            xDims[i] = QuadraticMath.at(p1[0], p2[0], p3[0], xDims[i]);
          }
          xDims.push(p1[0], p3[0]);
          var yDims = QuadraticMath.extrema(p1[1], p2[1], p3[1]);
          for (i = 0, l = yDims.length; i < l; i++) {
            yDims[i] = QuadraticMath.at(p1[1], p2[1], p3[1], yDims[i]);
          }
          yDims.push(p1[1], p3[1]);

          return {
            minX: Math.min.apply(Math, xDims) - halfWidth,
            maxX: Math.max.apply(Math, xDims) + halfWidth,
            minY: Math.min.apply(Math, yDims) - halfWidth,
            maxY: Math.max.apply(Math, yDims) + halfWidth
          };
        },
        isPointInPath: function isPointInPath(x, y) {
          var self = this;
          var attrs = self.__attrs;
          var p1 = attrs.p1,
              p2 = attrs.p2,
              p3 = attrs.p3,
              lineWidth = attrs.lineWidth;

          return Inside.quadraticline(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1], lineWidth, x, y);
        },
        createPath: function createPath(context) {
          var self = this;
          var attrs = self.__attrs;
          var p1 = attrs.p1,
              p2 = attrs.p2,
              p3 = attrs.p3;

          if (Util.isNil(p1) || Util.isNil(p2) || Util.isNil(p3)) {
            return;
          }
          context = context || self.get('context');
          context.beginPath();

          Arrow.addStartArrow(context, attrs, p2[0], p2[1], p1[0], p1[1]);
          context.moveTo(p1[0], p1[1]);
          context.quadraticCurveTo(p2[0], p2[1], p3[0], p3[1]);
          Arrow.addEndArrow(context, attrs, p2[0], p2[1], p3[0], p3[1]);
        },
        getPoint: function getPoint(t) {
          var attrs = this.__attrs;
          return {
            x: QuadraticMath.at(attrs.p1[0], attrs.p2[0], attrs.p3[0], t),
            y: QuadraticMath.at(attrs.p1[1], attrs.p2[1], attrs.p3[1], t)
          };
        }
      });

      module.exports = Quadratic;

      /***/
    },
    /* 111 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var Shape = __webpack_require__(1);
      var Inside = __webpack_require__(2);

      var Marker = function Marker(cfg) {
        Marker.superclass.constructor.call(this, cfg);
      };

      Marker.Symbols = {
        // 圆
        circle: function circle(x, y, r, ctx) {
          ctx.arc(x, y, r, 0, Math.PI * 2, false);
        },

        // 正方形
        square: function square(x, y, r, ctx) {
          ctx.moveTo(x - r, y - r);
          ctx.lineTo(x + r, y - r);
          ctx.lineTo(x + r, y + r);
          ctx.lineTo(x - r, y + r);
          ctx.closePath();
        },

        // 菱形
        diamond: function diamond(x, y, r, ctx) {
          ctx.moveTo(x - r, y);
          ctx.lineTo(x, y - r);
          ctx.lineTo(x + r, y);
          ctx.lineTo(x, y + r);
          ctx.closePath();
        },

        // 三角形
        triangle: function triangle(x, y, r, ctx) {
          var diffY = r * Math.sin(1 / 3 * Math.PI);
          ctx.moveTo(x - r, y + diffY);
          ctx.lineTo(x, y - diffY);
          ctx.lineTo(x + r, y + diffY);
          ctx.closePath();
        },

        // 倒三角形
        'triangle-down': function triangleDown(x, y, r, ctx) {
          var diffY = r * Math.sin(1 / 3 * Math.PI);
          ctx.moveTo(x - r, y - diffY);
          ctx.lineTo(x + r, y - diffY);
          ctx.lineTo(x, y + diffY);
          ctx.closePath();
        }
      };

      Marker.ATTRS = {
        path: null,
        lineWidth: 1
      };

      Util.extend(Marker, Shape);

      Util.augment(Marker, {
        type: 'marker',
        canFill: true,
        canStroke: true,
        getDefaultAttrs: function getDefaultAttrs() {
          return {
            x: 0,
            y: 0,
            lineWidth: 1
          };
        },
        calculateBox: function calculateBox() {
          var attrs = this.__attrs;
          var cx = attrs.x;
          var cy = attrs.y;
          var r = attrs.radius;
          var lineWidth = attrs.lineWidth;
          var halfWidth = lineWidth / 2 + r;
          return {
            minX: cx - halfWidth,
            minY: cy - halfWidth,
            maxX: cx + halfWidth,
            maxY: cy + halfWidth
          };
        },
        isPointInPath: function isPointInPath(x, y) {
          var attrs = this.__attrs;
          var cx = attrs.x;
          var cy = attrs.y;
          var r = attrs.radius;
          return Inside.circle(cx, cy, r, x, y);
        },
        createPath: function createPath(context) {
          var attrs = this.__attrs;
          var x = attrs.x;
          var y = attrs.y;
          var r = attrs.radius;
          var symbol = attrs.symbol || 'circle';
          var method = void 0;
          if (Util.isFunction(symbol)) {
            method = symbol;
          } else {
            method = Marker.Symbols[symbol];
          }
          context.beginPath();
          method(x, y, r, context, this);
        }
      });

      module.exports = Marker;

      /***/
    },
    /* 112 */
    /***/function (module, exports, __webpack_require__) {

      module.exports = {
        Canvas: __webpack_require__(113),
        Group: __webpack_require__(87),
        Shape: __webpack_require__(1),
        Rect: __webpack_require__(98),
        Circle: __webpack_require__(99),
        Ellipse: __webpack_require__(100),
        Path: __webpack_require__(101),
        Text: __webpack_require__(102),
        Line: __webpack_require__(103),
        Image: __webpack_require__(104),
        Polygon: __webpack_require__(105),
        Polyline: __webpack_require__(106),
        Arc: __webpack_require__(107),
        Fan: __webpack_require__(108),
        Cubic: __webpack_require__(109),
        Quadratic: __webpack_require__(110),
        Marker: __webpack_require__(111),
        PathUtil: __webpack_require__(46),
        MatrixUtil: __webpack_require__(3),
        DomUtil: __webpack_require__(85),
        Event: __webpack_require__(86)
      };

      /***/
    },
    /* 113 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var Event = __webpack_require__(86);
      var Group = __webpack_require__(87);

      function requestAnimationFrame(fn) {
        var method = window.requestAnimationFrame || window.webkitRequestAnimationFrame || function (fn) {
          return setTimeout(fn, 16);
        };
        return method(fn);
      }
      var Canvas = function Canvas(cfg) {
        Canvas.superclass.constructor.call(this, cfg);
      };

      Canvas.CFG = {
        eventEnable: true,
        /**
         * 像素宽度
         * @type {Number}
         */
        width: null,
        /**
         * 像素高度
         * @type {Number}
         */
        height: null,
        /**
         * 画布宽度
         * @type {Number}
         */
        widthCanvas: null,
        /**
         * 画布高度
         * @type {Number}
         */
        heightCanvas: null,
        /**
         * CSS宽
         * @type {String}
         */
        widthStyle: null,
        /**
         * CSS高
         * @type {String}
         */
        heightStyle: null,
        /**
         * 容器DOM
         * @type {Object}
         */
        containerDOM: null,
        /**
         * 当前Canvas的DOM
         * @type {Object}
         */
        canvasDOM: null,
        /**
         * 屏幕像素比
         * @type {Number}
         */
        pixelRatio: null
      };

      Util.extend(Canvas, Group);

      Util.augment(Canvas, {
        init: function init() {
          Canvas.superclass.init.call(this);
          this._setGlobalParam();
          this._setDOM();
          this._setInitSize();
          this._setCanvas();
          this._scale();
          if (this.get('eventEnable')) {
            this._registEvents();
          }
        },
        getEmitter: function getEmitter(element, event) {
          if (element) {
            if (Util.isEmpty(element._getEvents())) {
              var parent = element.get('parent');
              if (parent && !event.propagationStopped) {
                return this.getEmitter(parent, event);
              }
            } else {
              return element;
            }
          }
        },
        _getEventObj: function _getEventObj(type, e, point, target) {
          var event = new Event(type, e, true, true);
          event.x = point.x;
          event.y = point.y;
          event.clientX = e.clientX;
          event.clientY = e.clientY;
          event.currentTarget = target;
          event.target = target;
          return event;
        },
        _triggerEvent: function _triggerEvent(type, e) {
          var point = this.getPointByClient(e.clientX, e.clientY);
          var shape = this.getShape(point.x, point.y);
          var emitObj = void 0;
          if (type === 'mousemove') {
            var canvasmousemove = this._getEventObj('mousemove', e, point, this);
            this.emit('mousemove', canvasmousemove);

            var preShape = this.get('preShape');
            if (preShape && preShape !== shape) {
              var mouseleave = this._getEventObj('mouseleave', e, point, preShape);
              emitObj = this.getEmitter(preShape, e);
              emitObj && emitObj.emit('mouseleave', mouseleave);
            }

            if (shape) {
              var mousemove = this._getEventObj('mousemove', e, point, shape);
              emitObj = this.getEmitter(shape, e);
              emitObj && emitObj.emit('mousemove', mousemove);

              if (preShape !== shape) {
                var mouseenter = this._getEventObj('mouseenter', e, point, shape);
                emitObj && emitObj.emit('mouseenter', mouseenter, e);
              }
            }

            this.set('preShape', shape);
          } else {
            var event = this._getEventObj(type, e, point, shape || this);
            emitObj = this.getEmitter(shape, e);
            if (emitObj && emitObj !== this) {
              emitObj.emit(type, event);
            }
            this.emit(type, event);
          }

          var el = this.get('el');
          if (shape && !shape.get('destroyed')) {
            el.style.cursor = shape.attr('cursor') || 'default';
          }
        },
        _registEvents: function _registEvents() {
          var self = this;
          var el = self.get('el');

          el.addEventListener('mouseout', function (e) {
            self._triggerEvent('mouseleave', e);
          }, false);

          el.addEventListener('mouseover', function (e) {
            self._triggerEvent('mouseenter', e);
          }, false);

          el.addEventListener('mousemove', function (e) {
            self._triggerEvent('mousemove', e);
          }, false);

          el.addEventListener('mousedown', function (e) {
            self._triggerEvent('mousedown', e);
          }, false);

          el.addEventListener('mouseup', function (e) {
            self._triggerEvent('mouseup', e);
          }, false);

          el.addEventListener('click', function (e) {
            self._triggerEvent('click', e);
          }, false);

          el.addEventListener('dblclick', function (e) {
            self._triggerEvent('dblclick', e);
          }, false);

          el.addEventListener('touchstart', function (e) {
            if (!Util.isEmpty(e.touches)) {
              self._triggerEvent('touchstart', e.touches[0]);
            }
          }, false);

          el.addEventListener('touchmove', function (e) {
            if (!Util.isEmpty(e.touches)) {
              self._triggerEvent('touchmove', e.touches[0]);
            }
          }, false);

          el.addEventListener('touchend', function (e) {
            if (!Util.isEmpty(e.changedTouches)) {
              self._triggerEvent('touchend', e.changedTouches[0]);
            }
          }, false);
        },
        _scale: function _scale() {
          var pixelRatio = this.get('pixelRatio');
          this.scale(pixelRatio, pixelRatio);
        },
        _setCanvas: function _setCanvas() {
          var canvasDOM = this.get('canvasDOM');
          this.set('el', canvasDOM);
          this.set('context', canvasDOM.getContext('2d'));
          this.set('canvas', this);
        },
        _setGlobalParam: function _setGlobalParam() {
          var pixelRatio = this.get('pixelRatio');
          if (!pixelRatio) {
            this.set('pixelRatio', Util.getRatio());
          }
          return;
        },
        _setDOM: function _setDOM() {
          this._setContainer();
          this._setLayer();
        },
        _setContainer: function _setContainer() {
          var containerId = this.get('containerId');
          var containerDOM = this.get('containerDOM');
          if (!containerDOM) {
            containerDOM = document.getElementById(containerId);
            this.set('containerDOM', containerDOM);
          }
          Util.modifyCSS(containerDOM, {
            position: 'relative'
          });
        },
        _setLayer: function _setLayer() {
          var containerDOM = this.get('containerDOM');
          var canvasId = Util.uniqueId('canvas_');
          if (containerDOM) {
            var canvasDOM = Util.createDom('<canvas id="' + canvasId + '"></canvas>');
            containerDOM.appendChild(canvasDOM);
            this.set('canvasDOM', canvasDOM);
          }
        },
        _setInitSize: function _setInitSize() {
          this.changeSize(this.get('width'), this.get('height'));
        },
        _reSize: function _reSize() {
          var canvasDOM = this.get('canvasDOM');
          var widthCanvas = this.get('widthCanvas');
          var heightCanvas = this.get('heightCanvas');
          var widthStyle = this.get('widthStyle');
          var heightStyle = this.get('heightStyle');

          canvasDOM.style.width = widthStyle;
          canvasDOM.style.height = heightStyle;
          canvasDOM.setAttribute('width', widthCanvas);
          canvasDOM.setAttribute('height', heightCanvas);
        },
        getWidth: function getWidth() {
          var pixelRatio = this.get('pixelRatio');
          var width = this.get('width');
          return width * pixelRatio;
        },
        getHeight: function getHeight() {
          var pixelRatio = this.get('pixelRatio');
          var height = this.get('height');
          return height * pixelRatio;
        },
        changeSize: function changeSize(width, height) {
          var pixelRatio = this.get('pixelRatio');
          var widthCanvas = width * pixelRatio;
          var heightCanvas = height * pixelRatio;

          this.set('widthCanvas', widthCanvas);
          this.set('heightCanvas', heightCanvas);
          this.set('widthStyle', width + 'px');
          this.set('heightStyle', height + 'px');
          this.set('width', width);
          this.set('height', height);
          this._reSize();
        },

        /**
         * 将窗口坐标转变成 canvas 坐标
         * @param  {Number} clientX 窗口x坐标
         * @param  {Number} clientY 窗口y坐标
         * @return {Object} canvas坐标
         */
        getPointByClient: function getPointByClient(clientX, clientY) {
          var el = this.get('el');
          var bbox = el.getBoundingClientRect();
          var width = bbox.right - bbox.left;
          var height = bbox.bottom - bbox.top;
          return {
            x: (clientX - bbox.left) * (el.width / width),
            y: (clientY - bbox.top) * (el.height / height)
          };
        },
        getClientByPoint: function getClientByPoint(x, y) {
          var el = this.get('el');
          var bbox = el.getBoundingClientRect();
          var width = bbox.right - bbox.left;
          var height = bbox.bottom - bbox.top;
          return {
            clientX: x / (el.width / width) + bbox.left,
            clientY: y / (el.height / height) + bbox.top
          };
        },
        beforeDraw: function beforeDraw() {
          var context = this.get('context');
          var el = this.get('el');
          context && context.clearRect(0, 0, el.width, el.height);
        },
        _beginDraw: function _beginDraw() {
          this.setSilent('toDraw', true);
        },
        _endDraw: function _endDraw() {
          this.setSilent('toDraw', false);
        },
        draw: function draw() {
          var self = this;
          function drawInner() {
            self.setSilent('animateHandler', requestAnimationFrame(function () {
              self.setSilent('animateHandler', undefined);
              if (self.get('toDraw')) {
                drawInner();
              }
            }));
            self.beforeDraw();
            try {
              var context = self.get('context');
              Canvas.superclass.draw.call(self, context);
              // self._drawCanvas();
            } catch (ev) {
              // 绘制时异常，中断重绘
              console.warn('error in draw canvas, detail as:');
              console.warn(ev);
              self._endDraw();
            }
            self._endDraw();
          }

          if (self.get('destroyed')) {
            return;
          }
          if (self.get('animateHandler')) {
            this._beginDraw();
          } else {
            drawInner();
          }
        },
        destroy: function destroy() {
          var containerDOM = this.get('containerDOM');
          var canvasDOM = this.get('canvasDOM');
          if (canvasDOM && containerDOM) {
            containerDOM.removeChild(canvasDOM);
          }
          Canvas.superclass.destroy.call(this);
        }
      });

      module.exports = Canvas;

      /***/
    },
    /* 114 */
    /***/function (module, exports) {

      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      };

      var g;

      // This works in non-strict mode
      g = function () {
        return this;
      }();

      try {
        // This works if eval is allowed (see CSP)
        g = g || Function("return this")() || (1, eval)("this");
      } catch (e) {
        // This works if the window reference is available
        if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
      }

      // g can still be undefined, but nothing to do about it...
      // We return undefined, instead of nothing here, so it's
      // easier to handle this case. if(!global) { ...}

      module.exports = g;

      /***/
    },
    /* 115 */
    /***/function (module, exports, __webpack_require__) {

      var _Symbol = __webpack_require__(11);

      /** Used for built-in method references. */
      var objectProto = Object.prototype;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */
      var nativeObjectToString = objectProto.toString;

      /** Built-in value references. */
      var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

      /**
       * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the raw `toStringTag`.
       */
      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

        try {
          value[symToStringTag] = undefined;
          var unmasked = true;
        } catch (e) {}

        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }

      module.exports = getRawTag;

      /***/
    },
    /* 116 */
    /***/function (module, exports) {

      /** Used for built-in method references. */
      var objectProto = Object.prototype;

      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */
      var nativeObjectToString = objectProto.toString;

      /**
       * Converts `value` to a string using `Object.prototype.toString`.
       *
       * @private
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       */
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }

      module.exports = objectToString;

      /***/
    },
    /* 117 */
    /***/function (module, exports, __webpack_require__) {

      var baseGetTag = __webpack_require__(7),
          isObjectLike = __webpack_require__(5);

      /** `Object#toString` result references. */
      var boolTag = '[object Boolean]';

      /**
       * Checks if `value` is classified as a boolean primitive or object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
       * @example
       *
       * _.isBoolean(false);
       * // => true
       *
       * _.isBoolean(null);
       * // => false
       */
      function isBoolean(value) {
        return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
      }

      module.exports = isBoolean;

      /***/
    },
    /* 118 */
    /***/function (module, exports) {

      /**
       * Checks if `value` is `null` or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
       * @example
       *
       * _.isNil(null);
       * // => true
       *
       * _.isNil(void 0);
       * // => true
       *
       * _.isNil(NaN);
       * // => false
       */
      function isNil(value) {
        return value == null;
      }

      module.exports = isNil;

      /***/
    },
    /* 119 */
    /***/function (module, exports, __webpack_require__) {

      var baseGetTag = __webpack_require__(7),
          isObjectLike = __webpack_require__(5);

      /** `Object#toString` result references. */
      var numberTag = '[object Number]';

      /**
       * Checks if `value` is classified as a `Number` primitive or object.
       *
       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
       * classified as numbers, use the `_.isFinite` method.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a number, else `false`.
       * @example
       *
       * _.isNumber(3);
       * // => true
       *
       * _.isNumber(Number.MIN_VALUE);
       * // => true
       *
       * _.isNumber(Infinity);
       * // => true
       *
       * _.isNumber('3');
       * // => false
       */
      function isNumber(value) {
        return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
      }

      module.exports = isNumber;

      /***/
    },
    /* 120 */
    /***/function (module, exports, __webpack_require__) {

      var baseKeys = __webpack_require__(57),
          getTag = __webpack_require__(21),
          isArguments = __webpack_require__(33),
          isArray = __webpack_require__(6),
          isArrayLike = __webpack_require__(9),
          isBuffer = __webpack_require__(17),
          isPrototype = __webpack_require__(16),
          isTypedArray = __webpack_require__(22);

      /** `Object#toString` result references. */
      var mapTag = '[object Map]',
          setTag = '[object Set]';

      /** Used for built-in method references. */
      var objectProto = Object.prototype;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /**
       * Checks if `value` is an empty object, collection, map, or set.
       *
       * Objects are considered empty if they have no own enumerable string keyed
       * properties.
       *
       * Array-like values such as `arguments` objects, arrays, buffers, strings, or
       * jQuery-like collections are considered empty if they have a `length` of `0`.
       * Similarly, maps and sets are considered empty if they have a `size` of `0`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is empty, else `false`.
       * @example
       *
       * _.isEmpty(null);
       * // => true
       *
       * _.isEmpty(true);
       * // => true
       *
       * _.isEmpty(1);
       * // => true
       *
       * _.isEmpty([1, 2, 3]);
       * // => false
       *
       * _.isEmpty({ 'a': 1 });
       * // => false
       */
      function isEmpty(value) {
        if (value == null) {
          return true;
        }
        if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }
        var tag = getTag(value);
        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }
        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }
        for (var key in value) {
          if (hasOwnProperty.call(value, key)) {
            return false;
          }
        }
        return true;
      }

      module.exports = isEmpty;

      /***/
    },
    /* 121 */
    /***/function (module, exports, __webpack_require__) {

      var overArg = __webpack_require__(58);

      /* Built-in method references for those with the same name as other `lodash` methods. */
      var nativeKeys = overArg(Object.keys, Object);

      module.exports = nativeKeys;

      /***/
    },
    /* 122 */
    /***/function (module, exports, __webpack_require__) {

      var getNative = __webpack_require__(10),
          root = __webpack_require__(4);

      /* Built-in method references that are verified to be native. */
      var DataView = getNative(root, 'DataView');

      module.exports = DataView;

      /***/
    },
    /* 123 */
    /***/function (module, exports, __webpack_require__) {

      var isFunction = __webpack_require__(20),
          isMasked = __webpack_require__(124),
          isObject = __webpack_require__(8),
          toSource = __webpack_require__(59);

      /**
       * Used to match `RegExp`
       * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
       */
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

      /** Used to detect host constructors (Safari). */
      var reIsHostCtor = /^\[object .+?Constructor\]$/;

      /** Used for built-in method references. */
      var funcProto = Function.prototype,
          objectProto = Object.prototype;

      /** Used to resolve the decompiled source of functions. */
      var funcToString = funcProto.toString;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /** Used to detect if a method is native. */
      var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

      /**
       * The base implementation of `_.isNative` without bad shim checks.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       */
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }

      module.exports = baseIsNative;

      /***/
    },
    /* 124 */
    /***/function (module, exports, __webpack_require__) {

      var coreJsData = __webpack_require__(125);

      /** Used to detect methods masquerading as native. */
      var maskSrcKey = function () {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
        return uid ? 'Symbol(src)_1.' + uid : '';
      }();

      /**
       * Checks if `func` has its source masked.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` is masked, else `false`.
       */
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }

      module.exports = isMasked;

      /***/
    },
    /* 125 */
    /***/function (module, exports, __webpack_require__) {

      var root = __webpack_require__(4);

      /** Used to detect overreaching core-js shims. */
      var coreJsData = root['__core-js_shared__'];

      module.exports = coreJsData;

      /***/
    },
    /* 126 */
    /***/function (module, exports) {

      /**
       * Gets the value at `key` of `object`.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */
      function getValue(object, key) {
        return object == null ? undefined : object[key];
      }

      module.exports = getValue;

      /***/
    },
    /* 127 */
    /***/function (module, exports, __webpack_require__) {

      var getNative = __webpack_require__(10),
          root = __webpack_require__(4);

      /* Built-in method references that are verified to be native. */
      var Promise = getNative(root, 'Promise');

      module.exports = Promise;

      /***/
    },
    /* 128 */
    /***/function (module, exports, __webpack_require__) {

      var getNative = __webpack_require__(10),
          root = __webpack_require__(4);

      /* Built-in method references that are verified to be native. */
      var Set = getNative(root, 'Set');

      module.exports = Set;

      /***/
    },
    /* 129 */
    /***/function (module, exports, __webpack_require__) {

      var getNative = __webpack_require__(10),
          root = __webpack_require__(4);

      /* Built-in method references that are verified to be native. */
      var WeakMap = getNative(root, 'WeakMap');

      module.exports = WeakMap;

      /***/
    },
    /* 130 */
    /***/function (module, exports, __webpack_require__) {

      var baseGetTag = __webpack_require__(7),
          isObjectLike = __webpack_require__(5);

      /** `Object#toString` result references. */
      var argsTag = '[object Arguments]';

      /**
       * The base implementation of `_.isArguments`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       */
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }

      module.exports = baseIsArguments;

      /***/
    },
    /* 131 */
    /***/function (module, exports) {

      /**
       * This method returns `false`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `false`.
       * @example
       *
       * _.times(2, _.stubFalse);
       * // => [false, false]
       */
      function stubFalse() {
        return false;
      }

      module.exports = stubFalse;

      /***/
    },
    /* 132 */
    /***/function (module, exports, __webpack_require__) {

      var baseGetTag = __webpack_require__(7),
          isLength = __webpack_require__(60),
          isObjectLike = __webpack_require__(5);

      /** `Object#toString` result references. */
      var argsTag = '[object Arguments]',
          arrayTag = '[object Array]',
          boolTag = '[object Boolean]',
          dateTag = '[object Date]',
          errorTag = '[object Error]',
          funcTag = '[object Function]',
          mapTag = '[object Map]',
          numberTag = '[object Number]',
          objectTag = '[object Object]',
          regexpTag = '[object RegExp]',
          setTag = '[object Set]',
          stringTag = '[object String]',
          weakMapTag = '[object WeakMap]';

      var arrayBufferTag = '[object ArrayBuffer]',
          dataViewTag = '[object DataView]',
          float32Tag = '[object Float32Array]',
          float64Tag = '[object Float64Array]',
          int8Tag = '[object Int8Array]',
          int16Tag = '[object Int16Array]',
          int32Tag = '[object Int32Array]',
          uint8Tag = '[object Uint8Array]',
          uint8ClampedTag = '[object Uint8ClampedArray]',
          uint16Tag = '[object Uint16Array]',
          uint32Tag = '[object Uint32Array]';

      /** Used to identify `toStringTag` values of typed arrays. */
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

      /**
       * The base implementation of `_.isTypedArray` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       */
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }

      module.exports = baseIsTypedArray;

      /***/
    },
    /* 133 */
    /***/function (module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function (module) {
        var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
          return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
        } : function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
        };

        var freeGlobal = __webpack_require__(55);

        /** Detect free variable `exports`. */
        var freeExports = (false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

        /** Detect free variable `module`. */
        var freeModule = freeExports && (false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports;

        /** Detect free variable `process` from Node.js. */
        var freeProcess = moduleExports && freeGlobal.process;

        /** Used to access faster Node.js helpers. */
        var nodeUtil = function () {
          try {
            return freeProcess && freeProcess.binding && freeProcess.binding('util');
          } catch (e) {}
        }();

        module.exports = nodeUtil;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(34)(module));

      /***/
    },
    /* 134 */
    /***/function (module, exports, __webpack_require__) {

      var toString = __webpack_require__(62);

      /** Used to generate unique IDs. */
      var idCounter = 0;

      /**
       * Generates a unique ID. If `prefix` is given, the ID is appended to it.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {string} [prefix=''] The value to prefix the ID with.
       * @returns {string} Returns the unique ID.
       * @example
       *
       * _.uniqueId('contact_');
       * // => 'contact_104'
       *
       * _.uniqueId();
       * // => '105'
       */
      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
      }

      module.exports = uniqueId;

      /***/
    },
    /* 135 */
    /***/function (module, exports, __webpack_require__) {

      var _Symbol = __webpack_require__(11),
          arrayMap = __webpack_require__(35),
          isArray = __webpack_require__(6),
          isSymbol = __webpack_require__(136);

      /** Used as references for various `Number` constants. */
      var INFINITY = 1 / 0;

      /** Used to convert symbols to primitives and strings. */
      var symbolProto = _Symbol ? _Symbol.prototype : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;

      /**
       * The base implementation of `_.toString` which doesn't convert nullish
       * values to empty strings.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       */
      function baseToString(value) {
        // Exit early for strings to avoid a performance hit in some environments.
        if (typeof value == 'string') {
          return value;
        }
        if (isArray(value)) {
          // Recursively convert values (susceptible to call stack limits).
          return arrayMap(value, baseToString) + '';
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }
        var result = value + '';
        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
      }

      module.exports = baseToString;

      /***/
    },
    /* 136 */
    /***/function (module, exports, __webpack_require__) {

      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      };

      var baseGetTag = __webpack_require__(7),
          isObjectLike = __webpack_require__(5);

      /** `Object#toString` result references. */
      var symbolTag = '[object Symbol]';

      /**
       * Checks if `value` is classified as a `Symbol` primitive or object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
       * @example
       *
       * _.isSymbol(Symbol.iterator);
       * // => true
       *
       * _.isSymbol('abc');
       * // => false
       */
      function isSymbol(value) {
        return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }

      module.exports = isSymbol;

      /***/
    },
    /* 137 */
    /***/function (module, exports, __webpack_require__) {

      var baseClone = __webpack_require__(138);

      /** Used to compose bitmasks for cloning. */
      var CLONE_SYMBOLS_FLAG = 4;

      /**
       * Creates a shallow clone of `value`.
       *
       * **Note:** This method is loosely based on the
       * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
       * and supports cloning arrays, array buffers, booleans, date objects, maps,
       * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
       * arrays. The own enumerable properties of `arguments` objects are cloned
       * as plain objects. An empty object is returned for uncloneable values such
       * as error objects, functions, DOM nodes, and WeakMaps.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to clone.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeep
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var shallow = _.clone(objects);
       * console.log(shallow[0] === objects[0]);
       * // => true
       */
      function clone(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }

      module.exports = clone;

      /***/
    },
    /* 138 */
    /***/function (module, exports, __webpack_require__) {

      var Stack = __webpack_require__(36),
          arrayEach = __webpack_require__(64),
          assignValue = __webpack_require__(37),
          baseAssign = __webpack_require__(161),
          baseAssignIn = __webpack_require__(163),
          cloneBuffer = __webpack_require__(68),
          copyArray = __webpack_require__(28),
          copySymbols = __webpack_require__(166),
          copySymbolsIn = __webpack_require__(168),
          getAllKeys = __webpack_require__(72),
          getAllKeysIn = __webpack_require__(169),
          getTag = __webpack_require__(21),
          initCloneArray = __webpack_require__(170),
          initCloneByTag = __webpack_require__(171),
          initCloneObject = __webpack_require__(77),
          isArray = __webpack_require__(6),
          isBuffer = __webpack_require__(17),
          isObject = __webpack_require__(8),
          keys = __webpack_require__(13);

      /** Used to compose bitmasks for cloning. */
      var CLONE_DEEP_FLAG = 1,
          CLONE_FLAT_FLAG = 2,
          CLONE_SYMBOLS_FLAG = 4;

      /** `Object#toString` result references. */
      var argsTag = '[object Arguments]',
          arrayTag = '[object Array]',
          boolTag = '[object Boolean]',
          dateTag = '[object Date]',
          errorTag = '[object Error]',
          funcTag = '[object Function]',
          genTag = '[object GeneratorFunction]',
          mapTag = '[object Map]',
          numberTag = '[object Number]',
          objectTag = '[object Object]',
          regexpTag = '[object RegExp]',
          setTag = '[object Set]',
          stringTag = '[object String]',
          symbolTag = '[object Symbol]',
          weakMapTag = '[object WeakMap]';

      var arrayBufferTag = '[object ArrayBuffer]',
          dataViewTag = '[object DataView]',
          float32Tag = '[object Float32Array]',
          float64Tag = '[object Float64Array]',
          int8Tag = '[object Int8Array]',
          int16Tag = '[object Int16Array]',
          int32Tag = '[object Int32Array]',
          uint8Tag = '[object Uint8Array]',
          uint8ClampedTag = '[object Uint8ClampedArray]',
          uint16Tag = '[object Uint16Array]',
          uint32Tag = '[object Uint32Array]';

      /** Used to identify `toStringTag` values supported by `_.clone`. */
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

      /**
       * The base implementation of `_.clone` and `_.cloneDeep` which tracks
       * traversed objects.
       *
       * @private
       * @param {*} value The value to clone.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Deep clone
       *  2 - Flatten inherited properties
       *  4 - Clone symbols
       * @param {Function} [customizer] The function to customize cloning.
       * @param {string} [key] The key of `value`.
       * @param {Object} [object] The parent object of `value`.
       * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
       * @returns {*} Returns the cloned value.
       */
      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;

        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result !== undefined) {
          return result;
        }
        if (!isObject(value)) {
          return value;
        }
        var isArr = isArray(value);
        if (isArr) {
          result = initCloneArray(value);
          if (!isDeep) {
            return copyArray(value, result);
          }
        } else {
          var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;

          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }
          if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result = isFlat || isFunc ? {} : initCloneObject(value);
            if (!isDeep) {
              return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }
            result = initCloneByTag(value, tag, baseClone, isDeep);
          }
        }
        // Check for circular references and return its corresponding clone.
        stack || (stack = new Stack());
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result);

        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;

        var props = isArr ? undefined : keysFunc(value);
        arrayEach(props || value, function (subValue, key) {
          if (props) {
            key = subValue;
            subValue = value[key];
          }
          // Recursively populate clone (susceptible to call stack limits).
          assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
        return result;
      }

      module.exports = baseClone;

      /***/
    },
    /* 139 */
    /***/function (module, exports) {

      /**
       * Removes all key-value entries from the list cache.
       *
       * @private
       * @name clear
       * @memberOf ListCache
       */
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }

      module.exports = listCacheClear;

      /***/
    },
    /* 140 */
    /***/function (module, exports, __webpack_require__) {

      var assocIndexOf = __webpack_require__(24);

      /** Used for built-in method references. */
      var arrayProto = Array.prototype;

      /** Built-in value references. */
      var splice = arrayProto.splice;

      /**
       * Removes `key` and its value from the list cache.
       *
       * @private
       * @name delete
       * @memberOf ListCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function listCacheDelete(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }

      module.exports = listCacheDelete;

      /***/
    },
    /* 141 */
    /***/function (module, exports, __webpack_require__) {

      var assocIndexOf = __webpack_require__(24);

      /**
       * Gets the list cache value for `key`.
       *
       * @private
       * @name get
       * @memberOf ListCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function listCacheGet(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        return index < 0 ? undefined : data[index][1];
      }

      module.exports = listCacheGet;

      /***/
    },
    /* 142 */
    /***/function (module, exports, __webpack_require__) {

      var assocIndexOf = __webpack_require__(24);

      /**
       * Checks if a list cache value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf ListCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }

      module.exports = listCacheHas;

      /***/
    },
    /* 143 */
    /***/function (module, exports, __webpack_require__) {

      var assocIndexOf = __webpack_require__(24);

      /**
       * Sets the list cache `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf ListCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the list cache instance.
       */
      function listCacheSet(key, value) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }

      module.exports = listCacheSet;

      /***/
    },
    /* 144 */
    /***/function (module, exports, __webpack_require__) {

      var ListCache = __webpack_require__(23);

      /**
       * Removes all key-value entries from the stack.
       *
       * @private
       * @name clear
       * @memberOf Stack
       */
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }

      module.exports = stackClear;

      /***/
    },
    /* 145 */
    /***/function (module, exports) {

      /**
       * Removes `key` and its value from the stack.
       *
       * @private
       * @name delete
       * @memberOf Stack
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function stackDelete(key) {
        var data = this.__data__,
            result = data['delete'](key);

        this.size = data.size;
        return result;
      }

      module.exports = stackDelete;

      /***/
    },
    /* 146 */
    /***/function (module, exports) {

      /**
       * Gets the stack value for `key`.
       *
       * @private
       * @name get
       * @memberOf Stack
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function stackGet(key) {
        return this.__data__.get(key);
      }

      module.exports = stackGet;

      /***/
    },
    /* 147 */
    /***/function (module, exports) {

      /**
       * Checks if a stack value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Stack
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function stackHas(key) {
        return this.__data__.has(key);
      }

      module.exports = stackHas;

      /***/
    },
    /* 148 */
    /***/function (module, exports, __webpack_require__) {

      var ListCache = __webpack_require__(23),
          Map = __webpack_require__(32),
          MapCache = __webpack_require__(63);

      /** Used as the size to enable large array optimizations. */
      var LARGE_ARRAY_SIZE = 200;

      /**
       * Sets the stack `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Stack
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the stack cache instance.
       */
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }

      module.exports = stackSet;

      /***/
    },
    /* 149 */
    /***/function (module, exports, __webpack_require__) {

      var Hash = __webpack_require__(150),
          ListCache = __webpack_require__(23),
          Map = __webpack_require__(32);

      /**
       * Removes all key-value entries from the map.
       *
       * @private
       * @name clear
       * @memberOf MapCache
       */
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          'hash': new Hash(),
          'map': new (Map || ListCache)(),
          'string': new Hash()
        };
      }

      module.exports = mapCacheClear;

      /***/
    },
    /* 150 */
    /***/function (module, exports, __webpack_require__) {

      var hashClear = __webpack_require__(151),
          hashDelete = __webpack_require__(152),
          hashGet = __webpack_require__(153),
          hashHas = __webpack_require__(154),
          hashSet = __webpack_require__(155);

      /**
       * Creates a hash object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      // Add methods to `Hash`.
      Hash.prototype.clear = hashClear;
      Hash.prototype['delete'] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;

      module.exports = Hash;

      /***/
    },
    /* 151 */
    /***/function (module, exports, __webpack_require__) {

      var nativeCreate = __webpack_require__(25);

      /**
       * Removes all key-value entries from the hash.
       *
       * @private
       * @name clear
       * @memberOf Hash
       */
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }

      module.exports = hashClear;

      /***/
    },
    /* 152 */
    /***/function (module, exports) {

      /**
       * Removes `key` and its value from the hash.
       *
       * @private
       * @name delete
       * @memberOf Hash
       * @param {Object} hash The hash to modify.
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }

      module.exports = hashDelete;

      /***/
    },
    /* 153 */
    /***/function (module, exports, __webpack_require__) {

      var nativeCreate = __webpack_require__(25);

      /** Used to stand-in for `undefined` hash values. */
      var HASH_UNDEFINED = '__lodash_hash_undefined__';

      /** Used for built-in method references. */
      var objectProto = Object.prototype;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /**
       * Gets the hash value for `key`.
       *
       * @private
       * @name get
       * @memberOf Hash
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? undefined : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : undefined;
      }

      module.exports = hashGet;

      /***/
    },
    /* 154 */
    /***/function (module, exports, __webpack_require__) {

      var nativeCreate = __webpack_require__(25);

      /** Used for built-in method references. */
      var objectProto = Object.prototype;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /**
       * Checks if a hash value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Hash
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
      }

      module.exports = hashHas;

      /***/
    },
    /* 155 */
    /***/function (module, exports, __webpack_require__) {

      var nativeCreate = __webpack_require__(25);

      /** Used to stand-in for `undefined` hash values. */
      var HASH_UNDEFINED = '__lodash_hash_undefined__';

      /**
       * Sets the hash `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Hash
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the hash instance.
       */
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
        return this;
      }

      module.exports = hashSet;

      /***/
    },
    /* 156 */
    /***/function (module, exports, __webpack_require__) {

      var getMapData = __webpack_require__(26);

      /**
       * Removes `key` and its value from the map.
       *
       * @private
       * @name delete
       * @memberOf MapCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function mapCacheDelete(key) {
        var result = getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
      }

      module.exports = mapCacheDelete;

      /***/
    },
    /* 157 */
    /***/function (module, exports) {

      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      };

      /**
       * Checks if `value` is suitable for use as unique object key.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
       */
      function isKeyable(value) {
        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
        return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
      }

      module.exports = isKeyable;

      /***/
    },
    /* 158 */
    /***/function (module, exports, __webpack_require__) {

      var getMapData = __webpack_require__(26);

      /**
       * Gets the map value for `key`.
       *
       * @private
       * @name get
       * @memberOf MapCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }

      module.exports = mapCacheGet;

      /***/
    },
    /* 159 */
    /***/function (module, exports, __webpack_require__) {

      var getMapData = __webpack_require__(26);

      /**
       * Checks if a map value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf MapCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }

      module.exports = mapCacheHas;

      /***/
    },
    /* 160 */
    /***/function (module, exports, __webpack_require__) {

      var getMapData = __webpack_require__(26);

      /**
       * Sets the map `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf MapCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the map cache instance.
       */
      function mapCacheSet(key, value) {
        var data = getMapData(this, key),
            size = data.size;

        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }

      module.exports = mapCacheSet;

      /***/
    },
    /* 161 */
    /***/function (module, exports, __webpack_require__) {

      var copyObject = __webpack_require__(12),
          keys = __webpack_require__(13);

      /**
       * The base implementation of `_.assign` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */
      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }

      module.exports = baseAssign;

      /***/
    },
    /* 162 */
    /***/function (module, exports) {

      /**
       * The base implementation of `_.times` without support for iteratee shorthands
       * or max array length checks.
       *
       * @private
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       */
      function baseTimes(n, iteratee) {
        var index = -1,
            result = Array(n);

        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }

      module.exports = baseTimes;

      /***/
    },
    /* 163 */
    /***/function (module, exports, __webpack_require__) {

      var copyObject = __webpack_require__(12),
          keysIn = __webpack_require__(27);

      /**
       * The base implementation of `_.assignIn` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */
      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }

      module.exports = baseAssignIn;

      /***/
    },
    /* 164 */
    /***/function (module, exports, __webpack_require__) {

      var isObject = __webpack_require__(8),
          isPrototype = __webpack_require__(16),
          nativeKeysIn = __webpack_require__(165);

      /** Used for built-in method references. */
      var objectProto = Object.prototype;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /**
       * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object),
            result = [];

        for (var key in object) {
          if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }

      module.exports = baseKeysIn;

      /***/
    },
    /* 165 */
    /***/function (module, exports) {

      /**
       * This function is like
       * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * except that it includes inherited enumerable properties.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }

      module.exports = nativeKeysIn;

      /***/
    },
    /* 166 */
    /***/function (module, exports, __webpack_require__) {

      var copyObject = __webpack_require__(12),
          getSymbols = __webpack_require__(39);

      /**
       * Copies own symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */
      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }

      module.exports = copySymbols;

      /***/
    },
    /* 167 */
    /***/function (module, exports) {

      /**
       * A specialized version of `_.filter` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */
      function arrayFilter(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }

      module.exports = arrayFilter;

      /***/
    },
    /* 168 */
    /***/function (module, exports, __webpack_require__) {

      var copyObject = __webpack_require__(12),
          getSymbolsIn = __webpack_require__(70);

      /**
       * Copies own and inherited symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */
      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }

      module.exports = copySymbolsIn;

      /***/
    },
    /* 169 */
    /***/function (module, exports, __webpack_require__) {

      var baseGetAllKeys = __webpack_require__(73),
          getSymbolsIn = __webpack_require__(70),
          keysIn = __webpack_require__(27);

      /**
       * Creates an array of own and inherited enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }

      module.exports = getAllKeysIn;

      /***/
    },
    /* 170 */
    /***/function (module, exports) {

      /** Used for built-in method references. */
      var objectProto = Object.prototype;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /**
       * Initializes an array clone.
       *
       * @private
       * @param {Array} array The array to clone.
       * @returns {Array} Returns the initialized clone.
       */
      function initCloneArray(array) {
        var length = array.length,
            result = array.constructor(length);

        // Add properties assigned by `RegExp#exec`.
        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
          result.index = array.index;
          result.input = array.input;
        }
        return result;
      }

      module.exports = initCloneArray;

      /***/
    },
    /* 171 */
    /***/function (module, exports, __webpack_require__) {

      var cloneArrayBuffer = __webpack_require__(41),
          cloneDataView = __webpack_require__(172),
          cloneMap = __webpack_require__(173),
          cloneRegExp = __webpack_require__(175),
          cloneSet = __webpack_require__(176),
          cloneSymbol = __webpack_require__(178),
          cloneTypedArray = __webpack_require__(76);

      /** `Object#toString` result references. */
      var boolTag = '[object Boolean]',
          dateTag = '[object Date]',
          mapTag = '[object Map]',
          numberTag = '[object Number]',
          regexpTag = '[object RegExp]',
          setTag = '[object Set]',
          stringTag = '[object String]',
          symbolTag = '[object Symbol]';

      var arrayBufferTag = '[object ArrayBuffer]',
          dataViewTag = '[object DataView]',
          float32Tag = '[object Float32Array]',
          float64Tag = '[object Float64Array]',
          int8Tag = '[object Int8Array]',
          int16Tag = '[object Int16Array]',
          int32Tag = '[object Int32Array]',
          uint8Tag = '[object Uint8Array]',
          uint8ClampedTag = '[object Uint8ClampedArray]',
          uint16Tag = '[object Uint16Array]',
          uint32Tag = '[object Uint32Array]';

      /**
       * Initializes an object clone based on its `toStringTag`.
       *
       * **Note:** This function only supports cloning values with tags of
       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
       *
       * @private
       * @param {Object} object The object to clone.
       * @param {string} tag The `toStringTag` of the object to clone.
       * @param {Function} cloneFunc The function to clone values.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the initialized clone.
       */
      function initCloneByTag(object, tag, cloneFunc, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);

          case boolTag:
          case dateTag:
            return new Ctor(+object);

          case dataViewTag:
            return cloneDataView(object, isDeep);

          case float32Tag:case float64Tag:
          case int8Tag:case int16Tag:case int32Tag:
          case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
            return cloneTypedArray(object, isDeep);

          case mapTag:
            return cloneMap(object, isDeep, cloneFunc);

          case numberTag:
          case stringTag:
            return new Ctor(object);

          case regexpTag:
            return cloneRegExp(object);

          case setTag:
            return cloneSet(object, isDeep, cloneFunc);

          case symbolTag:
            return cloneSymbol(object);
        }
      }

      module.exports = initCloneByTag;

      /***/
    },
    /* 172 */
    /***/function (module, exports, __webpack_require__) {

      var cloneArrayBuffer = __webpack_require__(41);

      /**
       * Creates a clone of `dataView`.
       *
       * @private
       * @param {Object} dataView The data view to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned data view.
       */
      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }

      module.exports = cloneDataView;

      /***/
    },
    /* 173 */
    /***/function (module, exports, __webpack_require__) {

      var addMapEntry = __webpack_require__(174),
          arrayReduce = __webpack_require__(75),
          mapToArray = __webpack_require__(42);

      /** Used to compose bitmasks for cloning. */
      var CLONE_DEEP_FLAG = 1;

      /**
       * Creates a clone of `map`.
       *
       * @private
       * @param {Object} map The map to clone.
       * @param {Function} cloneFunc The function to clone values.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned map.
       */
      function cloneMap(map, isDeep, cloneFunc) {
        var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
        return arrayReduce(array, addMapEntry, new map.constructor());
      }

      module.exports = cloneMap;

      /***/
    },
    /* 174 */
    /***/function (module, exports) {

      /**
       * Adds the key-value `pair` to `map`.
       *
       * @private
       * @param {Object} map The map to modify.
       * @param {Array} pair The key-value pair to add.
       * @returns {Object} Returns `map`.
       */
      function addMapEntry(map, pair) {
        // Don't return `map.set` because it's not chainable in IE 11.
        map.set(pair[0], pair[1]);
        return map;
      }

      module.exports = addMapEntry;

      /***/
    },
    /* 175 */
    /***/function (module, exports) {

      /** Used to match `RegExp` flags from their coerced string values. */
      var reFlags = /\w*$/;

      /**
       * Creates a clone of `regexp`.
       *
       * @private
       * @param {Object} regexp The regexp to clone.
       * @returns {Object} Returns the cloned regexp.
       */
      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }

      module.exports = cloneRegExp;

      /***/
    },
    /* 176 */
    /***/function (module, exports, __webpack_require__) {

      var addSetEntry = __webpack_require__(177),
          arrayReduce = __webpack_require__(75),
          setToArray = __webpack_require__(43);

      /** Used to compose bitmasks for cloning. */
      var CLONE_DEEP_FLAG = 1;

      /**
       * Creates a clone of `set`.
       *
       * @private
       * @param {Object} set The set to clone.
       * @param {Function} cloneFunc The function to clone values.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned set.
       */
      function cloneSet(set, isDeep, cloneFunc) {
        var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
        return arrayReduce(array, addSetEntry, new set.constructor());
      }

      module.exports = cloneSet;

      /***/
    },
    /* 177 */
    /***/function (module, exports) {

      /**
       * Adds `value` to `set`.
       *
       * @private
       * @param {Object} set The set to modify.
       * @param {*} value The value to add.
       * @returns {Object} Returns `set`.
       */
      function addSetEntry(set, value) {
        // Don't return `set.add` because it's not chainable in IE 11.
        set.add(value);
        return set;
      }

      module.exports = addSetEntry;

      /***/
    },
    /* 178 */
    /***/function (module, exports, __webpack_require__) {

      var _Symbol = __webpack_require__(11);

      /** Used to convert symbols to primitives and strings. */
      var symbolProto = _Symbol ? _Symbol.prototype : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

      /**
       * Creates a clone of the `symbol` object.
       *
       * @private
       * @param {Object} symbol The symbol object to clone.
       * @returns {Object} Returns the cloned symbol object.
       */
      function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
      }

      module.exports = cloneSymbol;

      /***/
    },
    /* 179 */
    /***/function (module, exports, __webpack_require__) {

      var isObject = __webpack_require__(8);

      /** Built-in value references. */
      var objectCreate = Object.create;

      /**
       * The base implementation of `_.create` without support for assigning
       * properties to the created object.
       *
       * @private
       * @param {Object} proto The object to inherit from.
       * @returns {Object} Returns the new object.
       */
      var baseCreate = function () {
        function object() {}
        return function (proto) {
          if (!isObject(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result = new object();
          object.prototype = undefined;
          return result;
        };
      }();

      module.exports = baseCreate;

      /***/
    },
    /* 180 */
    /***/function (module, exports, __webpack_require__) {

      var assignValue = __webpack_require__(37),
          copyObject = __webpack_require__(12),
          createAssigner = __webpack_require__(78),
          isArrayLike = __webpack_require__(9),
          isPrototype = __webpack_require__(16),
          keys = __webpack_require__(13);

      /** Used for built-in method references. */
      var objectProto = Object.prototype;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /**
       * Assigns own enumerable string keyed properties of source objects to the
       * destination object. Source objects are applied from left to right.
       * Subsequent sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object` and is loosely based on
       * [`Object.assign`](https://mdn.io/Object/assign).
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assignIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assign({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'c': 3 }
       */
      var assign = createAssigner(function (object, source) {
        if (isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }
        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });

      module.exports = assign;

      /***/
    },
    /* 181 */
    /***/function (module, exports, __webpack_require__) {

      var apply = __webpack_require__(182);

      /* Built-in method references for those with the same name as other `lodash` methods. */
      var nativeMax = Math.max;

      /**
       * A specialized version of `baseRest` which transforms the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @param {Function} transform The rest array transform.
       * @returns {Function} Returns the new function.
       */
      function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? func.length - 1 : start, 0);
        return function () {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

          while (++index < length) {
            array[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = transform(array);
          return apply(func, this, otherArgs);
        };
      }

      module.exports = overRest;

      /***/
    },
    /* 182 */
    /***/function (module, exports) {

      /**
       * A faster alternative to `Function#apply`, this function invokes `func`
       * with the `this` binding of `thisArg` and the arguments of `args`.
       *
       * @private
       * @param {Function} func The function to invoke.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} args The arguments to invoke `func` with.
       * @returns {*} Returns the result of `func`.
       */
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }

      module.exports = apply;

      /***/
    },
    /* 183 */
    /***/function (module, exports, __webpack_require__) {

      var baseSetToString = __webpack_require__(184),
          shortOut = __webpack_require__(186);

      /**
       * Sets the `toString` method of `func` to return `string`.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */
      var setToString = shortOut(baseSetToString);

      module.exports = setToString;

      /***/
    },
    /* 184 */
    /***/function (module, exports, __webpack_require__) {

      var constant = __webpack_require__(185),
          defineProperty = __webpack_require__(65),
          identity = __webpack_require__(44);

      /**
       * The base implementation of `setToString` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */
      var baseSetToString = !defineProperty ? identity : function (func, string) {
        return defineProperty(func, 'toString', {
          'configurable': true,
          'enumerable': false,
          'value': constant(string),
          'writable': true
        });
      };

      module.exports = baseSetToString;

      /***/
    },
    /* 185 */
    /***/function (module, exports) {

      /**
       * Creates a function that returns `value`.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {*} value The value to return from the new function.
       * @returns {Function} Returns the new constant function.
       * @example
       *
       * var objects = _.times(2, _.constant({ 'a': 1 }));
       *
       * console.log(objects);
       * // => [{ 'a': 1 }, { 'a': 1 }]
       *
       * console.log(objects[0] === objects[1]);
       * // => true
       */
      function constant(value) {
        return function () {
          return value;
        };
      }

      module.exports = constant;

      /***/
    },
    /* 186 */
    /***/function (module, exports) {

      /** Used to detect hot functions by number of calls within a span of milliseconds. */
      var HOT_COUNT = 800,
          HOT_SPAN = 16;

      /* Built-in method references for those with the same name as other `lodash` methods. */
      var nativeNow = Date.now;

      /**
       * Creates a function that'll short out and invoke `identity` instead
       * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
       * milliseconds.
       *
       * @private
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new shortable function.
       */
      function shortOut(func) {
        var count = 0,
            lastCalled = 0;

        return function () {
          var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);

          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(undefined, arguments);
        };
      }

      module.exports = shortOut;

      /***/
    },
    /* 187 */
    /***/function (module, exports, __webpack_require__) {

      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      };

      var eq = __webpack_require__(18),
          isArrayLike = __webpack_require__(9),
          isIndex = __webpack_require__(67),
          isObject = __webpack_require__(8);

      /**
       * Checks if the given arguments are from an iteratee call.
       *
       * @private
       * @param {*} value The potential iteratee value argument.
       * @param {*} index The potential iteratee index or key argument.
       * @param {*} object The potential iteratee object argument.
       * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
       *  else `false`.
       */
      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }
        var type = typeof index === 'undefined' ? 'undefined' : _typeof(index);
        if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
          return eq(object[index], value);
        }
        return false;
      }

      module.exports = isIterateeCall;

      /***/
    },
    /* 188 */
    /***/function (module, exports, __webpack_require__) {

      var baseMerge = __webpack_require__(189),
          createAssigner = __webpack_require__(78);

      /**
       * This method is like `_.assign` except that it recursively merges own and
       * inherited enumerable string keyed properties of source objects into the
       * destination object. Source properties that resolve to `undefined` are
       * skipped if a destination value exists. Array and plain object properties
       * are merged recursively. Other objects and value types are overridden by
       * assignment. Source objects are applied from left to right. Subsequent
       * sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {
       *   'a': [{ 'b': 2 }, { 'd': 4 }]
       * };
       *
       * var other = {
       *   'a': [{ 'c': 3 }, { 'e': 5 }]
       * };
       *
       * _.merge(object, other);
       * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
       */
      var merge = createAssigner(function (object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });

      module.exports = merge;

      /***/
    },
    /* 189 */
    /***/function (module, exports, __webpack_require__) {

      var Stack = __webpack_require__(36),
          assignMergeValue = __webpack_require__(80),
          baseFor = __webpack_require__(81),
          baseMergeDeep = __webpack_require__(191),
          isObject = __webpack_require__(8),
          keysIn = __webpack_require__(27);

      /**
       * The base implementation of `_.merge` without support for multiple sources.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} [customizer] The function to customize merged values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor(source, function (srcValue, key) {
          if (isObject(srcValue)) {
            stack || (stack = new Stack());
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;

            if (newValue === undefined) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }

      module.exports = baseMerge;

      /***/
    },
    /* 190 */
    /***/function (module, exports) {

      /**
       * Creates a base function for methods like `_.forIn` and `_.forOwn`.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseFor(fromRight) {
        return function (object, iteratee, keysFunc) {
          var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }

      module.exports = createBaseFor;

      /***/
    },
    /* 191 */
    /***/function (module, exports, __webpack_require__) {

      var assignMergeValue = __webpack_require__(80),
          cloneBuffer = __webpack_require__(68),
          cloneTypedArray = __webpack_require__(76),
          copyArray = __webpack_require__(28),
          initCloneObject = __webpack_require__(77),
          isArguments = __webpack_require__(33),
          isArray = __webpack_require__(6),
          isArrayLikeObject = __webpack_require__(192),
          isBuffer = __webpack_require__(17),
          isFunction = __webpack_require__(20),
          isObject = __webpack_require__(8),
          isPlainObject = __webpack_require__(193),
          isTypedArray = __webpack_require__(22),
          toPlainObject = __webpack_require__(194);

      /**
       * A specialized version of `baseMerge` for arrays and objects which performs
       * deep merges and tracks traversed objects enabling objects with circular
       * references to be merged.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {string} key The key of the value to merge.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} mergeFunc The function to merge values.
       * @param {Function} [customizer] The function to customize assigned values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = object[key],
            srcValue = source[key],
            stacked = stack.get(srcValue);

        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;

        var isCommon = newValue === undefined;

        if (isCommon) {
          var isArr = isArray(srcValue),
              isBuff = !isArr && isBuffer(srcValue),
              isTyped = !isArr && !isBuff && isTypedArray(srcValue);

          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          // Recursively merge objects and arrays (susceptible to call stack limits).
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack['delete'](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }

      module.exports = baseMergeDeep;

      /***/
    },
    /* 192 */
    /***/function (module, exports, __webpack_require__) {

      var isArrayLike = __webpack_require__(9),
          isObjectLike = __webpack_require__(5);

      /**
       * This method is like `_.isArrayLike` except that it also checks if `value`
       * is an object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array-like object,
       *  else `false`.
       * @example
       *
       * _.isArrayLikeObject([1, 2, 3]);
       * // => true
       *
       * _.isArrayLikeObject(document.body.children);
       * // => true
       *
       * _.isArrayLikeObject('abc');
       * // => false
       *
       * _.isArrayLikeObject(_.noop);
       * // => false
       */
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }

      module.exports = isArrayLikeObject;

      /***/
    },
    /* 193 */
    /***/function (module, exports, __webpack_require__) {

      var baseGetTag = __webpack_require__(7),
          getPrototype = __webpack_require__(40),
          isObjectLike = __webpack_require__(5);

      /** `Object#toString` result references. */
      var objectTag = '[object Object]';

      /** Used for built-in method references. */
      var funcProto = Function.prototype,
          objectProto = Object.prototype;

      /** Used to resolve the decompiled source of functions. */
      var funcToString = funcProto.toString;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /** Used to infer the `Object` constructor. */
      var objectCtorString = funcToString.call(Object);

      /**
       * Checks if `value` is a plain object, that is, an object created by the
       * `Object` constructor or one with a `[[Prototype]]` of `null`.
       *
       * @static
       * @memberOf _
       * @since 0.8.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * _.isPlainObject(new Foo);
       * // => false
       *
       * _.isPlainObject([1, 2, 3]);
       * // => false
       *
       * _.isPlainObject({ 'x': 0, 'y': 0 });
       * // => true
       *
       * _.isPlainObject(Object.create(null));
       * // => true
       */
      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }

      module.exports = isPlainObject;

      /***/
    },
    /* 194 */
    /***/function (module, exports, __webpack_require__) {

      var copyObject = __webpack_require__(12),
          keysIn = __webpack_require__(27);

      /**
       * Converts `value` to a plain object flattening inherited enumerable string
       * keyed properties of `value` to own properties of the plain object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Object} Returns the converted plain object.
       * @example
       *
       * function Foo() {
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.assign({ 'a': 1 }, new Foo);
       * // => { 'a': 1, 'b': 2 }
       *
       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
       * // => { 'a': 1, 'b': 2, 'c': 3 }
       */
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }

      module.exports = toPlainObject;

      /***/
    },
    /* 195 */
    /***/function (module, exports, __webpack_require__) {

      var createCaseFirst = __webpack_require__(196);

      /**
       * Converts the first character of `string` to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.upperFirst('fred');
       * // => 'Fred'
       *
       * _.upperFirst('FRED');
       * // => 'FRED'
       */
      var upperFirst = createCaseFirst('toUpperCase');

      module.exports = upperFirst;

      /***/
    },
    /* 196 */
    /***/function (module, exports, __webpack_require__) {

      var castSlice = __webpack_require__(197),
          hasUnicode = __webpack_require__(82),
          stringToArray = __webpack_require__(83),
          toString = __webpack_require__(62);

      /**
       * Creates a function like `_.lowerFirst`.
       *
       * @private
       * @param {string} methodName The name of the `String` case method to use.
       * @returns {Function} Returns the new case function.
       */
      function createCaseFirst(methodName) {
        return function (string) {
          string = toString(string);

          var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;

          var chr = strSymbols ? strSymbols[0] : string.charAt(0);

          var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);

          return chr[methodName]() + trailing;
        };
      }

      module.exports = createCaseFirst;

      /***/
    },
    /* 197 */
    /***/function (module, exports, __webpack_require__) {

      var baseSlice = __webpack_require__(198);

      /**
       * Casts `array` to a slice if it's needed.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {number} start The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the cast slice.
       */
      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined ? length : end;
        return !start && end >= length ? array : baseSlice(array, start, end);
      }

      module.exports = castSlice;

      /***/
    },
    /* 198 */
    /***/function (module, exports) {

      /**
       * The base implementation of `_.slice` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */
      function baseSlice(array, start, end) {
        var index = -1,
            length = array.length;

        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }
        end = end > length ? length : end;
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;

        var result = Array(length);
        while (++index < length) {
          result[index] = array[index + start];
        }
        return result;
      }

      module.exports = baseSlice;

      /***/
    },
    /* 199 */
    /***/function (module, exports) {

      /**
       * Converts an ASCII `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function asciiToArray(string) {
        return string.split('');
      }

      module.exports = asciiToArray;

      /***/
    },
    /* 200 */
    /***/function (module, exports) {

      /** Used to compose unicode character classes. */
      var rsAstralRange = '\\ud800-\\udfff',
          rsComboMarksRange = '\\u0300-\\u036f',
          reComboHalfMarksRange = '\\ufe20-\\ufe2f',
          rsComboSymbolsRange = '\\u20d0-\\u20ff',
          rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
          rsVarRange = '\\ufe0e\\ufe0f';

      /** Used to compose unicode capture groups. */
      var rsAstral = '[' + rsAstralRange + ']',
          rsCombo = '[' + rsComboRange + ']',
          rsFitz = '\\ud83c[\\udffb-\\udfff]',
          rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
          rsNonAstral = '[^' + rsAstralRange + ']',
          rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
          rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
          rsZWJ = '\\u200d';

      /** Used to compose unicode regexes. */
      var reOptMod = rsModifier + '?',
          rsOptVar = '[' + rsVarRange + ']?',
          rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
          rsSeq = rsOptVar + reOptMod + rsOptJoin,
          rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

      /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
      var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

      /**
       * Converts a Unicode `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }

      module.exports = unicodeToArray;

      /***/
    },
    /* 201 */
    /***/function (module, exports, __webpack_require__) {

      var baseRest = __webpack_require__(79),
          pullAll = __webpack_require__(202);

      /**
       * Removes all given values from `array` using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
       * to remove elements from an array by predicate.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...*} [values] The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pull(array, 'a', 'c');
       * console.log(array);
       * // => ['b', 'b']
       */
      var pull = baseRest(pullAll);

      module.exports = pull;

      /***/
    },
    /* 202 */
    /***/function (module, exports, __webpack_require__) {

      var basePullAll = __webpack_require__(203);

      /**
       * This method is like `_.pull` except that it accepts an array of values to remove.
       *
       * **Note:** Unlike `_.difference`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pullAll(array, ['a', 'c']);
       * console.log(array);
       * // => ['b', 'b']
       */
      function pullAll(array, values) {
        return array && array.length && values && values.length ? basePullAll(array, values) : array;
      }

      module.exports = pullAll;

      /***/
    },
    /* 203 */
    /***/function (module, exports, __webpack_require__) {

      var arrayMap = __webpack_require__(35),
          baseIndexOf = __webpack_require__(204),
          baseIndexOfWith = __webpack_require__(208),
          baseUnary = __webpack_require__(61),
          copyArray = __webpack_require__(28);

      /** Used for built-in method references. */
      var arrayProto = Array.prototype;

      /** Built-in value references. */
      var splice = arrayProto.splice;

      /**
       * The base implementation of `_.pullAllBy` without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       */
      function basePullAll(array, values, iteratee, comparator) {
        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values.length,
            seen = array;

        if (array === values) {
          values = copyArray(values);
        }
        if (iteratee) {
          seen = arrayMap(array, baseUnary(iteratee));
        }
        while (++index < length) {
          var fromIndex = 0,
              value = values[index],
              computed = iteratee ? iteratee(value) : value;

          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }
            splice.call(array, fromIndex, 1);
          }
        }
        return array;
      }

      module.exports = basePullAll;

      /***/
    },
    /* 204 */
    /***/function (module, exports, __webpack_require__) {

      var baseFindIndex = __webpack_require__(205),
          baseIsNaN = __webpack_require__(206),
          strictIndexOf = __webpack_require__(207);

      /**
       * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }

      module.exports = baseIndexOf;

      /***/
    },
    /* 205 */
    /***/function (module, exports) {

      /**
       * The base implementation of `_.findIndex` and `_.findLastIndex` without
       * support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} predicate The function invoked per iteration.
       * @param {number} fromIndex The index to search from.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length,
            index = fromIndex + (fromRight ? 1 : -1);

        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }

      module.exports = baseFindIndex;

      /***/
    },
    /* 206 */
    /***/function (module, exports) {

      /**
       * The base implementation of `_.isNaN` without support for number objects.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
       */
      function baseIsNaN(value) {
        return value !== value;
      }

      module.exports = baseIsNaN;

      /***/
    },
    /* 207 */
    /***/function (module, exports) {

      /**
       * A specialized version of `_.indexOf` which performs strict equality
       * comparisons of values, i.e. `===`.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1,
            length = array.length;

        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }

      module.exports = strictIndexOf;

      /***/
    },
    /* 208 */
    /***/function (module, exports) {

      /**
       * This function is like `baseIndexOf` except that it accepts a comparator.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @param {Function} comparator The comparator invoked per element.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1,
            length = array.length;

        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }

      module.exports = baseIndexOfWith;

      /***/
    },
    /* 209 */
    /***/function (module, exports, __webpack_require__) {

      var arrayEach = __webpack_require__(64),
          baseEach = __webpack_require__(210),
          castFunction = __webpack_require__(213),
          isArray = __webpack_require__(6);

      /**
       * Iterates over elements of `collection` and invokes `iteratee` for each element.
       * The iteratee is invoked with three arguments: (value, index|key, collection).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * **Note:** As with other "Collections" methods, objects with a "length"
       * property are iterated like arrays. To avoid this behavior use `_.forIn`
       * or `_.forOwn` for object iteration.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias each
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEachRight
       * @example
       *
       * _.forEach([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `1` then `2`.
       *
       * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */
      function forEach(collection, iteratee) {
        var func = isArray(collection) ? arrayEach : baseEach;
        return func(collection, castFunction(iteratee));
      }

      module.exports = forEach;

      /***/
    },
    /* 210 */
    /***/function (module, exports, __webpack_require__) {

      var baseForOwn = __webpack_require__(211),
          createBaseEach = __webpack_require__(212);

      /**
       * The base implementation of `_.forEach` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */
      var baseEach = createBaseEach(baseForOwn);

      module.exports = baseEach;

      /***/
    },
    /* 211 */
    /***/function (module, exports, __webpack_require__) {

      var baseFor = __webpack_require__(81),
          keys = __webpack_require__(13);

      /**
       * The base implementation of `_.forOwn` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */
      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }

      module.exports = baseForOwn;

      /***/
    },
    /* 212 */
    /***/function (module, exports, __webpack_require__) {

      var isArrayLike = __webpack_require__(9);

      /**
       * Creates a `baseEach` or `baseEachRight` function.
       *
       * @private
       * @param {Function} eachFunc The function to iterate over a collection.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseEach(eachFunc, fromRight) {
        return function (collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);

          while (fromRight ? index-- : ++index < length) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }

      module.exports = createBaseEach;

      /***/
    },
    /* 213 */
    /***/function (module, exports, __webpack_require__) {

      var identity = __webpack_require__(44);

      /**
       * Casts `value` to `identity` if it's not a function.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Function} Returns cast function.
       */
      function castFunction(value) {
        return typeof value == 'function' ? value : identity;
      }

      module.exports = castFunction;

      /***/
    },
    /* 214 */
    /***/function (module, exports, __webpack_require__) {

      var baseIsEqual = __webpack_require__(215);

      /**
       * Performs a deep comparison between two values to determine if they are
       * equivalent.
       *
       * **Note:** This method supports comparing arrays, array buffers, booleans,
       * date objects, error objects, maps, numbers, `Object` objects, regexes,
       * sets, strings, symbols, and typed arrays. `Object` objects are compared
       * by their own, not inherited, enumerable properties. Functions and DOM
       * nodes are compared by strict equality, i.e. `===`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.isEqual(object, other);
       * // => true
       *
       * object === other;
       * // => false
       */
      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }

      module.exports = isEqual;

      /***/
    },
    /* 215 */
    /***/function (module, exports, __webpack_require__) {

      var baseIsEqualDeep = __webpack_require__(216),
          isObjectLike = __webpack_require__(5);

      /**
       * The base implementation of `_.isEqual` which supports partial comparisons
       * and tracks traversed objects.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Unordered comparison
       *  2 - Partial comparison
       * @param {Function} [customizer] The function to customize comparisons.
       * @param {Object} [stack] Tracks traversed `value` and `other` objects.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       */
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }

      module.exports = baseIsEqual;

      /***/
    },
    /* 216 */
    /***/function (module, exports, __webpack_require__) {

      var Stack = __webpack_require__(36),
          equalArrays = __webpack_require__(84),
          equalByTag = __webpack_require__(222),
          equalObjects = __webpack_require__(223),
          getTag = __webpack_require__(21),
          isArray = __webpack_require__(6),
          isBuffer = __webpack_require__(17),
          isTypedArray = __webpack_require__(22);

      /** Used to compose bitmasks for value comparisons. */
      var COMPARE_PARTIAL_FLAG = 1;

      /** `Object#toString` result references. */
      var argsTag = '[object Arguments]',
          arrayTag = '[object Array]',
          objectTag = '[object Object]';

      /** Used for built-in method references. */
      var objectProto = Object.prototype;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /**
       * A specialized version of `baseIsEqual` for arrays and objects which performs
       * deep comparisons and tracks traversed objects enabling objects with circular
       * references to be compared.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} [stack] Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);

        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;

        var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;

            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }

      module.exports = baseIsEqualDeep;

      /***/
    },
    /* 217 */
    /***/function (module, exports, __webpack_require__) {

      var MapCache = __webpack_require__(63),
          setCacheAdd = __webpack_require__(218),
          setCacheHas = __webpack_require__(219);

      /**
       *
       * Creates an array cache object to store unique values.
       *
       * @private
       * @constructor
       * @param {Array} [values] The values to cache.
       */
      function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;

        this.__data__ = new MapCache();
        while (++index < length) {
          this.add(values[index]);
        }
      }

      // Add methods to `SetCache`.
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;

      module.exports = SetCache;

      /***/
    },
    /* 218 */
    /***/function (module, exports) {

      /** Used to stand-in for `undefined` hash values. */
      var HASH_UNDEFINED = '__lodash_hash_undefined__';

      /**
       * Adds `value` to the array cache.
       *
       * @private
       * @name add
       * @memberOf SetCache
       * @alias push
       * @param {*} value The value to cache.
       * @returns {Object} Returns the cache instance.
       */
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }

      module.exports = setCacheAdd;

      /***/
    },
    /* 219 */
    /***/function (module, exports) {

      /**
       * Checks if `value` is in the array cache.
       *
       * @private
       * @name has
       * @memberOf SetCache
       * @param {*} value The value to search for.
       * @returns {number} Returns `true` if `value` is found, else `false`.
       */
      function setCacheHas(value) {
        return this.__data__.has(value);
      }

      module.exports = setCacheHas;

      /***/
    },
    /* 220 */
    /***/function (module, exports) {

      /**
       * A specialized version of `_.some` for arrays without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */
      function arraySome(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }

      module.exports = arraySome;

      /***/
    },
    /* 221 */
    /***/function (module, exports) {

      /**
       * Checks if a `cache` value for `key` exists.
       *
       * @private
       * @param {Object} cache The cache to query.
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function cacheHas(cache, key) {
        return cache.has(key);
      }

      module.exports = cacheHas;

      /***/
    },
    /* 222 */
    /***/function (module, exports, __webpack_require__) {

      var _Symbol = __webpack_require__(11),
          Uint8Array = __webpack_require__(74),
          eq = __webpack_require__(18),
          equalArrays = __webpack_require__(84),
          mapToArray = __webpack_require__(42),
          setToArray = __webpack_require__(43);

      /** Used to compose bitmasks for value comparisons. */
      var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

      /** `Object#toString` result references. */
      var boolTag = '[object Boolean]',
          dateTag = '[object Date]',
          errorTag = '[object Error]',
          mapTag = '[object Map]',
          numberTag = '[object Number]',
          regexpTag = '[object RegExp]',
          setTag = '[object Set]',
          stringTag = '[object String]',
          symbolTag = '[object Symbol]';

      var arrayBufferTag = '[object ArrayBuffer]',
          dataViewTag = '[object DataView]';

      /** Used to convert symbols to primitives and strings. */
      var symbolProto = _Symbol ? _Symbol.prototype : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

      /**
       * A specialized version of `baseIsEqualDeep` for comparing objects of
       * the same `toStringTag`.
       *
       * **Note:** This function only supports comparing values with tags of
       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {string} tag The `toStringTag` of the objects to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;

          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
              return false;
            }
            return true;

          case boolTag:
          case dateTag:
          case numberTag:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return eq(+object, +other);

          case errorTag:
            return object.name == other.name && object.message == other.message;

          case regexpTag:
          case stringTag:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == other + '';

          case mapTag:
            var convert = mapToArray;

          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);

            if (object.size != other.size && !isPartial) {
              return false;
            }
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;

            // Recursively compare objects (susceptible to call stack limits).
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;

          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }

      module.exports = equalByTag;

      /***/
    },
    /* 223 */
    /***/function (module, exports, __webpack_require__) {

      var getAllKeys = __webpack_require__(72);

      /** Used to compose bitmasks for value comparisons. */
      var COMPARE_PARTIAL_FLAG = 1;

      /** Used for built-in method references. */
      var objectProto = Object.prototype;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /**
       * A specialized version of `baseIsEqualDeep` for objects with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked && stack.get(other)) {
          return stacked == other;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);

        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key],
              othValue = other[key];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          // Recursively compare objects (susceptible to call stack limits).
          if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == 'constructor');
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor,
              othCtor = other.constructor;

          // Non `Object` object instances with different constructors are not equal.
          if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack['delete'](object);
        stack['delete'](other);
        return result;
      }

      module.exports = equalObjects;

      /***/
    },
    /* 224 */
    /***/function (module, exports, __webpack_require__) {

      var _Symbol = __webpack_require__(11),
          copyArray = __webpack_require__(28),
          getTag = __webpack_require__(21),
          isArrayLike = __webpack_require__(9),
          isString = __webpack_require__(56),
          iteratorToArray = __webpack_require__(225),
          mapToArray = __webpack_require__(42),
          setToArray = __webpack_require__(43),
          stringToArray = __webpack_require__(83),
          values = __webpack_require__(226);

      /** `Object#toString` result references. */
      var mapTag = '[object Map]',
          setTag = '[object Set]';

      /** Built-in value references. */
      var symIterator = _Symbol ? _Symbol.iterator : undefined;

      /**
       * Converts `value` to an array.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Array} Returns the converted array.
       * @example
       *
       * _.toArray({ 'a': 1, 'b': 2 });
       * // => [1, 2]
       *
       * _.toArray('abc');
       * // => ['a', 'b', 'c']
       *
       * _.toArray(1);
       * // => []
       *
       * _.toArray(null);
       * // => []
       */
      function toArray(value) {
        if (!value) {
          return [];
        }
        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }
        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }
        var tag = getTag(value),
            func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;

        return func(value);
      }

      module.exports = toArray;

      /***/
    },
    /* 225 */
    /***/function (module, exports) {

      /**
       * Converts `iterator` to an array.
       *
       * @private
       * @param {Object} iterator The iterator to convert.
       * @returns {Array} Returns the converted array.
       */
      function iteratorToArray(iterator) {
        var data,
            result = [];

        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }

      module.exports = iteratorToArray;

      /***/
    },
    /* 226 */
    /***/function (module, exports, __webpack_require__) {

      var baseValues = __webpack_require__(227),
          keys = __webpack_require__(13);

      /**
       * Creates an array of the own enumerable string keyed property values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.values(new Foo);
       * // => [1, 2] (iteration order is not guaranteed)
       *
       * _.values('hi');
       * // => ['h', 'i']
       */
      function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
      }

      module.exports = values;

      /***/
    },
    /* 227 */
    /***/function (module, exports, __webpack_require__) {

      var arrayMap = __webpack_require__(35);

      /**
       * The base implementation of `_.values` and `_.valuesIn` which creates an
       * array of `object` property values corresponding to the property names
       * of `props`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} props The property names to get values for.
       * @returns {Object} Returns the array of property values.
       */
      function baseValues(object, props) {
        return arrayMap(props, function (key) {
          return object[key];
        });
      }

      module.exports = baseValues;

      /***/
    },
    /* 228 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);

      var ALIAS_ATTRS = ['strokeStyle', 'fillStyle', 'globalAlpha'];
      var CLIP_SHAPES = ['circle', 'ellipse', 'fan', 'polygon', 'rect', 'path'];
      var CAPITALIZED_ATTRS_MAP = {
        r: 'R',
        opacity: 'Opacity',
        lineWidth: 'LineWidth',
        clip: 'Clip',
        stroke: 'Stroke',
        fill: 'Fill',
        strokeOpacity: 'Stroke',
        fillOpacity: 'Fill',
        x: 'X',
        y: 'Y',
        rx: 'Rx',
        ry: 'Ry',
        re: 'Re',
        rs: 'Rs',
        width: 'Width',
        height: 'Height',
        img: 'Img',
        x1: 'X1',
        x2: 'X2',
        y1: 'Y1',
        y2: 'Y2',
        points: 'Points',
        p1: 'P1',
        p2: 'P2',
        p3: 'P3',
        p4: 'P4',
        text: 'Text',
        radius: 'Radius',
        textAlign: 'TextAlign',
        textBaseline: 'TextBaseline',
        font: 'Font',
        fontSize: 'FontSize',
        fontStyle: 'FontStyle',
        fontVariant: 'FontVariant',
        fontWeight: 'FontWeight',
        fontFamily: 'FontFamily',
        clockwise: 'Clockwise',
        startAngle: 'StartAngle',
        endAngle: 'EndAngle',
        path: 'Path'
      };
      var ALIAS_ATTRS_MAP = {
        stroke: 'strokeStyle',
        fill: 'fillStyle',
        opacity: 'globalAlpha'
      };

      module.exports = {
        canFill: false,
        canStroke: false,
        initAttrs: function initAttrs(attrs) {
          this.__attrs = {
            opacity: 1,
            fillOpacity: 1,
            strokeOpacity: 1
          };
          this.attr(Util.assign(this.getDefaultAttrs(), attrs));
          return this;
        },
        getDefaultAttrs: function getDefaultAttrs() {
          return {};
        },

        /**
         * 设置或者设置属性，有以下 4 种情形：
         *   - name 不存在, 则返回属性集合
         *   - name 为字符串，value 为空，获取属性值
         *   - name 为字符串，value 不为空，设置属性值，返回 this
         *   - name 为键值对，value 为空，设置属性值
         *
         * @param  {String | Object} name  属性名
         * @param  {*} value 属性值
         * @return {*} 属性值
         */
        attr: function attr(name, value) {
          var self = this;
          if (arguments.length === 0) {
            return self.__attrs;
          }

          if (Util.isObject(name)) {
            for (var k in name) {
              if (ALIAS_ATTRS.indexOf(k) === -1) {
                var v = name[k];
                self._setAttr(k, v);
              }
            }
            if (self.__afterSetAttrAll) {
              self.__afterSetAttrAll(name);
            }
            // self.setSilent('box', null);
            self.clearBBox();
            return self;
          }
          if (arguments.length === 2) {
            if (self._setAttr(name, value) !== false) {
              var m = '__afterSetAttr' + CAPITALIZED_ATTRS_MAP[name];
              if (self[m]) {
                self[m](value);
              }
            }
            // self.setSilent('box', null);
            self.clearBBox();
            return self;
          }
          return self._getAttr(name);
        },
        clearBBox: function clearBBox() {
          this.setSilent('box', null);
        },
        __afterSetAttrAll: function __afterSetAttrAll() {},

        // 属性获取触发函数
        _getAttr: function _getAttr(name) {
          return this.__attrs[name];
        },

        // 属性设置触发函数
        _setAttr: function _setAttr(name, value) {
          var self = this;
          if (name === 'clip') {
            self.__setAttrClip(value);
            self.__attrs.clip = value;
          } else if (name === 'transform') {
            self.__setAttrTrans(value);
          } else {
            self.__attrs[name] = value;
            var alias = ALIAS_ATTRS_MAP[name];
            if (alias) {
              self.__attrs[alias] = value;
            }
          }
          return self;
        },
        hasFill: function hasFill() {
          return this.canFill && this.__attrs.fillStyle;
        },
        hasStroke: function hasStroke() {
          return this.canStroke && this.__attrs.strokeStyle;
        },

        // 设置透明度
        __setAttrOpacity: function __setAttrOpacity(v) {
          this.__attrs.globalAlpha = v;
          return v;
        },
        __setAttrClip: function __setAttrClip(clip) {
          var self = this;
          if (clip && CLIP_SHAPES.indexOf(clip.type) > -1) {
            if (clip.get('canvas') === null) {
              clip = Util.clone(clip);
            }
            clip.set('parent', self.get('parent'));
            clip.set('context', self.get('context'));
            clip.inside = function (x, y) {
              var v = [x, y, 1];
              clip.invert(v, self.get('canvas')); // 已经在外面转换
              return clip.__isPointInFill(v[0], v[1]);
            };
            return clip;
          }
          return null;
        },
        __setAttrTrans: function __setAttrTrans(value) {
          return this.transform(value);
        }
      };

      /***/
    },
    /* 229 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var mat3 = __webpack_require__(3).mat3;
      var vec3 = __webpack_require__(3).vec3;

      // 是否未改变
      function isUnchanged(m) {
        return m[0] === 1 && m[1] === 0 && m[3] === 0 && m[4] === 1 && m[6] === 0 && m[7] === 0;
      }

      // 是否仅仅是scale
      function isScale(m) {
        return m[1] === 0 && m[3] === 0 && m[6] === 0 && m[7] === 0;
      }

      function multiple(m1, m2) {
        if (!isUnchanged(m2)) {
          if (isScale(m2)) {
            m1[0] *= m2[0];
            m1[4] *= m2[4];
          } else {
            mat3.multiply(m1, m1, m2);
          }
        }
      }

      module.exports = {
        initTransform: function initTransform() {
          this.attr('matrix', [1, 0, 0, 0, 1, 0, 0, 0, 1]);
        },
        translate: function translate(tx, ty) {
          var matrix = this.attr('matrix');
          mat3.translate(matrix, matrix, [tx, ty]);
          this.clearTotalMatrix();
          this.attr('matrix', matrix);
          return this;
        },
        rotate: function rotate(radian) {
          var matrix = this.attr('matrix');
          mat3.rotate(matrix, matrix, radian);
          this.clearTotalMatrix();
          this.attr('matrix', matrix);
          return this;
        },
        scale: function scale(s1, s2) {
          var matrix = this.attr('matrix');
          mat3.scale(matrix, matrix, [s1, s2]);
          this.clearTotalMatrix();
          this.attr('matrix', matrix);
          return this;
        },

        /**
         * 绕起始点旋转
         * @param  {Number} rotate 0～360
         */
        rotateAtStart: function rotateAtStart(rotate) {
          var x = this.attr('x');
          var y = this.attr('y');
          if (Math.abs(rotate) > Math.PI * 2) {
            rotate = rotate / 180 * Math.PI;
          }
          this.transform([['t', -x, -y], ['r', rotate], ['t', x, y]]);
        },

        /**
         * 移动的到位置
         * @param  {Number} x 移动到x
         * @param  {Number} y 移动到y
         */
        move: function move(x, y) {
          var cx = this.get('x') || 0; // 当前的x
          var cy = this.get('y') || 0; // 当前的y
          this.translate(x - cx, y - cy);
          this.set('x', x);
          this.set('y', y);
        },
        transform: function transform(ts) {
          var self = this;
          var matrix = self.attr('matrix');

          Util.each(ts, function (t) {
            switch (t[0]) {
              case 't':
                self.translate(t[1], t[2]);
                break;
              case 's':
                self.scale(t[1], t[2]);
                break;
              case 'r':
                self.rotate(t[1]);
                break;
              case 'm':
                self.attr('matrix', mat3.multiply([], matrix, t[1]));
                self.clearTotalMatrix();
                break;
              default:
                break;
            }
          });
          return self;
        },
        setTransform: function setTransform(ts) {
          this.attr('matrix', [1, 0, 0, 0, 1, 0, 0, 0, 1]);
          return this.transform(ts);
        },
        getMatrix: function getMatrix() {
          return this.attr('matrix');
        },
        setMatrix: function setMatrix(m) {
          this.attr('matrix', m);
          this.clearTotalMatrix();
          return this;
        },
        apply: function apply(v, root) {
          var m = void 0;
          if (root) {
            m = this._getMatrixByRoot(root);
          } else {
            m = this.attr('matrix');
          }
          vec3.transformMat3(v, v, m);
          return this;
        },

        // 获取到达指定根节点的矩阵
        _getMatrixByRoot: function _getMatrixByRoot(root) {
          var self = this;
          root = root || self;
          var parent = self;
          var parents = [];

          while (parent !== root) {
            parents.unshift(parent);
            parent = parent.get('parent');
          }
          parents.unshift(parent);

          var m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
          Util.each(parents, function (child) {
            mat3.multiply(m, child.attr('matrix'), m);
          });
          return m;
        },

        /**
         * 应用到当前元素上的总的矩阵
         * @return {Matrix} 矩阵
         */
        getTotalMatrix: function getTotalMatrix() {
          var m = this.__cfg.totalMatrix;
          if (!m) {
            m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
            var parent = this.__cfg.parent;
            if (parent) {
              var pm = parent.getTotalMatrix();
              multiple(m, pm);
            }

            multiple(m, this.attr('matrix'));
            this.__cfg.totalMatrix = m;
          }
          return m;
        },

        // 清除当前的矩阵
        clearTotalMatrix: function clearTotalMatrix() {
          // this.__cfg.totalMatrix = null;
        },
        invert: function invert(v) {
          var m = this.getTotalMatrix();
          // 单精屏幕下大多数矩阵没变化
          if (isScale(m)) {
            v[0] /= m[0];
            v[1] /= m[4];
          } else {
            var inm = mat3.invert([], m);
            vec3.transformMat3(v, v, inm);
          }
          return this;
        },
        resetTransform: function resetTransform(context) {
          var mo = this.attr('matrix');
          // 不改变时
          if (!isUnchanged(mo)) {
            context.transform(mo[0], mo[1], mo[3], mo[4], mo[6], mo[7]);
          }
        }
      };

      /***/
    },
    /* 230 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";

      Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
      /* harmony export (immutable) */__webpack_exports__["create"] = create;
      /* harmony export (immutable) */__webpack_exports__["fromMat4"] = fromMat4;
      /* harmony export (immutable) */__webpack_exports__["clone"] = clone;
      /* harmony export (immutable) */__webpack_exports__["copy"] = copy;
      /* harmony export (immutable) */__webpack_exports__["fromValues"] = fromValues;
      /* harmony export (immutable) */__webpack_exports__["set"] = set;
      /* harmony export (immutable) */__webpack_exports__["identity"] = identity;
      /* harmony export (immutable) */__webpack_exports__["transpose"] = transpose;
      /* harmony export (immutable) */__webpack_exports__["invert"] = invert;
      /* harmony export (immutable) */__webpack_exports__["adjoint"] = adjoint;
      /* harmony export (immutable) */__webpack_exports__["determinant"] = determinant;
      /* harmony export (immutable) */__webpack_exports__["multiply"] = multiply;
      /* harmony export (immutable) */__webpack_exports__["translate"] = translate;
      /* harmony export (immutable) */__webpack_exports__["rotate"] = rotate;
      /* harmony export (immutable) */__webpack_exports__["scale"] = scale;
      /* harmony export (immutable) */__webpack_exports__["fromTranslation"] = fromTranslation;
      /* harmony export (immutable) */__webpack_exports__["fromRotation"] = fromRotation;
      /* harmony export (immutable) */__webpack_exports__["fromScaling"] = fromScaling;
      /* harmony export (immutable) */__webpack_exports__["fromMat2d"] = fromMat2d;
      /* harmony export (immutable) */__webpack_exports__["fromQuat"] = fromQuat;
      /* harmony export (immutable) */__webpack_exports__["normalFromMat4"] = normalFromMat4;
      /* harmony export (immutable) */__webpack_exports__["projection"] = projection;
      /* harmony export (immutable) */__webpack_exports__["str"] = str;
      /* harmony export (immutable) */__webpack_exports__["frob"] = frob;
      /* harmony export (immutable) */__webpack_exports__["add"] = add;
      /* harmony export (immutable) */__webpack_exports__["subtract"] = subtract;
      /* harmony export (immutable) */__webpack_exports__["multiplyScalar"] = multiplyScalar;
      /* harmony export (immutable) */__webpack_exports__["multiplyScalarAndAdd"] = multiplyScalarAndAdd;
      /* harmony export (immutable) */__webpack_exports__["exactEquals"] = exactEquals;
      /* harmony export (immutable) */__webpack_exports__["equals"] = equals;
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "mul", function () {
        return mul;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "sub", function () {
        return sub;
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(45);
      /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
      
      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:
      
      The above copyright notice and this permission notice shall be included in
      all copies or substantial portions of the Software.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
      THE SOFTWARE. */

      /**
       * 3x3 Matrix
       * @module mat3
       */

      /**
       * Creates a new identity mat3
       *
       * @returns {mat3} a new 3x3 matrix
       */
      function create() {
        var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](9);
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 1;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
        out[8] = 1;
        return out;
      }

      /**
       * Copies the upper-left 3x3 values into the given mat3.
       *
       * @param {mat3} out the receiving 3x3 matrix
       * @param {mat4} a   the source 4x4 matrix
       * @returns {mat3} out
       */
      function fromMat4(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[4];
        out[4] = a[5];
        out[5] = a[6];
        out[6] = a[8];
        out[7] = a[9];
        out[8] = a[10];
        return out;
      }

      /**
       * Creates a new mat3 initialized with values from an existing matrix
       *
       * @param {mat3} a matrix to clone
       * @returns {mat3} a new 3x3 matrix
       */
      function clone(a) {
        var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](9);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        return out;
      }

      /**
       * Copy the values from one mat3 to another
       *
       * @param {mat3} out the receiving matrix
       * @param {mat3} a the source matrix
       * @returns {mat3} out
       */
      function copy(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        return out;
      }

      /**
       * Create a new mat3 with the given values
       *
       * @param {Number} m00 Component in column 0, row 0 position (index 0)
       * @param {Number} m01 Component in column 0, row 1 position (index 1)
       * @param {Number} m02 Component in column 0, row 2 position (index 2)
       * @param {Number} m10 Component in column 1, row 0 position (index 3)
       * @param {Number} m11 Component in column 1, row 1 position (index 4)
       * @param {Number} m12 Component in column 1, row 2 position (index 5)
       * @param {Number} m20 Component in column 2, row 0 position (index 6)
       * @param {Number} m21 Component in column 2, row 1 position (index 7)
       * @param {Number} m22 Component in column 2, row 2 position (index 8)
       * @returns {mat3} A new mat3
       */
      function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
        var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](9);
        out[0] = m00;
        out[1] = m01;
        out[2] = m02;
        out[3] = m10;
        out[4] = m11;
        out[5] = m12;
        out[6] = m20;
        out[7] = m21;
        out[8] = m22;
        return out;
      }

      /**
       * Set the components of a mat3 to the given values
       *
       * @param {mat3} out the receiving matrix
       * @param {Number} m00 Component in column 0, row 0 position (index 0)
       * @param {Number} m01 Component in column 0, row 1 position (index 1)
       * @param {Number} m02 Component in column 0, row 2 position (index 2)
       * @param {Number} m10 Component in column 1, row 0 position (index 3)
       * @param {Number} m11 Component in column 1, row 1 position (index 4)
       * @param {Number} m12 Component in column 1, row 2 position (index 5)
       * @param {Number} m20 Component in column 2, row 0 position (index 6)
       * @param {Number} m21 Component in column 2, row 1 position (index 7)
       * @param {Number} m22 Component in column 2, row 2 position (index 8)
       * @returns {mat3} out
       */
      function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
        out[0] = m00;
        out[1] = m01;
        out[2] = m02;
        out[3] = m10;
        out[4] = m11;
        out[5] = m12;
        out[6] = m20;
        out[7] = m21;
        out[8] = m22;
        return out;
      }

      /**
       * Set a mat3 to the identity matrix
       *
       * @param {mat3} out the receiving matrix
       * @returns {mat3} out
       */
      function identity(out) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 1;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
        out[8] = 1;
        return out;
      }

      /**
       * Transpose the values of a mat3
       *
       * @param {mat3} out the receiving matrix
       * @param {mat3} a the source matrix
       * @returns {mat3} out
       */
      function transpose(out, a) {
        // If we are transposing ourselves we can skip a few steps but have to cache some values
        if (out === a) {
          var a01 = a[1],
              a02 = a[2],
              a12 = a[5];
          out[1] = a[3];
          out[2] = a[6];
          out[3] = a01;
          out[5] = a[7];
          out[6] = a02;
          out[7] = a12;
        } else {
          out[0] = a[0];
          out[1] = a[3];
          out[2] = a[6];
          out[3] = a[1];
          out[4] = a[4];
          out[5] = a[7];
          out[6] = a[2];
          out[7] = a[5];
          out[8] = a[8];
        }

        return out;
      }

      /**
       * Inverts a mat3
       *
       * @param {mat3} out the receiving matrix
       * @param {mat3} a the source matrix
       * @returns {mat3} out
       */
      function invert(out, a) {
        var a00 = a[0],
            a01 = a[1],
            a02 = a[2];
        var a10 = a[3],
            a11 = a[4],
            a12 = a[5];
        var a20 = a[6],
            a21 = a[7],
            a22 = a[8];

        var b01 = a22 * a11 - a12 * a21;
        var b11 = -a22 * a10 + a12 * a20;
        var b21 = a21 * a10 - a11 * a20;

        // Calculate the determinant
        var det = a00 * b01 + a01 * b11 + a02 * b21;

        if (!det) {
          return null;
        }
        det = 1.0 / det;

        out[0] = b01 * det;
        out[1] = (-a22 * a01 + a02 * a21) * det;
        out[2] = (a12 * a01 - a02 * a11) * det;
        out[3] = b11 * det;
        out[4] = (a22 * a00 - a02 * a20) * det;
        out[5] = (-a12 * a00 + a02 * a10) * det;
        out[6] = b21 * det;
        out[7] = (-a21 * a00 + a01 * a20) * det;
        out[8] = (a11 * a00 - a01 * a10) * det;
        return out;
      }

      /**
       * Calculates the adjugate of a mat3
       *
       * @param {mat3} out the receiving matrix
       * @param {mat3} a the source matrix
       * @returns {mat3} out
       */
      function adjoint(out, a) {
        var a00 = a[0],
            a01 = a[1],
            a02 = a[2];
        var a10 = a[3],
            a11 = a[4],
            a12 = a[5];
        var a20 = a[6],
            a21 = a[7],
            a22 = a[8];

        out[0] = a11 * a22 - a12 * a21;
        out[1] = a02 * a21 - a01 * a22;
        out[2] = a01 * a12 - a02 * a11;
        out[3] = a12 * a20 - a10 * a22;
        out[4] = a00 * a22 - a02 * a20;
        out[5] = a02 * a10 - a00 * a12;
        out[6] = a10 * a21 - a11 * a20;
        out[7] = a01 * a20 - a00 * a21;
        out[8] = a00 * a11 - a01 * a10;
        return out;
      }

      /**
       * Calculates the determinant of a mat3
       *
       * @param {mat3} a the source matrix
       * @returns {Number} determinant of a
       */
      function determinant(a) {
        var a00 = a[0],
            a01 = a[1],
            a02 = a[2];
        var a10 = a[3],
            a11 = a[4],
            a12 = a[5];
        var a20 = a[6],
            a21 = a[7],
            a22 = a[8];

        return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
      }

      /**
       * Multiplies two mat3's
       *
       * @param {mat3} out the receiving matrix
       * @param {mat3} a the first operand
       * @param {mat3} b the second operand
       * @returns {mat3} out
       */
      function multiply(out, a, b) {
        var a00 = a[0],
            a01 = a[1],
            a02 = a[2];
        var a10 = a[3],
            a11 = a[4],
            a12 = a[5];
        var a20 = a[6],
            a21 = a[7],
            a22 = a[8];

        var b00 = b[0],
            b01 = b[1],
            b02 = b[2];
        var b10 = b[3],
            b11 = b[4],
            b12 = b[5];
        var b20 = b[6],
            b21 = b[7],
            b22 = b[8];

        out[0] = b00 * a00 + b01 * a10 + b02 * a20;
        out[1] = b00 * a01 + b01 * a11 + b02 * a21;
        out[2] = b00 * a02 + b01 * a12 + b02 * a22;

        out[3] = b10 * a00 + b11 * a10 + b12 * a20;
        out[4] = b10 * a01 + b11 * a11 + b12 * a21;
        out[5] = b10 * a02 + b11 * a12 + b12 * a22;

        out[6] = b20 * a00 + b21 * a10 + b22 * a20;
        out[7] = b20 * a01 + b21 * a11 + b22 * a21;
        out[8] = b20 * a02 + b21 * a12 + b22 * a22;
        return out;
      }

      /**
       * Translate a mat3 by the given vector
       *
       * @param {mat3} out the receiving matrix
       * @param {mat3} a the matrix to translate
       * @param {vec2} v vector to translate by
       * @returns {mat3} out
       */
      function translate(out, a, v) {
        var a00 = a[0],
            a01 = a[1],
            a02 = a[2],
            a10 = a[3],
            a11 = a[4],
            a12 = a[5],
            a20 = a[6],
            a21 = a[7],
            a22 = a[8],
            x = v[0],
            y = v[1];

        out[0] = a00;
        out[1] = a01;
        out[2] = a02;

        out[3] = a10;
        out[4] = a11;
        out[5] = a12;

        out[6] = x * a00 + y * a10 + a20;
        out[7] = x * a01 + y * a11 + a21;
        out[8] = x * a02 + y * a12 + a22;
        return out;
      }

      /**
       * Rotates a mat3 by the given angle
       *
       * @param {mat3} out the receiving matrix
       * @param {mat3} a the matrix to rotate
       * @param {Number} rad the angle to rotate the matrix by
       * @returns {mat3} out
       */
      function rotate(out, a, rad) {
        var a00 = a[0],
            a01 = a[1],
            a02 = a[2],
            a10 = a[3],
            a11 = a[4],
            a12 = a[5],
            a20 = a[6],
            a21 = a[7],
            a22 = a[8],
            s = Math.sin(rad),
            c = Math.cos(rad);

        out[0] = c * a00 + s * a10;
        out[1] = c * a01 + s * a11;
        out[2] = c * a02 + s * a12;

        out[3] = c * a10 - s * a00;
        out[4] = c * a11 - s * a01;
        out[5] = c * a12 - s * a02;

        out[6] = a20;
        out[7] = a21;
        out[8] = a22;
        return out;
      };

      /**
       * Scales the mat3 by the dimensions in the given vec2
       *
       * @param {mat3} out the receiving matrix
       * @param {mat3} a the matrix to rotate
       * @param {vec2} v the vec2 to scale the matrix by
       * @returns {mat3} out
       **/
      function scale(out, a, v) {
        var x = v[0],
            y = v[1];

        out[0] = x * a[0];
        out[1] = x * a[1];
        out[2] = x * a[2];

        out[3] = y * a[3];
        out[4] = y * a[4];
        out[5] = y * a[5];

        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        return out;
      }

      /**
       * Creates a matrix from a vector translation
       * This is equivalent to (but much faster than):
       *
       *     mat3.identity(dest);
       *     mat3.translate(dest, dest, vec);
       *
       * @param {mat3} out mat3 receiving operation result
       * @param {vec2} v Translation vector
       * @returns {mat3} out
       */
      function fromTranslation(out, v) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 1;
        out[5] = 0;
        out[6] = v[0];
        out[7] = v[1];
        out[8] = 1;
        return out;
      }

      /**
       * Creates a matrix from a given angle
       * This is equivalent to (but much faster than):
       *
       *     mat3.identity(dest);
       *     mat3.rotate(dest, dest, rad);
       *
       * @param {mat3} out mat3 receiving operation result
       * @param {Number} rad the angle to rotate the matrix by
       * @returns {mat3} out
       */
      function fromRotation(out, rad) {
        var s = Math.sin(rad),
            c = Math.cos(rad);

        out[0] = c;
        out[1] = s;
        out[2] = 0;

        out[3] = -s;
        out[4] = c;
        out[5] = 0;

        out[6] = 0;
        out[7] = 0;
        out[8] = 1;
        return out;
      }

      /**
       * Creates a matrix from a vector scaling
       * This is equivalent to (but much faster than):
       *
       *     mat3.identity(dest);
       *     mat3.scale(dest, dest, vec);
       *
       * @param {mat3} out mat3 receiving operation result
       * @param {vec2} v Scaling vector
       * @returns {mat3} out
       */
      function fromScaling(out, v) {
        out[0] = v[0];
        out[1] = 0;
        out[2] = 0;

        out[3] = 0;
        out[4] = v[1];
        out[5] = 0;

        out[6] = 0;
        out[7] = 0;
        out[8] = 1;
        return out;
      }

      /**
       * Copies the values from a mat2d into a mat3
       *
       * @param {mat3} out the receiving matrix
       * @param {mat2d} a the matrix to copy
       * @returns {mat3} out
       **/
      function fromMat2d(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = 0;

        out[3] = a[2];
        out[4] = a[3];
        out[5] = 0;

        out[6] = a[4];
        out[7] = a[5];
        out[8] = 1;
        return out;
      }

      /**
      * Calculates a 3x3 matrix from the given quaternion
      *
      * @param {mat3} out mat3 receiving operation result
      * @param {quat} q Quaternion to create matrix from
      *
      * @returns {mat3} out
      */
      function fromQuat(out, q) {
        var x = q[0],
            y = q[1],
            z = q[2],
            w = q[3];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;

        var xx = x * x2;
        var yx = y * x2;
        var yy = y * y2;
        var zx = z * x2;
        var zy = z * y2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;

        out[0] = 1 - yy - zz;
        out[3] = yx - wz;
        out[6] = zx + wy;

        out[1] = yx + wz;
        out[4] = 1 - xx - zz;
        out[7] = zy - wx;

        out[2] = zx - wy;
        out[5] = zy + wx;
        out[8] = 1 - xx - yy;

        return out;
      }

      /**
      * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
      *
      * @param {mat3} out mat3 receiving operation result
      * @param {mat4} a Mat4 to derive the normal matrix from
      *
      * @returns {mat3} out
      */
      function normalFromMat4(out, a) {
        var a00 = a[0],
            a01 = a[1],
            a02 = a[2],
            a03 = a[3];
        var a10 = a[4],
            a11 = a[5],
            a12 = a[6],
            a13 = a[7];
        var a20 = a[8],
            a21 = a[9],
            a22 = a[10],
            a23 = a[11];
        var a30 = a[12],
            a31 = a[13],
            a32 = a[14],
            a33 = a[15];

        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32;

        // Calculate the determinant
        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

        if (!det) {
          return null;
        }
        det = 1.0 / det;

        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
        out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
        out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;

        out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
        out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
        out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;

        out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
        out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
        out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;

        return out;
      }

      /**
       * Generates a 2D projection matrix with the given bounds
       *
       * @param {mat3} out mat3 frustum matrix will be written into
       * @param {number} width Width of your gl context
       * @param {number} height Height of gl context
       * @returns {mat3} out
       */
      function projection(out, width, height) {
        out[0] = 2 / width;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = -2 / height;
        out[5] = 0;
        out[6] = -1;
        out[7] = 1;
        out[8] = 1;
        return out;
      }

      /**
       * Returns a string representation of a mat3
       *
       * @param {mat3} a matrix to represent as a string
       * @returns {String} string representation of the matrix
       */
      function str(a) {
        return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';
      }

      /**
       * Returns Frobenius norm of a mat3
       *
       * @param {mat3} a the matrix to calculate Frobenius norm of
       * @returns {Number} Frobenius norm
       */
      function frob(a) {
        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));
      }

      /**
       * Adds two mat3's
       *
       * @param {mat3} out the receiving matrix
       * @param {mat3} a the first operand
       * @param {mat3} b the second operand
       * @returns {mat3} out
       */
      function add(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        out[4] = a[4] + b[4];
        out[5] = a[5] + b[5];
        out[6] = a[6] + b[6];
        out[7] = a[7] + b[7];
        out[8] = a[8] + b[8];
        return out;
      }

      /**
       * Subtracts matrix b from matrix a
       *
       * @param {mat3} out the receiving matrix
       * @param {mat3} a the first operand
       * @param {mat3} b the second operand
       * @returns {mat3} out
       */
      function subtract(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        out[3] = a[3] - b[3];
        out[4] = a[4] - b[4];
        out[5] = a[5] - b[5];
        out[6] = a[6] - b[6];
        out[7] = a[7] - b[7];
        out[8] = a[8] - b[8];
        return out;
      }

      /**
       * Multiply each element of the matrix by a scalar.
       *
       * @param {mat3} out the receiving matrix
       * @param {mat3} a the matrix to scale
       * @param {Number} b amount to scale the matrix's elements by
       * @returns {mat3} out
       */
      function multiplyScalar(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[3] = a[3] * b;
        out[4] = a[4] * b;
        out[5] = a[5] * b;
        out[6] = a[6] * b;
        out[7] = a[7] * b;
        out[8] = a[8] * b;
        return out;
      }

      /**
       * Adds two mat3's after multiplying each element of the second operand by a scalar value.
       *
       * @param {mat3} out the receiving vector
       * @param {mat3} a the first operand
       * @param {mat3} b the second operand
       * @param {Number} scale the amount to scale b's elements by before adding
       * @returns {mat3} out
       */
      function multiplyScalarAndAdd(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        out[3] = a[3] + b[3] * scale;
        out[4] = a[4] + b[4] * scale;
        out[5] = a[5] + b[5] * scale;
        out[6] = a[6] + b[6] * scale;
        out[7] = a[7] + b[7] * scale;
        out[8] = a[8] + b[8] * scale;
        return out;
      }

      /**
       * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
       *
       * @param {mat3} a The first matrix.
       * @param {mat3} b The second matrix.
       * @returns {Boolean} True if the matrices are equal, false otherwise.
       */
      function exactEquals(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
      }

      /**
       * Returns whether or not the matrices have approximately the same elements in the same position.
       *
       * @param {mat3} a The first matrix.
       * @param {mat3} b The second matrix.
       * @returns {Boolean} True if the matrices are equal, false otherwise.
       */
      function equals(a, b) {
        var a0 = a[0],
            a1 = a[1],
            a2 = a[2],
            a3 = a[3],
            a4 = a[4],
            a5 = a[5],
            a6 = a[6],
            a7 = a[7],
            a8 = a[8];
        var b0 = b[0],
            b1 = b[1],
            b2 = b[2],
            b3 = b[3],
            b4 = b[4],
            b5 = b[5],
            b6 = b[6],
            b7 = b[7],
            b8 = b[8];
        return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */] * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */] * Math.max(1.0, Math.abs(a8), Math.abs(b8));
      }

      /**
       * Alias for {@link mat3.multiply}
       * @function
       */
      var mul = multiply;

      /**
       * Alias for {@link mat3.subtract}
       * @function
       */
      var sub = subtract;

      /***/
    },
    /* 231 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";

      Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
      /* harmony export (immutable) */__webpack_exports__["create"] = create;
      /* harmony export (immutable) */__webpack_exports__["clone"] = clone;
      /* harmony export (immutable) */__webpack_exports__["length"] = length;
      /* harmony export (immutable) */__webpack_exports__["fromValues"] = fromValues;
      /* harmony export (immutable) */__webpack_exports__["copy"] = copy;
      /* harmony export (immutable) */__webpack_exports__["set"] = set;
      /* harmony export (immutable) */__webpack_exports__["add"] = add;
      /* harmony export (immutable) */__webpack_exports__["subtract"] = subtract;
      /* harmony export (immutable) */__webpack_exports__["multiply"] = multiply;
      /* harmony export (immutable) */__webpack_exports__["divide"] = divide;
      /* harmony export (immutable) */__webpack_exports__["ceil"] = ceil;
      /* harmony export (immutable) */__webpack_exports__["floor"] = floor;
      /* harmony export (immutable) */__webpack_exports__["min"] = min;
      /* harmony export (immutable) */__webpack_exports__["max"] = max;
      /* harmony export (immutable) */__webpack_exports__["round"] = round;
      /* harmony export (immutable) */__webpack_exports__["scale"] = scale;
      /* harmony export (immutable) */__webpack_exports__["scaleAndAdd"] = scaleAndAdd;
      /* harmony export (immutable) */__webpack_exports__["distance"] = distance;
      /* harmony export (immutable) */__webpack_exports__["squaredDistance"] = squaredDistance;
      /* harmony export (immutable) */__webpack_exports__["squaredLength"] = squaredLength;
      /* harmony export (immutable) */__webpack_exports__["negate"] = negate;
      /* harmony export (immutable) */__webpack_exports__["inverse"] = inverse;
      /* harmony export (immutable) */__webpack_exports__["normalize"] = normalize;
      /* harmony export (immutable) */__webpack_exports__["dot"] = dot;
      /* harmony export (immutable) */__webpack_exports__["cross"] = cross;
      /* harmony export (immutable) */__webpack_exports__["lerp"] = lerp;
      /* harmony export (immutable) */__webpack_exports__["hermite"] = hermite;
      /* harmony export (immutable) */__webpack_exports__["bezier"] = bezier;
      /* harmony export (immutable) */__webpack_exports__["random"] = random;
      /* harmony export (immutable) */__webpack_exports__["transformMat4"] = transformMat4;
      /* harmony export (immutable) */__webpack_exports__["transformMat3"] = transformMat3;
      /* harmony export (immutable) */__webpack_exports__["transformQuat"] = transformQuat;
      /* harmony export (immutable) */__webpack_exports__["rotateX"] = rotateX;
      /* harmony export (immutable) */__webpack_exports__["rotateY"] = rotateY;
      /* harmony export (immutable) */__webpack_exports__["rotateZ"] = rotateZ;
      /* harmony export (immutable) */__webpack_exports__["angle"] = angle;
      /* harmony export (immutable) */__webpack_exports__["str"] = str;
      /* harmony export (immutable) */__webpack_exports__["exactEquals"] = exactEquals;
      /* harmony export (immutable) */__webpack_exports__["equals"] = equals;
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "sub", function () {
        return sub;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "mul", function () {
        return mul;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "div", function () {
        return div;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "dist", function () {
        return dist;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "sqrDist", function () {
        return sqrDist;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "len", function () {
        return len;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "sqrLen", function () {
        return sqrLen;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "forEach", function () {
        return forEach;
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(45);
      /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
      
      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:
      
      The above copyright notice and this permission notice shall be included in
      all copies or substantial portions of the Software.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
      THE SOFTWARE. */

      /**
       * 3 Dimensional Vector
       * @module vec3
       */

      /**
       * Creates a new, empty vec3
       *
       * @returns {vec3} a new 3D vector
       */
      function create() {
        var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](3);
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        return out;
      }

      /**
       * Creates a new vec3 initialized with values from an existing vector
       *
       * @param {vec3} a vector to clone
       * @returns {vec3} a new 3D vector
       */
      function clone(a) {
        var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](3);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        return out;
      }

      /**
       * Calculates the length of a vec3
       *
       * @param {vec3} a vector to calculate length of
       * @returns {Number} length of a
       */
      function length(a) {
        var x = a[0];
        var y = a[1];
        var z = a[2];
        return Math.sqrt(x * x + y * y + z * z);
      }

      /**
       * Creates a new vec3 initialized with the given values
       *
       * @param {Number} x X component
       * @param {Number} y Y component
       * @param {Number} z Z component
       * @returns {vec3} a new 3D vector
       */
      function fromValues(x, y, z) {
        var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](3);
        out[0] = x;
        out[1] = y;
        out[2] = z;
        return out;
      }

      /**
       * Copy the values from one vec3 to another
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a the source vector
       * @returns {vec3} out
       */
      function copy(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        return out;
      }

      /**
       * Set the components of a vec3 to the given values
       *
       * @param {vec3} out the receiving vector
       * @param {Number} x X component
       * @param {Number} y Y component
       * @param {Number} z Z component
       * @returns {vec3} out
       */
      function set(out, x, y, z) {
        out[0] = x;
        out[1] = y;
        out[2] = z;
        return out;
      }

      /**
       * Adds two vec3's
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a the first operand
       * @param {vec3} b the second operand
       * @returns {vec3} out
       */
      function add(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        return out;
      }

      /**
       * Subtracts vector b from vector a
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a the first operand
       * @param {vec3} b the second operand
       * @returns {vec3} out
       */
      function subtract(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        return out;
      }

      /**
       * Multiplies two vec3's
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a the first operand
       * @param {vec3} b the second operand
       * @returns {vec3} out
       */
      function multiply(out, a, b) {
        out[0] = a[0] * b[0];
        out[1] = a[1] * b[1];
        out[2] = a[2] * b[2];
        return out;
      }

      /**
       * Divides two vec3's
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a the first operand
       * @param {vec3} b the second operand
       * @returns {vec3} out
       */
      function divide(out, a, b) {
        out[0] = a[0] / b[0];
        out[1] = a[1] / b[1];
        out[2] = a[2] / b[2];
        return out;
      }

      /**
       * Math.ceil the components of a vec3
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a vector to ceil
       * @returns {vec3} out
       */
      function ceil(out, a) {
        out[0] = Math.ceil(a[0]);
        out[1] = Math.ceil(a[1]);
        out[2] = Math.ceil(a[2]);
        return out;
      }

      /**
       * Math.floor the components of a vec3
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a vector to floor
       * @returns {vec3} out
       */
      function floor(out, a) {
        out[0] = Math.floor(a[0]);
        out[1] = Math.floor(a[1]);
        out[2] = Math.floor(a[2]);
        return out;
      }

      /**
       * Returns the minimum of two vec3's
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a the first operand
       * @param {vec3} b the second operand
       * @returns {vec3} out
       */
      function min(out, a, b) {
        out[0] = Math.min(a[0], b[0]);
        out[1] = Math.min(a[1], b[1]);
        out[2] = Math.min(a[2], b[2]);
        return out;
      }

      /**
       * Returns the maximum of two vec3's
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a the first operand
       * @param {vec3} b the second operand
       * @returns {vec3} out
       */
      function max(out, a, b) {
        out[0] = Math.max(a[0], b[0]);
        out[1] = Math.max(a[1], b[1]);
        out[2] = Math.max(a[2], b[2]);
        return out;
      }

      /**
       * Math.round the components of a vec3
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a vector to round
       * @returns {vec3} out
       */
      function round(out, a) {
        out[0] = Math.round(a[0]);
        out[1] = Math.round(a[1]);
        out[2] = Math.round(a[2]);
        return out;
      }

      /**
       * Scales a vec3 by a scalar number
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a the vector to scale
       * @param {Number} b amount to scale the vector by
       * @returns {vec3} out
       */
      function scale(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        return out;
      }

      /**
       * Adds two vec3's after scaling the second operand by a scalar value
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a the first operand
       * @param {vec3} b the second operand
       * @param {Number} scale the amount to scale b by before adding
       * @returns {vec3} out
       */
      function scaleAndAdd(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        return out;
      }

      /**
       * Calculates the euclidian distance between two vec3's
       *
       * @param {vec3} a the first operand
       * @param {vec3} b the second operand
       * @returns {Number} distance between a and b
       */
      function distance(a, b) {
        var x = b[0] - a[0];
        var y = b[1] - a[1];
        var z = b[2] - a[2];
        return Math.sqrt(x * x + y * y + z * z);
      }

      /**
       * Calculates the squared euclidian distance between two vec3's
       *
       * @param {vec3} a the first operand
       * @param {vec3} b the second operand
       * @returns {Number} squared distance between a and b
       */
      function squaredDistance(a, b) {
        var x = b[0] - a[0];
        var y = b[1] - a[1];
        var z = b[2] - a[2];
        return x * x + y * y + z * z;
      }

      /**
       * Calculates the squared length of a vec3
       *
       * @param {vec3} a vector to calculate squared length of
       * @returns {Number} squared length of a
       */
      function squaredLength(a) {
        var x = a[0];
        var y = a[1];
        var z = a[2];
        return x * x + y * y + z * z;
      }

      /**
       * Negates the components of a vec3
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a vector to negate
       * @returns {vec3} out
       */
      function negate(out, a) {
        out[0] = -a[0];
        out[1] = -a[1];
        out[2] = -a[2];
        return out;
      }

      /**
       * Returns the inverse of the components of a vec3
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a vector to invert
       * @returns {vec3} out
       */
      function inverse(out, a) {
        out[0] = 1.0 / a[0];
        out[1] = 1.0 / a[1];
        out[2] = 1.0 / a[2];
        return out;
      }

      /**
       * Normalize a vec3
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a vector to normalize
       * @returns {vec3} out
       */
      function normalize(out, a) {
        var x = a[0];
        var y = a[1];
        var z = a[2];
        var len = x * x + y * y + z * z;
        if (len > 0) {
          //TODO: evaluate use of glm_invsqrt here?
          len = 1 / Math.sqrt(len);
          out[0] = a[0] * len;
          out[1] = a[1] * len;
          out[2] = a[2] * len;
        }
        return out;
      }

      /**
       * Calculates the dot product of two vec3's
       *
       * @param {vec3} a the first operand
       * @param {vec3} b the second operand
       * @returns {Number} dot product of a and b
       */
      function dot(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
      }

      /**
       * Computes the cross product of two vec3's
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a the first operand
       * @param {vec3} b the second operand
       * @returns {vec3} out
       */
      function cross(out, a, b) {
        var ax = a[0],
            ay = a[1],
            az = a[2];
        var bx = b[0],
            by = b[1],
            bz = b[2];

        out[0] = ay * bz - az * by;
        out[1] = az * bx - ax * bz;
        out[2] = ax * by - ay * bx;
        return out;
      }

      /**
       * Performs a linear interpolation between two vec3's
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a the first operand
       * @param {vec3} b the second operand
       * @param {Number} t interpolation amount between the two inputs
       * @returns {vec3} out
       */
      function lerp(out, a, b, t) {
        var ax = a[0];
        var ay = a[1];
        var az = a[2];
        out[0] = ax + t * (b[0] - ax);
        out[1] = ay + t * (b[1] - ay);
        out[2] = az + t * (b[2] - az);
        return out;
      }

      /**
       * Performs a hermite interpolation with two control points
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a the first operand
       * @param {vec3} b the second operand
       * @param {vec3} c the third operand
       * @param {vec3} d the fourth operand
       * @param {Number} t interpolation amount between the two inputs
       * @returns {vec3} out
       */
      function hermite(out, a, b, c, d, t) {
        var factorTimes2 = t * t;
        var factor1 = factorTimes2 * (2 * t - 3) + 1;
        var factor2 = factorTimes2 * (t - 2) + t;
        var factor3 = factorTimes2 * (t - 1);
        var factor4 = factorTimes2 * (3 - 2 * t);

        out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
        out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
        out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;

        return out;
      }

      /**
       * Performs a bezier interpolation with two control points
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a the first operand
       * @param {vec3} b the second operand
       * @param {vec3} c the third operand
       * @param {vec3} d the fourth operand
       * @param {Number} t interpolation amount between the two inputs
       * @returns {vec3} out
       */
      function bezier(out, a, b, c, d, t) {
        var inverseFactor = 1 - t;
        var inverseFactorTimesTwo = inverseFactor * inverseFactor;
        var factorTimes2 = t * t;
        var factor1 = inverseFactorTimesTwo * inverseFactor;
        var factor2 = 3 * t * inverseFactorTimesTwo;
        var factor3 = 3 * factorTimes2 * inverseFactor;
        var factor4 = factorTimes2 * t;

        out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
        out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
        out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;

        return out;
      }

      /**
       * Generates a random vector with the given scale
       *
       * @param {vec3} out the receiving vector
       * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
       * @returns {vec3} out
       */
      function random(out, scale) {
        scale = scale || 1.0;

        var r = __WEBPACK_IMPORTED_MODULE_0__common__["c" /* RANDOM */]() * 2.0 * Math.PI;
        var z = __WEBPACK_IMPORTED_MODULE_0__common__["c" /* RANDOM */]() * 2.0 - 1.0;
        var zScale = Math.sqrt(1.0 - z * z) * scale;

        out[0] = Math.cos(r) * zScale;
        out[1] = Math.sin(r) * zScale;
        out[2] = z * scale;
        return out;
      }

      /**
       * Transforms the vec3 with a mat4.
       * 4th vector component is implicitly '1'
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a the vector to transform
       * @param {mat4} m matrix to transform with
       * @returns {vec3} out
       */
      function transformMat4(out, a, m) {
        var x = a[0],
            y = a[1],
            z = a[2];
        var w = m[3] * x + m[7] * y + m[11] * z + m[15];
        w = w || 1.0;
        out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
        out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
        out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
        return out;
      }

      /**
       * Transforms the vec3 with a mat3.
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a the vector to transform
       * @param {mat3} m the 3x3 matrix to transform with
       * @returns {vec3} out
       */
      function transformMat3(out, a, m) {
        var x = a[0],
            y = a[1],
            z = a[2];
        out[0] = x * m[0] + y * m[3] + z * m[6];
        out[1] = x * m[1] + y * m[4] + z * m[7];
        out[2] = x * m[2] + y * m[5] + z * m[8];
        return out;
      }

      /**
       * Transforms the vec3 with a quat
       *
       * @param {vec3} out the receiving vector
       * @param {vec3} a the vector to transform
       * @param {quat} q quaternion to transform with
       * @returns {vec3} out
       */
      function transformQuat(out, a, q) {
        // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations

        var x = a[0],
            y = a[1],
            z = a[2];
        var qx = q[0],
            qy = q[1],
            qz = q[2],
            qw = q[3];

        // calculate quat * vec
        var ix = qw * x + qy * z - qz * y;
        var iy = qw * y + qz * x - qx * z;
        var iz = qw * z + qx * y - qy * x;
        var iw = -qx * x - qy * y - qz * z;

        // calculate result * inverse quat
        out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
        out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
        out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
        return out;
      }

      /**
       * Rotate a 3D vector around the x-axis
       * @param {vec3} out The receiving vec3
       * @param {vec3} a The vec3 point to rotate
       * @param {vec3} b The origin of the rotation
       * @param {Number} c The angle of rotation
       * @returns {vec3} out
       */
      function rotateX(out, a, b, c) {
        var p = [],
            r = [];
        //Translate point to the origin
        p[0] = a[0] - b[0];
        p[1] = a[1] - b[1];
        p[2] = a[2] - b[2];

        //perform rotation
        r[0] = p[0];
        r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
        r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);

        //translate to correct position
        out[0] = r[0] + b[0];
        out[1] = r[1] + b[1];
        out[2] = r[2] + b[2];

        return out;
      }

      /**
       * Rotate a 3D vector around the y-axis
       * @param {vec3} out The receiving vec3
       * @param {vec3} a The vec3 point to rotate
       * @param {vec3} b The origin of the rotation
       * @param {Number} c The angle of rotation
       * @returns {vec3} out
       */
      function rotateY(out, a, b, c) {
        var p = [],
            r = [];
        //Translate point to the origin
        p[0] = a[0] - b[0];
        p[1] = a[1] - b[1];
        p[2] = a[2] - b[2];

        //perform rotation
        r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
        r[1] = p[1];
        r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);

        //translate to correct position
        out[0] = r[0] + b[0];
        out[1] = r[1] + b[1];
        out[2] = r[2] + b[2];

        return out;
      }

      /**
       * Rotate a 3D vector around the z-axis
       * @param {vec3} out The receiving vec3
       * @param {vec3} a The vec3 point to rotate
       * @param {vec3} b The origin of the rotation
       * @param {Number} c The angle of rotation
       * @returns {vec3} out
       */
      function rotateZ(out, a, b, c) {
        var p = [],
            r = [];
        //Translate point to the origin
        p[0] = a[0] - b[0];
        p[1] = a[1] - b[1];
        p[2] = a[2] - b[2];

        //perform rotation
        r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
        r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
        r[2] = p[2];

        //translate to correct position
        out[0] = r[0] + b[0];
        out[1] = r[1] + b[1];
        out[2] = r[2] + b[2];

        return out;
      }

      /**
       * Get the angle between two 3D vectors
       * @param {vec3} a The first operand
       * @param {vec3} b The second operand
       * @returns {Number} The angle in radians
       */
      function angle(a, b) {
        var tempA = fromValues(a[0], a[1], a[2]);
        var tempB = fromValues(b[0], b[1], b[2]);

        normalize(tempA, tempA);
        normalize(tempB, tempB);

        var cosine = dot(tempA, tempB);

        if (cosine > 1.0) {
          return 0;
        } else if (cosine < -1.0) {
          return Math.PI;
        } else {
          return Math.acos(cosine);
        }
      }

      /**
       * Returns a string representation of a vector
       *
       * @param {vec3} a vector to represent as a string
       * @returns {String} string representation of the vector
       */
      function str(a) {
        return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
      }

      /**
       * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
       *
       * @param {vec3} a The first vector.
       * @param {vec3} b The second vector.
       * @returns {Boolean} True if the vectors are equal, false otherwise.
       */
      function exactEquals(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
      }

      /**
       * Returns whether or not the vectors have approximately the same elements in the same position.
       *
       * @param {vec3} a The first vector.
       * @param {vec3} b The second vector.
       * @returns {Boolean} True if the vectors are equal, false otherwise.
       */
      function equals(a, b) {
        var a0 = a[0],
            a1 = a[1],
            a2 = a[2];
        var b0 = b[0],
            b1 = b[1],
            b2 = b[2];
        return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */] * Math.max(1.0, Math.abs(a2), Math.abs(b2));
      }

      /**
       * Alias for {@link vec3.subtract}
       * @function
       */
      var sub = subtract;

      /**
       * Alias for {@link vec3.multiply}
       * @function
       */
      var mul = multiply;

      /**
       * Alias for {@link vec3.divide}
       * @function
       */
      var div = divide;

      /**
       * Alias for {@link vec3.distance}
       * @function
       */
      var dist = distance;

      /**
       * Alias for {@link vec3.squaredDistance}
       * @function
       */
      var sqrDist = squaredDistance;

      /**
       * Alias for {@link vec3.length}
       * @function
       */
      var len = length;

      /**
       * Alias for {@link vec3.squaredLength}
       * @function
       */
      var sqrLen = squaredLength;

      /**
       * Perform some operation over an array of vec3s.
       *
       * @param {Array} a the array of vectors to iterate over
       * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
       * @param {Number} offset Number of elements to skip at the beginning of the array
       * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
       * @param {Function} fn Function to call for each vector in the array
       * @param {Object} [arg] additional argument to pass to fn
       * @returns {Array} a
       * @function
       */
      var forEach = function () {
        var vec = create();

        return function (a, stride, offset, count, fn, arg) {
          var i = void 0,
              l = void 0;
          if (!stride) {
            stride = 3;
          }

          if (!offset) {
            offset = 0;
          }

          if (count) {
            l = Math.min(count * stride + offset, a.length);
          } else {
            l = a.length;
          }

          for (i = offset; i < l; i += stride) {
            vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];
            fn(vec, vec, arg);
            a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];
          }

          return a;
        };
      }();

      /***/
    },
    /* 232 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";

      Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
      /* harmony export (immutable) */__webpack_exports__["create"] = create;
      /* harmony export (immutable) */__webpack_exports__["clone"] = clone;
      /* harmony export (immutable) */__webpack_exports__["fromValues"] = fromValues;
      /* harmony export (immutable) */__webpack_exports__["copy"] = copy;
      /* harmony export (immutable) */__webpack_exports__["set"] = set;
      /* harmony export (immutable) */__webpack_exports__["add"] = add;
      /* harmony export (immutable) */__webpack_exports__["subtract"] = subtract;
      /* harmony export (immutable) */__webpack_exports__["multiply"] = multiply;
      /* harmony export (immutable) */__webpack_exports__["divide"] = divide;
      /* harmony export (immutable) */__webpack_exports__["ceil"] = ceil;
      /* harmony export (immutable) */__webpack_exports__["floor"] = floor;
      /* harmony export (immutable) */__webpack_exports__["min"] = min;
      /* harmony export (immutable) */__webpack_exports__["max"] = max;
      /* harmony export (immutable) */__webpack_exports__["round"] = round;
      /* harmony export (immutable) */__webpack_exports__["scale"] = scale;
      /* harmony export (immutable) */__webpack_exports__["scaleAndAdd"] = scaleAndAdd;
      /* harmony export (immutable) */__webpack_exports__["distance"] = distance;
      /* harmony export (immutable) */__webpack_exports__["squaredDistance"] = squaredDistance;
      /* harmony export (immutable) */__webpack_exports__["length"] = length;
      /* harmony export (immutable) */__webpack_exports__["squaredLength"] = squaredLength;
      /* harmony export (immutable) */__webpack_exports__["negate"] = negate;
      /* harmony export (immutable) */__webpack_exports__["inverse"] = inverse;
      /* harmony export (immutable) */__webpack_exports__["normalize"] = normalize;
      /* harmony export (immutable) */__webpack_exports__["dot"] = dot;
      /* harmony export (immutable) */__webpack_exports__["cross"] = cross;
      /* harmony export (immutable) */__webpack_exports__["lerp"] = lerp;
      /* harmony export (immutable) */__webpack_exports__["random"] = random;
      /* harmony export (immutable) */__webpack_exports__["transformMat2"] = transformMat2;
      /* harmony export (immutable) */__webpack_exports__["transformMat2d"] = transformMat2d;
      /* harmony export (immutable) */__webpack_exports__["transformMat3"] = transformMat3;
      /* harmony export (immutable) */__webpack_exports__["transformMat4"] = transformMat4;
      /* harmony export (immutable) */__webpack_exports__["str"] = str;
      /* harmony export (immutable) */__webpack_exports__["exactEquals"] = exactEquals;
      /* harmony export (immutable) */__webpack_exports__["equals"] = equals;
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "len", function () {
        return len;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "sub", function () {
        return sub;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "mul", function () {
        return mul;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "div", function () {
        return div;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "dist", function () {
        return dist;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "sqrDist", function () {
        return sqrDist;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "sqrLen", function () {
        return sqrLen;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "forEach", function () {
        return forEach;
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(45);
      /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
      
      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:
      
      The above copyright notice and this permission notice shall be included in
      all copies or substantial portions of the Software.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
      THE SOFTWARE. */

      /**
       * 2 Dimensional Vector
       * @module vec2
       */

      /**
       * Creates a new, empty vec2
       *
       * @returns {vec2} a new 2D vector
       */
      function create() {
        var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](2);
        out[0] = 0;
        out[1] = 0;
        return out;
      }

      /**
       * Creates a new vec2 initialized with values from an existing vector
       *
       * @param {vec2} a vector to clone
       * @returns {vec2} a new 2D vector
       */
      function clone(a) {
        var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](2);
        out[0] = a[0];
        out[1] = a[1];
        return out;
      }

      /**
       * Creates a new vec2 initialized with the given values
       *
       * @param {Number} x X component
       * @param {Number} y Y component
       * @returns {vec2} a new 2D vector
       */
      function fromValues(x, y) {
        var out = new __WEBPACK_IMPORTED_MODULE_0__common__["a" /* ARRAY_TYPE */](2);
        out[0] = x;
        out[1] = y;
        return out;
      }

      /**
       * Copy the values from one vec2 to another
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a the source vector
       * @returns {vec2} out
       */
      function copy(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        return out;
      }

      /**
       * Set the components of a vec2 to the given values
       *
       * @param {vec2} out the receiving vector
       * @param {Number} x X component
       * @param {Number} y Y component
       * @returns {vec2} out
       */
      function set(out, x, y) {
        out[0] = x;
        out[1] = y;
        return out;
      }

      /**
       * Adds two vec2's
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a the first operand
       * @param {vec2} b the second operand
       * @returns {vec2} out
       */
      function add(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        return out;
      }

      /**
       * Subtracts vector b from vector a
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a the first operand
       * @param {vec2} b the second operand
       * @returns {vec2} out
       */
      function subtract(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        return out;
      }

      /**
       * Multiplies two vec2's
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a the first operand
       * @param {vec2} b the second operand
       * @returns {vec2} out
       */
      function multiply(out, a, b) {
        out[0] = a[0] * b[0];
        out[1] = a[1] * b[1];
        return out;
      };

      /**
       * Divides two vec2's
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a the first operand
       * @param {vec2} b the second operand
       * @returns {vec2} out
       */
      function divide(out, a, b) {
        out[0] = a[0] / b[0];
        out[1] = a[1] / b[1];
        return out;
      };

      /**
       * Math.ceil the components of a vec2
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a vector to ceil
       * @returns {vec2} out
       */
      function ceil(out, a) {
        out[0] = Math.ceil(a[0]);
        out[1] = Math.ceil(a[1]);
        return out;
      };

      /**
       * Math.floor the components of a vec2
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a vector to floor
       * @returns {vec2} out
       */
      function floor(out, a) {
        out[0] = Math.floor(a[0]);
        out[1] = Math.floor(a[1]);
        return out;
      };

      /**
       * Returns the minimum of two vec2's
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a the first operand
       * @param {vec2} b the second operand
       * @returns {vec2} out
       */
      function min(out, a, b) {
        out[0] = Math.min(a[0], b[0]);
        out[1] = Math.min(a[1], b[1]);
        return out;
      };

      /**
       * Returns the maximum of two vec2's
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a the first operand
       * @param {vec2} b the second operand
       * @returns {vec2} out
       */
      function max(out, a, b) {
        out[0] = Math.max(a[0], b[0]);
        out[1] = Math.max(a[1], b[1]);
        return out;
      };

      /**
       * Math.round the components of a vec2
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a vector to round
       * @returns {vec2} out
       */
      function round(out, a) {
        out[0] = Math.round(a[0]);
        out[1] = Math.round(a[1]);
        return out;
      };

      /**
       * Scales a vec2 by a scalar number
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a the vector to scale
       * @param {Number} b amount to scale the vector by
       * @returns {vec2} out
       */
      function scale(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        return out;
      };

      /**
       * Adds two vec2's after scaling the second operand by a scalar value
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a the first operand
       * @param {vec2} b the second operand
       * @param {Number} scale the amount to scale b by before adding
       * @returns {vec2} out
       */
      function scaleAndAdd(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        return out;
      };

      /**
       * Calculates the euclidian distance between two vec2's
       *
       * @param {vec2} a the first operand
       * @param {vec2} b the second operand
       * @returns {Number} distance between a and b
       */
      function distance(a, b) {
        var x = b[0] - a[0],
            y = b[1] - a[1];
        return Math.sqrt(x * x + y * y);
      };

      /**
       * Calculates the squared euclidian distance between two vec2's
       *
       * @param {vec2} a the first operand
       * @param {vec2} b the second operand
       * @returns {Number} squared distance between a and b
       */
      function squaredDistance(a, b) {
        var x = b[0] - a[0],
            y = b[1] - a[1];
        return x * x + y * y;
      };

      /**
       * Calculates the length of a vec2
       *
       * @param {vec2} a vector to calculate length of
       * @returns {Number} length of a
       */
      function length(a) {
        var x = a[0],
            y = a[1];
        return Math.sqrt(x * x + y * y);
      };

      /**
       * Calculates the squared length of a vec2
       *
       * @param {vec2} a vector to calculate squared length of
       * @returns {Number} squared length of a
       */
      function squaredLength(a) {
        var x = a[0],
            y = a[1];
        return x * x + y * y;
      };

      /**
       * Negates the components of a vec2
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a vector to negate
       * @returns {vec2} out
       */
      function negate(out, a) {
        out[0] = -a[0];
        out[1] = -a[1];
        return out;
      };

      /**
       * Returns the inverse of the components of a vec2
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a vector to invert
       * @returns {vec2} out
       */
      function inverse(out, a) {
        out[0] = 1.0 / a[0];
        out[1] = 1.0 / a[1];
        return out;
      };

      /**
       * Normalize a vec2
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a vector to normalize
       * @returns {vec2} out
       */
      function normalize(out, a) {
        var x = a[0],
            y = a[1];
        var len = x * x + y * y;
        if (len > 0) {
          //TODO: evaluate use of glm_invsqrt here?
          len = 1 / Math.sqrt(len);
          out[0] = a[0] * len;
          out[1] = a[1] * len;
        }
        return out;
      };

      /**
       * Calculates the dot product of two vec2's
       *
       * @param {vec2} a the first operand
       * @param {vec2} b the second operand
       * @returns {Number} dot product of a and b
       */
      function dot(a, b) {
        return a[0] * b[0] + a[1] * b[1];
      };

      /**
       * Computes the cross product of two vec2's
       * Note that the cross product must by definition produce a 3D vector
       *
       * @param {vec3} out the receiving vector
       * @param {vec2} a the first operand
       * @param {vec2} b the second operand
       * @returns {vec3} out
       */
      function cross(out, a, b) {
        var z = a[0] * b[1] - a[1] * b[0];
        out[0] = out[1] = 0;
        out[2] = z;
        return out;
      };

      /**
       * Performs a linear interpolation between two vec2's
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a the first operand
       * @param {vec2} b the second operand
       * @param {Number} t interpolation amount between the two inputs
       * @returns {vec2} out
       */
      function lerp(out, a, b, t) {
        var ax = a[0],
            ay = a[1];
        out[0] = ax + t * (b[0] - ax);
        out[1] = ay + t * (b[1] - ay);
        return out;
      };

      /**
       * Generates a random vector with the given scale
       *
       * @param {vec2} out the receiving vector
       * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
       * @returns {vec2} out
       */
      function random(out, scale) {
        scale = scale || 1.0;
        var r = __WEBPACK_IMPORTED_MODULE_0__common__["c" /* RANDOM */]() * 2.0 * Math.PI;
        out[0] = Math.cos(r) * scale;
        out[1] = Math.sin(r) * scale;
        return out;
      };

      /**
       * Transforms the vec2 with a mat2
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a the vector to transform
       * @param {mat2} m matrix to transform with
       * @returns {vec2} out
       */
      function transformMat2(out, a, m) {
        var x = a[0],
            y = a[1];
        out[0] = m[0] * x + m[2] * y;
        out[1] = m[1] * x + m[3] * y;
        return out;
      };

      /**
       * Transforms the vec2 with a mat2d
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a the vector to transform
       * @param {mat2d} m matrix to transform with
       * @returns {vec2} out
       */
      function transformMat2d(out, a, m) {
        var x = a[0],
            y = a[1];
        out[0] = m[0] * x + m[2] * y + m[4];
        out[1] = m[1] * x + m[3] * y + m[5];
        return out;
      };

      /**
       * Transforms the vec2 with a mat3
       * 3rd vector component is implicitly '1'
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a the vector to transform
       * @param {mat3} m matrix to transform with
       * @returns {vec2} out
       */
      function transformMat3(out, a, m) {
        var x = a[0],
            y = a[1];
        out[0] = m[0] * x + m[3] * y + m[6];
        out[1] = m[1] * x + m[4] * y + m[7];
        return out;
      };

      /**
       * Transforms the vec2 with a mat4
       * 3rd vector component is implicitly '0'
       * 4th vector component is implicitly '1'
       *
       * @param {vec2} out the receiving vector
       * @param {vec2} a the vector to transform
       * @param {mat4} m matrix to transform with
       * @returns {vec2} out
       */
      function transformMat4(out, a, m) {
        var x = a[0];
        var y = a[1];
        out[0] = m[0] * x + m[4] * y + m[12];
        out[1] = m[1] * x + m[5] * y + m[13];
        return out;
      }

      /**
       * Returns a string representation of a vector
       *
       * @param {vec2} a vector to represent as a string
       * @returns {String} string representation of the vector
       */
      function str(a) {
        return 'vec2(' + a[0] + ', ' + a[1] + ')';
      }

      /**
       * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
       *
       * @param {vec2} a The first vector.
       * @param {vec2} b The second vector.
       * @returns {Boolean} True if the vectors are equal, false otherwise.
       */
      function exactEquals(a, b) {
        return a[0] === b[0] && a[1] === b[1];
      }

      /**
       * Returns whether or not the vectors have approximately the same elements in the same position.
       *
       * @param {vec2} a The first vector.
       * @param {vec2} b The second vector.
       * @returns {Boolean} True if the vectors are equal, false otherwise.
       */
      function equals(a, b) {
        var a0 = a[0],
            a1 = a[1];
        var b0 = b[0],
            b1 = b[1];
        return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["b" /* EPSILON */] * Math.max(1.0, Math.abs(a1), Math.abs(b1));
      }

      /**
       * Alias for {@link vec2.length}
       * @function
       */
      var len = length;

      /**
       * Alias for {@link vec2.subtract}
       * @function
       */
      var sub = subtract;

      /**
       * Alias for {@link vec2.multiply}
       * @function
       */
      var mul = multiply;

      /**
       * Alias for {@link vec2.divide}
       * @function
       */
      var div = divide;

      /**
       * Alias for {@link vec2.distance}
       * @function
       */
      var dist = distance;

      /**
       * Alias for {@link vec2.squaredDistance}
       * @function
       */
      var sqrDist = squaredDistance;

      /**
       * Alias for {@link vec2.squaredLength}
       * @function
       */
      var sqrLen = squaredLength;

      /**
       * Perform some operation over an array of vec2s.
       *
       * @param {Array} a the array of vectors to iterate over
       * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
       * @param {Number} offset Number of elements to skip at the beginning of the array
       * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
       * @param {Function} fn Function to call for each vector in the array
       * @param {Object} [arg] additional argument to pass to fn
       * @returns {Array} a
       * @function
       */
      var forEach = function () {
        var vec = create();

        return function (a, stride, offset, count, fn, arg) {
          var i = void 0,
              l = void 0;
          if (!stride) {
            stride = 2;
          }

          if (!offset) {
            offset = 0;
          }

          if (count) {
            l = Math.min(count * stride + offset, a.length);
          } else {
            l = a.length;
          }

          for (i = offset; i < l; i += stride) {
            vec[0] = a[i];vec[1] = a[i + 1];
            fn(vec, vec, arg);
            a[i] = vec[0];a[i + 1] = vec[1];
          }

          return a;
        };
      }();

      /***/
    },
    /* 233 */
    /***/function (module, exports, __webpack_require__) {

      var MatrixUtil = __webpack_require__(3);
      var PathUtil = __webpack_require__(46);
      var Util = __webpack_require__(0);
      var d3Ease = __webpack_require__(234);
      var d3Timer = __webpack_require__(245);

      var _require = __webpack_require__(248),
          interpolate = _require.interpolate,
          interpolateArray = _require.interpolateArray; // 目前整体动画只需要数值和数组的差值计算

      module.exports = {
        /**
         * 执行动画
         * @param  {Object}   toProps  动画最终状态
         * @param  {Number}   duration 动画执行时间
         * @param  {String}   easing   动画缓动效果
         * @param  {Function} callback 动画执行后的回调
         * @param  {Number}   delay    动画延迟时间
         */
        animate: function animate(toProps, duration, easing, callback) {
          var delay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

          var self = this;
          var canvas = self.get('canvas');
          var formatProps = getFormatProps(toProps);
          var toAttrs = formatProps.attrs;
          var toM = formatProps.M;
          var fromAttrs = getfromAttrs(toAttrs);
          var fromM = Util.clone(self.getMatrix());
          easing = easing ? easing : 'easeLinear';

          self.setSilent('animating', true); // 处于动画状态
          // 执行动画
          var timer = d3Timer.timer(function (elapsed) {
            var ratio = elapsed / duration;
            if (ratio < 1) {
              ratio = d3Ease[easing](ratio);
              update(ratio);
            } else {
              update(1); // 保证最后一帧的绘制
              callback && callback();
              self.setSilent('animating', false); // 动画停止
              timer.stop();
            }
          }, delay);

          function update(ratio) {
            var cProps = {}; // 此刻属性
            if (self.get('destroyed')) {
              return;
            }
            var interf = void 0; //  差值函数

            for (var k in toAttrs) {
              if (!Util.isEqual(fromAttrs[k], toAttrs[k])) {
                if (k === 'path') {
                  var toPath = PathUtil.parsePathString(toAttrs[k]); // 终点状态
                  var fromPath = PathUtil.parsePathString(fromAttrs[k]); // 起始状态
                  cProps[k] = [];
                  for (var i = 0; i < toPath.length; i++) {
                    var toPathPoint = toPath[i];
                    var fromPathPoint = fromPath[i];
                    var cPathPoint = [];
                    for (var j = 0; j < toPathPoint.length; j++) {
                      if (Util.isNumber(toPathPoint[j]) && fromPathPoint) {
                        interf = interpolate(fromPathPoint[j], toPathPoint[j]);
                        cPathPoint.push(interf(ratio));
                      } else {
                        cPathPoint.push(toPathPoint[j]);
                      }
                    }
                    cProps[k].push(cPathPoint);
                  }
                } else {
                  interf = interpolate(fromAttrs[k], toAttrs[k]);
                  cProps[k] = interf(ratio);
                }
              }
            }
            if (toM) {
              var mf = interpolateArray(fromM, toM);
              var cM = mf(ratio);
              self.setMatrix(cM);
            }
            self.attr(cProps);
            canvas.draw();
          }

          function getFormatProps(props) {
            var rst = {
              M: null,
              attrs: {}
            };
            for (var k in props) {
              if (k === 'transform') {
                rst.M = MatrixUtil.transform(self.getMatrix(), props[k]);
              } else if (k === 'matrix') {
                rst.M = props[k];
              } else {
                rst.attrs[k] = props[k];
              }
            }
            return rst;
          }

          function getfromAttrs(toAttrs) {
            var rst = {};
            for (var k in toAttrs) {
              rst[k] = self.attr(k);
            }
            return rst;
          }
        }
      };

      /***/
    },
    /* 234 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";

      Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__src_linear__ = __webpack_require__(235);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeLinear", function () {
        return __WEBPACK_IMPORTED_MODULE_0__src_linear__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__src_quad__ = __webpack_require__(236);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeQuad", function () {
        return __WEBPACK_IMPORTED_MODULE_1__src_quad__["b"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeQuadIn", function () {
        return __WEBPACK_IMPORTED_MODULE_1__src_quad__["a"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeQuadOut", function () {
        return __WEBPACK_IMPORTED_MODULE_1__src_quad__["c"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeQuadInOut", function () {
        return __WEBPACK_IMPORTED_MODULE_1__src_quad__["b"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__src_cubic__ = __webpack_require__(237);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCubic", function () {
        return __WEBPACK_IMPORTED_MODULE_2__src_cubic__["b"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCubicIn", function () {
        return __WEBPACK_IMPORTED_MODULE_2__src_cubic__["a"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCubicOut", function () {
        return __WEBPACK_IMPORTED_MODULE_2__src_cubic__["c"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCubicInOut", function () {
        return __WEBPACK_IMPORTED_MODULE_2__src_cubic__["b"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__src_poly__ = __webpack_require__(238);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easePoly", function () {
        return __WEBPACK_IMPORTED_MODULE_3__src_poly__["b"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easePolyIn", function () {
        return __WEBPACK_IMPORTED_MODULE_3__src_poly__["a"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easePolyOut", function () {
        return __WEBPACK_IMPORTED_MODULE_3__src_poly__["c"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easePolyInOut", function () {
        return __WEBPACK_IMPORTED_MODULE_3__src_poly__["b"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__src_sin__ = __webpack_require__(239);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeSin", function () {
        return __WEBPACK_IMPORTED_MODULE_4__src_sin__["b"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeSinIn", function () {
        return __WEBPACK_IMPORTED_MODULE_4__src_sin__["a"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeSinOut", function () {
        return __WEBPACK_IMPORTED_MODULE_4__src_sin__["c"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeSinInOut", function () {
        return __WEBPACK_IMPORTED_MODULE_4__src_sin__["b"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__src_exp__ = __webpack_require__(240);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeExp", function () {
        return __WEBPACK_IMPORTED_MODULE_5__src_exp__["b"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeExpIn", function () {
        return __WEBPACK_IMPORTED_MODULE_5__src_exp__["a"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeExpOut", function () {
        return __WEBPACK_IMPORTED_MODULE_5__src_exp__["c"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeExpInOut", function () {
        return __WEBPACK_IMPORTED_MODULE_5__src_exp__["b"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__src_circle__ = __webpack_require__(241);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCircle", function () {
        return __WEBPACK_IMPORTED_MODULE_6__src_circle__["b"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCircleIn", function () {
        return __WEBPACK_IMPORTED_MODULE_6__src_circle__["a"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCircleOut", function () {
        return __WEBPACK_IMPORTED_MODULE_6__src_circle__["c"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCircleInOut", function () {
        return __WEBPACK_IMPORTED_MODULE_6__src_circle__["b"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_7__src_bounce__ = __webpack_require__(242);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBounce", function () {
        return __WEBPACK_IMPORTED_MODULE_7__src_bounce__["c"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBounceIn", function () {
        return __WEBPACK_IMPORTED_MODULE_7__src_bounce__["a"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBounceOut", function () {
        return __WEBPACK_IMPORTED_MODULE_7__src_bounce__["c"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBounceInOut", function () {
        return __WEBPACK_IMPORTED_MODULE_7__src_bounce__["b"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_8__src_back__ = __webpack_require__(243);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBack", function () {
        return __WEBPACK_IMPORTED_MODULE_8__src_back__["b"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBackIn", function () {
        return __WEBPACK_IMPORTED_MODULE_8__src_back__["a"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBackOut", function () {
        return __WEBPACK_IMPORTED_MODULE_8__src_back__["c"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBackInOut", function () {
        return __WEBPACK_IMPORTED_MODULE_8__src_back__["b"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_9__src_elastic__ = __webpack_require__(244);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeElastic", function () {
        return __WEBPACK_IMPORTED_MODULE_9__src_elastic__["c"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeElasticIn", function () {
        return __WEBPACK_IMPORTED_MODULE_9__src_elastic__["a"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeElasticOut", function () {
        return __WEBPACK_IMPORTED_MODULE_9__src_elastic__["c"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeElasticInOut", function () {
        return __WEBPACK_IMPORTED_MODULE_9__src_elastic__["b"];
      });

      /***/
    },
    /* 235 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["a"] = linear;
      function linear(t) {
        return +t;
      }

      /***/
    },
    /* 236 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["a"] = quadIn;
      /* harmony export (immutable) */__webpack_exports__["c"] = quadOut;
      /* harmony export (immutable) */__webpack_exports__["b"] = quadInOut;
      function quadIn(t) {
        return t * t;
      }

      function quadOut(t) {
        return t * (2 - t);
      }

      function quadInOut(t) {
        return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
      }

      /***/
    },
    /* 237 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["a"] = cubicIn;
      /* harmony export (immutable) */__webpack_exports__["c"] = cubicOut;
      /* harmony export (immutable) */__webpack_exports__["b"] = cubicInOut;
      function cubicIn(t) {
        return t * t * t;
      }

      function cubicOut(t) {
        return --t * t * t + 1;
      }

      function cubicInOut(t) {
        return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
      }

      /***/
    },
    /* 238 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "a", function () {
        return polyIn;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
        return polyOut;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
        return polyInOut;
      });
      var exponent = 3;

      var polyIn = function custom(e) {
        e = +e;

        function polyIn(t) {
          return Math.pow(t, e);
        }

        polyIn.exponent = custom;

        return polyIn;
      }(exponent);

      var polyOut = function custom(e) {
        e = +e;

        function polyOut(t) {
          return 1 - Math.pow(1 - t, e);
        }

        polyOut.exponent = custom;

        return polyOut;
      }(exponent);

      var polyInOut = function custom(e) {
        e = +e;

        function polyInOut(t) {
          return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
        }

        polyInOut.exponent = custom;

        return polyInOut;
      }(exponent);

      /***/
    },
    /* 239 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["a"] = sinIn;
      /* harmony export (immutable) */__webpack_exports__["c"] = sinOut;
      /* harmony export (immutable) */__webpack_exports__["b"] = sinInOut;
      var pi = Math.PI,
          halfPi = pi / 2;

      function sinIn(t) {
        return 1 - Math.cos(t * halfPi);
      }

      function sinOut(t) {
        return Math.sin(t * halfPi);
      }

      function sinInOut(t) {
        return (1 - Math.cos(pi * t)) / 2;
      }

      /***/
    },
    /* 240 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["a"] = expIn;
      /* harmony export (immutable) */__webpack_exports__["c"] = expOut;
      /* harmony export (immutable) */__webpack_exports__["b"] = expInOut;
      function expIn(t) {
        return Math.pow(2, 10 * t - 10);
      }

      function expOut(t) {
        return 1 - Math.pow(2, -10 * t);
      }

      function expInOut(t) {
        return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
      }

      /***/
    },
    /* 241 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["a"] = circleIn;
      /* harmony export (immutable) */__webpack_exports__["c"] = circleOut;
      /* harmony export (immutable) */__webpack_exports__["b"] = circleInOut;
      function circleIn(t) {
        return 1 - Math.sqrt(1 - t * t);
      }

      function circleOut(t) {
        return Math.sqrt(1 - --t * t);
      }

      function circleInOut(t) {
        return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
      }

      /***/
    },
    /* 242 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["a"] = bounceIn;
      /* harmony export (immutable) */__webpack_exports__["c"] = bounceOut;
      /* harmony export (immutable) */__webpack_exports__["b"] = bounceInOut;
      var b1 = 4 / 11,
          b2 = 6 / 11,
          b3 = 8 / 11,
          b4 = 3 / 4,
          b5 = 9 / 11,
          b6 = 10 / 11,
          b7 = 15 / 16,
          b8 = 21 / 22,
          b9 = 63 / 64,
          b0 = 1 / b1 / b1;

      function bounceIn(t) {
        return 1 - bounceOut(1 - t);
      }

      function bounceOut(t) {
        return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
      }

      function bounceInOut(t) {
        return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
      }

      /***/
    },
    /* 243 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "a", function () {
        return backIn;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
        return backOut;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
        return backInOut;
      });
      var overshoot = 1.70158;

      var backIn = function custom(s) {
        s = +s;

        function backIn(t) {
          return t * t * ((s + 1) * t - s);
        }

        backIn.overshoot = custom;

        return backIn;
      }(overshoot);

      var backOut = function custom(s) {
        s = +s;

        function backOut(t) {
          return --t * t * ((s + 1) * t + s) + 1;
        }

        backOut.overshoot = custom;

        return backOut;
      }(overshoot);

      var backInOut = function custom(s) {
        s = +s;

        function backInOut(t) {
          return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
        }

        backInOut.overshoot = custom;

        return backInOut;
      }(overshoot);

      /***/
    },
    /* 244 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "a", function () {
        return elasticIn;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
        return elasticOut;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
        return elasticInOut;
      });
      var tau = 2 * Math.PI,
          amplitude = 1,
          period = 0.3;

      var elasticIn = function custom(a, p) {
        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

        function elasticIn(t) {
          return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
        }

        elasticIn.amplitude = function (a) {
          return custom(a, p * tau);
        };
        elasticIn.period = function (p) {
          return custom(a, p);
        };

        return elasticIn;
      }(amplitude, period);

      var elasticOut = function custom(a, p) {
        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

        function elasticOut(t) {
          return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
        }

        elasticOut.amplitude = function (a) {
          return custom(a, p * tau);
        };
        elasticOut.period = function (p) {
          return custom(a, p);
        };

        return elasticOut;
      }(amplitude, period);

      var elasticInOut = function custom(a, p) {
        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

        function elasticInOut(t) {
          return ((t = t * 2 - 1) < 0 ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p) : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
        }

        elasticInOut.amplitude = function (a) {
          return custom(a, p * tau);
        };
        elasticInOut.period = function (p) {
          return custom(a, p);
        };

        return elasticInOut;
      }(amplitude, period);

      /***/
    },
    /* 245 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";

      Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__src_timer__ = __webpack_require__(47);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "now", function () {
        return __WEBPACK_IMPORTED_MODULE_0__src_timer__["b"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "timer", function () {
        return __WEBPACK_IMPORTED_MODULE_0__src_timer__["c"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "timerFlush", function () {
        return __WEBPACK_IMPORTED_MODULE_0__src_timer__["d"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__src_timeout__ = __webpack_require__(246);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "timeout", function () {
        return __WEBPACK_IMPORTED_MODULE_1__src_timeout__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__src_interval__ = __webpack_require__(247);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interval", function () {
        return __WEBPACK_IMPORTED_MODULE_2__src_interval__["a"];
      });

      /***/
    },
    /* 246 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0__timer__ = __webpack_require__(47);

      /* harmony default export */__webpack_exports__["a"] = function (callback, delay, time) {
        var t = new __WEBPACK_IMPORTED_MODULE_0__timer__["a" /* Timer */]();
        delay = delay == null ? 0 : +delay;
        t.restart(function (elapsed) {
          t.stop();
          callback(elapsed + delay);
        }, delay, time);
        return t;
      };

      /***/
    },
    /* 247 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0__timer__ = __webpack_require__(47);

      /* harmony default export */__webpack_exports__["a"] = function (callback, delay, time) {
        var t = new __WEBPACK_IMPORTED_MODULE_0__timer__["a" /* Timer */](),
            total = delay;
        if (delay == null) return t.restart(callback, delay, time), t;
        delay = +delay, time = time == null ? Object(__WEBPACK_IMPORTED_MODULE_0__timer__["b" /* now */])() : +time;
        t.restart(function tick(elapsed) {
          elapsed += total;
          t.restart(tick, total += delay, time);
          callback(elapsed);
        }, delay, time);
        return t;
      };

      /***/
    },
    /* 248 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";

      Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__src_value__ = __webpack_require__(48);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolate", function () {
        return __WEBPACK_IMPORTED_MODULE_0__src_value__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__src_array__ = __webpack_require__(93);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateArray", function () {
        return __WEBPACK_IMPORTED_MODULE_1__src_array__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__src_basis__ = __webpack_require__(51);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateBasis", function () {
        return __WEBPACK_IMPORTED_MODULE_2__src_basis__["b"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__src_basisClosed__ = __webpack_require__(91);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateBasisClosed", function () {
        return __WEBPACK_IMPORTED_MODULE_3__src_basisClosed__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__src_date__ = __webpack_require__(94);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateDate", function () {
        return __WEBPACK_IMPORTED_MODULE_4__src_date__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__src_number__ = __webpack_require__(29);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateNumber", function () {
        return __WEBPACK_IMPORTED_MODULE_5__src_number__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__src_object__ = __webpack_require__(95);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateObject", function () {
        return __WEBPACK_IMPORTED_MODULE_6__src_object__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_7__src_round__ = __webpack_require__(251);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateRound", function () {
        return __WEBPACK_IMPORTED_MODULE_7__src_round__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_8__src_string__ = __webpack_require__(96);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateString", function () {
        return __WEBPACK_IMPORTED_MODULE_8__src_string__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_9__src_transform_index__ = __webpack_require__(252);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateTransformCss", function () {
        return __WEBPACK_IMPORTED_MODULE_9__src_transform_index__["a"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateTransformSvg", function () {
        return __WEBPACK_IMPORTED_MODULE_9__src_transform_index__["b"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_10__src_zoom__ = __webpack_require__(255);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateZoom", function () {
        return __WEBPACK_IMPORTED_MODULE_10__src_zoom__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_11__src_rgb__ = __webpack_require__(90);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateRgb", function () {
        return __WEBPACK_IMPORTED_MODULE_11__src_rgb__["a"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateRgbBasis", function () {
        return __WEBPACK_IMPORTED_MODULE_11__src_rgb__["b"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateRgbBasisClosed", function () {
        return __WEBPACK_IMPORTED_MODULE_11__src_rgb__["c"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_12__src_hsl__ = __webpack_require__(256);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateHsl", function () {
        return __WEBPACK_IMPORTED_MODULE_12__src_hsl__["a"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateHslLong", function () {
        return __WEBPACK_IMPORTED_MODULE_12__src_hsl__["b"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_13__src_lab__ = __webpack_require__(257);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateLab", function () {
        return __WEBPACK_IMPORTED_MODULE_13__src_lab__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_14__src_hcl__ = __webpack_require__(258);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateHcl", function () {
        return __WEBPACK_IMPORTED_MODULE_14__src_hcl__["a"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateHclLong", function () {
        return __WEBPACK_IMPORTED_MODULE_14__src_hcl__["b"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_15__src_cubehelix__ = __webpack_require__(259);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateCubehelix", function () {
        return __WEBPACK_IMPORTED_MODULE_15__src_cubehelix__["b"];
      });
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateCubehelixLong", function () {
        return __WEBPACK_IMPORTED_MODULE_15__src_cubehelix__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_16__src_quantize__ = __webpack_require__(260);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "quantize", function () {
        return __WEBPACK_IMPORTED_MODULE_16__src_quantize__["a"];
      });

      /***/
    },
    /* 249 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["a"] = lab;
      /* unused harmony export Lab */
      /* harmony export (immutable) */__webpack_exports__["b"] = hcl;
      /* unused harmony export Hcl */
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(50);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(49);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(89);

      var Kn = 18,
          Xn = 0.950470,

      // D65 standard referent
      Yn = 1,
          Zn = 1.088830,
          t0 = 4 / 29,
          t1 = 6 / 29,
          t2 = 3 * t1 * t1,
          t3 = t1 * t1 * t1;

      function labConvert(o) {
        if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
        if (o instanceof Hcl) {
          var h = o.h * __WEBPACK_IMPORTED_MODULE_2__math__["a" /* deg2rad */];
          return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
        }
        if (!(o instanceof __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */])) o = Object(__WEBPACK_IMPORTED_MODULE_1__color__["h" /* rgbConvert */])(o);
        var b = rgb2xyz(o.r),
            a = rgb2xyz(o.g),
            l = rgb2xyz(o.b),
            x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),
            y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),
            z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
        return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
      }

      function lab(l, a, b, opacity) {
        return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
      }

      function Lab(l, a, b, opacity) {
        this.l = +l;
        this.a = +a;
        this.b = +b;
        this.opacity = +opacity;
      }

      Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Lab, lab, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
        brighter: function brighter(k) {
          return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
        },
        darker: function darker(k) {
          return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
        },
        rgb: function rgb() {
          var y = (this.l + 16) / 116,
              x = isNaN(this.a) ? y : y + this.a / 500,
              z = isNaN(this.b) ? y : y - this.b / 200;
          y = Yn * lab2xyz(y);
          x = Xn * lab2xyz(x);
          z = Zn * lab2xyz(z);
          return new __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */](xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
          xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z), xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z), this.opacity);
        }
      }));

      function xyz2lab(t) {
        return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
      }

      function lab2xyz(t) {
        return t > t1 ? t * t * t : t2 * (t - t0);
      }

      function xyz2rgb(x) {
        return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
      }

      function rgb2xyz(x) {
        return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
      }

      function hclConvert(o) {
        if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
        if (!(o instanceof Lab)) o = labConvert(o);
        var h = Math.atan2(o.b, o.a) * __WEBPACK_IMPORTED_MODULE_2__math__["b" /* rad2deg */];
        return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
      }

      function hcl(h, c, l, opacity) {
        return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
      }

      function Hcl(h, c, l, opacity) {
        this.h = +h;
        this.c = +c;
        this.l = +l;
        this.opacity = +opacity;
      }

      Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Hcl, hcl, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
        brighter: function brighter(k) {
          return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
        },
        darker: function darker(k) {
          return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
        },
        rgb: function rgb() {
          return labConvert(this).rgb();
        }
      }));

      /***/
    },
    /* 250 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["a"] = cubehelix;
      /* unused harmony export Cubehelix */
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(50);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(49);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(89);

      var A = -0.14861,
          B = +1.78277,
          C = -0.29227,
          D = -0.90649,
          E = +1.97294,
          ED = E * D,
          EB = E * B,
          BC_DA = B * C - D * A;

      function cubehelixConvert(o) {
        if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
        if (!(o instanceof __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */])) o = Object(__WEBPACK_IMPORTED_MODULE_1__color__["h" /* rgbConvert */])(o);
        var r = o.r / 255,
            g = o.g / 255,
            b = o.b / 255,
            l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
            bl = b - l,
            k = (E * (g - l) - C * bl) / D,
            s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),

        // NaN if l=0 or l=1
        h = s ? Math.atan2(k, bl) * __WEBPACK_IMPORTED_MODULE_2__math__["b" /* rad2deg */] - 120 : NaN;
        return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
      }

      function cubehelix(h, s, l, opacity) {
        return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
      }

      function Cubehelix(h, s, l, opacity) {
        this.h = +h;
        this.s = +s;
        this.l = +l;
        this.opacity = +opacity;
      }

      Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Cubehelix, cubehelix, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
        brighter: function brighter(k) {
          k = k == null ? __WEBPACK_IMPORTED_MODULE_1__color__["c" /* brighter */] : Math.pow(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* brighter */], k);
          return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
        },
        darker: function darker(k) {
          k = k == null ? __WEBPACK_IMPORTED_MODULE_1__color__["d" /* darker */] : Math.pow(__WEBPACK_IMPORTED_MODULE_1__color__["d" /* darker */], k);
          return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
        },
        rgb: function rgb() {
          var h = isNaN(this.h) ? 0 : (this.h + 120) * __WEBPACK_IMPORTED_MODULE_2__math__["a" /* deg2rad */],
              l = +this.l,
              a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
              cosh = Math.cos(h),
              sinh = Math.sin(h);
          return new __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */](255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
        }
      }));

      /***/
    },
    /* 251 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony default export */
      __webpack_exports__["a"] = function (a, b) {
        return a = +a, b -= a, function (t) {
          return Math.round(a + b * t);
        };
      };

      /***/
    },
    /* 252 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "a", function () {
        return interpolateTransformCss;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
        return interpolateTransformSvg;
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(29);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__parse__ = __webpack_require__(253);

      function interpolateTransform(parse, pxComma, pxParen, degParen) {

        function pop(s) {
          return s.length ? s.pop() + " " : "";
        }

        function translate(xa, ya, xb, yb, s, q) {
          if (xa !== xb || ya !== yb) {
            var i = s.push("translate(", null, pxComma, null, pxParen);
            q.push({ i: i - 4, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(xa, xb) }, { i: i - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(ya, yb) });
          } else if (xb || yb) {
            s.push("translate(" + xb + pxComma + yb + pxParen);
          }
        }

        function rotate(a, b, s, q) {
          if (a !== b) {
            if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path
            q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(a, b) });
          } else if (b) {
            s.push(pop(s) + "rotate(" + b + degParen);
          }
        }

        function skewX(a, b, s, q) {
          if (a !== b) {
            q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(a, b) });
          } else if (b) {
            s.push(pop(s) + "skewX(" + b + degParen);
          }
        }

        function scale(xa, ya, xb, yb, s, q) {
          if (xa !== xb || ya !== yb) {
            var i = s.push(pop(s) + "scale(", null, ",", null, ")");
            q.push({ i: i - 4, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(xa, xb) }, { i: i - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(ya, yb) });
          } else if (xb !== 1 || yb !== 1) {
            s.push(pop(s) + "scale(" + xb + "," + yb + ")");
          }
        }

        return function (a, b) {
          var s = [],

          // string constants and placeholders
          q = []; // number interpolators
          a = parse(a), b = parse(b);
          translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
          rotate(a.rotate, b.rotate, s, q);
          skewX(a.skewX, b.skewX, s, q);
          scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
          a = b = null; // gc
          return function (t) {
            var i = -1,
                n = q.length,
                o;
            while (++i < n) {
              s[(o = q[i]).i] = o.x(t);
            }return s.join("");
          };
        };
      }

      var interpolateTransformCss = interpolateTransform(__WEBPACK_IMPORTED_MODULE_1__parse__["a" /* parseCss */], "px, ", "px)", "deg)");
      var interpolateTransformSvg = interpolateTransform(__WEBPACK_IMPORTED_MODULE_1__parse__["b" /* parseSvg */], ", ", ")", ")");

      /***/
    },
    /* 253 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["a"] = parseCss;
      /* harmony export (immutable) */__webpack_exports__["b"] = parseSvg;
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__decompose__ = __webpack_require__(254);

      var cssNode, cssRoot, cssView, svgNode;

      function parseCss(value) {
        if (value === "none") return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
        if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
        cssNode.style.transform = value;
        value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
        cssRoot.removeChild(cssNode);
        value = value.slice(7, -1).split(",");
        return Object(__WEBPACK_IMPORTED_MODULE_0__decompose__["a" /* default */])(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
      }

      function parseSvg(value) {
        if (value == null) return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
        if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
        svgNode.setAttribute("transform", value);
        if (!(value = svgNode.transform.baseVal.consolidate())) return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
        value = value.matrix;
        return Object(__WEBPACK_IMPORTED_MODULE_0__decompose__["a" /* default */])(value.a, value.b, value.c, value.d, value.e, value.f);
      }

      /***/
    },
    /* 254 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "b", function () {
        return identity;
      });
      var degrees = 180 / Math.PI;

      var identity = {
        translateX: 0,
        translateY: 0,
        rotate: 0,
        skewX: 0,
        scaleX: 1,
        scaleY: 1
      };

      /* harmony default export */__webpack_exports__["a"] = function (a, b, c, d, e, f) {
        var scaleX, scaleY, skewX;
        if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
        if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
        if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
        if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
        return {
          translateX: e,
          translateY: f,
          rotate: Math.atan2(b, a) * degrees,
          skewX: Math.atan(skewX) * degrees,
          scaleX: scaleX,
          scaleY: scaleY
        };
      };

      /***/
    },
    /* 255 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";

      var rho = Math.SQRT2,
          rho2 = 2,
          rho4 = 4,
          epsilon2 = 1e-12;

      function cosh(x) {
        return ((x = Math.exp(x)) + 1 / x) / 2;
      }

      function sinh(x) {
        return ((x = Math.exp(x)) - 1 / x) / 2;
      }

      function tanh(x) {
        return ((x = Math.exp(2 * x)) - 1) / (x + 1);
      }

      // p0 = [ux0, uy0, w0]
      // p1 = [ux1, uy1, w1]
      /* harmony default export */__webpack_exports__["a"] = function (p0, p1) {
        var ux0 = p0[0],
            uy0 = p0[1],
            w0 = p0[2],
            ux1 = p1[0],
            uy1 = p1[1],
            w1 = p1[2],
            dx = ux1 - ux0,
            dy = uy1 - uy0,
            d2 = dx * dx + dy * dy,
            i,
            S;

        // Special case for u0 ≅ u1.
        if (d2 < epsilon2) {
          S = Math.log(w1 / w0) / rho;
          i = function i(t) {
            return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
          };
        }

        // General case.
        else {
            var d1 = Math.sqrt(d2),
                b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
                b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
                r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
                r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
            S = (r1 - r0) / rho;
            i = function i(t) {
              var s = t * S,
                  coshr0 = cosh(r0),
                  u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
              return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];
            };
          }

        i.duration = S * 1000;

        return i;
      };

      /***/
    },
    /* 256 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "b", function () {
        return hslLong;
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(14);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(19);

      function hsl(hue) {
        return function (start, end) {
          var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["d" /* hsl */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["d" /* hsl */])(end)).h),
              s = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.s, end.s),
              l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
              opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
          return function (t) {
            start.h = h(t);
            start.s = s(t);
            start.l = l(t);
            start.opacity = opacity(t);
            return start + "";
          };
        };
      }

      /* harmony default export */__webpack_exports__["a"] = hsl(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]);
      var hslLong = hsl(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);

      /***/
    },
    /* 257 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["a"] = lab;
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(14);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(19);

      function lab(start, end) {
        var l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["e" /* lab */])(start)).l, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["e" /* lab */])(end)).l),
            a = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.a, end.a),
            b = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.b, end.b),
            opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
        return function (t) {
          start.l = l(t);
          start.a = a(t);
          start.b = b(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }

      /***/
    },
    /* 258 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "b", function () {
        return hclLong;
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(14);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(19);

      function hcl(hue) {
        return function (start, end) {
          var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["c" /* hcl */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["c" /* hcl */])(end)).h),
              c = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.c, end.c),
              l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
              opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
          return function (t) {
            start.h = h(t);
            start.c = c(t);
            start.l = l(t);
            start.opacity = opacity(t);
            return start + "";
          };
        };
      }

      /* harmony default export */__webpack_exports__["a"] = hcl(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]);
      var hclLong = hcl(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);

      /***/
    },
    /* 259 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "a", function () {
        return cubehelixLong;
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(14);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(19);

      function cubehelix(hue) {
        return function cubehelixGamma(y) {
          y = +y;

          function cubehelix(start, end) {
            var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(end)).h),
                s = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.s, end.s),
                l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
                opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
            return function (t) {
              start.h = h(t);
              start.s = s(t);
              start.l = l(Math.pow(t, y));
              start.opacity = opacity(t);
              return start + "";
            };
          }

          cubehelix.gamma = cubehelixGamma;

          return cubehelix;
        }(1);
      }

      /* harmony default export */__webpack_exports__["b"] = cubehelix(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]);
      var cubehelixLong = cubehelix(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);

      /***/
    },
    /* 260 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony default export */
      __webpack_exports__["a"] = function (interpolator, n) {
        var samples = new Array(n);
        for (var i = 0; i < n; ++i) {
          samples[i] = interpolator(i / (n - 1));
        }return samples;
      };

      /***/
    },
    /* 261 */
    /***/function (module, exports, __webpack_require__) {

      var __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
      };

      /*!
       * EventEmitter v5.2.4 - git.io/ee
       * Unlicense - http://unlicense.org/
       * Oliver Caldwell - http://oli.me.uk/
       * @preserve
       */

      ;(function (exports) {
        'use strict';

        /**
         * Class for managing events.
         * Can be extended to provide event functionality in other classes.
         *
         * @class EventEmitter Manages event registering and emitting.
         */

        function EventEmitter() {}

        // Shortcuts to improve speed and size
        var proto = EventEmitter.prototype;
        var originalGlobalValue = exports.EventEmitter;

        /**
         * Finds the index of the listener for the event in its storage array.
         *
         * @param {Function[]} listeners Array of listeners to search through.
         * @param {Function} listener Method to look for.
         * @return {Number} Index of the specified listener, -1 if not found
         * @api private
         */
        function indexOfListener(listeners, listener) {
          var i = listeners.length;
          while (i--) {
            if (listeners[i].listener === listener) {
              return i;
            }
          }

          return -1;
        }

        /**
         * Alias a method while keeping the context correct, to allow for overwriting of target method.
         *
         * @param {String} name The name of the target method.
         * @return {Function} The aliased method
         * @api private
         */
        function alias(name) {
          return function aliasClosure() {
            return this[name].apply(this, arguments);
          };
        }

        /**
         * Returns the listener array for the specified event.
         * Will initialise the event object and listener arrays if required.
         * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
         * Each property in the object response is an array of listener functions.
         *
         * @param {String|RegExp} evt Name of the event to return the listeners from.
         * @return {Function[]|Object} All listener functions for the event.
         */
        proto.getListeners = function getListeners(evt) {
          var events = this._getEvents();
          var response;
          var key;

          // Return a concatenated array of all matching events if
          // the selector is a regular expression.
          if (evt instanceof RegExp) {
            response = {};
            for (key in events) {
              if (events.hasOwnProperty(key) && evt.test(key)) {
                response[key] = events[key];
              }
            }
          } else {
            response = events[evt] || (events[evt] = []);
          }

          return response;
        };

        /**
         * Takes a list of listener objects and flattens it into a list of listener functions.
         *
         * @param {Object[]} listeners Raw listener objects.
         * @return {Function[]} Just the listener functions.
         */
        proto.flattenListeners = function flattenListeners(listeners) {
          var flatListeners = [];
          var i;

          for (i = 0; i < listeners.length; i += 1) {
            flatListeners.push(listeners[i].listener);
          }

          return flatListeners;
        };

        /**
         * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
         *
         * @param {String|RegExp} evt Name of the event to return the listeners from.
         * @return {Object} All listener functions for an event in an object.
         */
        proto.getListenersAsObject = function getListenersAsObject(evt) {
          var listeners = this.getListeners(evt);
          var response;

          if (listeners instanceof Array) {
            response = {};
            response[evt] = listeners;
          }

          return response || listeners;
        };

        function isValidListener(listener) {
          if (typeof listener === 'function' || listener instanceof RegExp) {
            return true;
          } else if (listener && (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) === 'object') {
            return isValidListener(listener.listener);
          } else {
            return false;
          }
        }

        /**
         * Adds a listener function to the specified event.
         * The listener will not be added if it is a duplicate.
         * If the listener returns true then it will be removed after it is called.
         * If you pass a regular expression as the event name then the listener will be added to all events that match it.
         *
         * @param {String|RegExp} evt Name of the event to attach the listener to.
         * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
         * @return {Object} Current instance of EventEmitter for chaining.
         */
        proto.addListener = function addListener(evt, listener) {
          if (!isValidListener(listener)) {
            throw new TypeError('listener must be a function');
          }

          var listeners = this.getListenersAsObject(evt);
          var listenerIsWrapped = (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) === 'object';
          var key;

          for (key in listeners) {
            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
              listeners[key].push(listenerIsWrapped ? listener : {
                listener: listener,
                once: false
              });
            }
          }

          return this;
        };

        /**
         * Alias of addListener
         */
        proto.on = alias('addListener');

        /**
         * Semi-alias of addListener. It will add a listener that will be
         * automatically removed after its first execution.
         *
         * @param {String|RegExp} evt Name of the event to attach the listener to.
         * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
         * @return {Object} Current instance of EventEmitter for chaining.
         */
        proto.addOnceListener = function addOnceListener(evt, listener) {
          return this.addListener(evt, {
            listener: listener,
            once: true
          });
        };

        /**
         * Alias of addOnceListener.
         */
        proto.once = alias('addOnceListener');

        /**
         * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
         * You need to tell it what event names should be matched by a regex.
         *
         * @param {String} evt Name of the event to create.
         * @return {Object} Current instance of EventEmitter for chaining.
         */
        proto.defineEvent = function defineEvent(evt) {
          this.getListeners(evt);
          return this;
        };

        /**
         * Uses defineEvent to define multiple events.
         *
         * @param {String[]} evts An array of event names to define.
         * @return {Object} Current instance of EventEmitter for chaining.
         */
        proto.defineEvents = function defineEvents(evts) {
          for (var i = 0; i < evts.length; i += 1) {
            this.defineEvent(evts[i]);
          }
          return this;
        };

        /**
         * Removes a listener function from the specified event.
         * When passed a regular expression as the event name, it will remove the listener from all events that match it.
         *
         * @param {String|RegExp} evt Name of the event to remove the listener from.
         * @param {Function} listener Method to remove from the event.
         * @return {Object} Current instance of EventEmitter for chaining.
         */
        proto.removeListener = function removeListener(evt, listener) {
          var listeners = this.getListenersAsObject(evt);
          var index;
          var key;

          for (key in listeners) {
            if (listeners.hasOwnProperty(key)) {
              index = indexOfListener(listeners[key], listener);

              if (index !== -1) {
                listeners[key].splice(index, 1);
              }
            }
          }

          return this;
        };

        /**
         * Alias of removeListener
         */
        proto.off = alias('removeListener');

        /**
         * Adds listeners in bulk using the manipulateListeners method.
         * If you pass an object as the first argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
         * You can also pass it a regular expression to add the array of listeners to all events that match it.
         * Yeah, this function does quite a bit. That's probably a bad thing.
         *
         * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
         * @param {Function[]} [listeners] An optional array of listener functions to add.
         * @return {Object} Current instance of EventEmitter for chaining.
         */
        proto.addListeners = function addListeners(evt, listeners) {
          // Pass through to manipulateListeners
          return this.manipulateListeners(false, evt, listeners);
        };

        /**
         * Removes listeners in bulk using the manipulateListeners method.
         * If you pass an object as the first argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
         * You can also pass it an event name and an array of listeners to be removed.
         * You can also pass it a regular expression to remove the listeners from all events that match it.
         *
         * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
         * @param {Function[]} [listeners] An optional array of listener functions to remove.
         * @return {Object} Current instance of EventEmitter for chaining.
         */
        proto.removeListeners = function removeListeners(evt, listeners) {
          // Pass through to manipulateListeners
          return this.manipulateListeners(true, evt, listeners);
        };

        /**
         * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
         * The first argument will determine if the listeners are removed (true) or added (false).
         * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
         * You can also pass it an event name and an array of listeners to be added/removed.
         * You can also pass it a regular expression to manipulate the listeners of all events that match it.
         *
         * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
         * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
         * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
         * @return {Object} Current instance of EventEmitter for chaining.
         */
        proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
          var i;
          var value;
          var single = remove ? this.removeListener : this.addListener;
          var multiple = remove ? this.removeListeners : this.addListeners;

          // If evt is an object then pass each of its properties to this method
          if ((typeof evt === 'undefined' ? 'undefined' : _typeof(evt)) === 'object' && !(evt instanceof RegExp)) {
            for (i in evt) {
              if (evt.hasOwnProperty(i) && (value = evt[i])) {
                // Pass the single listener straight through to the singular method
                if (typeof value === 'function') {
                  single.call(this, i, value);
                } else {
                  // Otherwise pass back to the multiple function
                  multiple.call(this, i, value);
                }
              }
            }
          } else {
            // So evt must be a string
            // And listeners must be an array of listeners
            // Loop over it and pass each one to the multiple method
            i = listeners.length;
            while (i--) {
              single.call(this, evt, listeners[i]);
            }
          }

          return this;
        };

        /**
         * Removes all listeners from a specified event.
         * If you do not specify an event then all listeners will be removed.
         * That means every event will be emptied.
         * You can also pass a regex to remove all events that match it.
         *
         * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
         * @return {Object} Current instance of EventEmitter for chaining.
         */
        proto.removeEvent = function removeEvent(evt) {
          var type = typeof evt === 'undefined' ? 'undefined' : _typeof(evt);
          var events = this._getEvents();
          var key;

          // Remove different things depending on the state of evt
          if (type === 'string') {
            // Remove all listeners for the specified event
            delete events[evt];
          } else if (evt instanceof RegExp) {
            // Remove all events matching the regex.
            for (key in events) {
              if (events.hasOwnProperty(key) && evt.test(key)) {
                delete events[key];
              }
            }
          } else {
            // Remove all listeners in all events
            delete this._events;
          }

          return this;
        };

        /**
         * Alias of removeEvent.
         *
         * Added to mirror the node API.
         */
        proto.removeAllListeners = alias('removeEvent');

        /**
         * Emits an event of your choice.
         * When emitted, every listener attached to that event will be executed.
         * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
         * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
         * So they will not arrive within the array on the other side, they will be separate.
         * You can also pass a regular expression to emit to all events that match it.
         *
         * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
         * @param {Array} [args] Optional array of arguments to be passed to each listener.
         * @return {Object} Current instance of EventEmitter for chaining.
         */
        proto.emitEvent = function emitEvent(evt, args) {
          var listenersMap = this.getListenersAsObject(evt);
          var listeners;
          var listener;
          var i;
          var key;
          var response;

          for (key in listenersMap) {
            if (listenersMap.hasOwnProperty(key)) {
              listeners = listenersMap[key].slice(0);

              for (i = 0; i < listeners.length; i++) {
                // If the listener returns true then it shall be removed from the event
                // The function is executed either with a basic call or an apply if there is an args array
                listener = listeners[i];

                if (listener.once === true) {
                  this.removeListener(evt, listener.listener);
                }

                response = listener.listener.apply(this, args || []);

                if (response === this._getOnceReturnValue()) {
                  this.removeListener(evt, listener.listener);
                }
              }
            }
          }

          return this;
        };

        /**
         * Alias of emitEvent
         */
        proto.trigger = alias('emitEvent');

        /**
         * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
         * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
         *
         * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
         * @param {...*} Optional additional arguments to be passed to each listener.
         * @return {Object} Current instance of EventEmitter for chaining.
         */
        proto.emit = function emit(evt) {
          var args = Array.prototype.slice.call(arguments, 1);
          return this.emitEvent(evt, args);
        };

        /**
         * Sets the current value to check against when executing listeners. If a
         * listeners return value matches the one set here then it will be removed
         * after execution. This value defaults to true.
         *
         * @param {*} value The new value to check for when executing listeners.
         * @return {Object} Current instance of EventEmitter for chaining.
         */
        proto.setOnceReturnValue = function setOnceReturnValue(value) {
          this._onceReturnValue = value;
          return this;
        };

        /**
         * Fetches the current value to check against when executing listeners. If
         * the listeners return value matches this one then it should be removed
         * automatically. It will return true by default.
         *
         * @return {*|Boolean} The current value to check for or the default, true.
         * @api private
         */
        proto._getOnceReturnValue = function _getOnceReturnValue() {
          if (this.hasOwnProperty('_onceReturnValue')) {
            return this._onceReturnValue;
          } else {
            return true;
          }
        };

        /**
         * Fetches the events object and creates one if required.
         *
         * @return {Object} The events storage object.
         * @api private
         */
        proto._getEvents = function _getEvents() {
          return this._events || (this._events = {});
        };

        /**
         * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
         *
         * @return {Function} Non conflicting EventEmitter class.
         */
        EventEmitter.noConflict = function noConflict() {
          exports.EventEmitter = originalGlobalValue;
          return EventEmitter;
        };

        // Expose the class either via AMD, CommonJS or the global object
        if (true) {
          !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
            return EventEmitter;
          }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
          module.exports = EventEmitter;
        } else {
          exports.EventEmitter = EventEmitter;
        }
      })(this || {});

      /***/
    },
    /* 262 */
    /***/function (module, exports, __webpack_require__) {

      var Shape = {
        Rect: __webpack_require__(98),
        Circle: __webpack_require__(99),
        Ellipse: __webpack_require__(100),
        Path: __webpack_require__(101),
        Text: __webpack_require__(102),
        Line: __webpack_require__(103),
        Image: __webpack_require__(104),
        Polygon: __webpack_require__(105),
        Polyline: __webpack_require__(106),
        Arc: __webpack_require__(107),
        Fan: __webpack_require__(108),
        Cubic: __webpack_require__(109),
        Quadratic: __webpack_require__(110),
        Marker: __webpack_require__(111)
      };

      module.exports = Shape;

      /***/
    },
    /* 263 */
    /***/function (module, exports, __webpack_require__) {

      var Util = __webpack_require__(0);
      var Inside = __webpack_require__(2);
      var Cubic = __webpack_require__(30);
      var Quadratic = __webpack_require__(53);
      var Ellipse = __webpack_require__(264);
      var vec3 = __webpack_require__(3).vec3;
      var mat3 = __webpack_require__(3).mat3;

      var ARR_CMD = ['m', 'l', 'c', 'a', 'q', 'h', 'v', 't', 's', 'z'];

      function toAbsolute(x, y, curPoint) {
        // 获取绝对坐标
        return {
          x: curPoint.x + x,
          y: curPoint.y + y
        };
      }

      function toSymmetry(point, center) {
        // 点对称
        return {
          x: center.x + (center.x - point.x),
          y: center.y + (center.y - point.y)
        };
      }

      function vMag(v) {
        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
      }

      function vRatio(u, v) {
        return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
      }

      function vAngle(u, v) {
        return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));
      }

      function getArcParams(point1, point2, fa, fs, rx, ry, psiDeg) {
        var psi = Util.mod(Util.toRadian(psiDeg), Math.PI * 2);
        var x1 = point1.x;
        var y1 = point1.y;
        var x2 = point2.x;
        var y2 = point2.y;
        var xp = Math.cos(psi) * (x1 - x2) / 2.0 + Math.sin(psi) * (y1 - y2) / 2.0;
        var yp = -1 * Math.sin(psi) * (x1 - x2) / 2.0 + Math.cos(psi) * (y1 - y2) / 2.0;
        var lambda = xp * xp / (rx * rx) + yp * yp / (ry * ry);

        if (lambda > 1) {
          rx *= Math.sqrt(lambda);
          ry *= Math.sqrt(lambda);
        }

        var f = Math.sqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) / (rx * rx * (yp * yp) + ry * ry * (xp * xp)));

        if (fa === fs) {
          f *= -1;
        }
        if (isNaN(f)) {
          f = 0;
        }

        var cxp = f * rx * yp / ry;
        var cyp = f * -ry * xp / rx;

        var cx = (x1 + x2) / 2.0 + Math.cos(psi) * cxp - Math.sin(psi) * cyp;
        var cy = (y1 + y2) / 2.0 + Math.sin(psi) * cxp + Math.cos(psi) * cyp;

        var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);
        var u = [(xp - cxp) / rx, (yp - cyp) / ry];
        var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
        var dTheta = vAngle(u, v);

        if (vRatio(u, v) <= -1) {
          dTheta = Math.PI;
        }
        if (vRatio(u, v) >= 1) {
          dTheta = 0;
        }
        if (fs === 0 && dTheta > 0) {
          dTheta = dTheta - 2 * Math.PI;
        }
        if (fs === 1 && dTheta < 0) {
          dTheta = dTheta + 2 * Math.PI;
        }
        return [point1, cx, cy, rx, ry, theta, dTheta, psi, fs];
      }

      var PathSegment = function PathSegment(item, preSegment, isLast) {
        this.preSegment = preSegment;
        this.isLast = isLast;
        this.init(item, preSegment);
      };

      Util.augment(PathSegment, {
        init: function init(item, preSegment) {
          var command = item[0];
          preSegment = preSegment || {
            endPoint: {
              x: 0,
              y: 0
            }
          };
          var relative = ARR_CMD.indexOf(command) >= 0; // /[a-z]/.test(command);
          var cmd = relative ? command.toUpperCase() : command;
          var p = item;
          var point1 = void 0;
          var point2 = void 0;
          var point3 = void 0;
          var point = void 0;
          var preEndPoint = preSegment.endPoint;

          var p1 = p[1];
          var p2 = p[2];
          switch (cmd) {
            default:
              break;
            case 'M':
              if (relative) {
                point = toAbsolute(p1, p2, preEndPoint);
              } else {
                point = {
                  x: p1,
                  y: p2
                };
              }
              this.command = 'M';
              this.params = [preEndPoint, point];
              this.subStart = point;
              this.endPoint = point;
              break;
            case 'L':
              if (relative) {
                point = toAbsolute(p1, p2, preEndPoint);
              } else {
                point = {
                  x: p1,
                  y: p2
                };
              }
              this.command = 'L';
              this.params = [preEndPoint, point];
              this.subStart = preSegment.subStart;
              this.endPoint = point;
              if (this.isLast) {
                this.endTangent = function () {
                  return [point.x - preEndPoint.x, point.y - preEndPoint.y];
                };
              }
              break;
            case 'H':
              if (relative) {
                point = toAbsolute(p1, 0, preEndPoint);
              } else {
                point = {
                  x: p1,
                  y: preEndPoint.y
                };
              }
              this.command = 'L';
              this.params = [preEndPoint, point];
              this.subStart = preSegment.subStart;
              this.endPoint = point;
              this.endTangent = function () {
                return [point.x - preEndPoint.x, point.y - preEndPoint.y];
              };
              break;
            case 'V':
              if (relative) {
                point = toAbsolute(0, p1, preEndPoint);
              } else {
                point = {
                  x: preEndPoint.x,
                  y: p1
                };
              }
              this.command = 'L';
              this.params = [preEndPoint, point];
              this.subStart = preSegment.subStart;
              this.endPoint = point;
              this.endTangent = function () {
                return [point.x - preEndPoint.x, point.y - preEndPoint.y];
              };
              break;
            case 'Q':
              if (relative) {
                point1 = toAbsolute(p1, p2, preEndPoint);
                point2 = toAbsolute(p[3], p[4], preEndPoint);
              } else {
                point1 = {
                  x: p1,
                  y: p2
                };
                point2 = {
                  x: p[3],
                  y: p[4]
                };
              }
              this.command = 'Q';
              this.params = [preEndPoint, point1, point2];
              this.subStart = preSegment.subStart;
              this.endPoint = point2;
              this.endTangent = function () {
                return [point2.x - point1.x, point2.y - point1.y];
              };
              break;
            case 'T':
              if (relative) {
                point2 = toAbsolute(p1, p2, preEndPoint);
              } else {
                point2 = {
                  x: p1,
                  y: p2
                };
              }
              if (preSegment.command === 'Q') {
                point1 = toSymmetry(preSegment.params[1], preEndPoint);
                this.command = 'Q';
                this.params = [preEndPoint, point1, point2];
                this.subStart = preSegment.subStart;
                this.endPoint = point2;
                this.endTangent = function () {
                  return [point2.x - point1.x, point2.y - point1.y];
                };
              } else {
                this.command = 'TL';
                this.params = [preEndPoint, point2];
                this.subStart = preSegment.subStart;
                this.endPoint = point2;
                this.endTangent = function () {
                  return [point2.x - preEndPoint.x, point2.y - preEndPoint.y];
                };
              }

              break;
            case 'C':
              if (relative) {
                point1 = toAbsolute(p1, p2, preEndPoint);
                point2 = toAbsolute(p[3], p[4], preEndPoint);
                point3 = toAbsolute(p[5], p[6], preEndPoint);
              } else {
                point1 = {
                  x: p1,
                  y: p2
                };
                point2 = {
                  x: p[3],
                  y: p[4]
                };
                point3 = {
                  x: p[5],
                  y: p[6]
                };
              }
              this.command = 'C';
              this.params = [preEndPoint, point1, point2, point3];
              this.subStart = preSegment.subStart;
              this.endPoint = point3;
              this.endTangent = function () {
                return [point3.x - point2.x, point3.y - point2.y];
              };
              break;
            case 'S':
              if (relative) {
                point2 = toAbsolute(p1, p2, preEndPoint);
                point3 = toAbsolute(p[3], p[4], preEndPoint);
              } else {
                point2 = {
                  x: p1,
                  y: p2
                };
                point3 = {
                  x: p[3],
                  y: p[4]
                };
              }
              if (preSegment.command === 'C') {
                point1 = toSymmetry(preSegment.params[2], preEndPoint);
                this.command = 'C';
                this.params = [preEndPoint, point1, point2, point3];
                this.subStart = preSegment.subStart;
                this.endPoint = point3;
                this.endTangent = function () {
                  return [point3.x - point2.x, point3.y - point2.y];
                };
              } else {
                this.command = 'SQ';
                this.params = [preEndPoint, point2, point3];
                this.subStart = preSegment.subStart;
                this.endPoint = point3;
                this.endTangent = function () {
                  return [point3.x - point2.x, point3.y - point2.y];
                };
              }
              break;
            case 'A':
              {
                var rx = p1;
                var ry = p2;
                var psi = p[3];
                var fa = p[4];
                var fs = p[5];
                if (relative) {
                  point = toAbsolute(p[6], p[7], preEndPoint);
                } else {
                  point = {
                    x: p[6],
                    y: p[7]
                  };
                }

                this.command = 'A';
                this.params = getArcParams(preEndPoint, point, fa, fs, rx, ry, psi);
                this.subStart = preSegment.subStart;
                this.endPoint = point;
                break;
              }
            case 'Z':
              {
                this.command = 'Z';
                this.params = [preEndPoint, preSegment.subStart];
                this.subStart = preSegment.subStart;
                this.endPoint = preSegment.subStart;
              }
          }
        },
        isInside: function isInside(x, y, lineWidth) {
          var self = this;
          var command = self.command;
          var params = self.params;
          var box = self.box;
          if (box) {
            if (!Inside.box(box.minX, box.maxX, box.minY, box.maxY, x, y)) {
              return false;
            }
          }
          switch (command) {
            default:
              break;
            case 'M':
              return false;
            case 'TL':
            case 'L':
            case 'Z':
              return Inside.line(params[0].x, params[0].y, params[1].x, params[1].y, lineWidth, x, y);
            case 'SQ':
            case 'Q':
              return Inside.quadraticline(params[0].x, params[0].y, params[1].x, params[1].y, params[2].x, params[2].y, lineWidth, x, y);
            case 'C':
              {
                return Inside.cubicline(params[0].x, params[0].y, params[1].x, params[1].y, params[2].x, params[2].y, params[3].x, params[3].y, lineWidth, x, y);
              }
            case 'A':
              {
                var p = params;
                var cx = p[1];
                var cy = p[2];
                var rx = p[3];
                var ry = p[4];
                var theta = p[5];
                var dTheta = p[6];
                var psi = p[7];
                var fs = p[8];

                var r = rx > ry ? rx : ry;
                var scaleX = rx > ry ? 1 : rx / ry;
                var scaleY = rx > ry ? ry / rx : 1;

                p = [x, y, 1];
                var m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
                mat3.translate(m, m, [-cx, -cy]);
                mat3.rotate(m, m, -psi);
                mat3.scale(m, m, [1 / scaleX, 1 / scaleY]);
                vec3.transformMat3(p, p, m);
                return Inside.arcline(0, 0, r, theta, theta + dTheta, 1 - fs, lineWidth, p[0], p[1]);
              }
          }
          return false;
        },
        draw: function draw(context) {
          var command = this.command;
          var params = this.params;
          var point1 = void 0;
          var point2 = void 0;
          var point3 = void 0;

          switch (command) {
            default:
              break;
            case 'M':
              context.moveTo(params[1].x, params[1].y);
              break;
            case 'TL':
            case 'L':
              context.lineTo(params[1].x, params[1].y);
              break;
            case 'SQ':
            case 'Q':
              point1 = params[1];
              point2 = params[2];
              context.quadraticCurveTo(point1.x, point1.y, point2.x, point2.y);
              break;
            case 'C':
              point1 = params[1];
              point2 = params[2];
              point3 = params[3];
              context.bezierCurveTo(point1.x, point1.y, point2.x, point2.y, point3.x, point3.y);
              break;
            case 'A':
              {
                var p = params;
                var p1 = p[1];
                var p2 = p[2];
                var cx = p1;
                var cy = p2;
                var rx = p[3];
                var ry = p[4];
                var theta = p[5];
                var dTheta = p[6];
                var psi = p[7];
                var fs = p[8];

                var r = rx > ry ? rx : ry;
                var scaleX = rx > ry ? 1 : rx / ry;
                var scaleY = rx > ry ? ry / rx : 1;

                context.translate(cx, cy);
                context.rotate(psi);
                context.scale(scaleX, scaleY);
                context.arc(0, 0, r, theta, theta + dTheta, 1 - fs);
                context.scale(1 / scaleX, 1 / scaleY);
                context.rotate(-psi);
                context.translate(-cx, -cy);
                break;
              }
            case 'Z':
              context.closePath();
              break;
          }
        },
        getBBox: function getBBox(lineWidth) {
          var halfWidth = lineWidth / 2;
          var params = this.params;
          var yDims = void 0;
          var xDims = void 0;
          var i = void 0;
          var l = void 0;

          switch (this.command) {
            default:
            case 'M':
            case 'Z':
              break;
            case 'TL':
            case 'L':
              this.box = {
                minX: Math.min(params[0].x, params[1].x) - halfWidth,
                maxX: Math.max(params[0].x, params[1].x) + halfWidth,
                minY: Math.min(params[0].y, params[1].y) - halfWidth,
                maxY: Math.max(params[0].y, params[1].y) + halfWidth
              };
              break;
            case 'SQ':
            case 'Q':
              xDims = Quadratic.extrema(params[0].x, params[1].x, params[2].x);
              for (i = 0, l = xDims.length; i < l; i++) {
                xDims[i] = Quadratic.at(params[0].x, params[1].x, params[2].x, xDims[i]);
              }
              xDims.push(params[0].x, params[2].x);
              yDims = Quadratic.extrema(params[0].y, params[1].y, params[2].y);
              for (i = 0, l = yDims.length; i < l; i++) {
                yDims[i] = Quadratic.at(params[0].y, params[1].y, params[2].y, yDims);
              }
              yDims.push(params[0].y, params[2].y);
              this.box = {
                minX: Math.min.apply(Math, xDims) - halfWidth,
                maxX: Math.max.apply(Math, xDims) + halfWidth,
                minY: Math.min.apply(Math, yDims) - halfWidth,
                maxY: Math.max.apply(Math, yDims) + halfWidth
              };
              break;
            case 'C':
              xDims = Cubic.extrema(params[0].x, params[1].x, params[2].x, params[3].x);
              for (i = 0, l = xDims.length; i < l; i++) {
                xDims[i] = Cubic.at(params[0].x, params[1].x, params[2].x, params[3].x, xDims[i]);
              }
              yDims = Cubic.extrema(params[0].y, params[1].y, params[2].y, params[3].y);
              for (i = 0, l = yDims.length; i < l; i++) {
                yDims[i] = Cubic.at(params[0].y, params[1].y, params[2].y, params[3].y, yDims[i]);
              }
              xDims.push(params[0].x, params[3].x);
              yDims.push(params[0].y, params[3].y);
              this.box = {
                minX: Math.min.apply(Math, xDims) - halfWidth,
                maxX: Math.max.apply(Math, xDims) + halfWidth,
                minY: Math.min.apply(Math, yDims) - halfWidth,
                maxY: Math.max.apply(Math, yDims) + halfWidth
              };
              break;
            case 'A':
              {
                // todo 待优化
                var p = params;
                var cx = p[1];
                var cy = p[2];
                var rx = p[3];
                var ry = p[4];
                var theta = p[5];
                var dTheta = p[6];
                var psi = p[7];
                var fs = p[8];
                var start = theta;
                var end = theta + dTheta;

                var xDim = Ellipse.xExtrema(psi, rx, ry);
                var minX = Infinity;
                var maxX = -Infinity;
                var xs = [start, end];
                for (i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {
                  var xAngle = xDim + i;
                  if (fs === 1) {
                    if (start < xAngle && xAngle < end) {
                      xs.push(xAngle);
                    }
                  } else {
                    if (end < xAngle && xAngle < start) {
                      xs.push(xAngle);
                    }
                  }
                }

                for (i = 0, l = xs.length; i < l; i++) {
                  var x = Ellipse.xAt(psi, rx, ry, cx, xs[i]);
                  if (x < minX) {
                    minX = x;
                  }
                  if (x > maxX) {
                    maxX = x;
                  }
                }

                var yDim = Ellipse.yExtrema(psi, rx, ry);
                var minY = Infinity;
                var maxY = -Infinity;
                var ys = [start, end];
                for (i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {
                  var yAngle = yDim + i;
                  if (fs === 1) {
                    if (start < yAngle && yAngle < end) {
                      ys.push(yAngle);
                    }
                  } else {
                    if (end < yAngle && yAngle < start) {
                      ys.push(yAngle);
                    }
                  }
                }

                for (i = 0, l = ys.length; i < l; i++) {
                  var y = Ellipse.yAt(psi, rx, ry, cy, ys[i]);
                  if (y < minY) {
                    minY = y;
                  }
                  if (y > maxY) {
                    maxY = y;
                  }
                }
                this.box = {
                  minX: minX - halfWidth,
                  maxX: maxX + halfWidth,
                  minY: minY - halfWidth,
                  maxY: maxY + halfWidth
                };
                break;
              }
          }
        }
      });

      module.exports = PathSegment;

      /***/
    },
    /* 264 */
    /***/function (module, exports) {

      module.exports = {
        xAt: function xAt(psi, rx, ry, cx, t) {
          return rx * Math.cos(psi) * Math.cos(t) - ry * Math.sin(psi) * Math.sin(t) + cx;
        },
        yAt: function yAt(psi, rx, ry, cy, t) {
          return rx * Math.sin(psi) * Math.cos(t) + ry * Math.cos(psi) * Math.sin(t) + cy;
        },
        xExtrema: function xExtrema(psi, rx, ry) {
          return Math.atan(-ry / rx * Math.tan(psi));
        },
        yExtrema: function yExtrema(psi, rx, ry) {
          return Math.atan(ry / (rx * Math.tan(psi)));
        }
      };

      /***/
    }]
    /******/)
  );
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26)(module)))

/***/ }),
/* 3 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var freeGlobal = __webpack_require__(71);

/** Detect free variable `self`. */
var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

/***/ }),
/* 5 */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
}

module.exports = isObjectLike;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var _Symbol = __webpack_require__(12),
    getRawTag = __webpack_require__(134),
    objectToString = __webpack_require__(135);

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
    if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}

module.exports = baseGetTag;

/***/ }),
/* 7 */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(48),
    isLength = __webpack_require__(47);

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview 所有 Geometry 的基类
 * @author dxq613@gmail.com
 */

var Base = __webpack_require__(63);
var Attr = __webpack_require__(285);
var Util = __webpack_require__(0);
var Global = __webpack_require__(1);
var Adjust = __webpack_require__(293);
var Labels = __webpack_require__(298);
var Shape = __webpack_require__(66);
var TooltipMixin = __webpack_require__(309);
var ActiveMixin = __webpack_require__(310);
var SelectMixin = __webpack_require__(311);
var GROUP_ATTRS = ['size', 'shape', 'color'];
var FIELD_ORIGIN = '_origin';

function parseFields(field) {
  if (Util.isArray(field)) {
    return field;
  }
  if (Util.isString(field)) {
    return field.split('*');
  }
  return [field];
}

// 转换成对象的数组 [{type: 'adjust'}]
function parseAdjusts(adjusts) {
  if (Util.isString(adjusts)) {
    adjusts = [adjusts];
  }
  Util.each(adjusts, function (adjust, index) {
    if (!Util.isObject(adjust)) {
      adjusts[index] = { type: adjust };
    }
  });
  return adjusts;
}

/**
 * 几何标记
 * @class Geom
 */

var GeomBase = function (_Base) {
  _inherits(GeomBase, _Base);

  /**
   * 获取默认的配置属性
   * @protected
   * @return {Object} 默认属性
   */
  GeomBase.prototype.getDefaultCfg = function getDefaultCfg() {
    return {
      /**
       * 标记 _id 用于区分执行动画
       * @type {String}
       */
      _id: null,
      /**
       * 类型
       * @type {String}
       */
      type: 'base',

      /**
       * 坐标系
       * @type {Object}
       */
      coord: null,

      /**
       * 属性映射集
       * @protected
       * @type {Object}
       */
      attrs: {},

      /**
       * 所属的View
       * @type {View}
       */
      view: null,

      /**
       * 几何标记显示的数据
       * @type {Array}
       */
      data: [],

      /**
       * 相关的度量
       * @type {Object}
       */
      scales: {},

      /**
       * 绘图容器
       * @type {Object}
       */
      container: null,

      /**
       * 文本容器
       * @type {Object}
       */
      labelContainer: null,

      /**
       * 图形容器
       * @type {Object}
       */
      shapeContainer: null,

      /**
       * 几何标记的一些配置项，用于延迟生成图表
       * @type {Object}
       */
      attrOptions: {},
      styleOptions: null,
      selectedOptions: null,
      /**
       * 某些类存在默认的adjust，不能更改 adjust
       * @type {Boolean}
       */
      hasDefaultAdjust: false,
      adjusts: null,
      /**
       * 使用形状的类型
       * @protected
       * @type {String}
       */
      shapeType: null,
      /**
       * 是否生成多个点来绘制图形
       * @protected
       * @type {Boolean}
       */
      generatePoints: false,

      /**
       * 数据是否进行排序
       * @type {Boolean}
       */
      sortable: false,

      labelCfg: null,
      /**
       * 是否共享 tooltip
       * @type {Boolean}
       */
      shareTooltip: true,
      tooltipCfg: null,
      /**
       * 是否执行动画，默认执行
       * @type {Boolean}
       */
      animate: true,
      /**
       * 动画配置
       * @type {[type]}
       */
      animateCfg: null
    };
  };

  function GeomBase(cfg) {
    _classCallCheck(this, GeomBase);

    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

    Util.assign(_this, TooltipMixin, ActiveMixin, SelectMixin);
    if (_this.get('container')) {
      _this._initContainer();
    }
    _this._initOptions();
    return _this;
  }

  // 初始化时对配置项的格式化


  GeomBase.prototype._initOptions = function _initOptions() {
    var adjusts = this.get('adjusts');
    if (adjusts) {
      adjusts = parseAdjusts(adjusts);
      this.set('adjusts', adjusts);
    }
  };

  GeomBase.prototype._createScale = function _createScale(field) {
    var scales = this.get('scales');
    var scale = scales[field];
    if (!scale) {
      scale = this.get('view').createScale(field);
      scales[field] = scale;
    }
    return scale;
  };

  GeomBase.prototype._setAttrOptions = function _setAttrOptions(attrName, attrCfg) {
    var options = this.get('attrOptions');
    options[attrName] = attrCfg;
  };

  GeomBase.prototype._createAttrOption = function _createAttrOption(attrName, field, cfg, defaultValues) {
    var attrCfg = {};
    attrCfg.field = field;
    if (cfg) {
      if (Util.isFunction(cfg)) {
        attrCfg.callback = cfg;
      } else {
        attrCfg.values = cfg;
      }
    } else if (attrName !== 'color') {
      attrCfg.values = defaultValues;
    }
    this._setAttrOptions(attrName, attrCfg);
  };

  /**
   * 位置属性映射
   * @chainable
   * @param  {String} field 字段名
   * @return {Geom} geom 当前几何标记
   */


  GeomBase.prototype.position = function position(field) {
    this._setAttrOptions('position', {
      field: field
    });
    return this;
  };

  /**
   * 颜色属性映射
   * @chainable
   * @param  {String} field 字段名
   * @param  {Array|Function} values 颜色的数组或者回调函数
   * @return {Geom} geom 当前几何标记
   */


  GeomBase.prototype.color = function color(field, values) {
    this._createAttrOption('color', field, values, Global.colors);
    return this;
  };

  /**
   * 大小属性映射
   * @chainable
   * @param  {String} field 字段名
   * @param  {Array|Function} values 大小的数组或者回调函数
   * @return {Geom} geom 当前几何标记
   */


  GeomBase.prototype.size = function size(field, values) {
    this._createAttrOption('size', field, values, Global.sizes);
    return this;
  };

  /**
   * 形状属性映射
   * @chainable
   * @param  {String} field 字段名
   * @param  {Array|Function} values 大小的数组或者回调函数
   * @return {Geom} geom 当前几何标记
   */


  GeomBase.prototype.shape = function shape(field, values) {
    var type = this.get('type');
    var shapes = Global.shapes[type] || [];
    this._createAttrOption('shape', field, values, shapes);
    return this;
  };

  /**
   * 透明度属性映射
   * @chainable
   * @param  {String} field 字段名
   * @param  {Array|Function} values 透明度的数组或者回调函数
   * @return {Geom} geom 当前几何标记
   */


  GeomBase.prototype.opacity = function opacity(field, values) {
    this._createAttrOption('opacity', field, values, Global.opacities);
    return this;
  };

  GeomBase.prototype.style = function style(field, cfg) {
    var styleOptions = this.get('styleOptions');
    if (!styleOptions) {
      styleOptions = {};
      this.set('styleOptions', styleOptions);
    }
    if (Util.isObject(field)) {
      cfg = field;
      field = null;
    }
    var fields = void 0;
    if (field) {
      fields = parseFields(field);
    }
    styleOptions.fields = fields;
    styleOptions.style = cfg;
    return this;
  };

  GeomBase.prototype.label = function label(field, callback, cfg) {
    var self = this;
    var labelCfg = self.get('labelCfg');
    // const scales = Util.map(self.get('labelCfg').fields, field => self._createScale(field));
    if (!labelCfg) {
      labelCfg = {};
      self.set('labelCfg', labelCfg);
    }
    var fields = void 0;
    if (field) {
      fields = parseFields(field);
    }
    labelCfg.fields = fields;
    // 如果存在回调函数
    if (Util.isFunction(callback)) {
      if (!cfg) {
        cfg = {};
      }
      cfg.content = callback;
    } else if (Util.isObject(callback)) {
      // 如果没有设置回调函数
      cfg = callback;
    }

    labelCfg.cfg = cfg;

    return this;
  };

  GeomBase.prototype.tooltip = function tooltip(field, cfg) {
    var tooltipCfg = this.get('tooltipCfg');
    if (!tooltipCfg) {
      tooltipCfg = {};
    }
    if (field === false) {
      // geom 关闭 tooltip
      this.set('tooltipCfg', false);
    } else {
      var tooltipFields = void 0;
      if (field) {
        tooltipFields = parseFields(field);
      }
      tooltipCfg.fields = tooltipFields;
      tooltipCfg.cfg = cfg;
    }

    this.set('tooltipCfg', tooltipCfg);
    return this;
  };

  GeomBase.prototype.animate = function animate(cfg) {
    this.set('animateCfg', cfg);
    return this;
  };

  /**
   * 是否允许使用默认的图形激活交互
   * @param  {Boolean} enable 是否允许激活开关
   * @return {Geom}    返回 geom 自身
   */


  GeomBase.prototype.active = function active(enable) {
    this.set('allowActive', enable);
    return this;
  };

  /**
   * 对 geometry 进行数据调整
   * @chainable
   * @param  {String|Array|null} adjusts 数据调整的类型
   * @return {Object} geometry 对象
   */


  GeomBase.prototype.adjust = function adjust(adjusts) {
    if (!this.get('hasDefaultAdjust')) {
      if (adjusts) {
        adjusts = parseAdjusts(adjusts);
      }
      this.set('adjusts', adjusts);
    }
    return this;
  };

  /**
   * 设置图形的选中模式
   * @param  {Boolean|Object} enable 布尔类型用于模式开关，对象类型用于配置
   * @param  {Object} cfg    选中配置项
   * @return {Geom}          返回 geom 自身
   */


  GeomBase.prototype.select = function select(enable, cfg) {
    if (enable === false) {
      this.set('allowSelect', false);
    } else if (Util.isObject(enable)) {
      this.set('allowSelect', true);
      this.set('selectedOptions', enable);
    } else {
      this.set('allowSelect', true);
      this.set('selectedOptions', cfg);
    }

    return this;
  };

  GeomBase.prototype.hasAdjust = function hasAdjust(adjustType) {
    var self = this;
    var adjusts = self.get('adjusts');
    if (!adjustType) {
      return false;
    }
    var rst = false;
    Util.each(adjusts, function (adjust) {
      if (adjust.type === adjustType) {
        rst = true;
        return false;
      }
    });
    return rst;
  };

  GeomBase.prototype.hasStack = function hasStack() {
    var isStacked = this.get('isStacked');
    if (Util.isNil(isStacked)) {
      isStacked = this.hasAdjust('stack');
      this.set('isStacked', isStacked);
    }
    return isStacked;
  };

  GeomBase.prototype.isInCircle = function isInCircle() {
    var coord = this.get('coord');
    return coord && coord.isPolar;
  };

  GeomBase.prototype._initContainer = function _initContainer() {
    var self = this;
    var shapeContainer = self.get('shapeContainer');
    if (!shapeContainer) {
      var container = self.get('container');
      self.set('shapeContainer', container.addGroup());
    }
  };

  GeomBase.prototype.init = function init() {
    var self = this;
    self._initContainer();
    self._initAttrs();
    if (self.get('tooltipCfg') && self.get('tooltipCfg').fields) {
      var tooltipFields = self.get('tooltipCfg').fields;
      Util.each(tooltipFields, function (field) {
        self._createScale(field);
      });
    }
    var dataArray = self._processData();
    if (self.get('adjusts')) {
      self._adjust(dataArray);
    }
    self.set('dataArray', dataArray);
  };

  // step 1: init attrs


  GeomBase.prototype._initAttrs = function _initAttrs() {
    var self = this;
    var attrs = this.get('attrs');
    var attrOptions = this.get('attrOptions');
    var coord = self.get('coord');
    var isPie = false;

    for (var type in attrOptions) {
      if (attrOptions.hasOwnProperty(type)) {
        var option = attrOptions[type];
        var className = Util.upperFirst(type);
        var fields = parseFields(option.field);
        if (type === 'position') {
          option.coord = coord;
          // 饼图坐标系下，填充一维
          if (fields.length === 1 && coord.type === 'theta') {
            fields.unshift('1');
            isPie = true;
          }
        }
        var scales = [];
        for (var i = 0; i < fields.length; i++) {
          var field = fields[i];
          var scale = self._createScale(field);
          if (type === 'color' && Util.isNil(option.values)) {
            // 设置 color 的默认色值
            if (scale.values.length <= 8) {
              option.values = isPie ? Global.colors_pie : Global.colors;
            } else if (scale.values.length <= 16) {
              option.values = isPie ? Global.colors_pie_16 : Global.colors_16;
            } else {
              option.values = Global.colors_24;
            }

            if (Util.isNil(option.values)) {
              option.values = Global.colors; // 防止主题没有声明诸如 colors_pie 的属性
            }
          }
          scales.push(scale);
        }
        // 饼图需要填充满整个空间
        if (coord.type === 'theta' && type === 'position' && scales.length > 1) {
          var yScale = scales[1];
          yScale.change({
            nice: false,
            min: 0,
            max: Math.max.apply(null, yScale.values)
          });
        }
        option.scales = scales;
        var attr = new Attr[className](option);
        attrs[type] = attr;
      }
    }
  };
  // step 2: 处理数据


  GeomBase.prototype._processData = function _processData() {
    var self = this;
    var data = this.get('data');
    var dataArray = [];
    var groupedArray = this._groupData(data);
    for (var i = 0; i < groupedArray.length; i++) {
      var subData = groupedArray[i];
      var tempData = self._saveOrigin(subData);
      self._numberic(tempData);
      dataArray.push(tempData);
    }
    return dataArray;
  };

  // step 2.1 数据分组


  GeomBase.prototype._groupData = function _groupData(data) {
    var groupScales = this._getGroupScales();
    var fields = groupScales.map(function (scale) {
      return scale.field;
    });

    return Util.Array.group(data, fields);
  };

  // step 2.2 数据调整前保存原始数据


  GeomBase.prototype._saveOrigin = function _saveOrigin(data) {
    var rst = [];
    for (var i = 0; i < data.length; i++) {
      var origin = data[i];
      var obj = {};
      for (var k in origin) {
        obj[k] = origin[k];
      }
      // const obj = Util.mix({}, origin);
      obj[FIELD_ORIGIN] = origin;
      rst.push(obj);
    }
    return rst;
  };

  // step 2.3 将分类数据翻译成数据, 仅对位置相关的度量进行数字化处理


  GeomBase.prototype._numberic = function _numberic(data) {
    var positionAttr = this.getAttr('position');
    var scales = positionAttr.scales;
    for (var j = 0; j < data.length; j++) {
      var obj = data[j];
      for (var i = 0; i < Math.min(2, scales.length); i++) {
        var scale = scales[i];
        if (scale.isCategory) {
          var field = scale.field;
          obj[field] = scale.translate(obj[field]);
        }
      }
    }
  };

  GeomBase.prototype._getGroupScales = function _getGroupScales() {
    var self = this;
    var scales = self.get('groupScales');
    if (!scales) {
      scales = [];
      var attrs = self.get('attrs');
      Util.each(attrs, function (attr) {
        if (GROUP_ATTRS.indexOf(attr.type) !== -1) {
          var attrScales = attr.scales;
          Util.each(attrScales, function (scale) {
            if (scale.isCategory && Util.indexOf(scales, scale) === -1) {
              scales.push(scale);
            }
          });
        }
      });
      self.set('groupScales', scales);
    }
    return scales;
  };

  GeomBase.prototype._updateStackRange = function _updateStackRange(field, scale, dataArray) {
    var mergeArray = Util.Array.merge(dataArray);
    var min = scale.min;
    var max = scale.max;
    for (var i = 0; i < mergeArray.length; i++) {
      var obj = mergeArray[i];
      var tmpMin = Math.min.apply(null, obj[field]);
      var tmpMax = Math.max.apply(null, obj[field]);
      if (tmpMin < min) {
        min = tmpMin;
      }
      if (tmpMax > max) {
        max = tmpMax;
      }
    }
    if (min < scale.min || max > scale.max) {
      scale.change({
        min: min,
        max: max
      });
    }
  };

  // step 2.2 调整数据


  GeomBase.prototype._adjust = function _adjust(dataArray) {
    var self = this;
    var adjusts = self.get('adjusts');

    var yScale = self.getYScale();
    var xScale = self.getXScale();
    var xField = xScale.field;
    var yField = yScale ? yScale.field : null;
    Util.each(adjusts, function (adjust) {
      var adjustCfg = Util.mix({
        xField: xField,
        yField: yField
      }, adjust);
      var adjustType = Util.upperFirst(adjust.type);
      if (adjustType === 'Dodge') {
        var adjustNames = [];
        if (xScale.isCategory || xScale.isIdentity) {
          adjustNames.push('x');
        } else if (!yScale) {
          adjustNames.push('y');
        } else {
          throw new Error('dodge is not support linear attribute, please use category attribute!');
        }
        adjustCfg.adjustNames = adjustNames;
        /* if (self.isInCircle()) {
          adjustCfg.dodgeRatio = 1;
          adjustCfg.marginRatio = 0;
        }*/
      } else if (adjustType === 'Stack') {
        var coord = self.get('coord');
        if (!yScale) {
          // 一维的情况下获取高度和默认size
          adjustCfg.height = coord.getHeight();
          var size = self.getDefaultValue('size') || 3;
          adjustCfg.size = size;
        }
        if (!coord.isTransposed) {
          adjustCfg.reverseOrder = true;
        }
      }
      var adjustElement = new Adjust[adjustType](adjustCfg);
      adjustElement.processAdjust(dataArray);
      if (adjustType === 'Stack' && yScale) {
        self._updateStackRange(yField, yScale, dataArray);
      }
    });
  };

  /**
   * @internal 设置coord，通常外部容器变化时，coord 会发生变化
   * @param {Object} coord 坐标系
   */


  GeomBase.prototype.setCoord = function setCoord(coord) {
    this.set('coord', coord);
    var position = this.getAttr('position');
    var shapeContainer = this.get('shapeContainer');
    shapeContainer.setMatrix(coord.matrix);
    if (position) {
      position.coord = coord;
    }
  };

  // step 3 绘制


  GeomBase.prototype.paint = function paint() {
    var self = this;
    var dataArray = self.get('dataArray');
    var mappedArray = [];
    var shapeFactory = self.getShapeFactory();
    shapeFactory.setCoord(self.get('coord'));
    var shapeContainer = self.get('shapeContainer');
    self._beforeMapping(dataArray);
    for (var i = 0; i < dataArray.length; i++) {
      var data = dataArray[i];
      var index = i;
      data = self._mapping(data);
      mappedArray.push(data);
      self.draw(data, shapeContainer, shapeFactory, index);
    }
    if (self.get('labelCfg')) {
      self._addLabels(Util.union.apply(null, mappedArray));
    }

    if (!self.get('sortable')) {
      self._sort(mappedArray); // 便于数据的查找，需要对数据进行排序，用于 geom.findPoint()
    } else {
      self.set('dataArray', mappedArray);
    }
  };

  GeomBase.prototype._sort = function _sort(mappedArray) {
    var self = this;
    var xScale = self.getXScale();
    var xField = xScale.field;
    Util.each(mappedArray, function (itemArr) {
      itemArr.sort(function (obj1, obj2) {
        return xScale.translate(obj1[FIELD_ORIGIN][xField]) - xScale.translate(obj2[FIELD_ORIGIN][xField]);
      });
    });

    self.set('dataArray', mappedArray);
  };

  // step 3.1 before mapping


  GeomBase.prototype._beforeMapping = function _beforeMapping(dataArray) {
    var self = this;
    if (self.get('sortable')) {
      var xScale = self.getXScale();
      var field = xScale.field;
      Util.each(dataArray, function (data) {
        data.sort(function (v1, v2) {
          return xScale.translate(v1[field]) - xScale.translate(v2[field]);
        });
      });
    }
    if (self.get('generatePoints')) {
      Util.each(dataArray, function (data) {
        self._generatePoints(data);
      });
      Util.each(dataArray, function (data, index) {
        var nextData = dataArray[index + 1];
        if (nextData) {
          data[0].nextPoints = nextData[0].points;
        }
      });
    }
  };

  // step 3.2 add labels


  GeomBase.prototype._addLabels = function _addLabels(points) {
    var self = this;
    var type = self.get('type');
    var coord = self.get('coord');
    var C = Labels.getLabelsClass(coord.type, type);
    var container = self.get('container');
    var scales = Util.map(self.get('labelCfg').fields, function (field) {
      return self._createScale(field);
    });
    var labelContainer = container.addGroup(C, {
      _id: this.get('_id'),
      labelCfg: Util.mix({
        scales: scales
      }, self.get('labelCfg')),
      coord: coord,
      geom: self,
      geomType: type
    });
    labelContainer.showLabels(points);
    self.set('labelContainer', labelContainer);
  };

  /**
   * @protected
   * 获取图形的工厂类
   * @return {Object} 工厂类对象
   */


  GeomBase.prototype.getShapeFactory = function getShapeFactory() {
    var shapeFactory = this.get('shapeFactory');
    if (!shapeFactory) {
      var shapeType = this.get('shapeType');
      shapeFactory = Shape.getShapeFactory(shapeType);
      this.set('shapeFactory', shapeFactory);
    }
    return shapeFactory;
  };

  // step 3.2 generate points


  GeomBase.prototype._generatePoints = function _generatePoints(data) {
    var self = this;
    var shapeFactory = self.getShapeFactory();
    var shapeAttr = self.getAttr('shape');
    for (var i = 0; i < data.length; i++) {
      var obj = data[i];
      var cfg = self.createShapePointsCfg(obj);
      var shape = shapeAttr ? self._getAttrValues(shapeAttr, obj) : null;
      var points = shapeFactory.getShapePoints(shape, cfg);
      obj.points = points;
    }
  };

  /**
   * 获取图形对应点的配置项
   * @protected
   * @param  {Object} obj 数据对象
   * @return {Object} cfg 获取图形对应点的配置项
   */


  GeomBase.prototype.createShapePointsCfg = function createShapePointsCfg(obj) {
    var xScale = this.getXScale();
    var yScale = this.getYScale();
    var x = this._normalizeValues(obj[xScale.field], xScale);
    var y = void 0; // 存在没有 y 的情况

    if (yScale) {
      y = this._normalizeValues(obj[yScale.field], yScale);
    } else {
      y = obj.y ? obj.y : 0.1;
    }

    return {
      x: x,
      y: y,
      y0: yScale ? yScale.scale(this.getYMinValue()) : undefined
    };
  };

  /**
   * @protected
   * 如果y轴的最小值小于0则返回0，否则返回最小值
   * @return {Number} y轴上的最小值
   */


  GeomBase.prototype.getYMinValue = function getYMinValue() {
    var yScale = this.getYScale();
    var min = yScale.min;
    var value = void 0;
    if (min >= 0) {
      value = min;
    } else {
      value = 0;
    }
    return value;
  };

  // 将数据归一化


  GeomBase.prototype._normalizeValues = function _normalizeValues(values, scale) {
    var rst = [];
    if (Util.isArray(values)) {
      for (var i = 0; i < values.length; i++) {
        var v = values[i];
        rst.push(scale.scale(v));
      }
    } else {
      rst = scale.scale(values);
    }
    return rst;
  };

  // step 3.2 mapping


  GeomBase.prototype._mapping = function _mapping(data) {
    var self = this;
    var attrs = self.get('attrs');
    var mappedData = [];
    for (var i = 0; i < data.length; i++) {
      var record = data[i];
      var newRecord = {};
      newRecord[FIELD_ORIGIN] = record[FIELD_ORIGIN];
      newRecord.points = record.points;
      newRecord.nextPoints = record.nextPoints;
      for (var k in attrs) {
        if (attrs.hasOwnProperty(k)) {
          var attr = attrs[k];
          var names = attr.names;
          var values = self._getAttrValues(attr, record);
          if (names.length > 1) {
            // position 之类的生成多个字段的属性
            for (var j = 0; j < values.length; j++) {
              var val = values[j];
              var name = names[j];
              newRecord[name] = Util.isArray(val) && val.length === 1 ? val[0] : val; // 只有一个值时返回第一个属性值
            }
          } else {
            newRecord[names[0]] = values.length === 1 ? values[0] : values;
          }
        }
      }
      mappedData.push(newRecord);
    }

    return mappedData;
  };

  // 获取属性映射的值


  GeomBase.prototype._getAttrValues = function _getAttrValues(attr, record) {
    var scales = attr.scales;
    var params = [];
    for (var i = 0; i < scales.length; i++) {
      var scale = scales[i];
      var field = scale.field;
      if (scale.type === 'identity') {
        params.push(scale.value);
      } else {
        params.push(record[field]);
      }
    }
    var values = attr.mapping.apply(attr, params);
    return values;
  };

  GeomBase.prototype.getAttrValue = function getAttrValue(attrName, record) {
    var attr = this.getAttr(attrName);
    var rst = null;
    if (attr) {
      var values = this._getAttrValues(attr, record);
      rst = values[0];
    }
    return rst;
  };

  GeomBase.prototype.getDefaultValue = function getDefaultValue(attrName) {
    var value = this.get(attrName);
    var attr = this.getAttr(attrName);
    if (attr) {
      var scale = attr.getScale(attrName);
      if (scale.type === 'identity') {
        value = scale.value;
      }
    }
    return value;
  };

  /**
   * step 3.3 draw
   * @protected
   * @param  {Array} data 绘制图形
   * @param {Object} container 绘图容器
   * @param {Object} shapeFactory 绘制图形的工厂类
   * @param {Number} index 每个 shape 的索引值
   */


  GeomBase.prototype.draw = function draw(data, container, shapeFactory, index) {
    var self = this;
    for (var i = 0; i < data.length; i++) {
      var obj = data[i];
      self.drawPoint(obj, container, shapeFactory, index + i);
    }
  };

  GeomBase.prototype.getCallbackCfg = function getCallbackCfg(fields, cfg, origin) {
    if (!fields) {
      return cfg;
    }
    var tmpCfg = {};
    var params = fields.map(function (field) {
      return origin[field];
    });
    Util.each(cfg, function (v, k) {
      if (Util.isFunction(v)) {
        tmpCfg[k] = v.apply(null, params);
      } else {
        tmpCfg[k] = v;
      }
    });
    return tmpCfg;
  };

  GeomBase.prototype._getShapeId = function _getShapeId(dataObj) {
    var id = this.get('_id');
    var keyFields = this.get('keyFields');
    if (keyFields && keyFields.length > 0) {
      Util.each(keyFields, function (key) {
        id += '-' + dataObj[key];
      });
    } else {
      var type = this.get('type');
      var xScale = this.getXScale();
      var yScale = this.getYScale();
      var xField = xScale.field || 'x';
      var yField = yScale.field || 'y';
      var yVal = dataObj[yField];
      var xVal = void 0;
      if (xScale.isIdentity) {
        xVal = xScale.value;
      } else {
        xVal = dataObj[xField];
      }

      if (type === 'interval' || type === 'schema') {
        id += '-' + xVal;
      } else if (type === 'line' || type === 'area' || type === 'path') {
        id += '-' + type;
      } else {
        id += '-' + xVal + '-' + yVal;
      }

      var groupScales = this._getGroupScales();
      if (!Util.isEmpty(groupScales)) {
        Util.each(groupScales, function (groupScale) {
          var field = groupScale.field;
          if (groupScale.type !== 'identity') {
            id += '-' + dataObj[field];
          }
        });
      }
    }

    return id;
  };

  GeomBase.prototype.getDrawCfg = function getDrawCfg(obj) {
    var self = this;
    var cfg = {
      origin: obj,
      x: obj.x,
      y: obj.y,
      color: obj.color,
      size: obj.size,
      shape: obj.shape,
      isInCircle: self.isInCircle(),
      opacity: obj.opacity
    };
    var styleOptions = self.get('styleOptions');
    if (styleOptions && styleOptions.style) {
      cfg.style = self.getCallbackCfg(styleOptions.fields, styleOptions.style, obj[FIELD_ORIGIN]);
    }
    if (this.get('generatePoints')) {
      cfg.points = obj.points;
      cfg.nextPoints = obj.nextPoints;
    }
    if (this.get('animate')) {
      // _id 字段仅用于动画
      cfg._id = self._getShapeId(obj[FIELD_ORIGIN]);
    }
    return cfg;
  };

  GeomBase.prototype.drawPoint = function drawPoint(obj, container, shapeFactory, index) {
    var shape = obj.shape;
    var cfg = this.getDrawCfg(obj);
    var geomShape = shapeFactory.drawShape(shape, cfg, container);
    geomShape.setSilent('index', index);
    geomShape.setSilent('coord', this.get('coord'));

    if (this.get('animate') && this.get('animateCfg')) {
      geomShape.setSilent('animateCfg', this.get('animateCfg'));
    }
  };

  /**
   * 获取属性
   * @protected
   * @param {String} name 属性名
   * @return {Scale} 度量
   */


  GeomBase.prototype.getAttr = function getAttr(name) {
    return this.get('attrs')[name];
  };

  /**
   * 获取 x 对应的度量
   * @return {Scale} x 对应的度量
   */


  GeomBase.prototype.getXScale = function getXScale() {
    return this.getAttr('position').scales[0];
  };

  /**
   * 获取 y 对应的度量
   * @return {Scale} y 对应的度量
   */


  GeomBase.prototype.getYScale = function getYScale() {
    return this.getAttr('position').scales[1];
  };

  GeomBase.prototype.getShapes = function getShapes() {
    var result = [];
    var shapeContainer = this.get('shapeContainer');
    var children = shapeContainer.get('children');
    Util.each(children, function (child) {
      if (child.get('origin')) {
        // 过滤 label
        result.push(child);
      }
    });
    return result;
  };

  GeomBase.prototype.getAttrsForLegend = function getAttrsForLegend() {
    var attrs = this.get('attrs');
    var rst = [];
    Util.each(attrs, function (attr) {
      if (GROUP_ATTRS.indexOf(attr.type) !== -1) {
        rst.push(attr);
      }
    });
    return rst;
  };

  GeomBase.prototype.changeVisible = function changeVisible(visible, stopDraw) {
    var shapeContainer = this.get('shapeContainer');
    shapeContainer.set('visible', visible);
    var labelContainer = this.get('labelContainer');
    if (labelContainer) {
      labelContainer.set('visible', visible);
    }
    if (!stopDraw) {
      var canvas = shapeContainer.get('canvas');
      canvas.draw();
    }
  };

  GeomBase.prototype.reset = function reset() {
    this.set('attrOptions', {});
    this.clearInner();
  };

  GeomBase.prototype.clearInner = function clearInner() {
    this.clearActivedShapes();
    this.clearSelected();
    var shapeContainer = this.get('shapeContainer');
    shapeContainer && shapeContainer.clear();

    // 由于 Labels 对应的模块需要生成group，所以这个地方需要删除
    var labelContainer = this.get('labelContainer');
    labelContainer && labelContainer.remove();
    this.set('attrs', {});
    this.set('groupScales', null);
    // if (!this.get('hasDefaultAdjust')) {
    //   this.set('adjusts', null);
    // }
    this.set('labelContainer', null);
    this.set('xDistance', null);
    this.set('isStacked', null);
  };

  GeomBase.prototype.clear = function clear() {
    this.clearInner();
    this.set('scales', {});
  };

  GeomBase.prototype.destroy = function destroy() {
    this.clear();
    var shapeContainer = this.get('shapeContainer');
    shapeContainer && shapeContainer.remove();
    this.offEvents();
    _Base.prototype.destroy.call(this);
  };

  GeomBase.prototype.bindEvents = function bindEvents() {
    if (this.get('view')) {
      this._bindActiveAction();
      this._bindSelectedAction();
    }
  };

  GeomBase.prototype.offEvents = function offEvents() {
    if (this.get('view')) {
      this._offActiveAction();
      this._offSelectedAction();
    }
  };

  return GeomBase;
}(Base);

module.exports = GeomBase;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview 工厂类，管理各种类型的 shape
 * @author dxq613@gmail.com
 */

var Util = __webpack_require__(0);
var PathUtil = __webpack_require__(14);
var GPath = __webpack_require__(2).PathUtil;
var Shape = {};

var ShapeBase = {
  _coord: null,
  /**
   * 绘制图形
   * @param {Object} cfg 配置项
   * @param {Object} container 容器
   * @return {Object} shape 创建的 shape
   */
  draw: function draw(cfg, container) {
    if (this.drawShape) {
      return this.drawShape(cfg, container);
    }
    return null;
  },

  /**
   * 获取绘制图形需要的点, 可以不定义，则使用默认的
  getPoints(cfg) {
    if (this.getShapePoints) {
      return this.getShapePoints(cfg);
    }
    return null;
  },*/
  /**
   * 设置坐标系
   * @param {Coord} coord 坐标系
   */
  setCoord: function setCoord(coord) {
    this._coord = coord;
  },

  /**
   * 0～1 path 转 画布 path
   * @param  {path} path 路径
   * @param  {Boolean} islineToArc 是否转换成圆弧
   * @return {path} path 转换到画布坐标的path
   */
  parsePath: function parsePath(path, islineToArc) {
    var coord = this._coord;
    path = GPath.parsePathString(path);
    if (coord.isPolar && islineToArc !== false) {
      path = PathUtil.convertPolarPath(coord, path);
    } else {
      path = PathUtil.convertNormalPath(coord, path);
    }
    return path;
  },

  /**
   * 0～1 point 转 画布 point
   * @param  {point} point 节点
   * @return {point} point 转换后的点
   */
  parsePoint: function parsePoint(point) {
    var coord = this._coord;
    return coord.convertPoint(point);
  },

  /**
   * 0～1 points 转 画布 points
   * @param  {points} points 节点集合
   * @return {points} points 转换后的多个节点
   */
  parsePoints: function parsePoints(points) {
    var coord = this._coord;
    var rst = [];
    Util.each(points, function (point) {
      rst.push(coord.convertPoint(point));
    });
    return rst;
  }
};

var ShapeFactoryBase = {
  defaultShapeType: null,
  setCoord: function setCoord(coord) {
    this._coord = coord;
  },
  getShape: function getShape(type) {
    var self = this;
    if (Util.isArray(type)) {
      type = type[0];
    }
    var shape = self[type] || self[self.defaultShapeType];
    shape._coord = self._coord;
    return shape;
  },
  getShapePoints: function getShapePoints(type, cfg) {
    var shape = this.getShape(type);
    var fn = shape.getPoints || shape.getShapePoints || this.getDefaultPoints;
    var points = fn(cfg);
    return points;
  },
  getDefaultPoints: function getDefaultPoints() /* cfg */{
    return [];
  },
  getMarkerCfg: function getMarkerCfg(type, cfg) {
    var shape = this.getShape(type);
    if (!shape.getMarkerCfg) {
      var defaultShapeType = this.defaultShapeType;
      shape = this.getShape(defaultShapeType);
    }

    return shape.getMarkerCfg(cfg);
  },
  drawShape: function drawShape(type, cfg, container) {
    var shape = this.getShape(type);
    var gShape = shape.draw(cfg, container);
    if (gShape) {
      gShape.setSilent('origin', cfg.origin);
      gShape._id = cfg.yIndex ? cfg._id + cfg.yIndex : cfg._id;
      gShape.name = this.name;
    }
    return gShape;
  }
};

// 注册 Geometry 获取图形的入口
Shape.registerFactory = function (factoryName, cfg) {
  var className = Util.upperFirst(factoryName);
  var geomObj = Util.assign({}, ShapeFactoryBase, cfg);
  Shape[className] = geomObj;
  geomObj.name = factoryName;
  return geomObj;
};

// 注册图形
Shape.registerShape = function (factoryName, shapeType, cfg) {
  var className = Util.upperFirst(factoryName);
  var factory = Shape[className];
  var shapeObj = Util.assign({}, ShapeBase, cfg);
  factory[shapeType] = shapeObj;
  return shapeObj;
};

// 获得Geom 对应的 shapeFactory
Shape.getShapeFactory = function (factoryName) {
  var self = this;
  factoryName = factoryName || 'point';
  var className = Util.upperFirst(factoryName);
  return self[className];
};

module.exports = Shape;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(70),
    baseKeys = __webpack_require__(74),
    isArrayLike = __webpack_require__(8);

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(4);

/** Built-in value references. */
var _Symbol = root.Symbol;

module.exports = _Symbol;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsNative = __webpack_require__(154),
    getValue = __webpack_require__(157);

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview 计算path 使用的工具方法
 * @author dxq613@gmail.com
 */
var Util = __webpack_require__(0);
var Spline = __webpack_require__(300);

function points2path(points, isInCircle) {
  if (!points.length) {
    return [];
  }
  var path = [];

  for (var i = 0, length = points.length; i < length; i++) {
    var item = points[i];
    if (i === 0) {
      path.push(['M', item.x, item.y]);
    } else {
      path.push(['L', item.x, item.y]);
    }
  }

  if (isInCircle) {
    path.push(['Z']);
  }
  return path;
}

function _getPointRadius(coord, point) {
  var center = coord.getCenter();
  var r = Math.sqrt(Math.pow(point.x - center.x, 2) + Math.pow(point.y - center.y, 2));
  return r;
}

function convertArr(arr, coord) {
  var len = arr.length;
  var tmp = [arr[0]];
  for (var i = 1; i < len; i = i + 2) {
    var point = coord.convertPoint({
      x: arr[i],
      y: arr[i + 1]
    });
    tmp.push(point.x, point.y);
  }
  return tmp;
}

function _convertPolarPath(pre, cur, coord) {
  // const radius = coord.getRadius();
  // const inner = coord.innerRadius || 0;
  // let innerRadius = inner * radius;
  var transposed = coord.isTransposed;
  var startAngle = coord.startAngle;
  var endAngle = coord.endAngle;

  var prePoint = {
    x: pre[1],
    y: pre[2]
  };
  var curPoint = {
    x: cur[1],
    y: cur[2]
  };
  var rst = [];
  // innerRadius = innerRadius || 0;
  var xDim = transposed ? 'y' : 'x';
  var angleRange = Math.abs(curPoint[xDim] - prePoint[xDim]) * (endAngle - startAngle);
  var direction = curPoint[xDim] >= prePoint[xDim] ? 1 : 0; // 圆弧的方向
  var flag = angleRange > Math.PI ? 1 : 0; // 大弧还是小弧标志位
  var convertPoint = coord.convertPoint(curPoint);
  var r = _getPointRadius(coord, convertPoint);
  if (r >= 0.5) {
    // 小于1像素的圆在图像上无法识别
    if (angleRange === Math.PI * 2) {
      var middlePoint = {
        x: (curPoint.x + prePoint.x) / 2,
        y: (curPoint.y + prePoint.y) / 2
      };
      var middleConvertPoint = coord.convertPoint(middlePoint);
      rst.push(['A', r, r, 0, flag, direction, middleConvertPoint.x, middleConvertPoint.y]);
      rst.push(['A', r, r, 0, flag, direction, convertPoint.x, convertPoint.y]);
    } else {
      rst.push(['A', r, r, 0, flag, direction, convertPoint.x, convertPoint.y]);
    }
  }
  return rst;
}

// 当存在整体的圆时，去除圆前面和后面的线，防止出现直线穿过整个圆的情形
function filterFullCirleLine(path) {
  Util.each(path, function (subPath, index) {
    var cur = subPath;
    if (cur[0].toLowerCase() === 'a') {
      var pre = path[index - 1];
      var next = path[index + 1];
      if (next && next[0].toLowerCase() === 'a') {
        if (pre && pre[0].toLowerCase() === 'l') {
          pre[0] = 'M';
        }
      } else if (pre && pre[0].toLowerCase() === 'a') {
        if (next && next[0].toLowerCase() === 'l') {
          next[0] = 'M';
        }
      }
    }
  });
}

var PathUtil = {
  // 线的path
  getLinePath: function getLinePath(points, isInCircle) {
    return points2path(points, isInCircle);
  },

  // get spline： 限定了范围的平滑线
  getSplinePath: function getSplinePath(points, isInCircle, constaint) {
    var data = [];
    var first = points[0];
    var prePoint = null;
    if (points.length <= 2) {
      return PathUtil.getLinePath(points, isInCircle);
    }
    Util.each(points, function (point) {
      if (!prePoint || !(prePoint.x === point.x && prePoint.y === point.y)) {
        data.push(point.x);
        data.push(point.y);
        prePoint = point;
      }
    });
    constaint = constaint || [// 范围
    [0, 0], [1, 1]];
    var splinePath = Spline.catmullRom2bezier(data, isInCircle, constaint);
    splinePath.unshift(['M', first.x, first.y]);
    return splinePath;
  },
  getPointRadius: function getPointRadius(coord, point) {
    var result = _getPointRadius(coord, point);
    return result;
  },
  getPointAngle: function getPointAngle(coord, point) {
    var center = coord.getCenter();
    var angle = Math.atan2(point.y - center.y, point.x - center.x);
    return angle;
  },
  convertNormalPath: function convertNormalPath(coord, path) {
    var tmp = [];
    Util.each(path, function (subPath) {
      var action = subPath[0];
      switch (action.toLowerCase()) {
        case 'm':
        case 'l':
        case 'c':
          tmp.push(convertArr(subPath, coord));
          break;
        case 'z':
        default:
          tmp.push(subPath);
          break;
      }
    });
    return tmp;
  },
  convertPolarPath: function convertPolarPath(coord, path) {
    var tmp = [];
    var pre = void 0;
    var cur = void 0;
    var transposed = void 0;
    var equals = void 0;
    Util.each(path, function (subPath, index) {
      var action = subPath[0];

      switch (action.toLowerCase()) {
        case 'm':
        case 'c':
        case 'q':
          tmp.push(convertArr(subPath, coord));
          break;
        case 'l':
          pre = path[index - 1];
          cur = subPath;
          transposed = coord.isTransposed;
          // 是否半径相同，转换成圆弧
          equals = transposed ? pre[pre.length - 2] === cur[1] : pre[pre.length - 1] === cur[2];
          if (equals) {
            tmp = tmp.concat(_convertPolarPath(pre, cur, coord));
          } else {
            // y 不相等，所以直接转换
            tmp.push(convertArr(subPath, coord));
          }
          break;
        case 'z':
        default:
          tmp.push(subPath);
          break;
      }
    });
    filterFullCirleLine(tmp); // 过滤多余的直线
    return tmp;
  }
};

module.exports = PathUtil;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

var baseToString = __webpack_require__(185);

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @fileOverview the Attribute base class
 * @author huangtonger@aliyun.com
 */

var Util = __webpack_require__(0);

function toScaleString(scale, value) {
  if (Util.isString(value)) {
    return value;
  }
  return scale.invert(scale.scale(value));
}
/**
 * 所有视觉通道属性的基类
 * @class Attr
 */

var AttributeBase = function () {
  function AttributeBase(cfg) {
    _classCallCheck(this, AttributeBase);

    /**
     * 属性的类型
     * @type {String}
     */
    this.type = 'base';

    /**
     * 属性的名称
     * @type {String}
     */
    this.name = null;

    /**
     * 回调函数
     * @type {Function}
     */
    this.method = null;

    /**
     * 备选的值数组
     * @type {Array}
     */
    this.values = [];

    /**
     * 属性内部的度量
     * @type {Array}
     */
    this.scales = [];

    /**
     * 是否通过线性取值, 如果未指定，则根据数值的类型判定
     * @type {Boolean}
     */
    this.linear = null;

    Util.mix(this, cfg);
  }

  AttributeBase.prototype.get = function get(name) {
    return this[name];
  };

  AttributeBase.prototype.set = function set(name, value) {
    this[name] = value;
  };

  // 获取属性值，将值映射到视觉通道


  AttributeBase.prototype._getAttrValue = function _getAttrValue(scale, value) {
    var values = this.values;
    if (scale.isCategory && !this.linear) {
      var index = scale.translate(value);
      return values[index % values.length];
    }
    var percent = scale.scale(value);
    return this.getLinearValue(percent);
  };

  /**
   * 如果进行线性映射，返回对应的映射值
   * @protected
   * @param  {Number} percent 百分比
   * @return {*}  颜色值、形状、大小等
   */


  AttributeBase.prototype.getLinearValue = function getLinearValue(percent) {
    var values = this.values;
    var steps = values.length - 1;
    var step = Math.floor(steps * percent);
    var leftPercent = steps * percent - step;
    var start = values[step];
    var end = step === steps ? start : values[step + 1];
    var rstValue = start + (end - start) * leftPercent;
    return rstValue;
  };

  /**
   * 默认的回调函数
   * @param {*} value 回调函数的值
   * @type {Function}
   * @return {Array} 返回映射后的值
   */


  AttributeBase.prototype.callback = function callback(value) {
    var self = this;
    var scale = self.scales[0];
    var rstValue = null;
    if (scale.type === 'identity') {
      rstValue = scale.value;
    } else {
      rstValue = self._getAttrValue(scale, value);
    }
    return rstValue;
  };

  /**
   * 根据度量获取属性名
   * @return {Array} dims of this Attribute
   */


  AttributeBase.prototype.getNames = function getNames() {
    var scales = this.scales;
    var names = this.names;
    var length = Math.min(scales.length, names.length);
    var rst = [];
    for (var i = 0; i < length; i++) {
      rst.push(names[i]);
    }
    return rst;
  };

  /**
   * 根据度量获取维度名
   * @return {Array} dims of this Attribute
   */


  AttributeBase.prototype.getFields = function getFields() {
    var scales = this.scales;
    var rst = [];
    Util.each(scales, function (scale) {
      rst.push(scale.field);
    });
    return rst;
  };

  /**
   * 根据名称获取度量
   * @param  {String} name the name of scale
   * @return {Scale} scale
   */


  AttributeBase.prototype.getScale = function getScale(name) {
    var scales = this.scales;
    var names = this.names;
    var index = names.indexOf(name);
    return scales[index];
  };

  /**
   * 映射数据
   * @param {*} param1...paramn 多个数值
   * @return {Array} 映射的值组成的数组
   */


  AttributeBase.prototype.mapping = function mapping() {
    var scales = this.scales;
    var callback = this.callback;

    for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
      params[_key] = arguments[_key];
    }

    var values = params;
    if (callback) {
      for (var i = 0; i < params.length; i++) {
        params[i] = this._toOriginParam(params[i], scales[i]);
      }
      values = callback.apply(this, params);
    }
    if (!Util.isArray(values)) {
      values = [values];
    }
    return values;
  };

  // 原始的参数


  AttributeBase.prototype._toOriginParam = function _toOriginParam(param, scale) {
    var rst = param;
    if (!scale.isLinear) {
      if (Util.isArray(param)) {
        rst = [];
        for (var i = 0; i < param.length; i++) {
          rst.push(toScaleString(scale, param[i]));
        }
      } else {
        rst = toScaleString(scale, param);
      }
    }
    return rst;
  };

  return AttributeBase;
}();

module.exports = AttributeBase;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @fileOverview the base class of guide
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var KEYWORDS = ['min', 'max', 'median'];

function getFirstScale(scales) {
  var firstScale = void 0;
  Util.each(scales, function (scale) {
    if (scale) {
      firstScale = scale;
      return false;
    }
  });
  return firstScale;
}

var Base = function () {
  Base.prototype.getDefaultCfg = function getDefaultCfg() {
    return {
      zIndex: 1,
      xScales: null,
      yScales: null,
      el: null
    };
  };

  function Base(cfg) {
    _classCallCheck(this, Base);

    var defaultCfg = this.getDefaultCfg();
    cfg = Util.deepMix({}, defaultCfg, cfg);
    Util.mix(this, cfg);
  }

  /**
   * 将原始数值归一化
   * @param  {string | number} val   原始值
   * @param  {Scale} scale 度量对象
   * @return {Number}       返回归一化后的数值
   */


  Base.prototype._getNormalizedValue = function _getNormalizedValue(val, scale) {
    var result = void 0;
    if (Util.indexOf(KEYWORDS, val) !== -1) {
      // 分类则对应索引值
      var scaleValue = void 0;
      if (val === 'median') {
        scaleValue = scale.isCategory ? (scale.values.length - 1) / 2 : (scale.min + scale.max) / 2;
        result = scale.scale(scaleValue);
      } else {
        if (scale.isCategory) {
          scaleValue = val === 'min' ? 0 : scale.values.length - 1;
        } else {
          scaleValue = scale[val];
        }
        result = scale.scale(scaleValue);
      }
    } else {
      result = scale.scale(val);
    }

    return result;
  };

  /**
   * 将原始数值转换成坐标系上的点
   * @protected
   * @param  {Coord} coord  坐标系
   * @param  {Object | Array | Function} position 位置点
   * @return {Object} 转换成坐标系上的点
   */


  Base.prototype.parsePoint = function parsePoint(coord, position) {
    var self = this;
    var xScales = self.xScales;
    var yScales = self.yScales;
    if (Util.isFunction(position)) {
      position = position(xScales, yScales); // position 必须是对象
    }

    var x = void 0;
    var y = void 0;

    // 如果数据格式是 ['50%', '50%'] 的格式
    if (Util.isArray(position) && Util.isString(position[0]) && position[0].indexOf('%') !== -1) {
      return this.parsePercentPoint(coord, position);
    }

    if (Util.isArray(position)) {
      // 数组  [2, 1]
      x = self._getNormalizedValue(position[0], getFirstScale(xScales));
      y = self._getNormalizedValue(position[1], getFirstScale(yScales));
    } else {
      for (var field in position) {
        var value = position[field];
        if (xScales[field]) {
          x = self._getNormalizedValue(value, xScales[field]);
        }

        if (yScales[field]) {
          y = self._getNormalizedValue(value, yScales[field]);
        }
      }
    }

    if (!Util.isNil(x) && !Util.isNil(y)) {
      return coord.convert({
        x: x,
        y: y
      });
    }
  };
  // 如果传入的值是百分比的格式，根据坐标系的起始点和宽高计算


  Base.prototype.parsePercentPoint = function parsePercentPoint(coord, position) {
    var xPercent = parseFloat(position[0]) / 100;
    var yPercent = parseFloat(position[1]) / 100;
    var start = coord.start;
    var end = coord.end;
    var topLeft = {
      x: Math.min(start.x, end.x),
      y: Math.min(start.y, end.y)
    };
    var x = coord.width * xPercent + topLeft.x;
    var y = coord.height * yPercent + topLeft.y;
    return {
      x: x,
      y: y
    };
  };

  /**
   * 设置显示、隐藏
   * @param {Boolean} visible 是否可见
   */


  Base.prototype.setVisible = function setVisible(visible) {
    var el = this.el;
    if (el) {
      if (el.set) {
        el.set('visible', visible);
      } else {
        el.style.display = visible ? '' : 'none';
      }
    }
  };

  /**
   * 渲染辅助元素
   * @override
   */


  Base.prototype.render = function render() {};

  /**
   * 清理图形、元素
   */


  Base.prototype.remove = function remove() {
    var self = this;
    var el = self.el;
    if (el) {
      el.remove();
    }
  };

  return Base;
}();

module.exports = Base;

/***/ }),
/* 18 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

  return value === proto;
}

module.exports = isPrototype;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var baseMatches = __webpack_require__(142),
    baseMatchesProperty = __webpack_require__(180),
    identity = __webpack_require__(31),
    isArray = __webpack_require__(3),
    property = __webpack_require__(188);

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object') {
    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;

/***/ }),
/* 20 */
/***/ (function(module, exports) {

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function (value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var baseGetTag = __webpack_require__(6),
    isObjectLike = __webpack_require__(5);

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
    return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
}

module.exports = isSymbol;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

var isSymbol = __webpack_require__(21);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

module.exports = toKey;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(40),
    baseAssignValue = __webpack_require__(61);

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @fileOverview adjust the points position
 * @author dxq613@gmail.com
 */

var Util = __webpack_require__(0);
var DEFAULT_Y = 0; // 默认的y的值

/**
 * 数据调整的基类
 * @class Adjust
 */

var Adjust = function () {
  /**
   * 获取默认的配置属性
   * @protected
   * @return {Object} 默认属性
   */
  Adjust.prototype.getDefaultCfg = function getDefaultCfg() {
    return {
      /**
       * 调整对应的x方向对应的字段名称
       * @type {Scale}
       */
      xField: null,
      /**
       * 调整对应的y方向对应的字段名称
       * @type {Scale}
       */
      yField: null,

      /**
       * 调整的维度，默认,x,y都做调整
       * @type {Array}
       */
      adjustNames: ['x', 'y'], // 指x,y

      /**
       * 参与分组的数据维度
       * @type {Array}
       */
      groupFields: null
    };
  };

  function Adjust(cfg) {
    _classCallCheck(this, Adjust);

    var defaultCfg = this.getDefaultCfg();
    Util.assign(this, defaultCfg, cfg);
  }

  /**
   * 对应的维度是否可以调整
   * @protected
   * @param  {String}  dimName 可以调整的维度 x,y
   * @return {Boolean} 是否可以调整
   */


  Adjust.prototype.isAdjust = function isAdjust(dimName) {
    return this.adjustNames.indexOf(dimName) >= 0;
  };

  /**
   * @protected
   * adjust data
   * @param  {Array} dataArray data array
   */


  Adjust.prototype.processAdjust = function processAdjust(dataArray) {
    var self = this;
    var mergeData = Util.Array.merge(dataArray);

    self.adjDataArray = dataArray;
    self.mergeData = mergeData;
    self.adjustData(dataArray, mergeData);
    self.adjFrames = null;
    self.mergeData = null;
  };

  /**
   * @protected
   * 获取可调整度量对应的值
   * @param  {Frame} mergeData 数据
   * @return {Object} 值的映射
   */


  Adjust.prototype._getDimValues = function _getDimValues(mergeData) {
    var self = this;
    var valuesMap = {};
    var dims = [];
    if (self.xField && self.isAdjust('x')) {
      dims.push(self.xField);
    }
    if (self.yField && self.isAdjust('y')) {
      dims.push(self.yField);
    }
    Util.each(dims, function (dim) {
      var values = Util.Array.values(mergeData, dim);
      values.sort(function (v1, v2) {
        return v1 - v2;
      });
      valuesMap[dim] = values;
    });
    if (!self.yField && self.isAdjust('y')) {
      // 只有一维的情况下,同时调整y
      var dim = 'y';
      var values = [DEFAULT_Y, 1]; // 默认分布在y轴的 0.1 与 0.2 之间
      valuesMap[dim] = values;
    }
    return valuesMap;
  };

  Adjust.prototype.adjustData = function adjustData(dataArray, mergeData) {
    var self = this;
    var valuesMap = self._getDimValues(mergeData);
    Util.each(dataArray, function (data, index) {
      // 遍历所有数据集合
      Util.each(valuesMap, function (values, dim) {
        // 根据不同的度量分别调整位置
        self.adjustDim(dim, values, data, dataArray.length, index);
      });
    });
  };

  Adjust.prototype.adjustDim = function adjustDim() /* dim, values, data, length, index */{};

  Adjust.prototype.getAdjustRange = function getAdjustRange(dim, key, values) {
    var self = this;
    var index = values.indexOf(key);
    var length = values.length;
    var pre = void 0;
    var next = void 0;
    if (!self.yField && self.isAdjust('y')) {
      pre = 0;
      next = 1;
    } else if (length > 1) {
      pre = index === 0 ? values[0] : values[index - 1];
      next = index === length - 1 ? values[length - 1] : values[index + 1];

      if (index !== 0) {
        pre += (key - pre) / 2;
      } else {
        pre -= (next - key) / 2;
      }
      if (index !== length - 1) {
        next -= (next - key) / 2;
      } else {
        next += (key - values[length - 2]) / 2;
      }
    } else {
      pre = key === 0 ? 0 : key - 0.5;
      next = key === 0 ? 1 : key + 0.5;
    }

    return {
      pre: pre,
      next: next
    };
  };

  /**
   * 对数据进行分组
   * @param  {Array} data 数据
   * @param  {String} dim 分组的字段
   * @return {Object}  分组的键值对映射
   */


  Adjust.prototype.groupData = function groupData(data, dim) {
    var groups = {};

    Util.each(data, function (record) {
      var value = record[dim];
      if (value === undefined) {
        value = record[dim] = DEFAULT_Y;
      }
      if (!groups[value]) {
        groups[value] = [];
      }
      groups[value].push(record);
    });

    return groups;
  };

  return Adjust;
}();

module.exports = Adjust;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview chart component module
 * @author sima.zhang1990@gmail.com
 */
module.exports = {
  Axis: __webpack_require__(334),
  Guide: __webpack_require__(340),
  Label: __webpack_require__(65),
  Legend: __webpack_require__(347),
  Plot: __webpack_require__(352),
  Tooltip: __webpack_require__(353)
};

/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = function (module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function () {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function get() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function get() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

var baseForOwn = __webpack_require__(128),
    createBaseEach = __webpack_require__(139);

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsArguments = __webpack_require__(132),
    isObjectLike = __webpack_require__(5);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function () {
    return arguments;
}()) ? baseIsArguments : function (value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var root = __webpack_require__(4),
    stubFalse = __webpack_require__(136);

/** Detect free variable `exports`. */
var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26)(module)))

/***/ }),
/* 30 */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}

module.exports = isIndex;

/***/ }),
/* 31 */
/***/ (function(module, exports) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var listCacheClear = __webpack_require__(144),
    listCacheDelete = __webpack_require__(145),
    listCacheGet = __webpack_require__(146),
    listCacheHas = __webpack_require__(147),
    listCacheSet = __webpack_require__(148);

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__(34);

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;

/***/ }),
/* 34 */
/***/ (function(module, exports) {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || value !== value && other !== other;
}

module.exports = eq;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(13);

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

var isKeyable = __webpack_require__(166);

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}

module.exports = getMapData;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqualDeep = __webpack_require__(170),
    isObjectLike = __webpack_require__(5);

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

var DataView = __webpack_require__(176),
    Map = __webpack_require__(51),
    Promise = __webpack_require__(177),
    Set = __webpack_require__(85),
    WeakMap = __webpack_require__(178),
    baseGetTag = __webpack_require__(6),
    toSource = __webpack_require__(76);

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    getTag = function getTag(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
            switch (ctorString) {
                case dataViewCtorString:
                    return dataViewTag;
                case mapCtorString:
                    return mapTag;
                case promiseCtorString:
                    return promiseTag;
                case setCtorString:
                    return setTag;
                case weakMapCtorString:
                    return weakMapTag;
            }
        }
        return result;
    };
}

module.exports = getTag;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(3),
    isKey = __webpack_require__(57),
    stringToPath = __webpack_require__(182),
    toString = __webpack_require__(15);

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(61),
    eq = __webpack_require__(34);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @fileOverview the base class of scale
 * @author dxq613@gmail.com
 */

var Util = __webpack_require__(0);

/**
 * 度量的构造函数
 * @class Scale
 */

var Scale = function () {

  /**
   * 获取默认的配置属性
   * @protected
   * @return {Object} 默认属性
   */
  Scale.prototype.getDefaultCfg = function getDefaultCfg() {
    return {
      /**
       * type of the scale
       * @type {String}
       */
      type: 'base',

      /**
       * 格式化函数,输出文本或者tick时的格式化函数
       * @type {Function}
       */
      formatter: null,

      /**
       * 输出的值域
       * @type {Array}
       */
      range: [0, 1],

      /**
       * 度量的标记
       * @type {Array}
       */
      ticks: null,

      /**
       * 参与度量计算的值，可选项
       * @type {Array}
       */
      values: []
    };
  };

  function Scale(cfg) {
    _classCallCheck(this, Scale);

    var defaultCfg = this.getDefaultCfg();
    Util.mix(this, defaultCfg, cfg);
    this.init();
  }

  /**
   * 度量初始化
   * @protected
   */


  Scale.prototype.init = function init() {};

  /**
   * 获取该度量的ticks,返回的是多个对象，
   *   - text: tick 的文本
   *   - value: 对应的度量转换后的值
   * <code>
   *   [
   *     {text: 0,value:0}
   *     {text: 1,value:0.2}
   *     {text: 2,value:0.4}
   *     {text: 3,value:0.6}
   *     {text: 4,value:0.8}
   *     {text: 5,value:1}
   *   ]
   * </code>
   * @param {Number} count 输出tick的个数的近似值，默认是 10
   * @return {Array} 返回 ticks 数组
   */


  Scale.prototype.getTicks = function getTicks() {
    var self = this;
    var ticks = self.ticks;
    var rst = [];
    Util.each(ticks, function (tick) {
      var obj = void 0;
      if (Util.isObject(tick)) {
        obj = tick;
      } else {
        obj = {
          text: self.getText(tick),
          tickValue: tick,
          value: self.scale(tick)
        };
      }
      rst.push(obj);
    });
    return rst;
  };

  /**
   * 获取格式化后的文本
   * @param  {*} value 输入的数据
   * @return {String} 格式化的文本
   */


  Scale.prototype.getText = function getText(value) {
    var formatter = this.formatter;
    value = formatter ? formatter(value) : value;
    if (Util.isNil(value) || !value.toString) {
      value = '';
    }
    return value.toString();
  };
  /**
   * 输出的值域最小值
   * @protected
   * @return {Number} 返回最小的值
   */


  Scale.prototype.rangeMin = function rangeMin() {
    return this.range[0];
  };
  /**
   * 输出的值域最大值
   * @protected
   * @return {Number} 返回最大的值
   */


  Scale.prototype.rangeMax = function rangeMax() {
    var range = this.range;
    return range[range.length - 1];
  };

  /**
   * 度量转换后的结果，翻转回输入域
   * @param  {Number} value 需要翻转的数值
   * @return {*} 度量的输入值
   */


  Scale.prototype.invert = function invert(value) {
    return value;
  };
  /**
   * 将传入的值从非数值转换成数值格式，如分类字符串、时间字符串等
   * @param  {*} value 传入的值
   * @return {Number} 转换的值
   */


  Scale.prototype.translate = function translate(value) {
    return value;
  };
  /**
   * 进行度量转换
   * @param  {*} value 输入值
   * @return {Number} 输出值，在设定的输出值域之间，默认[0,1]
   */


  Scale.prototype.scale = function scale(value) {
    return value;
  };
  /**
   * 克隆一个新的scale,拥有跟当前scale相同的输入域、输出域等
   * @return {Scale} 克隆的度量
   */


  Scale.prototype.clone = function clone() {
    var self = this;
    var constr = self.constructor;
    var cfg = {};
    Util.each(self, function (v, k) {
      cfg[k] = self[k];
    });
    return new constr(cfg);
  };
  /**
   * 更改度量的属性信息
   * @param  {Object} info 属性信息
   * @chainable
   * @return {Scale} 返回自身的引用
   */


  Scale.prototype.change = function change(info) {
    this.ticks = null;
    Util.mix(this, info);
    this.init();
    return this;
  };

  return Scale;
}();

module.exports = Scale;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview The measurement of linear data scale function
 * @author dxq613@gmail.com
 */

var Base = __webpack_require__(41);
var Util = __webpack_require__(0);
var numberAuto = __webpack_require__(321);

/**
 * 线性度量
 * @class Scale.Linear
 */

var Linear = function (_Base) {
  _inherits(Linear, _Base);

  function Linear() {
    _classCallCheck(this, Linear);

    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
  }

  /**
   * @override
   */
  Linear.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      /**
       * type of the scale
       * @type {String}
       */
      type: 'linear',

      /**
       * 是否线性
       * @type {Boolean}
       * @readOnly
       * @default true
       */
      isLinear: true,

      /**
       * min value of the scale
       * @type {Number}
       * @default null
       */
      min: null,

      /**
       * min value limitted of the scale
       * @type {Number}
       * @default null
       */
      minLimit: null,

      /**
       * max value of the scale
       * @type {Number}
       * @default null
       */
      max: null,

      /**
       * max value limitted of the scale
       * @type {Number}
       * @default null
       */
      maxLimit: null,

      /**
       * 是否为了用户习惯，优化min,max和ticks，如果进行优化，则会根据生成的ticks调整min,max，否则舍弃(min,max)范围之外的ticks
       * @type {Boolean}
       * @default false
       */
      nice: false,

      /**
       * 自动生成标记时的个数
       * @type {Number}
       * @default null
       */
      tickCount: null,

      /**
       * 坐标轴点之间的间距，指的是真实数据的差值
       * @type {Number}
       * @default null
       */
      tickInterval: null,

      /**
       * 用于计算坐标点时逼近的数组
       * @type {Array}
       */
      snapArray: null
    });
  };
  /**
   * @protected
   * @override
   */


  Linear.prototype.init = function init() {
    var self = this;
    if (!self.ticks) {
      self.min = self.translate(self.min);
      self.max = self.translate(self.max);
      self.initTicks();
    } else {
      var ticks = self.ticks;
      var firstValue = self.translate(ticks[0]);
      var lastValue = self.translate(ticks[ticks.length - 1]);
      if (Util.isNil(self.min) || self.min > firstValue) {
        self.min = firstValue;
      }
      if (Util.isNil(self.max) || self.max < lastValue) {
        self.max = lastValue;
      }
    }
  };

  /**
   * 计算坐标点
   * @protected
   * @return {Array} 计算完成的坐标点
   */


  Linear.prototype.calculateTicks = function calculateTicks() {
    var self = this;
    var min = self.min;
    var max = self.max;
    var count = self.tickCount;
    var interval = self.tickInterval;
    if (max < min) {
      throw new Error('max: ' + max + ' should not be less than min: ' + min);
    }
    var tmp = numberAuto({
      min: min,
      max: max,
      minLimit: self.minLimit,
      maxLimit: self.maxLimit,
      minCount: count,
      maxCount: count,
      interval: interval,
      snapArray: this.snapArray
    });
    return tmp.ticks;
  };

  // 初始化ticks


  Linear.prototype.initTicks = function initTicks() {
    var self = this;
    var calTicks = self.calculateTicks();
    if (self.nice) {
      // 如果需要优化显示的tick
      self.ticks = calTicks;
      self.min = calTicks[0];
      self.max = calTicks[calTicks.length - 1];
    } else {
      var ticks = [];
      Util.each(calTicks, function (tick) {
        if (tick >= self.min && tick <= self.max) {
          ticks.push(tick);
        }
      });
      self.ticks = ticks;
    }
  };

  /**
   * @override
   */


  Linear.prototype.scale = function scale(value) {
    if (value === null || value === undefined) {
      return NaN;
    }
    var max = this.max;
    var min = this.min;
    if (max === min) {
      return 0;
    }

    var percent = (value - min) / (max - min);
    var rangeMin = this.rangeMin();
    var rangeMax = this.rangeMax();
    return rangeMin + percent * (rangeMax - rangeMin);
  };

  /**
   * @override
   */


  Linear.prototype.invert = function invert(value) {
    var percent = (value - this.rangeMin()) / (this.rangeMax() - this.rangeMin());
    return this.min + percent * (this.max - this.min);
  };

  return Linear;
}(Base);

module.exports = Linear;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @fileOverview the base class of Coordinate
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var MatrixUtil = __webpack_require__(2).MatrixUtil;
var mat3 = MatrixUtil.mat3;
var vec3 = MatrixUtil.vec3;

var Coord = function () {
  /**
   * 获取默认的配置属性
   * @protected
   * @return {Object} 默认属性
   */
  Coord.prototype.getDefaultCfg = function getDefaultCfg() {
    return {
      /**
       * Mark x y is transposed.
       * @type {Boolean}
       */
      isTransposed: false,
      /**
       * The matrix of coordinate
       * @type {Array}
       */
      matrix: [1, 0, 0, 0, 1, 0, 0, 0, 1]
    };
  };

  function Coord(cfg) {
    _classCallCheck(this, Coord);

    var defaultCfg = this.getDefaultCfg();
    Util.mix(this, defaultCfg, cfg);
    this.init();
  }

  Coord.prototype.init = function init() {
    var start = this.start;
    var end = this.end;
    var center = {
      x: (start.x + end.x) / 2,
      y: (start.y + end.y) / 2
    };

    this.center = center;
    this.width = Math.abs(end.x - start.x);
    this.height = Math.abs(end.y - start.y);
  };

  Coord.prototype._swapDim = function _swapDim(dim) {
    var dimRange = this[dim];
    if (dimRange) {
      var tmp = dimRange.start;
      dimRange.start = dimRange.end;
      dimRange.end = tmp;
    }
  };

  Coord.prototype.getCenter = function getCenter() {
    return this.center;
  };

  Coord.prototype.getWidth = function getWidth() {
    return this.width;
  };

  Coord.prototype.getHeight = function getHeight() {
    return this.height;
  };

  Coord.prototype.convertDim = function convertDim(percent, dim) {
    var _dim = this[dim],
        start = _dim.start,
        end = _dim.end;

    return start + percent * (end - start);
  };

  Coord.prototype.invertDim = function invertDim(value, dim) {
    var _dim2 = this[dim],
        start = _dim2.start,
        end = _dim2.end;

    return (value - start) / (end - start);
  };

  /**
   * 将归一化的坐标点数据转换为画布坐标
   * @override
   * @param  {Object} point 归一化的坐标点
   * @return {Object}       返回画布坐标
   */


  Coord.prototype.convertPoint = function convertPoint(point) {
    return point;
  };

  /**
   * 将画布坐标转换为归一化的坐标点数据
   * @override
   * @param  {Object} point 画布坐标点数据
   * @return {Object}       归一化后的数据点
   */


  Coord.prototype.invertPoint = function invertPoint(point) {
    return point;
  };

  /**
   * 将坐标点进行矩阵变换
   * @param  {Number} x   对应 x 轴画布坐标
   * @param  {Number} y   对应 y 轴画布坐标
   * @param  {Number} tag 默认为 0，可取值 0, 1
   * @return {Array}     返回变换后的三阶向量 [x, y, z]
   */


  Coord.prototype.applyMatrix = function applyMatrix(x, y) {
    var tag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    var matrix = this.matrix;
    var vector = [x, y, tag];
    vec3.transformMat3(vector, vector, matrix);
    return vector;
  };

  /**
   * 将坐标点进行矩阵逆变换
   * @param  {Number} x   对应 x 轴画布坐标
   * @param  {Number} y   对应 y 轴画布坐标
   * @param  {Number} tag 默认为 0，可取值 0, 1
   * @return {Array}     返回矩阵逆变换后的三阶向量 [x, y, z]
   */


  Coord.prototype.invertMatrix = function invertMatrix(x, y) {
    var tag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    var matrix = this.matrix;
    var inversedMatrix = mat3.invert([], matrix);
    var vector = [x, y, tag];
    vec3.transformMat3(vector, vector, inversedMatrix);
    return vector;
  };

  /**
   * 将归一化的坐标点数据转换为画布坐标，并根据坐标系当前矩阵进行变换
   * @param  {Object} point 归一化的坐标点
   * @return {Object}       返回进行矩阵变换后的画布坐标
   */


  Coord.prototype.convert = function convert(point) {
    var _convertPoint = this.convertPoint(point),
        x = _convertPoint.x,
        y = _convertPoint.y;

    var vector = this.applyMatrix(x, y, 1);
    return {
      x: vector[0],
      y: vector[1]
    };
  };

  /**
   * 将进行过矩阵变换画布坐标转换为归一化坐标
   * @param  {Object} point 画布坐标
   * @return {Object}       返回归一化的坐标点
   */


  Coord.prototype.invert = function invert(point) {
    var vector = this.invertMatrix(point.x, point.y, 1);
    return this.invertPoint({
      x: vector[0],
      y: vector[1]
    });
  };

  /**
   * 坐标系旋转变换
   * @param  {Number} radian 旋转弧度
   * @return {Object}        返回坐标系对象
   */


  Coord.prototype.rotate = function rotate(radian) {
    var matrix = this.matrix;
    var center = this.center;
    mat3.translate(matrix, matrix, [-center.x, -center.y]);
    mat3.rotate(matrix, matrix, radian);
    mat3.translate(matrix, matrix, [center.x, center.y]);
    return this;
  };

  /**
   * 坐标系反射变换
   * @param  {String} dim 反射维度
   * @return {Object}     返回坐标系对象
   */


  Coord.prototype.reflect = function reflect(dim) {
    switch (dim) {
      case 'x':
        this._swapDim('x');
        break;
      case 'y':
        this._swapDim('y');
        break;
      default:
        this._swapDim('y');
    }
    return this;
  };

  /**
   * 坐标系比例变换
   * @param  {Number} s1 x 方向缩放比例
   * @param  {Number} s2 y 方向缩放比例
   * @return {Object}    返回坐标系对象
   */


  Coord.prototype.scale = function scale(s1, s2) {
    var matrix = this.matrix;
    var center = this.center;
    mat3.translate(matrix, matrix, [-center.x, -center.y]);
    mat3.scale(matrix, matrix, [s1, s2]);
    mat3.translate(matrix, matrix, [center.x, center.y]);
    return this;
  };

  /**
   * 坐标系平移变换
   * @param  {Number} x x 方向平移像素
   * @param  {Number} y y 方向平移像素
   * @return {Object}   返回坐标系对象
   */


  Coord.prototype.translate = function translate(x, y) {
    var matrix = this.matrix;
    mat3.translate(matrix, matrix, [x, y]);
    return this;
  };

  /**
   * 将坐标系 x y 两个轴进行转置
   * @return {Object} 返回坐标系对象
   */


  Coord.prototype.transpose = function transpose() {
    this.isTransposed = !this.isTransposed;
    return this;
  };

  return Coord;
}();

module.exports = Coord;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the base class of Axis
 * @author sima.zhang
 */
var Util = __webpack_require__(0);

var _require = __webpack_require__(65),
    LabelsRenderer = _require.LabelsRenderer;

var _require2 = __webpack_require__(2),
    Group = _require2.Group;

var Grid = __webpack_require__(336);
var Global = __webpack_require__(1);

var Base = function (_Group) {
  _inherits(Base, _Group);

  function Base() {
    _classCallCheck(this, Base);

    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
  }

  Base.prototype.getDefaultCfg = function getDefaultCfg() {
    return {
      /**
       * 用于动画，唯一标识的 id
       * @type {[type]}
       */
      _id: null,
      zIndex: 4,
      /**
       * 坐标轴上的坐标点
       * @type {Array}
       */
      ticks: null,
      /**
       * 坐标轴线的配置信息，如果设置成null，则不显示轴线
       * @type {Object}
       */
      line: null,
      /**
       * 坐标轴刻度线的配置,如果设置成null，则不显示刻度线
       * @type {Object}
       */
      tickLine: null,
      /**
       * 次刻度线个数配置
       * @type {Number}
       */
      subTickCount: 0,
      /**
       * 次刻度线样式配置
       * @type {Object}
       */
      subTickLine: null,
      /**
       * 网格线配置，如果值为 null，则不显示
       * @type {Object}
       */
      grid: null,
      /**
       * 坐标轴文本配置
       * @type {Object}
       */
      label: {
        textStyle: {}, // 坐标轴文本样式
        autoRotate: true,
        formatter: null // 坐标轴文本格式化回调函数
      },
      /**
       * 坐标轴标题配置
       * @type {Object}
       */
      title: {
        autoRotate: true, // 文本是否自动旋转
        textStyle: {} // 坐标轴标题样式
      },
      autoPaint: true
    };
  };

  Base.prototype._beforeRenderUI = function _beforeRenderUI() {
    var title = this.get('title');
    var label = this.get('label');
    var grid = this.get('grid');
    if (title) {
      this.setSilent('title', Util.deepMix({
        autoRotate: true,
        textStyle: {
          fontSize: 12,
          fill: '#ccc',
          textBaseline: 'middle',
          fontFamily: Global.fontFamily,
          textAlign: 'center'
        },
        offset: 48
      }, title));
    }
    if (label) {
      this.setSilent('label', Util.deepMix({
        autoRotate: true,
        textStyle: {
          fontSize: 12,
          fill: '#ccc',
          textBaseline: 'middle',
          fontFamily: Global.fontFamily
        },
        offset: 10
      }, label));
    }
    if (grid) {
      this.setSilent('grid', Util.deepMix({
        lineStyle: {
          lineWidth: 1,
          stroke: '#C0D0E0'
        }
      }, grid));
    }
  };

  Base.prototype._renderUI = function _renderUI() {
    var labelCfg = this.get('label');
    if (labelCfg) {
      this.renderLabels();
    }
    if (this.get('autoPaint')) {
      this.paint();
    }
    if (!Util.isNil(this.get('title'))) {
      this.renderTitle();
    }
    this.sort();
  };

  Base.prototype._parseTicks = function _parseTicks(ticks) {
    ticks = ticks || [];
    var ticksLength = ticks.length;
    for (var i = 0; i < ticksLength; i++) {
      var item = ticks[i];
      if (!Util.isObject(item)) {
        ticks[i] = this.parseTick(item, i, ticksLength);
      }
    }
    this.set('ticks', ticks);
    return ticks;
  };

  Base.prototype._addTickItem = function _addTickItem(index, point, length) {
    var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

    var tickItems = this.get('tickItems');
    var subTickItems = this.get('subTickItems');
    var end = this.getTickEnd(point, length, index);

    var cfg = {
      x1: point.x,
      y1: point.y,
      x2: end.x,
      y2: end.y
    };

    if (!tickItems) {
      tickItems = [];
    }

    if (!subTickItems) {
      subTickItems = [];
    }

    if (type === 'sub') {
      subTickItems.push(cfg);
    } else {
      tickItems.push(cfg);
    }

    this.set('tickItems', tickItems);
    this.set('subTickItems', subTickItems);
  };

  Base.prototype._renderLine = function _renderLine() {
    var lineCfg = this.get('line');
    var path = void 0;
    if (lineCfg) {
      path = this.getLinePath();
      lineCfg = Util.mix({
        path: path
      }, lineCfg);
      var lineShape = this.addShape('path', {
        attrs: lineCfg
      });
      lineShape.name = 'axis-line';
      this.get('appendInfo') && lineShape.setSilent('appendInfo', this.get('appendInfo'));
      this.set('lineShape', lineShape);
    }
  };

  Base.prototype._processTicks = function _processTicks() {
    var self = this;
    var labelCfg = self.get('label');
    var subTickCount = self.get('subTickCount');
    var tickLineCfg = self.get('tickLine');
    var ticks = self.get('ticks');
    ticks = self._parseTicks(ticks);

    Util.each(ticks, function (tick, index) {
      var tickPoint = self.getTickPoint(tick.value, index);
      if (tickLineCfg) {
        self._addTickItem(index, tickPoint, tickLineCfg.length);
      }
      if (labelCfg) {
        self.addLabel(tick, tickPoint, index);
      }
    });

    if (subTickCount) {
      // 如果有设置次级分点，添加次级tick
      var subTickLineCfg = self.get('subTickLine');
      Util.each(ticks, function (tick, index) {
        if (index > 0) {
          var diff = tick.value - ticks[index - 1].value;
          diff = diff / (self.get('subTickCount') + 1);

          for (var i = 1; i <= subTickCount; i++) {
            var subTick = {
              text: '',
              value: index ? ticks[index - 1].value + i * diff : i * diff
            };

            var tickPoint = self.getTickPoint(subTick.value);
            var subTickLength = void 0;
            if (subTickLineCfg && subTickLineCfg.length) {
              subTickLength = subTickLineCfg.length;
            } else {
              subTickLength = parseInt(tickLineCfg.length * (3 / 5), 10);
            }
            self._addTickItem(i - 1, tickPoint, subTickLength, 'sub');
          }
        }
      });
    }
  };

  Base.prototype._addTickLine = function _addTickLine(ticks, lineCfg) {
    var self = this;
    var cfg = Util.mix({}, lineCfg);
    var path = [];
    Util.each(ticks, function (item) {
      path.push(['M', item.x1, item.y1]);
      path.push(['L', item.x2, item.y2]);
    });
    delete cfg.length;
    cfg.path = path;
    var tickShape = self.addShape('path', {
      attrs: cfg
    });
    tickShape.name = 'axis-ticks';
    tickShape._id = self.get('_id') + '-ticks';
    tickShape.set('coord', self.get('coord'));
    self.get('appendInfo') && tickShape.setSilent('appendInfo', self.get('appendInfo'));
  };

  Base.prototype._renderTicks = function _renderTicks() {
    var self = this;
    var tickItems = self.get('tickItems');
    var subTickItems = self.get('subTickItems');

    if (!Util.isEmpty(tickItems)) {
      var tickLineCfg = self.get('tickLine');
      self._addTickLine(tickItems, tickLineCfg);
    }

    if (!Util.isEmpty(subTickItems)) {
      var subTickLineCfg = self.get('subTickLine') || self.get('tickLine');
      self._addTickLine(subTickItems, subTickLineCfg);
    }
  };

  Base.prototype._renderGrid = function _renderGrid() {
    var grid = this.get('grid');
    if (!grid) {
      return;
    }
    grid.coord = this.get('coord');
    grid.appendInfo = this.get('appendInfo');
    this.set('gridGroup', this.addGroup(Grid, grid));
  };

  Base.prototype.paint = function paint() {
    this._renderLine();
    this._processTicks();
    this._renderTicks();
    this._renderGrid();
    var labelCfg = this.get('label');
    if (labelCfg && labelCfg.autoRotate) {
      this.autoRotateLabels();
    }
  };

  Base.prototype.parseTick = function parseTick(tick, index, length) {
    return {
      text: tick,
      value: index / (length - 1)
    };
  };

  Base.prototype.getTextAnchor = function getTextAnchor(vector) {
    var ratio = Math.abs(vector[1] / vector[0]);
    var align = void 0;
    if (ratio >= 1) {
      // 上面或者下面
      align = 'center';
    } else {
      if (vector[0] > 0) {
        // 右侧
        align = 'start';
      } else {
        // 左侧
        align = 'end';
      }
    }
    return align;
  };

  Base.prototype.getMaxLabelWidth = function getMaxLabelWidth(labelsGroup) {
    var labels = labelsGroup.get('children');
    var max = 0;
    Util.each(labels, function (label) {
      var bbox = label.getBBox();
      var width = bbox.width;
      if (max < width) {
        max = width;
      }
    });
    return max;
  };

  Base.prototype.remove = function remove() {
    _Group.prototype.remove.call(this);
    var gridGroup = this.get('gridGroup');
    gridGroup && gridGroup.remove();
    this.removeLabels();
  };

  /**
   * 旋转文本
   * @abstract
   * @return {[type]} [description]
   */


  Base.prototype.autoRotateLabels = function autoRotateLabels() {};

  /**
   * 渲染标题
   * @abstract
   * @return {[type]} [description]
   */


  Base.prototype.renderTitle = function renderTitle() {};

  /**
   * 获取坐标轴线的 path
   * @abstract
   * @return {[type]} [description]
   */


  Base.prototype.getLinePath = function getLinePath() {};

  /**
   * 获取 tick 在画布上的位置
   * @abstract
   * @return {[type]} [description]
   */


  Base.prototype.getTickPoint = function getTickPoint() {};

  /**
   * 获取标示坐标点的线的终点
   * @abstract
   * @return {[type]} [description]
   */


  Base.prototype.getTickEnd = function getTickEnd() {};

  /**
   * 获取距离坐标轴的向量
   * @abstract
   * @return {[type]} [description]
   */


  Base.prototype.getSideVector = function getSideVector() {};

  return Base;
}(Group);

Util.assign(Base.prototype, LabelsRenderer, {
  addLabel: function addLabel(tick, point, index) {
    var labelsGroup = this.get('labelsGroup');
    var label = {};
    var rst = void 0;

    if (labelsGroup) {
      var offset = this.get('_labelOffset');
      if (!Util.isNil(this.get('label').offset)) {
        offset = this.get('label').offset;
      }
      var vector = this.getSideVector(offset, point, index);
      point = {
        x: point.x + vector[0],
        y: point.y + vector[1]
      };
      label.text = tick.text;
      label.x = point.x;
      label.y = point.y;
      label.textAlign = this.getTextAnchor(vector);
      rst = labelsGroup.addLabel(label);
      if (rst) {
        rst.name = 'axis-label';
        rst._id = this.get('_id') + '-' + tick.tickValue;
        rst.set('coord', this.get('coord'));
        this.get('appendInfo') && rst.setSilent('appendInfo', this.get('appendInfo'));
      }
    }
    return rst;
  }
});

module.exports = Base;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @fileOverview facets of chart
 * @author dxq613@gmail.com
 */

var assign = __webpack_require__(60);
var isNil = __webpack_require__(93);
var isArray = __webpack_require__(3);
var cloneDeep = __webpack_require__(102);
var Global = __webpack_require__(1);

// 绑定事件
function wrapBehavior(obj, action) {
  if (obj['_wrap_' + action]) {
    return obj['_wrap_' + action];
  }
  var method = function method(e) {
    obj[action](e);
  };
  obj['_wrap_' + action] = method;
  return method;
}

// 获取绑定的事件
function getWrapBehavior(obj, action) {
  return obj['_wrap_' + action];
}

var Base = function () {
  Base.prototype.getDefaultCfg = function getDefaultCfg() {
    return {
      chart: null,
      group: null,

      /**
       * 是否默认显示每个分面的title
       * @type {Boolean}
       */
      showTitle: true,

      /**
       * 是否自动修改坐标轴的信息
       * @type {Boolean}
       */
      autoSetAxis: true,

      /**
       * View 的内边框
       * @type {Number|Array}
       */
      padding: 10,

      /**
       * 遍历每个view 的回调函数
       * @type {Function}
       */
      eachView: null,

      /**
       * 分面的字段名列表
       * @type {Array}
       */
      fields: [],

      /**
       * 列值的的标题
       * @type {Object}
       */
      colTitle: {
        offsetY: -15,
        style: {
          fontSize: 14,
          textAlign: 'center',
          fill: '#444',
          fontFamily: Global.fontFamily
        }
      },
      rowTitle: {
        offsetX: 15,
        style: {
          fontSize: 14,
          textAlign: 'center',
          rotate: 90,
          fill: '#444',
          fontFamily: Global.fontFamily
        }
      }
    };
  };

  function Base(cfg) {
    _classCallCheck(this, Base);

    var defaultCfg = this.getDefaultCfg();
    assign(this, defaultCfg, cfg);
    this.init();
  }

  Base.prototype.init = function init() {
    if (!this.chart) {
      throw new Error('Facets Error: please specify the chart!');
    }
    this._bindEvent();
    this.initContainer();
    if (this.chart.get('data')) {
      this.initViews();
    }
  };

  Base.prototype.initContainer = function initContainer() {
    var chart = this.chart;
    var frontPlot = chart.get('frontPlot');
    var group = frontPlot.addGroup();
    this.group = group;
  };

  Base.prototype.initViews = function initViews() {
    var chart = this.chart;
    var data = chart.get('data');
    var eachView = this.eachView;
    var facets = this.generateFacets(data);
    for (var i = 0; i < facets.length; i++) {
      var facet = facets[i];
      var region = facet.region;
      var view = chart.view({
        start: region.start,
        end: region.end,
        padding: this.padding
      });
      view.source(facet.data);
      this.beforeProcessView(view, facet);
      if (eachView) {
        eachView(view, facet);
      }
      this.afterProcessView(view, facet);
      facet.view = view;
    }
    this.facets = facets;
  };

  /**
   * 处理 view 前
   * @protected
   */


  Base.prototype.beforeProcessView = function beforeProcessView() /* view, facet */{};

  /**
   * 处理view
   * @param {Object} view 视图
   * @param {Object} facet 分面信息
   * @protected
   */


  Base.prototype.afterProcessView = function afterProcessView(view, facet) {
    if (this.autoSetAxis) {
      this.processAxis(view, facet);
    }
  };

  Base.prototype.processAxis = function processAxis(view, facet) {
    var viewOptions = view.get('options');
    var geoms = view.get('geoms');
    if ((!viewOptions.coord.type || viewOptions.coord.type === 'rect') && geoms.length) {
      var field = geoms[0].get('attrOptions').position.field;
      var fields = isArray(field) ? field : field.split('*').map(function (str) {
        return str.trim();
      });
      var xField = fields[0];
      var yField = fields[1];
      if (isNil(viewOptions.axes)) {
        viewOptions.axes = {};
      }
      var axes = viewOptions.axes;
      if (axes !== false) {
        if (xField && axes[xField] !== false) {
          axes[xField] = axes[xField] || {};
          this.setXAxis(xField, axes, facet);
        }
        if (yField && axes[yField] !== false) {
          axes[yField] = axes[yField] || {};
          this.setYAxis(yField, axes, facet);
        }
      }
    }
  };

  Base.prototype.setXAxis = function setXAxis() /* xField, axes, facet */{};

  Base.prototype.setYAxis = function setYAxis() /* yField, axes, facet */{};

  // 默认显示各列的标题


  Base.prototype.renderTitle = function renderTitle(view, facet) {
    this.drawColTitle(view, facet);
  };

  Base.prototype.getScaleText = function getScaleText(field, value, view) {
    var rst = void 0;
    if (field) {
      var scales = view.get('scales');
      var scale = scales[field];
      if (!scale) {
        scale = view.createScale(field);
      }
      rst = scale.getText(value);
    } else {
      rst = value;
    }
    return rst;
  };

  Base.prototype.drawColTitle = function drawColTitle(view, facet) {
    var text = this.getScaleText(facet.colField, facet.colValue, view);
    var colTextCfg = assign({
      position: ['50%', '0%'],
      content: text
    }, this.colTitle);
    view.guide().text(colTextCfg);
  };

  Base.prototype.drawRowTitle = function drawRowTitle(view, facet) {
    var text = this.getScaleText(facet.rowField, facet.rowValue, view);
    var rowTextCfg = assign({
      position: ['100%', '50%'],
      content: text
    }, cloneDeep(this.rowTitle));

    view.guide().text(rowTextCfg);
  };

  /**
   * 数据过滤器
   * @protected
   * @param {Array} conditions 过滤条件
   * @return {Function} 过滤函数
   */


  Base.prototype.getFilter = function getFilter(conditions) {
    var filter = function filter(obj) {
      var filtered = true;
      conditions.forEach(function (cond) {
        var field = cond.field;
        var value = cond.value;
        // const values = cond.values;
        var tmp = true;
        if (!isNil(value) && field) {
          tmp = obj[field] === value;
        }
        filtered = filtered && tmp;
      });
      return filtered;
    };
    return filter;
  };

  /**
   * 获取字段对应的值
   * @protected
   * @param  {String} field 字段名
   * @param  {Array} data 数据
   * @return {Array} 字段对应的值
   */


  Base.prototype.getFieldValues = function getFieldValues(field, data) {
    var rst = [];
    var tmpMap = {};
    for (var i = 0; i < data.length; i++) {
      var obj = data[i];
      var value = obj[field];
      if (!isNil(value) && !tmpMap[value]) {
        rst.push(value);
        tmpMap[value] = true;
      }
    }
    return rst;
  };

  Base.prototype.getRegion = function getRegion(rows, cols, xIndex, yIndex) {
    var xWidth = 1 / cols; // x轴方向的每个分面的偏移
    var yWidth = 1 / rows; // y轴方向的每个分面的偏移

    var start = {
      x: xWidth * xIndex,
      y: yWidth * yIndex
    };

    var end = {
      x: start.x + xWidth,
      y: start.y + yWidth
    };

    return {
      start: start,
      end: end
    };
  };

  /**
   * 生成分面
   * @protected
   * @return {Array} 多个分面集合
   */


  Base.prototype.generateFacets = function generateFacets() /* data */{
    return [];
  };

  Base.prototype._bindEvent = function _bindEvent() {
    var chart = this.chart;
    chart.on('afterchangedata', wrapBehavior(this, 'onDataChange'));
    chart.on('beforeclear', wrapBehavior(this, 'onClear'));
    chart.on('beforedestroy', wrapBehavior(this, 'destroy'));
    chart.on('beforepaint', wrapBehavior(this, 'onPaint'));
    chart.on('setdata', wrapBehavior(this, 'onDataChange'));
  };

  Base.prototype._clearEvent = function _clearEvent() {
    var chart = this.chart;
    if (chart) {
      chart.off('afterchangedata', getWrapBehavior(this, 'onDataChange'));
      chart.off('beforeclear', getWrapBehavior(this, 'onClear'));
      chart.off('beforedestroy', getWrapBehavior(this, 'destroy'));
      chart.off('beforepaint', getWrapBehavior(this, 'onPaint'));
      chart.off('setdata', getWrapBehavior(this, 'onDataChange'));
    }
  };

  Base.prototype._clearFacets = function _clearFacets() {
    var facets = this.facets;
    var chart = this.chart;
    if (facets) {
      for (var i = 0; i < facets.length; i++) {
        var facet = facets[i];
        chart.removeView(facet.view);
      }
    }
    this.facets = null;
  };

  Base.prototype.onClear = function onClear() {
    this.onRemove();
  };

  Base.prototype.onPaint = function onPaint() {
    if (this.showTitle) {
      var facets = this.facets;
      for (var i = 0; i < facets.length; i++) {
        var facet = facets[i];
        var view = facet.view;
        this.renderTitle(view, facet);
      }
    }
  };

  Base.prototype.onDataChange = function onDataChange() {
    this._clearFacets();
    this.initViews();
  };

  Base.prototype.onRemove = function onRemove() {
    this._clearFacets();
    this._clearEvent();
    this.group && this.group.remove();
    this.chart = null;
    this.facets = null;
    this.group = null;
  };

  Base.prototype.destroy = function destroy() {
    this.onRemove();
    this.destroyed = true;
  };

  return Base;
}();

module.exports = Base;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsTypedArray = __webpack_require__(137),
    baseUnary = __webpack_require__(72),
    nodeUtil = __webpack_require__(73);

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;

/***/ }),
/* 47 */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(6),
    isObject = __webpack_require__(7);

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
    if (!isObject(value)) {
        return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

/***/ }),
/* 49 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(32),
    stackClear = __webpack_require__(149),
    stackDelete = __webpack_require__(150),
    stackGet = __webpack_require__(151),
    stackHas = __webpack_require__(152),
    stackSet = __webpack_require__(153);

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(13),
    root = __webpack_require__(4);

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

var mapCacheClear = __webpack_require__(158),
    mapCacheDelete = __webpack_require__(165),
    mapCacheGet = __webpack_require__(167),
    mapCacheHas = __webpack_require__(168),
    mapCacheSet = __webpack_require__(169);

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;

/***/ }),
/* 53 */
/***/ (function(module, exports) {

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function (value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;

/***/ }),
/* 54 */
/***/ (function(module, exports) {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var arrayFilter = __webpack_require__(83),
    stubArray = __webpack_require__(84);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function (symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(39),
    toKey = __webpack_require__(22);

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return index && index == length ? object : undefined;
}

module.exports = baseGet;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var isArray = __webpack_require__(3),
    isSymbol = __webpack_require__(21);

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}

module.exports = isKey;

/***/ }),
/* 58 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

module.exports = arrayReduce;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(75);

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(40),
    copyObject = __webpack_require__(23),
    createAssigner = __webpack_require__(224),
    isArrayLike = __webpack_require__(8),
    isPrototype = __webpack_require__(18),
    keys = __webpack_require__(11);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns own enumerable string keyed properties of source objects to the
 * destination object. Source objects are applied from left to right.
 * Subsequent sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object` and is loosely based on
 * [`Object.assign`](https://mdn.io/Object/assign).
 *
 * @static
 * @memberOf _
 * @since 0.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assignIn
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assign({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'c': 3 }
 */
var assign = createAssigner(function (object, source) {
  if (isPrototype(source) || isArrayLike(source)) {
    copyObject(source, keys(source), object);
    return;
  }
  for (var key in source) {
    if (hasOwnProperty.call(source, key)) {
      assignValue(object, key, source[key]);
    }
  }
});

module.exports = assign;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__(98);

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

var Uint8Array = __webpack_require__(80);

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview Chart、View、Geometry 的基类
 * @author dxq613@gmail.com
 */

var EventEmitter = __webpack_require__(283);
var Util = __webpack_require__(0);

var Base = function (_EventEmitter) {
  _inherits(Base, _EventEmitter);

  Base.prototype.getDefaultCfg = function getDefaultCfg() {
    return {};
  };

  function Base(cfg) {
    _classCallCheck(this, Base);

    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

    var attrs = {
      visible: true
    };
    var defaultCfg = _this.getDefaultCfg();
    _this._attrs = attrs;
    Util.assign(attrs, defaultCfg, cfg);
    return _this;
  }

  Base.prototype.get = function get(name) {
    return this._attrs[name];
  };

  Base.prototype.set = function set(name, value) {
    this._attrs[name] = value;
  };

  Base.prototype.show = function show() {
    var visible = this.get('visible');
    if (!visible) {
      this.set('visible', true);
      this.changeVisible(true);
    }
  };

  Base.prototype.hide = function hide() {
    var visible = this.get('visible');
    if (visible) {
      this.set('visible', false);
      this.changeVisible(false);
    }
  };

  /**
   * @protected
   * @param {Boolean} visible 是否可见
   * 显示、隐藏
   */


  Base.prototype.changeVisible = function changeVisible() /* visible */{};

  Base.prototype.destroy = function destroy() {
    this._attrs = {};
    this.removeAllListeners();
    this.destroyed = true;
  };

  return Base;
}(EventEmitter);

module.exports = Base;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview 颜色计算的辅助方法
 * @author dxq613@gmail.com
 */

var Util = __webpack_require__(0);
var RGB_REG = /rgb\((\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/;

// 创建辅助 tag 取颜色
function createTmp() {
  var i = document.createElement('i');
  i.title = 'Web Colour Picker';
  i.style.display = 'none';
  document.body.appendChild(i);
  return i;
}

// 获取颜色之间的插值
function getValue(start, end, percent, index) {
  var value = start[index] + (end[index] - start[index]) * percent;
  return value;
}

// 数组转换成颜色
function arr2rgb(arr) {
  return '#' + toHex(arr[0]) + toHex(arr[1]) + toHex(arr[2]);
}

// 将数值从 0-255 转换成16进制字符串
function toHex(value) {
  value = Math.round(value);
  value = value.toString(16);
  if (value.length === 1) {
    value = '0' + value;
  }
  return value;
}

function calColor(colors, percent) {
  var steps = colors.length - 1;
  var step = Math.floor(steps * percent);
  var left = steps * percent - step;
  var start = colors[step];
  var end = step === steps ? start : colors[step + 1];
  var rgb = arr2rgb([getValue(start, end, left, 0), getValue(start, end, left, 1), getValue(start, end, left, 2)]);
  return rgb;
}

// rgb 颜色转换成数组
function rgb2arr(str) {
  var arr = [];
  arr.push(parseInt(str.substr(1, 2), 16));
  arr.push(parseInt(str.substr(3, 2), 16));
  arr.push(parseInt(str.substr(5, 2), 16));
  return arr;
}

var colorCache = {};
var iEl = null;
var ColorUtil = {
  /**
   * 将颜色转换到 rgb 的格式
   * @param  {String} color 颜色
   * @return {String} 将颜色转换到 '#ffffff' 的格式
   */
  toRGB: function toRGB(color) {
    // 如果已经是 rgb的格式
    if (color[0] === '#' && color.length === 7) {
      return color;
    }
    if (!iEl) {
      // 防止防止在页头报错
      iEl = createTmp();
    }
    var rst = void 0;
    if (colorCache[color]) {
      rst = colorCache[color];
    } else {
      iEl.style.color = color;
      rst = document.defaultView.getComputedStyle(iEl, '').getPropertyValue('color');
      var cArray = RGB_REG.exec(rst);
      cArray.shift();
      rst = arr2rgb(cArray);
      colorCache[color] = rst;
    }
    return rst;
  },


  rgb2arr: rgb2arr,

  /**
   * 获取渐变函数
   * @param  {Array} colors 多个颜色
   * @return {String} 颜色值
   */
  gradient: function gradient(colors) {
    var points = [];
    if (Util.isString(colors)) {
      colors = colors.split('-');
    }
    Util.each(colors, function (color) {
      if (color.indexOf('#') === -1) {
        color = ColorUtil.toRGB(color);
      }
      points.push(rgb2arr(color));
    });
    return function (percent) {
      return calColor(points, percent);
    };
  }
};

module.exports = ColorUtil;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview the entry of labels
 * @author sima.zhang
 */
var Labels = __webpack_require__(109);
Labels.LabelsRenderer = __webpack_require__(299);

module.exports = Labels;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var Shape = __webpack_require__(10);

__webpack_require__(302);
__webpack_require__(303);
__webpack_require__(304);
__webpack_require__(305);
__webpack_require__(306);
__webpack_require__(307);
__webpack_require__(308);

module.exports = Shape;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview shape 的辅助方法
 * @author dxq613@gmail.com
 */
var Util = __webpack_require__(0);

var ShapeUtil = {
  splitPoints: function splitPoints(obj) {
    var points = [];
    var x = obj.x;
    var y = obj.y;
    y = Util.isArray(y) ? y : [y];
    Util.each(y, function (yItem, index) {
      var point = {
        x: Util.isArray(x) ? x[index] : x,
        y: yItem
      };
      points.push(point);
    });
    return points;
  }
};

module.exports = ShapeUtil;

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview Default animation configuration for geoms
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Action = __webpack_require__(280);

var defaultAnimationCfg = {
  appear: {
    duration: 450,
    easing: 'easeQuadOut'
  }, // 初始入场动画配置
  update: {
    duration: 450,
    easing: 'easeQuadInOut'
  }, // 更新时发生变更的动画配置
  enter: {
    duration: 400,
    easing: 'easeQuadInOut',
    delay: 100
  }, // 更新时新增元素的入场动画配置
  leave: {
    duration: 350,
    easing: 'easeQuadIn' // 更新时销毁动画配置
  } };

var Animate = {
  line: {
    appear: function appear() {
      return Action.appear.clipIn;
    },
    enter: function enter() {
      return Action.enter.clipIn;
    },
    leave: function leave() {
      return Action.leave.lineWidthOut;
    }
  },
  path: {
    appear: function appear() {
      return Action.appear.clipIn;
    },
    enter: function enter() {
      return Action.enter.clipIn;
    },
    leave: function leave() {
      return Action.leave.lineWidthOut;
    }
  },
  area: {
    appear: function appear() {
      return Action.appear.clipIn;
    },
    enter: function enter() {
      return Action.enter.fadeIn;
    },
    leave: function leave() {
      return Action.leave.fadeOut;
    },

    cfg: {
      appear: {
        duration: 500,
        easing: 'easeQuadOut'
      },
      update: {
        duration: 450,
        easing: 'easeQuadInOut'
      },
      enter: {
        duration: 600,
        delay: 150,
        easing: 'easeQuadInOut'
      },
      leave: {
        easing: 'easeQuadOut',
        duration: 350
      }
    }
  },
  polygon: {
    appear: function appear() {
      return Action.appear.zoomIn;
    },
    enter: function enter() {
      return Action.enter.zoomIn;
    },
    leave: function leave() {
      return Action.leave.zoomOut;
    }
  },
  edge: {
    appear: function appear() {
      return Action.appear.pathIn;
    },
    enter: function enter() {
      return Action.enter.pathIn;
    },
    leave: function leave() {
      return Action.leave.pathOut;
    }
  },
  interval: {
    appear: function appear(coord) {
      var result = void 0;
      if (coord.isPolar) {
        result = Action.appear.zoomIn;
        if (coord.isTransposed || coord.type === 'theta') {
          result = Action.appear.fanIn;
        }
      } else if (coord.isRect) {
        result = coord.isTransposed ? Action.appear.scaleInX : Action.appear.scaleInY;
      } else {
        result = Action.appear.zoomIn;
      }
      return result;
    },
    enter: function enter(coord) {
      if (coord.isRect || coord.isTransposed || coord.type === 'theta') {
        return Action.enter.fadeIn;
      }
      return Action.enter.zoomIn;
    },
    leave: function leave() {
      return Action.leave.fadeOut;
    },
    update: function update(coord) {
      if (coord.type === 'theta') {
        return Action.update.fanIn;
      }
    }
  },
  point: {
    appear: function appear() {
      return Action.appear.zoomIn;
    },
    enter: function enter() {
      return Action.enter.zoomIn;
    },
    leave: function leave() {
      return Action.leave.zoomOut;
    }
  },
  schema: {
    appear: function appear() {
      return Action.appear.clipIn;
    },
    enter: function enter() {
      return Action.enter.clipIn;
    },
    leave: function leave() {
      return Action.leave.lineWidthOut;
    }
  },
  contour: null,
  heatmap: null,
  label: {
    appear: function appear() {
      return Action.appear.fadeIn;
    },
    enter: function enter() {
      return Action.enter.fadeIn;
    },
    leave: function leave() {
      return Action.leave.fadeOut;
    },

    cfg: {
      appear: {
        duration: 900
      }
    }
  },
  'axis-label': {
    enter: function enter() {
      return Action.appear.fadeIn;
    },
    leave: function leave() {
      return Action.leave.fadeOut;
    },
    update: function update(coord) {
      if (coord.isPolar) {
        return Action.appear.fadeIn;
      }
    }
  },
  'axis-ticks': {
    enter: function enter() {
      return Action.appear.fadeIn;
    },
    leave: function leave() {
      return Action.leave.fadeOut;
    },
    update: function update(coord) {
      if (coord.isPolar) {
        return Action.appear.fadeIn;
      }
    }
  },
  'axis-grid': {
    enter: function enter() {
      return Action.appear.fadeIn;
    },
    leave: function leave() {
      return Action.leave.fadeOut;
    },
    update: function update(coord) {
      if (coord.isPolar) {
        return Action.appear.fadeIn;
      }
    }
  },
  'axis-grid-rect': {
    enter: function enter() {
      return Action.appear.fadeIn;
    },
    leave: function leave() {
      return Action.leave.fadeOut;
    },
    update: function update() {
      return Action.leave.fadeIn;
    }
  },
  labelLine: {
    appear: function appear() {
      return Action.appear.pathIn;
    },
    enter: function enter() {
      return Action.enter.pathIn;
    },
    leave: function leave() {
      return Action.leave.pathOut;
    }
  }
};

Animate.Action = Action;
Animate.defaultCfg = defaultAnimationCfg;

// 获取动画
Animate.getAnimation = function (geomType, coord, animationType) {
  var geomAnimateCfg = this[geomType];
  if (geomAnimateCfg) {
    var animation = geomAnimateCfg[animationType];
    if (Util.isFunction(animation)) {
      return animation(coord);
    }
  }
  return false;
};

// 获取动画配置
Animate.getAnimateCfg = function (geomType, animationType) {
  var defaultCfg = defaultAnimationCfg[animationType];
  if (this[geomType] && this[geomType].cfg && this[geomType].cfg[animationType]) {
    return Util.deepMix({}, defaultCfg, this[geomType].cfg[animationType]);
  }
  return defaultCfg;
};

// 注册动画
Animate.registerAnimation = function (animationType, animationName, animationFun) {
  if (!this.Action[animationType]) {
    this.Action[animationType] = {};
  }
  this.Action[animationType][animationName] = animationFun;
};

module.exports = Animate;

/***/ }),
/* 69 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

var baseTimes = __webpack_require__(131),
    isArguments = __webpack_require__(28),
    isArray = __webpack_require__(3),
    isBuffer = __webpack_require__(29),
    isIndex = __webpack_require__(30),
    isTypedArray = __webpack_require__(46);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (
    // Safari 9 has enumerable `arguments.length` in strict mode.
    key == 'length' ||
    // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == 'offset' || key == 'parent') ||
    // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
    // Skip index properties.
    isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/** Detect free variable `global` from Node.js. */
var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(133)))

/***/ }),
/* 72 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function (value) {
    return func(value);
  };
}

module.exports = baseUnary;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var freeGlobal = __webpack_require__(71);

/** Detect free variable `exports`. */
var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = function () {
  try {
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}();

module.exports = nodeUtil;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26)(module)))

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var isPrototype = __webpack_require__(18),
    nativeKeys = __webpack_require__(138);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;

/***/ }),
/* 75 */
/***/ (function(module, exports) {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

/***/ }),
/* 76 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return func + '';
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var SetCache = __webpack_require__(78),
    arraySome = __webpack_require__(173),
    cacheHas = __webpack_require__(79);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function (othValue, othIndex) {
        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(52),
    setCacheAdd = __webpack_require__(171),
    setCacheHas = __webpack_require__(172);

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;

    this.__data__ = new MapCache();
    while (++index < length) {
        this.add(values[index]);
    }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;

/***/ }),
/* 79 */
/***/ (function(module, exports) {

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(4);

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(82),
    getSymbols = __webpack_require__(55),
    keys = __webpack_require__(11);

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(54),
    isArray = __webpack_require__(3);

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;

/***/ }),
/* 83 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;

/***/ }),
/* 84 */
/***/ (function(module, exports) {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(13),
    root = __webpack_require__(4);

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(7);

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;

/***/ }),
/* 87 */
/***/ (function(module, exports) {

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function (object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
  };
}

module.exports = matchesStrictComparable;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

var baseHasIn = __webpack_require__(186),
    hasPath = __webpack_require__(187);

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(6),
    isArray = __webpack_require__(3),
    isObjectLike = __webpack_require__(5);

/** `Object#toString` result references. */
var stringTag = '[object String]';

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
    return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
}

module.exports = isString;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

var castSlice = __webpack_require__(197),
    hasUnicode = __webpack_require__(91),
    stringToArray = __webpack_require__(92),
    toString = __webpack_require__(15);

/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */
function createCaseFirst(methodName) {
  return function (string) {
    string = toString(string);

    var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;

    var chr = strSymbols ? strSymbols[0] : string.charAt(0);

    var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);

    return chr[methodName]() + trailing;
  };
}

module.exports = createCaseFirst;

/***/ }),
/* 91 */
/***/ (function(module, exports) {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsZWJ = '\\u200d';

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

module.exports = hasUnicode;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

var asciiToArray = __webpack_require__(199),
    hasUnicode = __webpack_require__(91),
    unicodeToArray = __webpack_require__(200);

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray(string) {
    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
}

module.exports = stringToArray;

/***/ }),
/* 93 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is `null` or `undefined`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
 * @example
 *
 * _.isNil(null);
 * // => true
 *
 * _.isNil(void 0);
 * // => true
 *
 * _.isNil(NaN);
 * // => false
 */
function isNil(value) {
  return value == null;
}

module.exports = isNil;

/***/ }),
/* 94 */
/***/ (function(module, exports) {

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

var baseFindIndex = __webpack_require__(220),
    baseIsNaN = __webpack_require__(221),
    strictIndexOf = __webpack_require__(222);

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

var toFinite = __webpack_require__(223);

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? remainder ? result - remainder : result : 0;
}

module.exports = toInteger;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(7),
    isSymbol = __webpack_require__(21);

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? other + '' : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}

module.exports = toNumber;

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(13);

var defineProperty = function () {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}();

module.exports = defineProperty;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__(31),
    overRest = __webpack_require__(100),
    setToString = __webpack_require__(101);

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var apply = __webpack_require__(225);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? func.length - 1 : start, 0);
  return function () {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

var baseSetToString = __webpack_require__(226),
    shortOut = __webpack_require__(228);

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

var baseClone = __webpack_require__(234);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

module.exports = cloneDeep;

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(70),
    baseKeysIn = __webpack_require__(237),
    isArrayLike = __webpack_require__(8);

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(54),
    getPrototype = __webpack_require__(59),
    getSymbols = __webpack_require__(55),
    stubArray = __webpack_require__(84);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

module.exports = getSymbolsIn;

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

var isSymbol = __webpack_require__(21);

/**
 * The base implementation of methods like `_.max` and `_.min` which accepts a
 * `comparator` to determine the extremum value.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The iteratee invoked per iteration.
 * @param {Function} comparator The comparator used to compare values.
 * @returns {*} Returns the extremum value.
 */
function baseExtremum(array, iteratee, comparator) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    var value = array[index],
        current = iteratee(value);

    if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
      var computed = current,
          result = value;
    }
  }
  return result;
}

module.exports = baseExtremum;

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(54),
    isFlattenable = __webpack_require__(267);

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

module.exports = baseFlatten;

/***/ }),
/* 107 */
/***/ (function(module, exports) {

var _html, _tooltip;

/**
 * @fileOverview G2 3.0 default theme
 * @author sima.zhang
 */
var DEFAULT_COLOR = '#1890FF';
var COLOR_PLATE_8 = ['#1890FF', '#2FC25B', '#FACC14', '#223273', '#8543E0', '#13C2C2', '#3436C7', '#F04864'];
var COLOR_PLATE_16 = ['#1890FF', '#41D9C7', '#2FC25B', '#FACC14', '#E6965C', '#223273', '#7564CC', '#8543E0', '#5C8EE6', '#13C2C2', '#5CA3E6', '#3436C7', '#B381E6', '#F04864', '#D598D9'];
var COLOR_PLATE_24 = ['#1890FF', '#66B5FF', '#41D9C7', '#2FC25B', '#6EDB8F', '#9AE65C', '#FACC14', '#E6965C', '#57AD71', '#223273', '#738AE6', '#7564CC', '#8543E0', '#A877ED', '#5C8EE6', '#13C2C2', '#70E0E0', '#5CA3E6', '#3436C7', '#8082FF', '#DD81E6', '#F04864', '#FA7D92', '#D598D9'];
var COLOR_PIE = ['#1890FF', '#13C2C2', '#2FC25B', '#FACC14', '#F04864', '#8543E0', '#3436C7', '#223273'];
var COLOR_PIE_16 = ['#1890FF', '#73C9E6', '#13C2C2', '#6CD9B3', '#2FC25B', '#9DD96C', '#FACC14', '#E6965C', '#F04864', '#D66BCA', '#8543E0', '#8E77ED', '#3436C7', '#737EE6', '#223273', '#7EA2E6'];

var FONT_FAMILY = '"-apple-system", BlinkMacSystemFont, "Segoe UI", Roboto,"Helvetica Neue", Helvetica, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei",SimSun, "sans-serif"';
// tooltip 相关 dom 的 css 类名
var TOOLTIP_CONTAINER_CLASS = 'g2-tooltip';
var TOOLTIP_TITLE_CLASS = 'g2-tooltip-title';
var TOOLTIP_LIST_CLASS = 'g2-tooltip-list';
var TOOLTIP_LIST_ITEM_CLASS = 'g2-tooltip-list-item';
var TOOLTIP_MARKER_CLASS = 'g2-tooltip-marker';

// html 渲染的 legend 相关 dom 的 css 类型
var LEGEND_CONTAINER_CLASS = 'g2-legend';
var LEGEND_TITLE_CLASS = 'g2-legend-title';
var LEGEND_LIST_CLASS = 'g2-legend-list';
var LEGEND_LIST_ITEM_CLASS = 'g2-legend-list-item';
var LEGEND_MARKER_CLASS = 'g2-legend-marker';

var Theme = {
  defaultColor: DEFAULT_COLOR, // 默认主题色
  plotCfg: {
    padding: [20, 20, 95, 80]
  },
  fontFamily: FONT_FAMILY,
  defaultLegendPosition: 'bottom', // 默认图例的展示位置
  colors: COLOR_PLATE_8,
  colors_16: COLOR_PLATE_16,
  colors_24: COLOR_PLATE_24,
  colors_pie: COLOR_PIE,
  colors_pie_16: COLOR_PIE_16,
  shapes: {
    point: ['hollowCircle', 'hollowSquare', 'hollowDiamond', 'hollowBowtie', 'hollowTriangle', 'hollowHexagon', 'cross', 'tick', 'plus', 'hyphen', 'line'],
    line: ['line', 'dash', 'dot'],
    area: ['area']
  },
  sizes: [1, 10],
  opacities: [0.1, 0.9],
  axis: {
    top: {
      // zIndex: 1, // 默认上下方向的坐标轴位于左右坐标轴的上方
      position: 'top',
      title: null,
      label: {
        offset: 14,
        textStyle: {
          fill: '#545454',
          fontSize: 12,
          lineHeight: 20,
          textBaseline: 'middle',
          fontFamily: FONT_FAMILY
        },
        autoRotate: true
      },
      line: {
        lineWidth: 1,
        stroke: '#BFBFBF'
      },
      tickLine: {
        lineWidth: 1,
        stroke: '#BFBFBF',
        length: 4
      }
    },
    bottom: {
      position: 'bottom',
      title: null,
      label: {
        offset: 22,
        autoRotate: true,
        textStyle: {
          fill: '#545454',
          fontSize: 12,
          lineHeight: 20,
          textBaseline: 'middle',
          fontFamily: FONT_FAMILY
        }
      },
      line: {
        lineWidth: 1,
        stroke: '#BFBFBF'
      },
      tickLine: {
        lineWidth: 1,
        stroke: '#BFBFBF',
        length: 4
      }
    },
    left: {
      position: 'left',
      title: null,
      label: {
        offset: 12,
        autoRotate: true,
        textStyle: {
          fill: '#545454',
          fontSize: 12,
          lineHeight: 20,
          textBaseline: 'middle',
          fontFamily: FONT_FAMILY
        }
      },
      line: null,
      tickLine: null,
      grid: {
        lineStyle: {
          stroke: '#E9E9E9',
          lineWidth: 1,
          lineDash: [3, 3]
        },
        hideFirstLine: true
      }
    },
    right: {
      position: 'right',
      title: null,
      label: {
        offset: 12,
        autoRotate: true,
        textStyle: {
          fill: '#545454',
          fontSize: 12,
          lineHeight: 20,
          textBaseline: 'middle',
          fontFamily: FONT_FAMILY
        }
      },
      line: null,
      tickLine: null,
      grid: {
        lineStyle: {
          stroke: '#E9E9E9',
          lineWidth: 1,
          lineDash: [3, 3]
        },
        hideFirstLine: true
      }
    },
    circle: {
      zIndex: 1,
      title: null,
      label: {
        offset: 12,
        textStyle: {
          fill: '#545454',
          fontSize: 12,
          lineHeight: 20,
          fontFamily: FONT_FAMILY
        }
      },
      line: {
        lineWidth: 1,
        stroke: '#BFBFBF'
      },
      tickLine: {
        lineWidth: 1,
        stroke: '#BFBFBF',
        length: 4
      },
      grid: {
        lineStyle: {
          stroke: '#E9E9E9',
          lineWidth: 1,
          lineDash: [3, 3]
        },
        hideFirstLine: true
      }
    },
    radius: {
      zIndex: 0,
      label: {
        offset: 12,
        textStyle: {
          fill: '#545454',
          fontSize: 12,
          textBaseline: 'middle',
          lineHeight: 20,
          fontFamily: FONT_FAMILY
        }
      },
      line: {
        lineWidth: 1,
        stroke: '#BFBFBF'
      },
      tickLine: {
        lineWidth: 1,
        stroke: '#BFBFBF',
        length: 4
      },
      grid: {
        lineStyle: {
          stroke: '#E9E9E9',
          lineWidth: 1,
          lineDash: [3, 3]
        },
        type: 'circle'
      }
    },
    helix: {
      grid: null,
      label: null,
      title: null,
      line: {
        lineWidth: 1,
        stroke: '#BFBFBF'
      },
      tickLine: {
        lineWidth: 1,
        length: 4,
        stroke: '#BFBFBF'
      }
    }
  },
  label: {
    offset: 20,
    textStyle: {
      fill: '#545454',
      fontSize: 12,
      textBaseline: 'middle',
      fontFamily: FONT_FAMILY
    }
  },
  treemapLabels: {
    offset: 10,
    textStyle: {
      fill: '#fff',
      fontSize: 12,
      textBaseline: 'top',
      fontStyle: 'bold',
      fontFamily: FONT_FAMILY
    }
  },
  innerLabels: {
    textStyle: {
      fill: '#fff',
      fontSize: 12,
      textBaseline: 'middle',
      fontFamily: FONT_FAMILY
    }
  },
  // 在theta坐标系下的饼图文本内部的样式
  thetaLabels: {
    labelLine: {
      lineWidth: 1
    },
    labelHeight: 14,
    offset: 30
    // 在theta坐标系下的饼图文本的样式
  },
  legend: {
    right: {
      position: 'right',
      layout: 'vertical',
      itemMarginBottom: 8, // layout 为 vertical 时各个图例项的间距
      width: 16,
      height: 156,
      title: null,
      textStyle: {
        fill: '#8C8C8C',
        fontSize: 12,
        textAlign: 'start',
        textBaseline: 'middle',
        lineHeight: 20,
        fontFamily: FONT_FAMILY
      }, // 图例项文本的样式
      unCheckColor: '#bfbfbf'
    },
    left: {
      position: 'left',
      layout: 'vertical',
      itemMarginBottom: 8,
      width: 16,
      height: 156,
      title: null,
      textStyle: {
        fill: '#8C8C8C',
        fontSize: 12,
        textAlign: 'start',
        textBaseline: 'middle',
        lineHeight: 20,
        fontFamily: FONT_FAMILY
      }, // 图例项文本的样式
      unCheckColor: '#bfbfbf'
    },
    top: {
      position: 'top',
      offset: 6,
      layout: 'horizontal',
      title: null,
      itemGap: 10,
      width: 156,
      height: 16,
      textStyle: {
        fill: '#8C8C8C',
        fontSize: 12,
        textAlign: 'start',
        textBaseline: 'middle',
        lineHeight: 20,
        fontFamily: FONT_FAMILY
      }, // 图例项文本的样式
      unCheckColor: '#bfbfbf'
    },
    bottom: {
      position: 'bottom',
      offset: 58,
      layout: 'horizontal',
      title: null,
      itemGap: 24,
      width: 156,
      height: 16,
      textStyle: {
        fill: '#8C8C8C',
        fontSize: 12,
        textAlign: 'start',
        textBaseline: 'middle',
        lineHeight: 20,
        fontFamily: FONT_FAMILY
      }, // 图例项文本的样式
      unCheckColor: '#bfbfbf'
    },
    // 定义 html 渲染图例的样式
    html: (_html = {}, _html['' + LEGEND_CONTAINER_CLASS] = {
      height: 'auto',
      width: 'auto',
      position: 'absolute',
      overflow: 'scroll',
      fontSize: '12px',
      fontFamily: FONT_FAMILY,
      lineHeight: '20px',
      color: '#8C8C8C'
    }, _html['' + LEGEND_TITLE_CLASS] = {
      marginBottom: '4px'
    }, _html['' + LEGEND_LIST_CLASS] = {
      listStyleType: 'none',
      margin: 0,
      padding: 0
    }, _html['' + LEGEND_LIST_ITEM_CLASS] = {
      cursor: 'pointer',
      marginBottom: '5px',
      marginRight: '24px'
    }, _html['' + LEGEND_MARKER_CLASS] = {
      width: '9px',
      height: '9px',
      borderRadius: '50%',
      display: 'inline-block',
      marginRight: '8px',
      verticalAlign: 'middle'
    }, _html),
    // 不能滑动的连续图例样式
    gradient: {
      textStyle: {
        fill: '#8C8C8C',
        fontSize: 12,
        textAlign: 'center',
        textBaseline: 'middle',
        lineHeight: 20,
        fontFamily: FONT_FAMILY
      }, // 图例项文本的样式
      lineStyle: {
        lineWidth: 1,
        stroke: '#fff'
      },
      unCheckColor: '#bfbfbf'
    }
  },
  tooltip: (_tooltip = {
    crosshairs: false,
    offset: 15
  }, _tooltip['' + TOOLTIP_CONTAINER_CLASS] = {
    position: 'absolute',
    visibility: 'hidden',
    whiteSpace: 'nowrap',
    zIndex: 999,
    transition: 'visibility 0.2s cubic-bezier(0.23, 1, 0.32, 1), left 0.4s cubic-bezier(0.23, 1, 0.32, 1), top 0.4s cubic-bezier(0.23, 1, 0.32, 1)',
    backgroundColor: 'rgba(0, 0, 0, 0.65)',
    borderRadius: '4px',
    color: 'rgb(255, 255, 255)',
    fontSize: '12px',
    fontFamily: FONT_FAMILY,
    lineHeight: '20px',
    padding: '10px 10px 6px 10px'
  }, _tooltip['' + TOOLTIP_TITLE_CLASS] = {
    marginBottom: '4px'
  }, _tooltip['' + TOOLTIP_LIST_CLASS] = {
    margin: 0,
    listStyleType: 'none',
    padding: 0
  }, _tooltip['' + TOOLTIP_LIST_ITEM_CLASS] = {
    marginBottom: '4px'
  }, _tooltip['' + TOOLTIP_MARKER_CLASS] = {
    width: '7px',
    height: '7px',
    borderRadius: '50%',
    border: '1px solid #fff',
    display: 'inline-block',
    marginRight: '8px'
  }, _tooltip),
  tooltipMarker: {
    symbol: function symbol(x, y, r, ctx, marker) {
      var color = marker.get('color');
      ctx.fillStyle = color;
      ctx.lineWidth = 1;
      ctx.strokeStyle = '#fff';
      ctx.beginPath();
      ctx.arc(x, y, r, 0, Math.PI * 2, false);
      ctx.fill();
      ctx.stroke();

      ctx.save();
      ctx.beginPath();
      ctx.fillStyle = '#fff';
      ctx.strokeStyle = color;
      ctx.globalAlpha = 0.2;
      ctx.lineWidth = 3;
      ctx.arc(x, y, 6, 0, Math.PI * 2, false);
      ctx.stroke();
      ctx.restore();
    },
    radius: 4
  }, // 提示信息在折线图、区域图上形成点的样式
  tooltipCrosshairsRect: {
    type: 'rect',
    style: {
      fill: '#CCD6EC',
      opacity: 0.3
    }
  }, // tooltip 辅助背景框样式
  tooltipCrosshairsLine: {
    style: {
      stroke: 'rgba(0, 0, 0, 0.25)',
      lineWidth: 1
    }
  },
  shape: {
    point: {
      lineWidth: 1,
      fill: DEFAULT_COLOR,
      radius: 4
    },
    hollowPoint: {
      fill: '#fff',
      lineWidth: 1,
      stroke: DEFAULT_COLOR,
      radius: 3
    },
    interval: {
      lineWidth: 0,
      fill: DEFAULT_COLOR,
      fillOpacity: 0.85
    },
    hollowInterval: {
      fill: '#fff',
      stroke: DEFAULT_COLOR,
      fillOpacity: 0,
      lineWidth: 2
    },
    area: {
      lineWidth: 0,
      fill: DEFAULT_COLOR,
      fillOpacity: 0.3
    },
    polygon: {
      lineWidth: 0,
      fill: DEFAULT_COLOR,
      fillOpacity: 1
    },
    hollowPolygon: {
      fill: '#fff',
      stroke: DEFAULT_COLOR,
      fillOpacity: 0,
      lineWidth: 2
    },
    hollowArea: {
      fill: '#fff',
      stroke: DEFAULT_COLOR,
      fillOpacity: 0,
      lineWidth: 2
    },
    line: {
      stroke: DEFAULT_COLOR,
      lineWidth: 2,
      fill: null
    },
    edge: {
      stroke: DEFAULT_COLOR,
      lineWidth: 1,
      fill: null
    },
    schema: {
      stroke: DEFAULT_COLOR,
      lineWidth: 1,
      fill: null
    }
  },
  guide: {
    line: {
      lineStyle: {
        stroke: DEFAULT_COLOR,
        lineDash: [0, 2, 2],
        lineWidth: 1
      },
      text: {
        position: 'end',
        autoRotate: true,
        style: {
          fill: '#545454',
          fontSize: 12,
          textAlign: 'center',
          fontFamily: FONT_FAMILY
        }
      }
    },
    text: {
      style: {
        fill: '#545454',
        fontSize: 12,
        textBaseline: 'middle',
        textAlign: 'start',
        fontFamily: FONT_FAMILY

      }
    },
    region: {
      style: {
        lineWidth: 0, // 辅助框的边框宽度
        fill: '#000', // 辅助框填充的颜色
        fillOpacity: 0.04 // 辅助框的背景透明度
        // 辅助框的图形样式属性
      } },
    html: {
      alignX: 'middle',
      alignY: 'middle'
    }
  },
  pixelRatio: null
};

module.exports = Theme;

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = __webpack_require__(2),
    Group = _require.Group;

var Labels = __webpack_require__(65);
var Global = __webpack_require__(1);
var Util = __webpack_require__(0);
var IGNORE_ARR = ['line', 'point', 'path'];
var ORIGIN = '_origin';

function avg(arr) {
  var sum = 0;
  Util.each(arr, function (value) {
    sum += value;
  });
  return sum / arr.length;
}

var GeomLabels = function (_Group) {
  _inherits(GeomLabels, _Group);

  function GeomLabels() {
    _classCallCheck(this, GeomLabels);

    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
  }

  GeomLabels.prototype.getDefaultCfg = function getDefaultCfg() {
    return {
      label: Global.label,
      /**
       * 用户传入的文本配置信息
       * @type {Object}
       */
      labelCfg: null,
      /**
       * 所在的坐标系
       * @type {Object}
       */
      coord: null,
      /**
       * 图表的类型
       * @type {String}
       */
      geomType: null,
      zIndex: 6
    };
  };

  GeomLabels.prototype._renderUI = function _renderUI() {
    _Group.prototype._renderUI.call(this);
    this.initLabelsCfg();
    this.renderLabels(); // 调用入口文件
  };

  // 获取显示的 label 文本值


  GeomLabels.prototype._getLabelValue = function _getLabelValue(record) {
    var self = this;
    var originRecord = record[ORIGIN];
    var labelCfg = self.get('labelCfg');
    var scales = labelCfg.scales;
    var callback = labelCfg.cfg && labelCfg.cfg.content;
    var value = void 0;
    if (callback) {
      var params = [];
      Util.each(scales, function (scale) {
        params.push(originRecord[scale.field]);
      });
      value = callback.apply(null, params);
    } else {
      var scale = scales[0];
      value = originRecord[scale.field];
      if (Util.isArray(value)) {
        var tmp = [];
        Util.each(value, function (subVal) {
          tmp.push(scale.getText(subVal));
        });
        value = tmp;
      } else {
        value = scale.getText(value);
      }
    }
    return value;
  };

  // 初始化labels的配置项


  GeomLabels.prototype.initLabelsCfg = function initLabelsCfg() {
    var self = this;
    var labels = self.getDefaultLabelCfg();
    var labelCfg = self.get('labelCfg');
    // Util.merge(labels, labelCfg.cfg);
    Util.deepMix(labels, labelCfg.cfg);
    self.set('label', labels);
  };

  /**
   * @protected
   * 默认的文本样式
   * @return {Object} default label config
   */


  GeomLabels.prototype.getDefaultLabelCfg = function getDefaultLabelCfg() {
    var self = this;
    var labelCfg = self.get('labelCfg').cfg;
    var geomType = self.get('geomType');
    if (geomType === 'polygon' || labelCfg && labelCfg.offset < 0 && Util.indexOf(IGNORE_ARR, geomType) === -1) {
      // return Util.merge({}, self.get('label'), Global.innerLabels);
      return Util.deepMix({}, self.get('label'), Global.innerLabels);
    }
    // return Util.merge({}, Global.label, self.get('label'));
    return Util.deepMix({}, Global.label, self.get('label'));
  };

  /**
   * @protected
   * 获取labels
   * @param {Array} points points
   * @return {Array} label items
   */


  GeomLabels.prototype.getLabelsItems = function getLabelsItems(points) {
    var self = this;
    var items = [];
    var labels = self.get('label');
    var geom = self.get('geom');
    var origin = void 0;

    // 获取label相关的x，y的值，获取具体的x,y,防止存在数组
    Util.each(points, function (point) {
      origin = point._origin;
      var label = self._getLabelValue(point);
      if (!Util.isArray(label)) {
        label = [label];
      }
      var total = label.length;

      Util.each(label, function (sub, subIdx) {
        var obj = self.getLabelPoint(label, point, subIdx);
        if (obj) {
          obj = Util.mix({}, origin, obj); // 为了格式化输出
          var align = void 0;
          if (labels && labels.label && labels.label.textAlign) {
            align = labels.label.textAlign;
          } else {
            align = self.getLabelAlign(obj, subIdx, total);
          }
          obj.textAlign = align;
          if (geom) {
            obj._id = geom._getShapeId(origin) + '-glabel-' + subIdx + '-' + obj.text;
          }
          obj.coord = self.get('coord');
          items.push(obj);
        }
      });
    });
    return items;
  };

  /**
   * @protected
   * 如果发生冲突则会调整文本的位置
   * @param {Array} items 文本的集合
   * @return {Array} adjusted items
   */


  GeomLabels.prototype.adjustItems = function adjustItems(items) {
    return items;
  };

  /**
   * drawing lines to labels
   * @param  {Array} items labels
   * @param  {Object} labelLine configuration for label lines
   */


  GeomLabels.prototype.drawLines = function drawLines(items, labelLine) {
    var self = this;
    var offset = self.getDefaultOffset();
    if (offset > 0) {
      Util.each(items, function (point) {
        self.lineToLabel(point, labelLine);
      });
    }
  };

  // 连接线


  GeomLabels.prototype.lineToLabel = function lineToLabel(label, labelLine) {
    var self = this;
    var coord = self.get('coord');
    var start = {
      x: label.x - label._offset.x,
      y: label.y - label._offset.y
    };
    var inner = {
      x: (start.x + label.x) / 2,
      y: (start.y + label.y) / 2
    };
    var lineGroup = self.get('lineGroup');
    // var lineShape;
    if (!lineGroup) {
      lineGroup = self.addGroup({
        elCls: 'x-line-group'
      });
      self.set('lineGroup', lineGroup);
    }
    var lineShape = lineGroup.addShape('path', {
      attrs: Util.mix({
        path: ['M' + start.x, start.y + ' Q' + inner.x, inner.y + ' ' + label.x, label.y].join(','),
        fill: null,
        stroke: label.color
      }, labelLine)
    });
    // label 对应线的动画关闭
    lineShape.name = 'labelLine';
    // generate labelLine id according to label id
    lineShape._id = label._id && label._id.replace('glabel', 'glabelline');
    lineShape.set('coord', coord);
  };

  /**
   * @protected
   * 获取文本的位置信息
   * @param {Array} labels labels
   * @param {Object} point point
   * @param {Number} index index
   * @return {Object} point
   */


  GeomLabels.prototype.getLabelPoint = function getLabelPoint(labels, point, index) {
    var self = this;
    var coord = self.get('coord');

    function getDimValue(value, idx) {
      if (Util.isArray(value)) {
        if (labels.length === 1) {
          // 如果仅一个label,多个y,取最后一个y
          if (value.length <= 2) {
            value = value[value.length - 1];
            // value = value[0];
          } else {
            value = avg(value);
          }
        } else {
          value = value[idx];
        }
      }
      return value;
    }

    var labelPoint = {
      x: getDimValue(point.x, index),
      y: getDimValue(point.y, index),
      text: labels[index]
    };

    // get nearest point of the shape as the label line start point
    if (point && point.nextPoints && (point.shape === 'funnel' || point.shape === 'pyramid')) {
      var maxX = -Infinity;
      point.nextPoints.forEach(function (p) {
        p = coord.convert(p);
        if (p.x > maxX) {
          maxX = p.x;
        }
      });
      labelPoint.x = (labelPoint.x + maxX) / 2;
    }
    // sharp edge of the pyramid
    if (point.shape === 'pyramid' && !point.nextPoints && point.points) {
      point.points.forEach(function (p) {
        p = coord.convert(p);
        if (point.x.indexOf(p.x) === -1) {
          labelPoint.x = (labelPoint.x + p.x) / 2;
        }
      });
    }

    var offsetPoint = self.getLabelOffset(labelPoint, index, labels.length);
    self.transLabelPoint(labelPoint);
    labelPoint.x += offsetPoint.x;
    labelPoint.y += offsetPoint.y;
    labelPoint.color = point.color;
    labelPoint._offset = offsetPoint;
    return labelPoint;
  };

  GeomLabels.prototype.transLabelPoint = function transLabelPoint(point) {
    var self = this;
    var coord = self.get('coord');
    var tmpPoint = coord.applyMatrix(point.x, point.y, 1);
    point.x = tmpPoint[0];
    point.y = tmpPoint[1];
  };

  GeomLabels.prototype.getOffsetVector = function getOffsetVector() {
    var self = this;
    var labelCfg = self.get('label');
    var offset = labelCfg.offset || 0;
    var coord = self.get('coord');
    var vector = void 0;
    if (coord.isTransposed) {
      // 如果x,y翻转，则偏移x
      vector = coord.applyMatrix(offset, 0);
    } else {
      // 否则，偏转y
      vector = coord.applyMatrix(0, offset);
    }
    return vector;
  };

  // 获取默认的偏移量


  GeomLabels.prototype.getDefaultOffset = function getDefaultOffset() {
    var self = this;
    var offset = 0; // Global.labels.offset;

    var coord = self.get('coord');
    var vector = self.getOffsetVector();
    if (coord.isTransposed) {
      // 如果x,y翻转，则偏移x
      offset = vector[0];
    } else {
      // 否则，偏转y
      offset = vector[1];
    }
    return offset;
  };

  // 获取文本的偏移位置，x,y


  GeomLabels.prototype.getLabelOffset = function getLabelOffset(point, index, total) {
    var self = this;
    var offset = self.getDefaultOffset();
    var coord = self.get('coord');
    var transposed = coord.isTransposed;
    var yField = transposed ? 'x' : 'y';
    var factor = transposed ? 1 : -1; // y 方向上越大，像素的坐标越小，所以transposed时将系数变成
    var offsetPoint = {
      x: 0,
      y: 0
    };
    if (index > 0 || total === 1) {
      // 判断是否小于0
      offsetPoint[yField] = offset * factor;
    } else {
      offsetPoint[yField] = offset * factor * -1;
    }
    return offsetPoint;
  };

  GeomLabels.prototype.getLabelAlign = function getLabelAlign(point, index, total) {
    var self = this;
    var align = 'center';
    var coord = self.get('coord');
    if (coord.isTransposed) {
      var offset = self.getDefaultOffset();
      // var vector = coord.applyMatrix(offset,0);
      if (offset < 0) {
        align = 'right';
      } else if (offset === 0) {
        align = 'center';
      } else {
        align = 'left';
      }
      if (total > 1 && index === 0) {
        if (align === 'right') {
          align = 'left';
        } else if (align === 'left') {
          align = 'right';
        }
      }
    }
    return align;
  };

  GeomLabels.prototype.showLabels = function showLabels(points) {
    var self = this;
    var items = self.getLabelsItems(points);
    var labels = self.get('label');
    items = self.adjustItems(items);
    self.resetLabels(items);
    if (labels.labelLine) {
      self.drawLines(items, labels.labelLine);
    }
  };

  GeomLabels.prototype.destroy = function destroy() {
    this.removeLabels(); // 清理文本
    _Group.prototype.destroy.call(this);
  };

  return GeomLabels;
}(Group);

Util.assign(GeomLabels.prototype, Labels.LabelsRenderer);

module.exports = GeomLabels;

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview The Label class
 * @author sima.zhang
 */
var Util = __webpack_require__(0);

var _require = __webpack_require__(2),
    DomUtil = _require.DomUtil,
    Group = _require.Group;

var Labels = function (_Group) {
  _inherits(Labels, _Group);

  function Labels() {
    _classCallCheck(this, Labels);

    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
  }

  Labels.prototype.getDefaultCfg = function getDefaultCfg() {
    return {
      zIndex: 6,
      /**
       * 显示的文本集合
       * @type {Array}
       */
      items: null,
      /**
       * 文本样式
       * @type {(Object|Function)}
       */
      textStyle: null,
      /**
       * 文本显示格式化回调函数
       * @type {Function}
       */
      formatter: null,
      /**
       * 使用 html 渲染文本
       * @type {(String|Function)}
      */
      htmlTemplate: null,
      /**
       * html 渲染时用的容器的模板，必须存在 class = "g-labels"
       * @type {String}
       */
      _containerTpl: '<div class="g-labels" style="position:absolute;top:0;left:0;"></div>',
      /**
       * html 渲染时单个 label 的模板，必须存在 class = "g-label"，如果 htmlTemplate 为字符串，则使用 htmlTemplate
       * @type {String}
       */
      _itemTpl: '<div class="g-label" style="position:absolute;">{text}</div>'
    };
  };

  Labels.prototype._renderUI = function _renderUI() {
    this._drawLabels();
  };

  Labels.prototype._drawLabels = function _drawLabels() {
    var self = this;
    var items = self.get('items');
    Util.each(items, function (item, index) {
      self._addLabel(item, index);
    });
  };

  Labels.prototype._addLabel = function _addLabel(item, index) {
    var cfg = this._getLabelCfg(item, index);
    return this._createText(cfg);
  };

  Labels.prototype._getLabelCfg = function _getLabelCfg(item, index) {
    var textStyle = this.get('textStyle') || {};
    var formatter = this.get('formatter');
    var htmlTemplate = this.get('htmlTemplate');

    if (!Util.isObject(item)) {
      var tmp = item;
      item = {};
      item.text = tmp;
    }

    if (Util.isFunction(textStyle)) {
      textStyle = textStyle(item.text, item, index);
    }

    if (formatter) {
      item.text = formatter(item.text, item, index);
    }

    if (Util.isFunction(htmlTemplate)) {
      item.text = htmlTemplate(item.text, item, index);
    }

    if (Util.isNil(item.text)) {
      item.text = '';
    }

    item.text = item.text + ''; // ? 为什么转换为字符串

    var cfg = Util.mix({}, item, textStyle, {
      x: item.x || 0,
      y: item.y || 0
    });

    return cfg;
  };

  Labels.prototype._createText = function _createText(cfg) {
    var htmlTemplate = this.get('htmlTemplate');
    var customDiv = this.get('customDiv');
    var labelShape = void 0;

    if (htmlTemplate) {
      if (!customDiv) {
        var containerTpl = this.get('_containerTpl');
        var wrapper = this.get('canvas').get('el').parentNode;
        customDiv = DomUtil.createDom(containerTpl);
        wrapper.style.position = 'relative';
        wrapper.appendChild(customDiv);
        this.set('customDiv', customDiv);
      }

      var node = this._createDom(cfg);
      customDiv.appendChild(node);
      this._setCustomPosition(cfg, node);
    } else {
      var origin = cfg.point;
      delete cfg.point; // 临时解决，否则影响动画
      labelShape = this.addShape('text', {
        attrs: cfg
      });
      labelShape.setSilent('origin', origin);
      labelShape.name = 'label'; // 用于事件标注
      this.get('appendInfo') && labelShape.setSilent('appendInfo', this.get('appendInfo'));
      return labelShape;
    }
  };

  Labels.prototype._setCustomPosition = function _setCustomPosition(cfg, htmlDom) {
    var textAlign = cfg.textAlign || 'left';
    var top = cfg.y;
    var left = cfg.x;
    var width = DomUtil.getOuterWidth(htmlDom);
    var height = DomUtil.getOuterHeight(htmlDom);

    top = top - height / 2;
    if (textAlign === 'center') {
      left = left - width / 2;
    } else if (textAlign === 'right') {
      left = left - width;
    }

    htmlDom.style.top = parseInt(top, 10) + 'px';
    htmlDom.style.left = parseInt(left, 10) + 'px';
  };

  Labels.prototype._createDom = function _createDom(cfg) {
    var itemTpl = this.get('_itemTpl');
    var htmlTemplate = this.get('htmlTemplate');

    if (Util.isString(htmlTemplate)) {
      cfg.text = Util.substitute(htmlTemplate, { text: cfg.text });
    }

    var str = Util.substitute(itemTpl, { text: cfg.text });

    return DomUtil.createDom(str);
  };

  Labels.prototype.getLabels = function getLabels() {
    var customDiv = this.get('customDiv');
    if (customDiv) {
      return Util.toArray(customDiv.childNodes);
    }
    return this.get('children');
  };

  Labels.prototype.addLabel = function addLabel(item) {
    var items = this.get('items');
    var count = items.length;
    items.push(item);
    return this._addLabel(item, count);
  };

  Labels.prototype.changeLabel = function changeLabel(oldLabel, newLabel) {
    if (!oldLabel) {
      return;
    }
    var htmlTemplate = this.get('htmlTemplate');
    var index = Util.indexOf(this.getLabels(), oldLabel);
    var cfg = this._getLabelCfg(newLabel, index);
    if (htmlTemplate) {
      var node = this._createDom(cfg);
      oldLabel.innerHTML = node.innerHTML;
      this._setCustomPosition(cfg, oldLabel);
    } else {
      oldLabel._id = newLabel._id;
      oldLabel.attr('text', cfg.text);
      if (oldLabel.attr('x') !== cfg.x || oldLabel.attr('y') !== cfg.y) {
        var rotate = oldLabel.get('attrs').rotate;
        if (rotate) {
          oldLabel.rotateAtStart(-rotate);
          oldLabel.attr(cfg);
          oldLabel.rotateAtStart(rotate);
        } else {
          oldLabel.attr(cfg);
        }
      }
    }
  };

  Labels.prototype.clear = function clear() {
    var customDiv = this.get('customDiv');
    if (customDiv) {
      customDiv.innerHTML = '';
    }
    _Group.prototype.clear.call(this);
  };

  Labels.prototype.setItems = function setItems(items) {
    this.clear();
    this.set('items', items);
    this._drawLabels();
  };

  Labels.prototype.remove = function remove() {
    var customDiv = this.get('customDiv');
    if (customDiv) {
      customDiv.parentNode.removeChild(customDiv);
    }
    _Group.prototype.remove.call(this);
  };

  return Labels;
}(Group);

module.exports = Labels;

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Labels = __webpack_require__(108);
var PathUtil = __webpack_require__(14);
var Util = __webpack_require__(0);

var PolarLabels = function (_Labels) {
  _inherits(PolarLabels, _Labels);

  function PolarLabels() {
    _classCallCheck(this, PolarLabels);

    return _possibleConstructorReturn(this, _Labels.apply(this, arguments));
  }

  PolarLabels.prototype.getPointRauis = function getPointRauis(coord, point) {
    return PathUtil.getPointRadius(coord, point);
  };

  PolarLabels.prototype.getCirclePoint = function getCirclePoint(angle, offset, point) {
    var self = this;
    var coord = self.get('coord');
    var center = coord.getCenter();
    var labelEmit = self._isEmitLabels();
    var r = self.getPointRauis(coord, point);
    if (coord.isTransposed && r > offset && !labelEmit) {
      var appendAngle = Math.asin(offset / (2 * r));
      angle = angle + appendAngle * 2;
    } else {
      r = r + offset;
    }

    return {
      x: center.x + r * Math.cos(angle),
      y: center.y + r * Math.sin(angle),
      angle: angle,
      r: r
    };
  };

  PolarLabels.prototype.getArcPoint = function getArcPoint(point, index) {
    var self = this;

    var outerPoint = void 0; // 圆弧上的中点
    // var coord = self.get('coord');
    index = index || 0;
    if (Util.isArray(point.x) || Util.isArray(point.y)) {
      outerPoint = {
        x: Util.isArray(point.x) ? point.x[index] : point.x,
        y: Util.isArray(point.y) ? point.y[index] : point.y
      };
    } else {
      outerPoint = point;
    }
    self.transLabelPoint(outerPoint);
    return outerPoint;
  };

  // 获取点所在的角度


  PolarLabels.prototype.getPointAngle = function getPointAngle(point) {
    var self = this;
    var coord = self.get('coord');
    return PathUtil.getPointAngle(coord, point);
  };

  // 获取中心的位置


  PolarLabels.prototype.getMiddlePoint = function getMiddlePoint(points) {
    var self = this;
    var coord = self.get('coord');
    var count = points.length;
    var middlePoint = {
      x: 0,
      y: 0
    };
    Util.each(points, function (point) {
      middlePoint.x += point.x;
      middlePoint.y += point.y;
    });
    middlePoint.x /= count;
    middlePoint.y /= count;

    middlePoint = coord.convert(middlePoint);
    return middlePoint;
  };

  // 是否居中


  PolarLabels.prototype._isToMiddle = function _isToMiddle(point) {
    return point.x.length > 2;
  };

  /**
   * @protected
   * 获取文本的位置信息
   * @param {Array} labels labels
   * @param {Object} point point
   * @param {Number} index index
   * @return {Object} point
   */


  PolarLabels.prototype.getLabelPoint = function getLabelPoint(labels, point, index) {
    var self = this;
    var text = labels[index];
    var factor = 1;
    var arcPoint = void 0;
    if (self._isToMiddle(point)) {
      arcPoint = self.getMiddlePoint(point.points);
    } else {
      if (labels.length === 1 && index === 0) {
        index = 1;
      } else if (index === 0) {
        factor = -1;
      }
      arcPoint = self.getArcPoint(point, index);
    }

    var offset = self.getDefaultOffset();
    offset = offset * factor;
    var middleAngle = self.getPointAngle(arcPoint);
    var labelPoint = self.getCirclePoint(middleAngle, offset, arcPoint);
    labelPoint.text = text;
    labelPoint.angle = middleAngle;
    labelPoint.color = point.color;

    labelPoint.rotate = self.getLabelRotate(middleAngle, offset, point);
    return labelPoint;
  };

  PolarLabels.prototype._isEmitLabels = function _isEmitLabels() {
    var labels = this.get('label');
    return labels.labelEmit;
  };

  /**
   * @protected
   * 获取文本旋转的方向
   * @param {Number} angle angle
   * @return {Number} angle
   */


  PolarLabels.prototype.getLabelRotate = function getLabelRotate(angle) {
    var self = this;
    var rotate = void 0;
    rotate = angle * 180 / Math.PI;
    rotate += 90;

    if (self._isEmitLabels()) {
      rotate -= 90;
    }
    if (rotate) {
      if (rotate > 90) {
        rotate = rotate - 180;
      } else if (rotate < -90) {
        rotate = rotate + 180;
      }
    }
    return rotate / 180 * Math.PI;
  };

  // override


  PolarLabels.prototype.getLabelAlign = function getLabelAlign(point) {
    var self = this;
    var coord = self.get('coord');
    var align = void 0;
    if (self._isEmitLabels()) {
      if (point.angle <= Math.PI / 2 && point.angle > -Math.PI / 2) {
        align = 'left';
      } else {
        align = 'right';
      }
    } else if (!coord.isTransposed) {
      align = 'center';
    } else {
      var center = coord.getCenter();
      var offset = self.getDefaultOffset();
      if (Math.abs(point.x - center.x) < 1) {
        align = 'center';
      } else if (point.angle > Math.PI || point.angle <= 0) {
        if (offset > 0) {
          align = 'left';
        } else {
          align = 'right';
        }
      } else {
        if (offset > 0) {
          align = 'right';
        } else {
          align = 'left';
        }
      }
    }
    return align;
  };

  return PolarLabels;
}(Labels);

module.exports = PolarLabels;

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview 路径图，无序的线图
 * @author dxq613@gmail.com
 */

var GeomBase = __webpack_require__(9);
var SplitMixin = __webpack_require__(112);
var Util = __webpack_require__(0);

var Path = function (_GeomBase) {
  _inherits(Path, _GeomBase);

  /**
   * 获取默认的配置属性
   * @protected
   * @return {Object} 默认属性
   */
  Path.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
    cfg.type = 'path';
    cfg.shapeType = 'line';
    return cfg;
  };

  function Path(cfg) {
    _classCallCheck(this, Path);

    var _this = _possibleConstructorReturn(this, _GeomBase.call(this, cfg));

    Util.assign(_this, SplitMixin);
    return _this;
  }

  Path.prototype.getDrawCfg = function getDrawCfg(obj) {
    var cfg = _GeomBase.prototype.getDrawCfg.call(this, obj);
    cfg.isStack = this.hasStack();
    return cfg;
  };

  Path.prototype.draw = function draw(data, container, shapeFactory, index) {
    var self = this;
    var splitArray = this.splitData(data);

    var cfg = this.getDrawCfg(data[0]);
    cfg.origin = data; // path,line 等图的origin 是整个序列
    Util.each(splitArray, function (subData, splitedIndex) {
      if (!Util.isEmpty(subData)) {
        cfg.splitedIndex = splitedIndex; // 传入分割片段索引 用于生成id
        cfg.points = subData;
        var geomShape = shapeFactory.drawShape(cfg.shape, cfg, container);
        geomShape.setSilent('index', index + splitedIndex);
        geomShape.setSilent('coord', self.get('coord'));

        if (self.get('animate') && self.get('animateCfg')) {
          geomShape.setSilent('animateCfg', self.get('animateCfg'));
        }
      }
    });
  };

  return Path;
}(GeomBase);

module.exports = Path;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview 分割数据用于处理存在 null 值的折线图、区域图
 * @author dxq613@gmail.com
 */

var Util = __webpack_require__(0);

module.exports = {
  splitData: function splitData(data) {
    if (!data.length) return [];
    var arr = [];
    var tmp = [];
    var yScale = this.getYScale();
    var yDim = yScale.field;
    var yValue = void 0;
    Util.each(data, function (obj) {
      yValue = obj._origin ? obj._origin[yDim] : obj[yDim];
      if (Util.isArray(yValue) && Util.isNil(yValue[0]) || Util.isNil(yValue)) {
        if (tmp.length) {
          arr.push(tmp);
          tmp = [];
        }
      } else {
        tmp.push(obj);
      }
    });
    if (tmp.length) {
      arr.push(tmp);
    }
    return arr;
  }
};

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview 需要计算所占x轴上的宽度的辅助类
 * @author sima.zhang1990@gmail.com
 * @author dxq613@gmail.com
 */

var Global = __webpack_require__(1);
var Util = __webpack_require__(0);

// 已经排序后的数据查找距离最小的
function findMinDistance(arr, scale) {
  var count = arr.length;
  // 日期类型的 values 经常上文本类型，所以需要转换一下
  if (Util.isString(arr[0])) {
    arr = arr.map(function (v) {
      return scale.translate(v);
    });
  }
  var distance = arr[1] - arr[0];
  for (var i = 2; i < count; i++) {
    var tmp = arr[i] - arr[i - 1];
    if (distance > tmp) {
      distance = tmp;
    }
  }
  return distance;
}

var SizeMixin = {
  getDefalutSize: function getDefalutSize() {
    var defaultSize = this.get('defaultSize');
    if (!defaultSize) {
      var coord = this.get('coord');
      var xScale = this.getXScale();
      var xValues = xScale.values;
      var dataArray = this.get('dataArray');
      var count = void 0;
      if (xScale.isLinear && xValues.length > 1) {
        xValues.sort();
        var interval = findMinDistance(xValues, xScale);
        count = (xScale.max - xScale.min) / interval;
        if (xValues.length > count) {
          count = xValues.length;
        }
      } else {
        count = xValues.length;
      }
      var range = xScale.range;
      var normalizeSize = 1 / count;
      var widthRatio = 1;

      if (this.isInCircle()) {
        if (coord.isTransposed && count > 1) {
          // 极坐标下多层环图
          widthRatio = Global.widthRatio.multiplePie;
        } else {
          widthRatio = Global.widthRatio.rose;
        }
        /* if (dataArray.length > 1) {
          normalizeSize *= (range[1] - range[0]);
        } */
      } else {
        if (xScale.isLinear) {
          normalizeSize *= range[1] - range[0];
        }
        widthRatio = Global.widthRatio.column; // 柱状图要除以2
      }
      normalizeSize *= widthRatio;
      if (this.hasAdjust('dodge')) {
        var dodgeCount = this._getDodgeCount(dataArray);
        normalizeSize = normalizeSize / dodgeCount;
      }
      defaultSize = normalizeSize;
      this.set('defaultSize', defaultSize);
    }
    return defaultSize;
  },
  _getDodgeCount: function _getDodgeCount(dataArray) {
    var adjusts = this.get('adjusts');
    var dodgeBy = void 0;
    var count = dataArray.length;
    Util.each(adjusts, function (adjust) {
      if (adjust.type === 'dodge') {
        dodgeBy = adjust.dodgeBy;
      }
    });

    if (dodgeBy) {
      var mergeData = Util.Array.merge(dataArray);
      var values = Util.Array.values(mergeData, dodgeBy);
      count = values.length;
    }

    return count;
  },
  getDimWidth: function getDimWidth(dimName) {
    var coord = this.get('coord');
    var start = coord.convertPoint({
      x: 0,
      y: 0
    });
    var end = coord.convertPoint({
      x: dimName === 'x' ? 1 : 0,
      y: dimName === 'x' ? 0 : 1
    });
    var width = 0;
    if (start && end) {
      width = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
    }
    return width;
  },
  _getWidth: function _getWidth() {
    var coord = this.get('coord');
    var width = void 0; // x轴的长度
    if (this.isInCircle() && !coord.isTransposed) {
      // 极坐标下 width 为弧长
      width = (coord.endAngle - coord.startAngle) * coord.radius;
    } else {
      width = this.getDimWidth('x'); // 不需要判断transpose
    }
    return width;
  },
  _toNormalizedSize: function _toNormalizedSize(size) {
    var width = this._getWidth();
    return size / width;
  },
  _toCoordSize: function _toCoordSize(normalizeSize) {
    var width = this._getWidth();
    return width * normalizeSize;
  },
  getNormalizedSize: function getNormalizedSize(obj) {
    var size = this.getAttrValue('size', obj);
    if (Util.isNil(size)) {
      size = this.getDefalutSize();
    } else {
      size = this._toNormalizedSize(size);
    }
    return size;
  },
  getSize: function getSize(obj) {
    var size = this.getAttrValue('size', obj);
    if (Util.isNil(size)) {
      var normalizeSize = this.getDefalutSize();
      size = this._toCoordSize(normalizeSize);
    }
    return size;
  }
};

module.exports = SizeMixin;

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  Scale: __webpack_require__(320),
  Coord: __webpack_require__(328),
  Axis: __webpack_require__(333),
  Guide: __webpack_require__(354),
  Legend: __webpack_require__(355),
  Tooltip: __webpack_require__(356),
  Event: __webpack_require__(357)
};

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview Scale entry, used to reference all the scales
 * @author dxq613@gmail.com
 */

var Util = __webpack_require__(0);
var Base = __webpack_require__(41);
Base.Linear = __webpack_require__(42);
Base.Identity = __webpack_require__(322);
Base.Cat = __webpack_require__(117);
Base.Time = __webpack_require__(323);
Base.TimeCat = __webpack_require__(325);
Base.Log = __webpack_require__(326);
Base.Pow = __webpack_require__(327);

var _loop = function _loop(k) {
  if (Base.hasOwnProperty(k)) {
    var methodName = Util.lowerFirst(k);
    Base[methodName] = function (cfg) {
      return new Base[k](cfg);
    };
  }
};

for (var k in Base) {
  _loop(k);
}

var CAT_ARR = ['cat', 'timeCat'];

Base.isCategory = function (type) {
  return CAT_ARR.indexOf(type) >= 0;
};

module.exports = Base;

/***/ }),
/* 116 */
/***/ (function(module, exports) {

/**
 * @fileOverview 计算方法
 * @author dxq613@gmail.com
 */

// 获取系数
function getFactor(v) {
  var factor = 1;
  if (v < 1) {
    var count = 0;
    while (v < 1) {
      factor = factor / 10;
      v = v * 10;
      count++;
    }
    // 浮点数计算出现问题
    if (factor.toString().length > 20) {
      factor = parseFloat(factor.toFixed(count));
    }
  } else {
    while (v > 10) {
      factor = factor * 10;
      v = v / 10;
    }
  }

  return factor;
}

// 取小于当前值的
function arrayFloor(values, value) {
  var length = values.length;
  if (length === 0) {
    return NaN;
  }

  var pre = values[0];

  if (value < values[0]) {
    return NaN;
  }

  if (value >= values[length - 1]) {
    return values[length - 1];
  }
  for (var i = 1; i < values.length; i++) {
    if (value < values[i]) {
      break;
    }
    pre = values[i];
  }

  return pre;
}

// 大于当前值的第一个
function arrayCeiling(values, value) {
  var length = values.length;
  if (length === 0) {
    return NaN;
  }
  // var pre = values[0];
  var rst = void 0;
  if (value > values[length - 1]) {
    return NaN;
  }
  if (value < values[0]) {
    return values[0];
  }

  for (var i = 1; i < values.length; i++) {
    if (value <= values[i]) {
      rst = values[i];
      break;
    }
  }

  return rst;
}

var Util = {
  // 获取逼近的数值
  snapFactorTo: function snapFactorTo(v, arr, snapType) {
    // 假设 v = -512,isFloor = true
    if (isNaN(v)) {
      return NaN;
    }
    var factor = 1; // 计算系数
    if (v !== 0) {
      if (v < 0) {
        factor = -1;
      }
      v = v * factor; // v = 512
      var tmpFactor = getFactor(v);
      factor = factor * tmpFactor; // factor = -100

      v = v / tmpFactor; // v = 5.12
    }
    if (snapType === 'floor') {
      v = Util.snapFloor(arr, v); // v = 5
    } else if (snapType === 'ceil') {
      v = Util.snapCeiling(arr, v); // v = 6
    } else {
      v = Util.snapTo(arr, v); // 四舍五入 5
    }
    var rst = v * factor;
    // 如果出现浮点数计算问题，需要处理一下
    if (Math.abs(factor) < 1 && rst.toString().length > 20) {
      var decimalVal = parseInt(1 / factor);
      var symbol = factor > 0 ? 1 : -1;
      rst = v / decimalVal * symbol;
    }
    return rst;
  },

  // 获取逼近的倍数
  snapMultiple: function snapMultiple(v, base, snapType) {
    var div = void 0;
    if (snapType === 'ceil') {
      div = Math.ceil(v / base);
    } else if (snapType === 'floor') {
      div = Math.floor(v / base);
    } else {
      div = Math.round(v / base);
    }
    return div * base;
  },

  /**
   * 获取逼近的值，用于对齐数据
   * @param  {Array} values   数据集合
   * @param  {Number} value   数值
   * @return {Number} 逼近的值
   */
  snapTo: function snapTo(values, value) {
    // 这里假定values是升序排列
    var floorVal = arrayFloor(values, value);
    var ceilingVal = arrayCeiling(values, value);
    if (isNaN(floorVal) || isNaN(ceilingVal)) {
      if (values[0] >= value) {
        return values[0];
      }
      var last = values[values.length - 1];
      if (last <= value) {
        return last;
      }
    }
    if (Math.abs(value - floorVal) < Math.abs(ceilingVal - value)) {
      return floorVal;
    }
    return ceilingVal;
  },

  /**
   * 获取逼近的最小值，用于对齐数据
   * @param  {Array} values   数据集合
   * @param  {Number} value   数值
   * @return {Number} 逼近的最小值
   */
  snapFloor: function snapFloor(values, value) {
    // 这里假定values是升序排列
    return arrayFloor(values, value);
  },

  /**
   * 获取逼近的最大值，用于对齐数据
   * @param  {Array} values   数据集合
   * @param  {Number} value   数值
   * @return {Number} 逼近的最大值
   */
  snapCeiling: function snapCeiling(values, value) {
    // 这里假定values是升序排列
    return arrayCeiling(values, value);
  }
};

module.exports = Util;

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the scale function to process the categories
 * @author dxq613@gmail.com
 */

var Base = __webpack_require__(41);
var Util = __webpack_require__(0);
var catAuto = __webpack_require__(118);

/**
 * 度量的构造函数
 * @class Scale.Category
 */

var Category = function (_Base) {
  _inherits(Category, _Base);

  function Category() {
    _classCallCheck(this, Category);

    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
  }

  /**
   * @override
   */
  Category.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      /**
       * type of the scale
       * @type {String}
       */
      type: 'cat',

      /**
       * 自动生成标记时的个数
       * @type {Number}
       * @default null
       */
      tickCount: null,

      /**
       * 是否分类度量
       * @type {Boolean}
       */
      isCategory: true
    });
  };

  /**
   * @override
   */


  Category.prototype.init = function init() {
    var self = this;
    var values = self.values;
    var tickCount = self.tickCount;

    Util.each(values, function (v, i) {
      values[i] = v.toString();
    });
    if (!self.ticks) {
      var ticks = values;
      if (tickCount) {
        var temp = catAuto({
          maxCount: tickCount,
          data: values
        });
        ticks = temp.ticks;
      }
      this.ticks = ticks;
    }
  };

  /**
   * @override
   */


  Category.prototype.getText = function getText(value) {

    if (this.values.indexOf(value) === -1 && Util.isNumber(value)) {
      value = this.values[Math.round(value)];
    }

    return _Base.prototype.getText.call(this, value);
  };

  /**
   * @override
   */


  Category.prototype.translate = function translate(value) {
    var index = this.values.indexOf(value);
    if (index === -1 && Util.isNumber(value)) {
      index = value;
    } else if (index === -1) {
      index = NaN;
    }
    return index;
  };
  /**
   * @override
   */


  Category.prototype.scale = function scale(value) {
    var rangeMin = this.rangeMin();
    var rangeMax = this.rangeMax();
    var percent = void 0;

    if (Util.isString(value) || this.values.indexOf(value) !== -1) {
      value = this.translate(value);
    }
    if (this.values.length > 1) {
      percent = value / (this.values.length - 1);
    } else {
      percent = value;
    }
    return rangeMin + percent * (rangeMax - rangeMin);
  };

  /**
   * @override
   */


  Category.prototype.invert = function invert(value) {
    if (Util.isString(value)) {
      // 如果已经是字符串
      return value;
    }
    var min = this.rangeMin();
    var max = this.rangeMax();

    // 归一到 范围内
    if (value < min) {
      value = min;
    }
    if (value > max) {
      value = max;
    }
    var percent = (value - min) / (max - min);
    var index = Math.round(percent * (this.values.length - 1)) % this.values.length;
    index = index || 0;
    return this.values[index];
  };

  return Category;
}(Base);

module.exports = Category;

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview 计算分类的的坐标点
 * @author dxq613@gmail.com
 */

var Util = __webpack_require__(0);
var MAX_COUNT = 8;

function getSimpleArray(data) {
  var arr = [];
  Util.each(data, function (sub) {
    if (Util.isArray(sub)) {
      arr = arr.concat(sub);
    } else {
      arr.push(sub);
    }
  });
  return arr;
}

module.exports = function (info) {
  var rst = {};
  var ticks = [];
  var tickCount = info.maxCount || MAX_COUNT;

  var categories = getSimpleArray(info.data);
  if (categories.length <= tickCount + tickCount / 2) {
    ticks = [].concat(categories);
  } else {
    var length = categories.length;
    var step = parseInt(length / (tickCount - 1), 10);

    var groups = categories.map(function (e, i) {
      return i % step === 0 ? categories.slice(i, i + step) : null;
    }).filter(function (e) {
      return e;
    });

    ticks.push(categories[0]);
    for (var i = 1; i < groups.length && i < tickCount - 1; i++) {
      ticks.push(groups[i][0]);
    }

    ticks.push(categories[length - 1]);
  }

  rst.categories = categories;
  rst.ticks = ticks;
  return rst;
};

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;(function (main) {
  'use strict';

  /**
   * Parse or format dates
   * @class fecha
   */

  var fecha = {};
  var token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g;
  var twoDigits = /\d\d?/;
  var threeDigits = /\d{3}/;
  var fourDigits = /\d{4}/;
  var word = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
  var literal = /\[([^]*?)\]/gm;
  var noop = function noop() {};

  function shorten(arr, sLen) {
    var newArr = [];
    for (var i = 0, len = arr.length; i < len; i++) {
      newArr.push(arr[i].substr(0, sLen));
    }
    return newArr;
  }

  function monthUpdate(arrName) {
    return function (d, v, i18n) {
      var index = i18n[arrName].indexOf(v.charAt(0).toUpperCase() + v.substr(1).toLowerCase());
      if (~index) {
        d.month = index;
      }
    };
  }

  function pad(val, len) {
    val = String(val);
    len = len || 2;
    while (val.length < len) {
      val = '0' + val;
    }
    return val;
  }

  var dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  var monthNamesShort = shorten(monthNames, 3);
  var dayNamesShort = shorten(dayNames, 3);
  fecha.i18n = {
    dayNamesShort: dayNamesShort,
    dayNames: dayNames,
    monthNamesShort: monthNamesShort,
    monthNames: monthNames,
    amPm: ['am', 'pm'],
    DoFn: function DoFn(D) {
      return D + ['th', 'st', 'nd', 'rd'][D % 10 > 3 ? 0 : (D - D % 10 !== 10) * D % 10];
    }
  };

  var formatFlags = {
    D: function D(dateObj) {
      return dateObj.getDate();
    },
    DD: function DD(dateObj) {
      return pad(dateObj.getDate());
    },
    Do: function Do(dateObj, i18n) {
      return i18n.DoFn(dateObj.getDate());
    },
    d: function d(dateObj) {
      return dateObj.getDay();
    },
    dd: function dd(dateObj) {
      return pad(dateObj.getDay());
    },
    ddd: function ddd(dateObj, i18n) {
      return i18n.dayNamesShort[dateObj.getDay()];
    },
    dddd: function dddd(dateObj, i18n) {
      return i18n.dayNames[dateObj.getDay()];
    },
    M: function M(dateObj) {
      return dateObj.getMonth() + 1;
    },
    MM: function MM(dateObj) {
      return pad(dateObj.getMonth() + 1);
    },
    MMM: function MMM(dateObj, i18n) {
      return i18n.monthNamesShort[dateObj.getMonth()];
    },
    MMMM: function MMMM(dateObj, i18n) {
      return i18n.monthNames[dateObj.getMonth()];
    },
    YY: function YY(dateObj) {
      return String(dateObj.getFullYear()).substr(2);
    },
    YYYY: function YYYY(dateObj) {
      return dateObj.getFullYear();
    },
    h: function h(dateObj) {
      return dateObj.getHours() % 12 || 12;
    },
    hh: function hh(dateObj) {
      return pad(dateObj.getHours() % 12 || 12);
    },
    H: function H(dateObj) {
      return dateObj.getHours();
    },
    HH: function HH(dateObj) {
      return pad(dateObj.getHours());
    },
    m: function m(dateObj) {
      return dateObj.getMinutes();
    },
    mm: function mm(dateObj) {
      return pad(dateObj.getMinutes());
    },
    s: function s(dateObj) {
      return dateObj.getSeconds();
    },
    ss: function ss(dateObj) {
      return pad(dateObj.getSeconds());
    },
    S: function S(dateObj) {
      return Math.round(dateObj.getMilliseconds() / 100);
    },
    SS: function SS(dateObj) {
      return pad(Math.round(dateObj.getMilliseconds() / 10), 2);
    },
    SSS: function SSS(dateObj) {
      return pad(dateObj.getMilliseconds(), 3);
    },
    a: function a(dateObj, i18n) {
      return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];
    },
    A: function A(dateObj, i18n) {
      return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();
    },
    ZZ: function ZZ(dateObj) {
      var o = dateObj.getTimezoneOffset();
      return (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4);
    }
  };

  var parseFlags = {
    D: [twoDigits, function (d, v) {
      d.day = v;
    }],
    Do: [new RegExp(twoDigits.source + word.source), function (d, v) {
      d.day = parseInt(v, 10);
    }],
    M: [twoDigits, function (d, v) {
      d.month = v - 1;
    }],
    YY: [twoDigits, function (d, v) {
      var da = new Date(),
          cent = +('' + da.getFullYear()).substr(0, 2);
      d.year = '' + (v > 68 ? cent - 1 : cent) + v;
    }],
    h: [twoDigits, function (d, v) {
      d.hour = v;
    }],
    m: [twoDigits, function (d, v) {
      d.minute = v;
    }],
    s: [twoDigits, function (d, v) {
      d.second = v;
    }],
    YYYY: [fourDigits, function (d, v) {
      d.year = v;
    }],
    S: [/\d/, function (d, v) {
      d.millisecond = v * 100;
    }],
    SS: [/\d{2}/, function (d, v) {
      d.millisecond = v * 10;
    }],
    SSS: [threeDigits, function (d, v) {
      d.millisecond = v;
    }],
    d: [twoDigits, noop],
    ddd: [word, noop],
    MMM: [word, monthUpdate('monthNamesShort')],
    MMMM: [word, monthUpdate('monthNames')],
    a: [word, function (d, v, i18n) {
      var val = v.toLowerCase();
      if (val === i18n.amPm[0]) {
        d.isPm = false;
      } else if (val === i18n.amPm[1]) {
        d.isPm = true;
      }
    }],
    ZZ: [/([\+\-]\d\d:?\d\d|Z)/, function (d, v) {
      if (v === 'Z') v = '+00:00';
      var parts = (v + '').match(/([\+\-]|\d\d)/gi),
          minutes;

      if (parts) {
        minutes = +(parts[1] * 60) + parseInt(parts[2], 10);
        d.timezoneOffset = parts[0] === '+' ? minutes : -minutes;
      }
    }]
  };
  parseFlags.dd = parseFlags.d;
  parseFlags.dddd = parseFlags.ddd;
  parseFlags.DD = parseFlags.D;
  parseFlags.mm = parseFlags.m;
  parseFlags.hh = parseFlags.H = parseFlags.HH = parseFlags.h;
  parseFlags.MM = parseFlags.M;
  parseFlags.ss = parseFlags.s;
  parseFlags.A = parseFlags.a;

  // Some common format strings
  fecha.masks = {
    default: 'ddd MMM DD YYYY HH:mm:ss',
    shortDate: 'M/D/YY',
    mediumDate: 'MMM D, YYYY',
    longDate: 'MMMM D, YYYY',
    fullDate: 'dddd, MMMM D, YYYY',
    shortTime: 'HH:mm',
    mediumTime: 'HH:mm:ss',
    longTime: 'HH:mm:ss.SSS'
  };

  /***
   * Format a date
   * @method format
   * @param {Date|number} dateObj
   * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'
   */
  fecha.format = function (dateObj, mask, i18nSettings) {
    var i18n = i18nSettings || fecha.i18n;

    if (typeof dateObj === 'number') {
      dateObj = new Date(dateObj);
    }

    if (Object.prototype.toString.call(dateObj) !== '[object Date]' || isNaN(dateObj.getTime())) {
      throw new Error('Invalid Date in fecha.format');
    }

    mask = fecha.masks[mask] || mask || fecha.masks['default'];

    var literals = [];

    // Make literals inactive by replacing them with ??
    mask = mask.replace(literal, function ($0, $1) {
      literals.push($1);
      return '??';
    });
    // Apply formatting rules
    mask = mask.replace(token, function ($0) {
      return $0 in formatFlags ? formatFlags[$0](dateObj, i18n) : $0.slice(1, $0.length - 1);
    });
    // Inline literal values back into the formatted value
    return mask.replace(/\?\?/g, function () {
      return literals.shift();
    });
  };

  /**
   * Parse a date string into an object, changes - into /
   * @method parse
   * @param {string} dateStr Date string
   * @param {string} format Date parse format
   * @returns {Date|boolean}
   */
  fecha.parse = function (dateStr, format, i18nSettings) {
    var i18n = i18nSettings || fecha.i18n;

    if (typeof format !== 'string') {
      throw new Error('Invalid format in fecha.parse');
    }

    format = fecha.masks[format] || format;

    // Avoid regular expression denial of service, fail early for really long strings
    // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS
    if (dateStr.length > 1000) {
      return false;
    }

    var isValid = true;
    var dateInfo = {};
    format.replace(token, function ($0) {
      if (parseFlags[$0]) {
        var info = parseFlags[$0];
        var index = dateStr.search(info[0]);
        if (!~index) {
          isValid = false;
        } else {
          dateStr.replace(info[0], function (result) {
            info[1](dateInfo, result, i18n);
            dateStr = dateStr.substr(index + result.length);
            return result;
          });
        }
      }

      return parseFlags[$0] ? '' : $0.slice(1, $0.length - 1);
    });

    if (!isValid) {
      return false;
    }

    var today = new Date();
    if (dateInfo.isPm === true && dateInfo.hour != null && +dateInfo.hour !== 12) {
      dateInfo.hour = +dateInfo.hour + 12;
    } else if (dateInfo.isPm === false && +dateInfo.hour === 12) {
      dateInfo.hour = 0;
    }

    var date;
    if (dateInfo.timezoneOffset != null) {
      dateInfo.minute = +(dateInfo.minute || 0) - +dateInfo.timezoneOffset;
      date = new Date(Date.UTC(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0));
    } else {
      date = new Date(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0);
    }
    return date;
  };

  /* istanbul ignore next */
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = fecha;
  } else if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return fecha;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {
    main.fecha = fecha;
  }
})(this);

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview 提取公共代码到util方法
 * @author dxq613@gmail.com
 */

var Util = __webpack_require__(0);

module.exports = {
  toTimeStamp: function toTimeStamp(value) {
    if (Util.isString(value)) {
      if (value.indexOf('T') > 0) {
        value = new Date(value).getTime();
      } else {
        value = new Date(value.replace(/-/ig, '/')).getTime();
      }
    }
    if (Util.isDate(value)) {
      value = value.getTime();
    }
    return value;
  }
};

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview The base class of legend
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Global = __webpack_require__(1);

var _require = __webpack_require__(2),
    Group = _require.Group;

var Base = function (_Group) {
  _inherits(Base, _Group);

  function Base() {
    _classCallCheck(this, Base);

    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
  }

  Base.prototype.getDefaultCfg = function getDefaultCfg() {
    return {
      /**
       * 图例标题配置
       * @type {Object}
       */
      title: {
        fill: '#333',
        textBaseline: 'middle'
      },
      /**
       * 图例项文本格式化
       * @type {Function}
       */
      itemFormatter: null,
      /**
       * 是否使用 html 进行渲染
       * @type {Boolean}
       */
      useHtml: false,
      /**
       * 图例是否绘制在绘图区域内
       * @type {Boolean}
       */
      inPlot: false,
      /**
       * 鼠标 hover 到图例上的默认交互是否开启
       * @type {Boolean}
       */
      hoverable: true
    };
  };

  Base.prototype._beforeRenderUI = function _beforeRenderUI() {
    this.set('itemsGroup', this.addGroup());
  };

  Base.prototype._renderUI = function _renderUI() {
    this._renderTitle();
  };

  Base.prototype._renderTitle = function _renderTitle() {
    var title = this.get('title');
    if (title && title.text) {
      var titleShape = this.addShape('text', {
        attrs: Util.mix({
          x: 0,
          y: 0,
          fill: '#333', // 默认样式
          textBaseline: 'middle',
          fontFamily: Global.fontFamily
        }, title)
      });
      titleShape.name = 'legend-title';
      this.get('appendInfo') && titleShape.setSilent('appendInfo', this.get('appendInfo'));
      this.set('titleShape', titleShape);
    }
  };

  Base.prototype.getCheckedCount = function getCheckedCount() {
    var itemsGroup = this.get('itemsGroup');
    var items = itemsGroup.get('children');
    var checkedArr = Util.filter(items, function (item) {
      return item.get('checked');
    });
    return checkedArr.length;
  };

  Base.prototype.setItems = function setItems(items) {
    this.set('items', items);
    this.clearItems();
    this._renderUI();
  };

  Base.prototype.addItem = function addItem(item) {
    var items = this.get('items');
    items.push(item);
    this.clearItems();
    this._renderUI();
  };

  Base.prototype.clearItems = function clearItems() {
    var itemsGroup = this.get('itemsGroup');
    itemsGroup.clear();
  };

  Base.prototype.getWidth = function getWidth() {
    var bbox = this.getBBox();
    return bbox.width;
  };

  Base.prototype.getHeight = function getHeight() {
    var bbox = this.getBBox();
    return bbox.height;
  };

  return Base;
}(Group);

module.exports = Base;

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview The base class of continuous legend
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Global = __webpack_require__(1);
var Base = __webpack_require__(121);

var _require = __webpack_require__(2),
    Event = _require.Event,
    Group = _require.Group;

var Slider = __webpack_require__(350);
var TRIGGER_WIDTH = 12;

var Continuous = function (_Base) {
  _inherits(Continuous, _Base);

  function Continuous() {
    _classCallCheck(this, Continuous);

    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
  }

  Continuous.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      /**
       * 类型
       * @type {String}
       */
      type: 'continuous-legend',
      /**
       * 子项
       * @type {Array}
       */
      items: null,
      /**
       * 布局方式
       * horizontal 水平
       * vertical 垂直
       * @type {String}
       */
      layout: 'vertical',
      /**
       * 宽度
       * @type {Number}
       */
      width: 156,
      /**
       * 高度
       * @type {Number}
       */
      height: 20,
      /**
       * 标题偏移量
       * @type {Number}
       */
      titleGap: 22,
      /**
       * 默认文本图形属性
       * @type {ATTRS}
       */
      textStyle: {
        fill: '#333',
        textAlign: 'center',
        textBaseline: 'middle',
        fontFamily: Global.fontFamily
      },
      /**
       * 连续图例是否可滑动
       * @type {Boolean}
       */
      slidable: true,
      /**
       * 范围内颜色
       * @type {ATTRS}
       */
      inRange: {
        fill: '#4E7CCC'
      },
      _range: [0, 100],
      /**
       * 中滑块属性
       * @type {ATTRS}
       */
      middleAttr: {
        fill: '#fff',
        fillOpacity: 0
      },
      outRangeStyle: {
        fill: '#D9D9D9'
      },
      labelOffset: 10 // ToDO: 文本同渐变背景的距离
    });
  };

  Continuous.prototype._calStartPoint = function _calStartPoint() {
    var start = {
      x: 0,
      y: this.get('titleGap') - TRIGGER_WIDTH
    };
    var titleShape = this.get('titleShape');
    if (titleShape) {
      var titleBox = titleShape.getBBox();
      start.y += titleBox.height;
    }

    return start;
  };

  Continuous.prototype._beforeRenderUI = function _beforeRenderUI() {
    var items = this.get('items');
    if (!Util.isArray(items) || Util.isEmpty(items)) {
      return;
    }

    _Base.prototype._beforeRenderUI.call(this);
    this.set('firstItem', items[0]);
    this.set('lastItem', items[items.length - 1]);
  };

  Continuous.prototype._formatItemValue = function _formatItemValue(value) {
    var formatter = this.get('itemFormatter');
    if (formatter) {
      value = formatter.call(this, value);
    }
    return value;
  };

  Continuous.prototype._renderUI = function _renderUI() {
    _Base.prototype._renderUI.call(this);

    if (this.get('slidable')) {
      this._renderSlider();
    } else {
      this._renderBackground();
    }
  };

  Continuous.prototype._renderSlider = function _renderSlider() {
    var minHandleElement = new Group();
    var maxHandleElement = new Group();
    var backgroundElement = new Group();
    var start = this._calStartPoint();
    var slider = this.addGroup(Slider, {
      minHandleElement: minHandleElement,
      maxHandleElement: maxHandleElement,
      backgroundElement: backgroundElement,
      middleAttr: this.get('middleAttr'),
      layout: this.get('layout'),
      range: this.get('_range'),
      width: this.get('width'),
      height: this.get('height')
    });
    slider.translate(start.x, start.y);
    this.set('slider', slider);

    var shape = this._renderSliderShape();
    shape.attr('clip', slider.get('middleHandleElement'));
    this._renderTrigger();
  };

  Continuous.prototype._addBackground = function _addBackground(parent, name, attrs) {
    parent.addShape(name, {
      attrs: Util.mix({}, attrs, this.get('outRangeStyle'))
    });
    return parent.addShape(name, {
      attrs: attrs
    });
  };

  Continuous.prototype._renderTrigger = function _renderTrigger() {
    var min = this.get('firstItem');
    var max = this.get('lastItem');
    var layout = this.get('layout');
    var textStyle = this.get('textStyle');
    var inRange = this.get('inRange');
    var attrType = this.get('type');
    var minBlockAttr = void 0;
    var maxBlockAttr = void 0;

    if (attrType === 'color-legend') {
      minBlockAttr = {
        fill: min.attrValue
      };
      maxBlockAttr = {
        fill: max.attrValue
      };
    } else {
      minBlockAttr = Util.mix({}, inRange);
      maxBlockAttr = Util.mix({}, inRange);
    }
    var minTextAttr = Util.mix({
      text: this._formatItemValue(min.value) + ''
    }, textStyle);
    var maxTextAttr = Util.mix({
      text: this._formatItemValue(max.value) + ''
    }, textStyle);
    if (layout === 'vertical') {
      this._addVerticalTrigger('min', minBlockAttr, minTextAttr);
      this._addVerticalTrigger('max', maxBlockAttr, maxTextAttr);
    } else {
      this._addHorizontalTrigger('min', minBlockAttr, minTextAttr);
      this._addHorizontalTrigger('max', maxBlockAttr, maxTextAttr);
    }
  };

  Continuous.prototype._addVerticalTrigger = function _addVerticalTrigger(type, blockAttr, textAttr) {
    var slider = this.get('slider');
    var trigger = slider.get(type + 'HandleElement');
    var width = this.get('width');
    var button = trigger.addShape('polygon', {
      attrs: Util.mix({
        points: [[width / 2 + TRIGGER_WIDTH, 0], [width / 2 + 1, 0], [width / 2 + TRIGGER_WIDTH, type === 'min' ? TRIGGER_WIDTH : -TRIGGER_WIDTH]]
      }, blockAttr)
    });
    var text = trigger.addShape('text', {
      attrs: Util.mix(textAttr, {
        x: width + 8,
        y: type === 'max' ? -4 : 4,
        textAlign: 'start',
        lineHeight: 1,
        textBaseline: 'middle'
      })
    });
    var layout = this.get('layout');
    var trigerCursor = layout === 'vertical' ? 'ns-resize' : 'ew-resize';
    button.attr('cursor', trigerCursor);
    text.attr('cursor', trigerCursor);
    this.set(type + 'ButtonElement', button);
    this.set(type + 'TextElement', text);
  };

  Continuous.prototype._addHorizontalTrigger = function _addHorizontalTrigger(type, blockAttr, textAttr) {
    var slider = this.get('slider');
    var trigger = slider.get(type + 'HandleElement');
    var button = trigger.addShape('polygon', {
      attrs: Util.mix({
        points: [[0, 0], [0, TRIGGER_WIDTH], [type === 'min' ? -TRIGGER_WIDTH : TRIGGER_WIDTH, TRIGGER_WIDTH]]
      }, blockAttr)
    });
    var text = trigger.addShape('text', {
      attrs: Util.mix(textAttr, {
        x: type === 'min' ? -TRIGGER_WIDTH - 4 : TRIGGER_WIDTH + 4,
        y: TRIGGER_WIDTH / 2,
        textAlign: type === 'min' ? 'end' : 'start',
        textBaseline: 'middle'
      })
    });
    var layout = this.get('layout');
    var trigerCursor = layout === 'vertical' ? 'ns-resize' : 'ew-resize';
    button.attr('cursor', trigerCursor);
    text.attr('cursor', trigerCursor);
    this.set(type + 'ButtonElement', button);
    this.set(type + 'TextElement', text);
  };

  Continuous.prototype._bindUI = function _bindUI() {
    var self = this;
    if (self.get('slidable')) {
      // const canvas = self.get('canvas');
      var slider = self.get('slider');
      slider.on('sliderchange', function (ev) {
        var range = ev.range;
        var firstItemValue = self.get('firstItem').value * 1;
        var lastItemValue = self.get('lastItem').value * 1;
        var minValue = firstItemValue + range[0] / 100 * (lastItemValue - firstItemValue);
        var maxValue = firstItemValue + range[1] / 100 * (lastItemValue - firstItemValue);
        self._updateElement(minValue, maxValue);
        var itemFiltered = new Event('itemfilter', ev, true, true);
        itemFiltered.range = [minValue, maxValue];
        self.emit('itemfilter', itemFiltered);
      });
    }
  };

  Continuous.prototype._updateElement = function _updateElement(min, max) {
    var minTextElement = this.get('minTextElement');
    var maxTextElement = this.get('maxTextElement');
    if (max > 1) {
      // 对于大于 1 的值，默认显示为整数
      min = parseInt(min, 10);
      max = parseInt(max, 10);
    }
    minTextElement.attr('text', this._formatItemValue(min) + '');
    maxTextElement.attr('text', this._formatItemValue(max) + '');
    if (this.get('type') === 'color-legend' && this.get('attr')) {
      var attr = this.get('attr'); // 图形属性，为了更新滑块颜色
      var minButtonElement = this.get('minButtonElement');
      var maxButtonElement = this.get('maxButtonElement');
      minButtonElement.attr('fill', attr.mapping(min).join(''));
      maxButtonElement.attr('fill', attr.mapping(max).join(''));
    }
  };

  return Continuous;
}(Base);

module.exports = Continuous;

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview 分面的基类
 * @author dxq613@gmail.com
 */

var Base = __webpack_require__(45);

/**
 * 矩形的 facet 有以下属性：
 * - colField 列的字段
 * - rowField 行的字段
 * - colValue 列字段的值
 * - rowValue 行字段的值
 * - cols 列数
 * - rows 行数
 * - colIndex 列的序号
 * - rowIndex 行的序号
 */

/**
 * 用于生成分面的类
 * @class Facets.Rect
 */

var Rect = function (_Base) {
  _inherits(Rect, _Base);

  function Rect() {
    _classCallCheck(this, Rect);

    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
  }

  Rect.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);
    cfg.type = 'rect';
    return cfg;
  };

  Rect.prototype.generateFacets = function generateFacets(data) {
    var self = this;
    var fields = self.fields;
    // var defs = self.defs;
    var rst = [];
    var rows = 1;
    var cols = 1;
    var colField = fields[0];
    var rowField = fields[1];
    var colValues = [''];
    var rowValues = [''];
    if (colField) {
      colValues = self.getFieldValues(colField, data);
      cols = colValues.length;
    }
    if (rowField) {
      rowValues = self.getFieldValues(rowField, data);
      rows = rowValues.length;
    }

    // 获取每个维度对应的frame
    colValues.forEach(function (xVal, xIndex) {
      rowValues.forEach(function (yVal, yIndex) {
        var conditions = [{ field: colField, value: xVal, values: colValues }, { field: rowField, value: yVal, values: rowValues }];
        var filter = self.getFilter(conditions);
        var subData = data.filter(filter);
        var facet = {
          type: self.type,
          colValue: xVal,
          rowValue: yVal,
          colField: colField,
          rowField: rowField,
          colIndex: xIndex,
          rowIndex: yIndex,
          cols: cols,
          rows: rows,
          data: subData,
          region: self.getRegion(rows, cols, xIndex, yIndex)
        };
        rst.push(facet);
      });
    });

    return rst;
  };

  // 设置 x 坐标轴的文本、title 是否显示


  Rect.prototype.setXAxis = function setXAxis(xField, axes, facet) {
    if (facet.rowIndex !== facet.rows - 1) {
      axes[xField].title = null;
      axes[xField].label = null;
    } else if (facet.colIndex !== parseInt((facet.cols - 1) / 2)) {
      axes[xField].title = null;
    }
  };
  // 设置 y 坐标轴的文本、title 是否显示


  Rect.prototype.setYAxis = function setYAxis(yField, axes, facet) {
    if (facet.colIndex !== 0) {
      axes[yField].title = null;
      axes[yField].label = null;
    } else if (facet.rowIndex !== parseInt((facet.rows - 1) / 2)) {
      axes[yField].title = null;
    }
  };

  Rect.prototype.renderTitle = function renderTitle(view, facet) {
    if (facet.rowIndex === 0) {
      this.drawColTitle(view, facet);
    }
    if (facet.colIndex === facet.cols - 1) {
      this.drawRowTitle(view, facet);
    }
  };

  return Rect;
}(Base);

module.exports = Rect;

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview list facets, support cols
 */

var Base = __webpack_require__(45);

/**
 * 用于生成分面的类
 * @class Facets.List
 */

var List = function (_Base) {
  _inherits(List, _Base);

  function List() {
    _classCallCheck(this, List);

    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
  }

  List.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);
    cfg.type = 'list';
    cfg.cols = null; // 用户不设置时就显示一行
    return cfg;
  };

  List.prototype.generateFacets = function generateFacets(data) {
    var self = this;
    var fields = self.fields;
    var colField = fields[0];
    if (!colField) {
      throw 'Please specify for the field for facet!';
    }
    var colValues = self.getFieldValues(colField, data);
    var count = colValues.length;
    var cols = self.cols || count;
    var rows = parseInt((count + cols - 1) / cols);
    var rst = [];
    colValues.forEach(function (xVal, index) {
      var row = parseInt(index / cols);
      var col = index % cols;
      var conditions = [{ field: colField, value: xVal, values: colValues }];
      var filter = self.getFilter(conditions);
      var subData = data.filter(filter);
      var facet = {
        type: self.type,
        count: count,
        colValue: xVal,
        colField: colField,
        rowField: null,
        rowValue: xVal,
        colIndex: col,
        rowIndex: row,
        cols: cols,
        rows: rows,
        data: subData,
        region: self.getRegion(rows, cols, col, row)
      };
      rst.push(facet);
    });
    return rst;
  };

  // 设置 x 坐标轴的文本、title 是否显示


  List.prototype.setXAxis = function setXAxis(xField, axes, facet) {
    // 当是最后一行或者下面没有 view 时文本不显示
    if (facet.rowIndex !== facet.rows - 1 && facet.cols * facet.rowIndex + facet.colIndex + 1 + facet.cols <= facet.count) {
      axes[xField].label = null;
      axes[xField].title = null;
    }
  };

  // 设置 y 坐标轴的文本、title 是否显示


  List.prototype.setYAxis = function setYAxis(yField, axes, facet) {
    if (facet.colIndex !== 0) {
      axes[yField].title = null;
      axes[yField].label = null;
    }
  };

  return List;
}(Base);

module.exports = List;

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

var G = __webpack_require__(2);
var Animate = __webpack_require__(68);
var Chart = __webpack_require__(281);
var Global = __webpack_require__(1);
var Scale = __webpack_require__(115);
var Shape = __webpack_require__(66);
var Util = __webpack_require__(0);

var G2 = {
  // version
  version: Global.version,
  // visual encoding
  Animate: Animate,
  Chart: Chart,
  Global: Global,
  Scale: Scale,
  Shape: Shape,
  Util: Util,
  // render engine
  G: G,
  DomUtil: G.DomUtil,
  MatrixUtil: G.MatrixUtil,
  PathUtil: G.PathUtil
};

G2.track = function (enable) {
  Global.trackable = enable;
};
__webpack_require__(364);

// 保证两个版本共存
if (typeof window !== 'undefined') {
  if (window.G2) {
    console.warn('There are multiple versions of G2. Version ' + G2.version + '\'s reference is \'window.G2_3\'');
  } else {
    window.G2 = G2;
  }
}

module.exports = G2;

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(127);

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

var arrayEach = __webpack_require__(69),
    baseEach = __webpack_require__(27),
    castFunction = __webpack_require__(140),
    isArray = __webpack_require__(3);

/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _.forEach([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forEach(collection, iteratee) {
  var func = isArray(collection) ? arrayEach : baseEach;
  return func(collection, castFunction(iteratee));
}

module.exports = forEach;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

var baseFor = __webpack_require__(129),
    keys = __webpack_require__(11);

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

var createBaseFor = __webpack_require__(130);

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;

/***/ }),
/* 130 */
/***/ (function(module, exports) {

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function (object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;

/***/ }),
/* 131 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(6),
    isObjectLike = __webpack_require__(5);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

/***/ }),
/* 133 */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

var _Symbol = __webpack_require__(12);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

/***/ }),
/* 135 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

/***/ }),
/* 136 */
/***/ (function(module, exports) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(6),
    isLength = __webpack_require__(47),
    isObjectLike = __webpack_require__(5);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(75);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

var isArrayLike = __webpack_require__(8);

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function (collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while (fromRight ? index-- : ++index < length) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__(31);

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction(value) {
  return typeof value == 'function' ? value : identity;
}

module.exports = castFunction;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__(49),
    baseIteratee = __webpack_require__(19),
    baseMap = __webpack_require__(191),
    isArray = __webpack_require__(3);

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee, 3));
}

module.exports = map;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsMatch = __webpack_require__(143),
    getMatchData = __webpack_require__(179),
    matchesStrictComparable = __webpack_require__(87);

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function (object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(50),
    baseIsEqual = __webpack_require__(37);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack();
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;

/***/ }),
/* 144 */
/***/ (function(module, exports) {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(33);

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(33);

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(33);

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(33);

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(32);

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache();
  this.size = 0;
}

module.exports = stackClear;

/***/ }),
/* 150 */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;

/***/ }),
/* 151 */
/***/ (function(module, exports) {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

/***/ }),
/* 152 */
/***/ (function(module, exports) {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(32),
    Map = __webpack_require__(51),
    MapCache = __webpack_require__(52);

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(48),
    isMasked = __webpack_require__(155),
    isObject = __webpack_require__(7),
    toSource = __webpack_require__(76);

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

var coreJsData = __webpack_require__(156);

/** Used to detect methods masquerading as native. */
var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}

module.exports = isMasked;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(4);

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;

/***/ }),
/* 157 */
/***/ (function(module, exports) {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

var Hash = __webpack_require__(159),
    ListCache = __webpack_require__(32),
    Map = __webpack_require__(51);

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash(),
    'map': new (Map || ListCache)(),
    'string': new Hash()
  };
}

module.exports = mapCacheClear;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

var hashClear = __webpack_require__(160),
    hashDelete = __webpack_require__(161),
    hashGet = __webpack_require__(162),
    hashHas = __webpack_require__(163),
    hashSet = __webpack_require__(164);

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(35);

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

/***/ }),
/* 161 */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(35);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(35);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(35);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(36);

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

/***/ }),
/* 166 */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}

module.exports = isKeyable;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(36);

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(36);

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(36);

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(50),
    equalArrays = __webpack_require__(77),
    equalByTag = __webpack_require__(174),
    equalObjects = __webpack_require__(175),
    getTag = __webpack_require__(38),
    isArray = __webpack_require__(3),
    isBuffer = __webpack_require__(29),
    isTypedArray = __webpack_require__(46);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack());
    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack());
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;

/***/ }),
/* 171 */
/***/ (function(module, exports) {

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;

/***/ }),
/* 172 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;

/***/ }),
/* 173 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

var _Symbol = __webpack_require__(12),
    Uint8Array = __webpack_require__(80),
    eq = __webpack_require__(34),
    equalArrays = __webpack_require__(77),
    mapToArray = __webpack_require__(53),
    setToArray = __webpack_require__(20);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == other + '';

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

var getAllKeys = __webpack_require__(81);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(13),
    root = __webpack_require__(4);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(13),
    root = __webpack_require__(4);

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(13),
    root = __webpack_require__(4);

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

var isStrictComparable = __webpack_require__(86),
    keys = __webpack_require__(11);

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
    var result = keys(object),
        length = result.length;

    while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
    }
    return result;
}

module.exports = getMatchData;

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqual = __webpack_require__(37),
    get = __webpack_require__(181),
    hasIn = __webpack_require__(88),
    isKey = __webpack_require__(57),
    isStrictComparable = __webpack_require__(86),
    matchesStrictComparable = __webpack_require__(87),
    toKey = __webpack_require__(22);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function (object) {
    var objValue = get(object, path);
    return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(56);

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

var memoizeCapped = __webpack_require__(183);

/** Used to match property names within property paths. */
var reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function (string) {
  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function (match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
  });
  return result;
});

module.exports = stringToPath;

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

var memoize = __webpack_require__(184);

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function (key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(52);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function memoized() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache)();
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

var _Symbol = __webpack_require__(12),
    arrayMap = __webpack_require__(49),
    isArray = __webpack_require__(3),
    isSymbol = __webpack_require__(21);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

module.exports = baseToString;

/***/ }),
/* 186 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(39),
    isArguments = __webpack_require__(28),
    isArray = __webpack_require__(3),
    isIndex = __webpack_require__(30),
    isLength = __webpack_require__(47),
    toKey = __webpack_require__(22);

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
}

module.exports = hasPath;

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

var baseProperty = __webpack_require__(189),
    basePropertyDeep = __webpack_require__(190),
    isKey = __webpack_require__(57),
    toKey = __webpack_require__(22);

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;

/***/ }),
/* 189 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function (object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(56);

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function (object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

var baseEach = __webpack_require__(27),
    isArrayLike = __webpack_require__(8);

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function (value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

module.exports = baseMap;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(6),
    isObjectLike = __webpack_require__(5);

/** `Object#toString` result references. */
var numberTag = '[object Number]';

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */
function isNumber(value) {
    return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
}

module.exports = isNumber;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(4);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsFinite = root.isFinite;

/**
 * Checks if `value` is a finite primitive number.
 *
 * **Note:** This method is based on
 * [`Number.isFinite`](https://mdn.io/Number/isFinite).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
 * @example
 *
 * _.isFinite(3);
 * // => true
 *
 * _.isFinite(Number.MIN_VALUE);
 * // => true
 *
 * _.isFinite(Infinity);
 * // => false
 *
 * _.isFinite('3');
 * // => false
 */
function isFinite(value) {
  return typeof value == 'number' && nativeIsFinite(value);
}

module.exports = isFinite;

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(6),
    isObjectLike = __webpack_require__(5);

/** `Object#toString` result references. */
var boolTag = '[object Boolean]';

/**
 * Checks if `value` is classified as a boolean primitive or object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
 * @example
 *
 * _.isBoolean(false);
 * // => true
 *
 * _.isBoolean(null);
 * // => false
 */
function isBoolean(value) {
    return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
}

module.exports = isBoolean;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

var baseKeys = __webpack_require__(74),
    getTag = __webpack_require__(38),
    isArguments = __webpack_require__(28),
    isArray = __webpack_require__(3),
    isArrayLike = __webpack_require__(8),
    isBuffer = __webpack_require__(29),
    isPrototype = __webpack_require__(18),
    isTypedArray = __webpack_require__(46);

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }
  var tag = getTag(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

module.exports = isEmpty;

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

var createCaseFirst = __webpack_require__(90);

/**
 * Converts the first character of `string` to lower case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.lowerFirst('Fred');
 * // => 'fred'
 *
 * _.lowerFirst('FRED');
 * // => 'fRED'
 */
var lowerFirst = createCaseFirst('toLowerCase');

module.exports = lowerFirst;

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

var baseSlice = __webpack_require__(198);

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return !start && end >= length ? array : baseSlice(array, start, end);
}

module.exports = castSlice;

/***/ }),
/* 198 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : length + start;
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : end - start >>> 0;
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

module.exports = baseSlice;

/***/ }),
/* 199 */
/***/ (function(module, exports) {

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

module.exports = asciiToArray;

/***/ }),
/* 200 */
/***/ (function(module, exports) {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray(string) {
    return string.match(reUnicode) || [];
}

module.exports = unicodeToArray;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

var createCaseFirst = __webpack_require__(90);

/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */
var upperFirst = createCaseFirst('toUpperCase');

module.exports = upperFirst;

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

var createCompounder = __webpack_require__(203);

/**
 * Converts `string`, as space separated words, to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the upper cased string.
 * @example
 *
 * _.upperCase('--foo-bar');
 * // => 'FOO BAR'
 *
 * _.upperCase('fooBar');
 * // => 'FOO BAR'
 *
 * _.upperCase('__foo_bar__');
 * // => 'FOO BAR'
 */
var upperCase = createCompounder(function (result, word, index) {
  return result + (index ? ' ' : '') + word.toUpperCase();
});

module.exports = upperCase;

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

var arrayReduce = __webpack_require__(58),
    deburr = __webpack_require__(204),
    words = __webpack_require__(207);

/** Used to compose unicode capture groups. */
var rsApos = '[\'\u2019]';

/** Used to match apostrophes. */
var reApos = RegExp(rsApos, 'g');

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */
function createCompounder(callback) {
  return function (string) {
    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
  };
}

module.exports = createCompounder;

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

var deburrLetter = __webpack_require__(205),
    toString = __webpack_require__(15);

/** Used to match Latin Unicode letters (excluding mathematical operators). */
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

/** Used to compose unicode character classes. */
var rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;

/** Used to compose unicode capture groups. */
var rsCombo = '[' + rsComboRange + ']';

/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */
var reComboMark = RegExp(rsCombo, 'g');

/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */
function deburr(string) {
  string = toString(string);
  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
}

module.exports = deburr;

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

var basePropertyOf = __webpack_require__(206);

/** Used to map Latin Unicode letters to basic Latin letters. */
var deburredLetters = {
  // Latin-1 Supplement block.
  '\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
  '\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
  '\xc7': 'C', '\xe7': 'c',
  '\xd0': 'D', '\xf0': 'd',
  '\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
  '\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
  '\xcc': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
  '\xec': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
  '\xd1': 'N', '\xf1': 'n',
  '\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
  '\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
  '\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
  '\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
  '\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
  '\xc6': 'Ae', '\xe6': 'ae',
  '\xde': 'Th', '\xfe': 'th',
  '\xdf': 'ss',
  // Latin Extended-A block.
  '\u0100': 'A', '\u0102': 'A', '\u0104': 'A',
  '\u0101': 'a', '\u0103': 'a', '\u0105': 'a',
  '\u0106': 'C', '\u0108': 'C', '\u010A': 'C', '\u010C': 'C',
  '\u0107': 'c', '\u0109': 'c', '\u010B': 'c', '\u010D': 'c',
  '\u010E': 'D', '\u0110': 'D', '\u010F': 'd', '\u0111': 'd',
  '\u0112': 'E', '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011A': 'E',
  '\u0113': 'e', '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011B': 'e',
  '\u011C': 'G', '\u011E': 'G', '\u0120': 'G', '\u0122': 'G',
  '\u011D': 'g', '\u011F': 'g', '\u0121': 'g', '\u0123': 'g',
  '\u0124': 'H', '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
  '\u0128': 'I', '\u012A': 'I', '\u012C': 'I', '\u012E': 'I', '\u0130': 'I',
  '\u0129': 'i', '\u012B': 'i', '\u012D': 'i', '\u012F': 'i', '\u0131': 'i',
  '\u0134': 'J', '\u0135': 'j',
  '\u0136': 'K', '\u0137': 'k', '\u0138': 'k',
  '\u0139': 'L', '\u013B': 'L', '\u013D': 'L', '\u013F': 'L', '\u0141': 'L',
  '\u013A': 'l', '\u013C': 'l', '\u013E': 'l', '\u0140': 'l', '\u0142': 'l',
  '\u0143': 'N', '\u0145': 'N', '\u0147': 'N', '\u014A': 'N',
  '\u0144': 'n', '\u0146': 'n', '\u0148': 'n', '\u014B': 'n',
  '\u014C': 'O', '\u014E': 'O', '\u0150': 'O',
  '\u014D': 'o', '\u014F': 'o', '\u0151': 'o',
  '\u0154': 'R', '\u0156': 'R', '\u0158': 'R',
  '\u0155': 'r', '\u0157': 'r', '\u0159': 'r',
  '\u015A': 'S', '\u015C': 'S', '\u015E': 'S', '\u0160': 'S',
  '\u015B': 's', '\u015D': 's', '\u015F': 's', '\u0161': 's',
  '\u0162': 'T', '\u0164': 'T', '\u0166': 'T',
  '\u0163': 't', '\u0165': 't', '\u0167': 't',
  '\u0168': 'U', '\u016A': 'U', '\u016C': 'U', '\u016E': 'U', '\u0170': 'U', '\u0172': 'U',
  '\u0169': 'u', '\u016B': 'u', '\u016D': 'u', '\u016F': 'u', '\u0171': 'u', '\u0173': 'u',
  '\u0174': 'W', '\u0175': 'w',
  '\u0176': 'Y', '\u0177': 'y', '\u0178': 'Y',
  '\u0179': 'Z', '\u017B': 'Z', '\u017D': 'Z',
  '\u017A': 'z', '\u017C': 'z', '\u017E': 'z',
  '\u0132': 'IJ', '\u0133': 'ij',
  '\u0152': 'Oe', '\u0153': 'oe',
  '\u0149': "'n", '\u017F': 's'
};

/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */
var deburrLetter = basePropertyOf(deburredLetters);

module.exports = deburrLetter;

/***/ }),
/* 206 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function (key) {
    return object == null ? undefined : object[key];
  };
}

module.exports = basePropertyOf;

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

var asciiWords = __webpack_require__(208),
    hasUnicodeWord = __webpack_require__(209),
    toString = __webpack_require__(15),
    unicodeWords = __webpack_require__(210);

/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */
function words(string, pattern, guard) {
  string = toString(string);
  pattern = guard ? undefined : pattern;

  if (pattern === undefined) {
    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
  }
  return string.match(pattern) || [];
}

module.exports = words;

/***/ }),
/* 208 */
/***/ (function(module, exports) {

/** Used to match words composed of alphanumeric characters. */
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}

module.exports = asciiWords;

/***/ }),
/* 209 */
/***/ (function(module, exports) {

/** Used to detect strings that need a more robust regexp to match words. */
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */
function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}

module.exports = hasUnicodeWord;

/***/ }),
/* 210 */
/***/ (function(module, exports) {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsDingbatRange = '\\u2700-\\u27bf',
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = '\\u2000-\\u206f',
    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange = '\\ufe0e\\ufe0f',
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

/** Used to compose unicode capture groups. */
var rsApos = '[\'\u2019]',
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
    rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

/** Used to match complex or compound words. */
var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
}

module.exports = unicodeWords;

/***/ }),
/* 211 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is `null`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
 * @example
 *
 * _.isNull(null);
 * // => true
 *
 * _.isNull(void 0);
 * // => false
 */
function isNull(value) {
  return value === null;
}

module.exports = isNull;

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsDate = __webpack_require__(213),
    baseUnary = __webpack_require__(72),
    nodeUtil = __webpack_require__(73);

/* Node.js helper references. */
var nodeIsDate = nodeUtil && nodeUtil.isDate;

/**
 * Checks if `value` is classified as a `Date` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
 * @example
 *
 * _.isDate(new Date);
 * // => true
 *
 * _.isDate('Mon April 23 2012');
 * // => false
 */
var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

module.exports = isDate;

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(6),
    isObjectLike = __webpack_require__(5);

/** `Object#toString` result references. */
var dateTag = '[object Date]';

/**
 * The base implementation of `_.isDate` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
 */
function baseIsDate(value) {
  return isObjectLike(value) && baseGetTag(value) == dateTag;
}

module.exports = baseIsDate;

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(6),
    getPrototype = __webpack_require__(59),
    isObjectLike = __webpack_require__(5);

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

var _Symbol = __webpack_require__(12),
    copyArray = __webpack_require__(94),
    getTag = __webpack_require__(38),
    isArrayLike = __webpack_require__(8),
    isString = __webpack_require__(89),
    iteratorToArray = __webpack_require__(216),
    mapToArray = __webpack_require__(53),
    setToArray = __webpack_require__(20),
    stringToArray = __webpack_require__(92),
    values = __webpack_require__(217);

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Built-in value references. */
var symIterator = _Symbol ? _Symbol.iterator : undefined;

/**
 * Converts `value` to an array.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Array} Returns the converted array.
 * @example
 *
 * _.toArray({ 'a': 1, 'b': 2 });
 * // => [1, 2]
 *
 * _.toArray('abc');
 * // => ['a', 'b', 'c']
 *
 * _.toArray(1);
 * // => []
 *
 * _.toArray(null);
 * // => []
 */
function toArray(value) {
  if (!value) {
    return [];
  }
  if (isArrayLike(value)) {
    return isString(value) ? stringToArray(value) : copyArray(value);
  }
  if (symIterator && value[symIterator]) {
    return iteratorToArray(value[symIterator]());
  }
  var tag = getTag(value),
      func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;

  return func(value);
}

module.exports = toArray;

/***/ }),
/* 216 */
/***/ (function(module, exports) {

/**
 * Converts `iterator` to an array.
 *
 * @private
 * @param {Object} iterator The iterator to convert.
 * @returns {Array} Returns the converted array.
 */
function iteratorToArray(iterator) {
  var data,
      result = [];

  while (!(data = iterator.next()).done) {
    result.push(data.value);
  }
  return result;
}

module.exports = iteratorToArray;

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

var baseValues = __webpack_require__(218),
    keys = __webpack_require__(11);

/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */
function values(object) {
  return object == null ? [] : baseValues(object, keys(object));
}

module.exports = values;

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__(49);

/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */
function baseValues(object, props) {
  return arrayMap(props, function (key) {
    return object[key];
  });
}

module.exports = baseValues;

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

var baseIndexOf = __webpack_require__(95),
    toInteger = __webpack_require__(96);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Gets the index at which the first occurrence of `value` is found in `array`
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. If `fromIndex` is negative, it's used as the
 * offset from the end of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 * @example
 *
 * _.indexOf([1, 2, 1, 2], 2);
 * // => 1
 *
 * // Search from the `fromIndex`.
 * _.indexOf([1, 2, 1, 2], 2, 2);
 * // => 3
 */
function indexOf(array, value, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : toInteger(fromIndex);
  if (index < 0) {
    index = nativeMax(length + index, 0);
  }
  return baseIndexOf(array, value, index);
}

module.exports = indexOf;

/***/ }),
/* 220 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while (fromRight ? index-- : ++index < length) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseFindIndex;

/***/ }),
/* 221 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;

/***/ }),
/* 222 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

var toNumber = __webpack_require__(97);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

var baseRest = __webpack_require__(99),
    isIterateeCall = __webpack_require__(229);

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function (object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;

/***/ }),
/* 225 */
/***/ (function(module, exports) {

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);
    case 1:
      return func.call(thisArg, args[0]);
    case 2:
      return func.call(thisArg, args[0], args[1]);
    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

var constant = __webpack_require__(227),
    defineProperty = __webpack_require__(98),
    identity = __webpack_require__(31);

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function (func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;

/***/ }),
/* 227 */
/***/ (function(module, exports) {

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function () {
    return value;
  };
}

module.exports = constant;

/***/ }),
/* 228 */
/***/ (function(module, exports) {

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function () {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var eq = __webpack_require__(34),
    isArrayLike = __webpack_require__(8),
    isIndex = __webpack_require__(30),
    isObject = __webpack_require__(7);

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index === 'undefined' ? 'undefined' : _typeof(index);
  if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(61),
    createAggregator = __webpack_require__(231);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an object composed of keys generated from the results of running
 * each element of `collection` thru `iteratee`. The order of grouped values
 * is determined by the order they occur in `collection`. The corresponding
 * value of each key is an array of elements responsible for generating the
 * key. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * _.groupBy([6.1, 4.2, 6.3], Math.floor);
 * // => { '4': [4.2], '6': [6.1, 6.3] }
 *
 * // The `_.property` iteratee shorthand.
 * _.groupBy(['one', 'two', 'three'], 'length');
 * // => { '3': ['one', 'two'], '5': ['three'] }
 */
var groupBy = createAggregator(function (result, value, key) {
  if (hasOwnProperty.call(result, key)) {
    result[key].push(value);
  } else {
    baseAssignValue(result, key, [value]);
  }
});

module.exports = groupBy;

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

var arrayAggregator = __webpack_require__(232),
    baseAggregator = __webpack_require__(233),
    baseIteratee = __webpack_require__(19),
    isArray = __webpack_require__(3);

/**
 * Creates a function like `_.groupBy`.
 *
 * @private
 * @param {Function} setter The function to set accumulator values.
 * @param {Function} [initializer] The accumulator object initializer.
 * @returns {Function} Returns the new aggregator function.
 */
function createAggregator(setter, initializer) {
    return function (collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, baseIteratee(iteratee, 2), accumulator);
    };
}

module.exports = createAggregator;

/***/ }),
/* 232 */
/***/ (function(module, exports) {

/**
 * A specialized version of `baseAggregator` for arrays.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */
function arrayAggregator(array, setter, iteratee, accumulator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    var value = array[index];
    setter(accumulator, value, iteratee(value), array);
  }
  return accumulator;
}

module.exports = arrayAggregator;

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

var baseEach = __webpack_require__(27);

/**
 * Aggregates elements of `collection` on `accumulator` with keys transformed
 * by `iteratee` and values set by `setter`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */
function baseAggregator(collection, setter, iteratee, accumulator) {
  baseEach(collection, function (value, key, collection) {
    setter(accumulator, value, iteratee(value), collection);
  });
  return accumulator;
}

module.exports = baseAggregator;

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(50),
    arrayEach = __webpack_require__(69),
    assignValue = __webpack_require__(40),
    baseAssign = __webpack_require__(235),
    baseAssignIn = __webpack_require__(236),
    cloneBuffer = __webpack_require__(239),
    copyArray = __webpack_require__(94),
    copySymbols = __webpack_require__(240),
    copySymbolsIn = __webpack_require__(241),
    getAllKeys = __webpack_require__(81),
    getAllKeysIn = __webpack_require__(242),
    getTag = __webpack_require__(38),
    initCloneArray = __webpack_require__(243),
    initCloneByTag = __webpack_require__(244),
    initCloneObject = __webpack_require__(253),
    isArray = __webpack_require__(3),
    isBuffer = __webpack_require__(29),
    isObject = __webpack_require__(7),
    keys = __webpack_require__(11);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || isFunc && !object) {
      result = isFlat || isFunc ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, baseClone, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack());
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function (subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(23),
    keys = __webpack_require__(11);

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(23),
    keysIn = __webpack_require__(103);

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(7),
    isPrototype = __webpack_require__(18),
    nativeKeysIn = __webpack_require__(238);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeysIn;

/***/ }),
/* 238 */
/***/ (function(module, exports) {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var root = __webpack_require__(4);

/** Detect free variable `exports`. */
var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26)(module)))

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(23),
    getSymbols = __webpack_require__(55);

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(23),
    getSymbolsIn = __webpack_require__(104);

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(82),
    getSymbolsIn = __webpack_require__(104),
    keysIn = __webpack_require__(103);

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;

/***/ }),
/* 243 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

module.exports = initCloneArray;

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(62),
    cloneDataView = __webpack_require__(245),
    cloneMap = __webpack_require__(246),
    cloneRegExp = __webpack_require__(248),
    cloneSet = __webpack_require__(249),
    cloneSymbol = __webpack_require__(251),
    cloneTypedArray = __webpack_require__(252);

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, cloneFunc, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag:case float64Tag:
    case int8Tag:case int16Tag:case int32Tag:
    case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return cloneMap(object, isDeep, cloneFunc);

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return cloneSet(object, isDeep, cloneFunc);

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(62);

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

var addMapEntry = __webpack_require__(247),
    arrayReduce = __webpack_require__(58),
    mapToArray = __webpack_require__(53);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1;

/**
 * Creates a clone of `map`.
 *
 * @private
 * @param {Object} map The map to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned map.
 */
function cloneMap(map, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
  return arrayReduce(array, addMapEntry, new map.constructor());
}

module.exports = cloneMap;

/***/ }),
/* 247 */
/***/ (function(module, exports) {

/**
 * Adds the key-value `pair` to `map`.
 *
 * @private
 * @param {Object} map The map to modify.
 * @param {Array} pair The key-value pair to add.
 * @returns {Object} Returns `map`.
 */
function addMapEntry(map, pair) {
  // Don't return `map.set` because it's not chainable in IE 11.
  map.set(pair[0], pair[1]);
  return map;
}

module.exports = addMapEntry;

/***/ }),
/* 248 */
/***/ (function(module, exports) {

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

var addSetEntry = __webpack_require__(250),
    arrayReduce = __webpack_require__(58),
    setToArray = __webpack_require__(20);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1;

/**
 * Creates a clone of `set`.
 *
 * @private
 * @param {Object} set The set to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned set.
 */
function cloneSet(set, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
  return arrayReduce(array, addSetEntry, new set.constructor());
}

module.exports = cloneSet;

/***/ }),
/* 250 */
/***/ (function(module, exports) {

/**
 * Adds `value` to `set`.
 *
 * @private
 * @param {Object} set The set to modify.
 * @param {*} value The value to add.
 * @returns {Object} Returns `set`.
 */
function addSetEntry(set, value) {
  // Don't return `set.add` because it's not chainable in IE 11.
  set.add(value);
  return set;
}

module.exports = addSetEntry;

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

var _Symbol = __webpack_require__(12);

/** Used to convert symbols to primitives and strings. */
var symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(62);

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

var baseCreate = __webpack_require__(254),
    getPrototype = __webpack_require__(59),
    isPrototype = __webpack_require__(18);

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
    return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
}

module.exports = initCloneObject;

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(7);

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = function () {
  function object() {}
  return function (proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object();
    object.prototype = undefined;
    return result;
  };
}();

module.exports = baseCreate;

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

var baseExtremum = __webpack_require__(105),
    baseGt = __webpack_require__(256),
    baseIteratee = __webpack_require__(19);

/**
 * This method is like `_.max` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * the value is ranked. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {*} Returns the maximum value.
 * @example
 *
 * var objects = [{ 'n': 1 }, { 'n': 2 }];
 *
 * _.maxBy(objects, function(o) { return o.n; });
 * // => { 'n': 2 }
 *
 * // The `_.property` iteratee shorthand.
 * _.maxBy(objects, 'n');
 * // => { 'n': 2 }
 */
function maxBy(array, iteratee) {
    return array && array.length ? baseExtremum(array, baseIteratee(iteratee, 2), baseGt) : undefined;
}

module.exports = maxBy;

/***/ }),
/* 256 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.gt` which doesn't coerce arguments.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is greater than `other`,
 *  else `false`.
 */
function baseGt(value, other) {
  return value > other;
}

module.exports = baseGt;

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

var baseExtremum = __webpack_require__(105),
    baseIteratee = __webpack_require__(19),
    baseLt = __webpack_require__(258);

/**
 * This method is like `_.min` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * the value is ranked. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {*} Returns the minimum value.
 * @example
 *
 * var objects = [{ 'n': 1 }, { 'n': 2 }];
 *
 * _.minBy(objects, function(o) { return o.n; });
 * // => { 'n': 1 }
 *
 * // The `_.property` iteratee shorthand.
 * _.minBy(objects, 'n');
 * // => { 'n': 1 }
 */
function minBy(array, iteratee) {
    return array && array.length ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt) : undefined;
}

module.exports = minBy;

/***/ }),
/* 258 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.lt` which doesn't coerce arguments.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is less than `other`,
 *  else `false`.
 */
function baseLt(value, other) {
  return value < other;
}

module.exports = baseLt;

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

var createRound = __webpack_require__(260);

/**
 * Computes `number` rounded to `precision`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Math
 * @param {number} number The number to round.
 * @param {number} [precision=0] The precision to round to.
 * @returns {number} Returns the rounded number.
 * @example
 *
 * _.round(4.006);
 * // => 4
 *
 * _.round(4.006, 2);
 * // => 4.01
 *
 * _.round(4060, -2);
 * // => 4100
 */
var round = createRound('round');

module.exports = round;

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(96),
    toNumber = __webpack_require__(97),
    toString = __webpack_require__(15);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * Creates a function like `_.round`.
 *
 * @private
 * @param {string} methodName The name of the `Math` method to use when rounding.
 * @returns {Function} Returns the new round function.
 */
function createRound(methodName) {
  var func = Math[methodName];
  return function (number, precision) {
    number = toNumber(number);
    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
    if (precision) {
      // Shift with exponential notation to avoid floating-point issues.
      // See [MDN](https://mdn.io/round#Examples) for more details.
      var pair = (toString(number) + 'e').split('e'),
          value = func(pair[0] + 'e' + (+pair[1] + precision));

      pair = (toString(value) + 'e').split('e');
      return +(pair[0] + 'e' + (+pair[1] - precision));
    }
    return func(number);
  };
}

module.exports = createRound;

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

var arrayFilter = __webpack_require__(83),
    baseFilter = __webpack_require__(262),
    baseIteratee = __webpack_require__(19),
    isArray = __webpack_require__(3);

/**
 * Iterates over elements of `collection`, returning an array of all elements
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * **Note:** Unlike `_.remove`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see _.reject
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * _.filter(users, function(o) { return !o.active; });
 * // => objects for ['fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, { 'age': 36, 'active': true });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, ['active', false]);
 * // => objects for ['fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.filter(users, 'active');
 * // => objects for ['barney']
 */
function filter(collection, predicate) {
  var func = isArray(collection) ? arrayFilter : baseFilter;
  return func(collection, baseIteratee(predicate, 3));
}

module.exports = filter;

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

var baseEach = __webpack_require__(27);

/**
 * The base implementation of `_.filter` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function baseFilter(collection, predicate) {
  var result = [];
  baseEach(collection, function (value, index, collection) {
    if (predicate(value, index, collection)) {
      result.push(value);
    }
  });
  return result;
}

module.exports = baseFilter;

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqual = __webpack_require__(37);

/**
 * This method is like `_.isEqual` except that it accepts `customizer` which
 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
 * are handled by the method instead. The `customizer` is invoked with up to
 * six arguments: (objValue, othValue [, index|key, object, other, stack]).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * function isGreeting(value) {
 *   return /^h(?:i|ello)$/.test(value);
 * }
 *
 * function customizer(objValue, othValue) {
 *   if (isGreeting(objValue) && isGreeting(othValue)) {
 *     return true;
 *   }
 * }
 *
 * var array = ['hello', 'goodbye'];
 * var other = ['hi', 'goodbye'];
 *
 * _.isEqualWith(array, other, customizer);
 * // => true
 */
function isEqualWith(value, other, customizer) {
  customizer = typeof customizer == 'function' ? customizer : undefined;
  var result = customizer ? customizer(value, other) : undefined;
  return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
}

module.exports = isEqualWith;

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqual = __webpack_require__(37);

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

module.exports = isEqual;

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

var toString = __webpack_require__(15);

/**
 * Replaces matches for `pattern` in `string` with `replacement`.
 *
 * **Note:** This method is based on
 * [`String#replace`](https://mdn.io/String/replace).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to modify.
 * @param {RegExp|string} pattern The pattern to replace.
 * @param {Function|string} replacement The match replacement.
 * @returns {string} Returns the modified string.
 * @example
 *
 * _.replace('Hi Fred', 'Fred', 'Barney');
 * // => 'Hi Barney'
 */
function replace() {
  var args = arguments,
      string = toString(args[0]);

  return args.length < 3 ? string : string.replace(args[1], args[2]);
}

module.exports = replace;

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

var baseFlatten = __webpack_require__(106),
    baseRest = __webpack_require__(99),
    baseUniq = __webpack_require__(268),
    isArrayLikeObject = __webpack_require__(273);

/**
 * Creates an array of unique values, in order, from all given arrays using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * _.union([2], [1, 2]);
 * // => [2, 1]
 */
var union = baseRest(function (arrays) {
  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
});

module.exports = union;

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

var _Symbol = __webpack_require__(12),
    isArguments = __webpack_require__(28),
    isArray = __webpack_require__(3);

/** Built-in value references. */
var spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
}

module.exports = isFlattenable;

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

var SetCache = __webpack_require__(78),
    arrayIncludes = __webpack_require__(269),
    arrayIncludesWith = __webpack_require__(270),
    cacheHas = __webpack_require__(79),
    createSet = __webpack_require__(271),
    setToArray = __webpack_require__(20);

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */
function baseUniq(array, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith;
  } else if (length >= LARGE_ARRAY_SIZE) {
    var set = iteratee ? null : createSet(array);
    if (set) {
      return setToArray(set);
    }
    isCommon = false;
    includes = cacheHas;
    seen = new SetCache();
  } else {
    seen = iteratee ? [] : result;
  }
  outer: while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = comparator || value !== 0 ? value : 0;
    if (isCommon && computed === computed) {
      var seenIndex = seen.length;
      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }
      if (iteratee) {
        seen.push(computed);
      }
      result.push(value);
    } else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

module.exports = baseUniq;

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

var baseIndexOf = __webpack_require__(95);

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

module.exports = arrayIncludes;

/***/ }),
/* 270 */
/***/ (function(module, exports) {

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

module.exports = arrayIncludesWith;

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

var Set = __webpack_require__(85),
    noop = __webpack_require__(272),
    setToArray = __webpack_require__(20);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */
var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
  return new Set(values);
};

module.exports = createSet;

/***/ }),
/* 272 */
/***/ (function(module, exports) {

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

module.exports = noop;

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

var isArrayLike = __webpack_require__(8),
    isObjectLike = __webpack_require__(5);

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

var basePick = __webpack_require__(275),
    flatRest = __webpack_require__(278);

/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */
var pick = flatRest(function (object, paths) {
  return object == null ? {} : basePick(object, paths);
});

module.exports = pick;

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

var basePickBy = __webpack_require__(276),
    hasIn = __webpack_require__(88);

/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @returns {Object} Returns the new object.
 */
function basePick(object, paths) {
  return basePickBy(object, paths, function (value, path) {
    return hasIn(object, path);
  });
}

module.exports = basePick;

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(56),
    baseSet = __webpack_require__(277),
    castPath = __webpack_require__(39);

/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy(object, paths, predicate) {
    var index = -1,
        length = paths.length,
        result = {};

    while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
            baseSet(result, castPath(path, object), value);
        }
    }
    return result;
}

module.exports = basePickBy;

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(40),
    castPath = __webpack_require__(39),
    isIndex = __webpack_require__(30),
    isObject = __webpack_require__(7),
    toKey = __webpack_require__(22);

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

module.exports = baseSet;

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

var flatten = __webpack_require__(279),
    overRest = __webpack_require__(100),
    setToString = __webpack_require__(101);

/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
function flatRest(func) {
  return setToString(overRest(func, undefined, flatten), func + '');
}

module.exports = flatRest;

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

var baseFlatten = __webpack_require__(106);

/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, 1) : [];
}

module.exports = flatten;

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview Default animation funciton
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var G = __webpack_require__(2);
var PathUtil = G.PathUtil;

function getClip(coord) {
  var start = coord.start;
  var end = coord.end;
  var width = coord.getWidth();
  var height = coord.getHeight();
  var margin = 200;
  var startAngle = void 0;
  var endAngle = void 0;
  var center = void 0;
  var radius = void 0;
  var clip = void 0;

  if (coord.isPolar) {
    radius = coord.getRadius();
    center = coord.getCenter();
    startAngle = coord.startAngle;
    endAngle = coord.endAngle;
    clip = new G.Fan({
      attrs: {
        x: center.x,
        y: center.y,
        rs: 0,
        re: radius + margin,
        startAngle: startAngle,
        endAngle: startAngle
      }
    });
    clip.endState = {
      endAngle: endAngle
    };
  } else {
    clip = new G.Rect({
      attrs: {
        x: start.x - margin,
        y: end.y - margin,
        width: coord.isTransposed ? width + margin * 2 : 0,
        height: coord.isTransposed ? 0 : height + margin * 2
      }
    });

    if (coord.isTransposed) {
      clip.endState = {
        height: height + margin * 2
      };
    } else {
      clip.endState = {
        width: width + margin * 2
      };
    }
  }
  clip.isClip = true;
  return clip;
}

// 获取图形的包围盒
function getPointsBox(points) {
  if (Util.isEmpty(points)) {
    return null;
  }

  var minX = points[0].x;
  var maxX = points[0].x;
  var minY = points[0].y;
  var maxY = points[0].y;
  Util.each(points, function (point) {
    minX = minX > point.x ? point.x : minX;
    maxX = maxX < point.x ? point.x : maxX;
    minY = minY > point.y ? point.y : minY;
    maxY = maxY < point.y ? point.y : maxY;
  });
  return {
    minX: minX,
    maxX: maxX,
    minY: minY,
    maxY: maxY,
    centerX: (minX + maxX) / 2,
    centerY: (minY + maxY) / 2
  };
}

function getAngle(shape, coord) {
  var points = shape.points || shape.get('origin').points;
  var box = getPointsBox(points);
  var endAngle = void 0;
  var startAngle = void 0;
  var coordStartAngle = coord.startAngle;
  var coordEndAngle = coord.endAngle;
  var diffAngle = coordEndAngle - coordStartAngle;

  if (coord.isTransposed) {
    endAngle = box.maxY * diffAngle;
    startAngle = box.minY * diffAngle;
  } else {
    endAngle = box.maxX * diffAngle;
    startAngle = box.minX * diffAngle;
  }
  endAngle += coordStartAngle;
  startAngle += coordStartAngle;
  return {
    startAngle: startAngle,
    endAngle: endAngle
  };
}

function getAnimateParam(animateCfg, index, id) {
  var result = {};
  if (animateCfg.delay) {
    result.delay = Util.isFunction(animateCfg.delay) ? animateCfg.delay(index, id) : animateCfg.delay;
  }
  result.easing = Util.isFunction(animateCfg.easing) ? animateCfg.easing(index, id) : animateCfg.easing;
  result.duration = Util.isFunction(animateCfg.duration) ? animateCfg.duration(index, id) : animateCfg.duration;
  result.callback = animateCfg.callback;
  return result;
}

function scaleInY(shape, animateCfg) {
  var id = shape._id;
  var index = shape.get('index');
  var box = shape.getBBox();
  var points = shape.get('origin').points;
  var x = (box.minX + box.maxX) / 2;
  var y = void 0;

  if (points[0].y - points[1].y <= 0) {
    // 当顶点在零点之下
    y = box.maxY;
  } else {
    y = box.minY;
  }
  var v = [x, y, 1];
  shape.apply(v);
  shape.attr('transform', [['t', -x, -y], ['s', 1, 0.01], ['t', x, y]]);
  var endState = {
    transform: [['t', -x, -y], ['s', 1, 100], ['t', x, y]]
  };
  var animateParam = getAnimateParam(animateCfg, index, id, endState);
  shape.animate(endState, animateParam.duration, animateParam.easing, animateParam.callback, animateParam.delay);
}

function scaleInX(shape, animateCfg) {
  var id = shape._id;
  var index = shape.get('index');
  var box = shape.getBBox();
  var points = shape.get('origin').points;
  var x = void 0;
  var y = (box.minY + box.maxY) / 2;

  if (points[0].y - points[1].y > 0) {
    // 当顶点在零点之下
    x = box.maxX;
  } else {
    x = box.minX;
  }
  var v = [x, y, 1];
  shape.apply(v);
  shape.attr({
    transform: [['t', -x, -y], ['s', 0.01, 1], ['t', x, y]]
  });
  var endState = {
    transform: [['t', -x, -y], ['s', 100, 1], ['t', x, y]]
  };
  var animateParam = getAnimateParam(animateCfg, index, id, endState);
  shape.animate(endState, animateParam.duration, animateParam.easing, animateParam.callback, animateParam.delay);
}

function lineWidthOut(shape, animateCfg) {
  var endState = {
    lineWidth: 0,
    opacity: 0
  };
  var id = shape._id;
  var index = shape.get('index');
  var animateParam = getAnimateParam(animateCfg, index, id, endState);
  shape.animate(endState, animateParam.duration, animateParam.easing, function () {
    shape.remove();
  }, animateParam.delay);
}

function zoomIn(shape, animateCfg, coord) {
  var id = shape._id;
  var index = shape.get('index');
  var x = void 0;
  var y = void 0;
  if (coord.isPolar && shape.name !== 'point') {
    x = coord.getCenter().x;
    y = coord.getCenter().y;
  } else {
    var box = shape.getBBox();
    x = (box.minX + box.maxX) / 2;
    y = (box.minY + box.maxY) / 2;
  }
  var v = [x, y, 1];
  shape.apply(v);
  shape.attr({
    transform: [['t', -x, -y], ['s', 0.01, 0.01], ['t', x, y]]
  });
  var endState = {
    transform: [['t', -x, -y], ['s', 100, 100], ['t', x, y]]
  };
  var animateParam = getAnimateParam(animateCfg, index, id, endState);
  shape.animate(endState, animateParam.duration, animateParam.easing, animateParam.callback, animateParam.delay);
}

function zoomOut(shape, animateCfg, coord) {
  var id = shape._id;
  var index = shape.get('index');
  var x = void 0;
  var y = void 0;
  if (coord.isPolar && shape.name !== 'point') {
    x = coord.getCenter().x;
    y = coord.getCenter().y;
  } else {
    var box = shape.getBBox();
    x = (box.minX + box.maxX) / 2;
    y = (box.minY + box.maxY) / 2;
  }
  var v = [x, y, 1];
  shape.apply(v);
  var endState = {
    transform: [['t', -x, -y], ['s', 0.01, 0.01], ['t', x, y]]
  };
  var animateParam = getAnimateParam(animateCfg, index, id, endState);
  shape.animate(endState, animateParam.duration, animateParam.easing, function () {
    shape.remove();
  }, animateParam.delay);
}

function pathIn(shape, animateCfg) {
  if (shape.get('type') !== 'path') return;
  var id = shape._id;
  var index = shape.get('index');
  var path = PathUtil.pathToAbsolute(shape.attr('path'));
  shape.attr('path', [path[0]]);
  var endState = {
    path: path
  };
  var animateParam = getAnimateParam(animateCfg, index, id, endState);
  shape.animate(endState, animateParam.duration, animateParam.easing, animateParam.callback, animateParam.delay);
}

function pathOut(shape, animateCfg) {
  if (shape.get('type') !== 'path') return;
  var id = shape._id;
  var index = shape.get('index');
  var path = PathUtil.pathToAbsolute(shape.attr('path'));
  var endState = {
    path: [path[0]]
  };
  var animateParam = getAnimateParam(animateCfg, index, id, endState);
  shape.animate(endState, animateParam.duration, animateParam.easing, function () {
    shape.remove();
  }, animateParam.delay);
}

function clipIn(shape, animateCfg, coord, startAngle, endAngle) {
  var clip = getClip(coord);
  var canvas = shape.get('canvas');
  var id = shape._id;
  var index = shape.get('index');
  var endState = void 0;
  if (startAngle) {
    clip.attr('startAngle', startAngle);
    clip.attr('endAngle', startAngle);
    endState = {
      endAngle: endAngle
    };
  } else {
    endState = clip.endState;
  }
  clip.set('canvas', canvas);
  shape.attr('clip', clip);
  shape.setSilent('animating', true);
  var animateParam = getAnimateParam(animateCfg, index, id, endState);
  clip.animate(endState, animateParam.duration, animateParam.easing, function () {
    if (shape && !shape.get('destroyed')) {
      shape.attr('clip', null);
      shape.setSilent('cacheShape', null);
      shape.setSilent('animating', false);
      clip.remove();
    }
  }, animateParam.delay);
}

function fadeIn(shape, animateCfg) {
  var id = shape._id;
  var index = shape.get('index');
  var fillOpacity = Util.isNil(shape.attr('fillOpacity')) ? 1 : shape.attr('fillOpacity');
  var strokeOpacity = Util.isNil(shape.attr('strokeOpacity')) ? 1 : shape.attr('strokeOpacity');
  shape.attr('fillOpacity', 0);
  shape.attr('strokeOpacity', 0);
  var endState = {
    fillOpacity: fillOpacity,
    strokeOpacity: strokeOpacity
  };
  var animateParam = getAnimateParam(animateCfg, index, id, endState);
  shape.animate(endState, animateParam.duration, animateParam.easing, animateParam.callback, animateParam.delay);
}

function fadeOut(shape, animateCfg) {
  var id = shape._id;
  var index = shape.get('index');
  var endState = {
    fillOpacity: 0,
    strokeOpacity: 0
  };
  var animateParam = getAnimateParam(animateCfg, index, id, endState);
  shape.animate(endState, animateParam.duration, animateParam.easing, function () {
    shape.remove();
  }, animateParam.delay);
}

function fanIn(shape, animateCfg, coord) {
  var angle = getAngle(shape, coord);
  var endAngle = angle.endAngle;
  var startAngle = angle.startAngle;
  clipIn(shape, animateCfg, coord, startAngle, endAngle);
}

// 默认动画库
module.exports = {
  enter: {
    clipIn: clipIn,
    zoomIn: zoomIn,
    pathIn: pathIn,
    scaleInY: scaleInY,
    scaleInX: scaleInX,
    fanIn: fanIn,
    fadeIn: fadeIn
  },
  leave: {
    lineWidthOut: lineWidthOut,
    zoomOut: zoomOut,
    pathOut: pathOut,
    fadeOut: fadeOut
  },
  appear: {
    clipIn: clipIn,
    zoomIn: zoomIn,
    pathIn: pathIn,
    scaleInY: scaleInY,
    scaleInX: scaleInX,
    fanIn: fanIn,
    fadeIn: fadeIn
  },
  update: {
    fadeIn: fadeIn,
    fanIn: fanIn
  }
};

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview G2 图表的入口文件
 * @author dxq613@gmail.com
 */

var Util = __webpack_require__(0);
var View = __webpack_require__(282);
var G = __webpack_require__(2);
var Canvas = G.Canvas;
var DomUtil = G.DomUtil;
var Component = __webpack_require__(25);
var Controller = __webpack_require__(114);
var Facets = __webpack_require__(359);
var Global = __webpack_require__(1);

function _isScaleExist(scales, compareScale) {
  var flag = false;
  Util.each(scales, function (scale) {
    var scaleValues = [].concat(scale.values);
    var compareScaleValues = [].concat(compareScale.values);
    if (scale.type === compareScale.type && scale.field === compareScale.field && scaleValues.sort().toString() === compareScaleValues.sort().toString()) {
      flag = true;
      return;
    }
  });

  return flag;
}

/**
 * 图表的入口
 * @class Chart
 */

var Chart = function (_View) {
  _inherits(Chart, _View);

  function Chart() {
    _classCallCheck(this, Chart);

    return _possibleConstructorReturn(this, _View.apply(this, arguments));
  }

  /**
   * 获取默认的配置属性
   * @protected
   * @return {Object} 默认属性
   */
  Chart.prototype.getDefaultCfg = function getDefaultCfg() {
    var viewCfg = _View.prototype.getDefaultCfg.call(this);
    return Util.mix(viewCfg, {
      id: null,
      forceFit: false,
      container: null,
      wrapperEl: null,
      canvas: null,
      width: 500,
      height: 500,
      pixelRatio: null,
      padding: Global.plotCfg.padding,
      backPlot: null,
      frontPlot: null,
      plotBackground: null,
      background: null,
      views: []
    });
  };

  Chart.prototype.init = function init() {
    this._initCanvas();
    this._initPlot();
    this._initEvents();
    _View.prototype.init.call(this);

    var tooltipController = new Controller.Tooltip({
      chart: this,
      options: {}
    });
    this.set('tooltipController', tooltipController);

    var legendController = new Controller.Legend({
      chart: this
    });
    this.set('legendController', legendController);
    this.set('_id', 'chart'); // 防止同用户设定的 id 同名
    this.emit('afterinit'); // 初始化完毕
  };
  // 初始化画布


  Chart.prototype._initCanvas = function _initCanvas() {
    var container = this.get('container');
    var id = this.get('id');
    // 如果未设置 container 使用 ID, 兼容 2.x 版本
    if (!container && id) {
      container = id;
      this.set('container', id);
    }
    var width = this.get('width');
    var height = this.get('height');
    if (Util.isString(container)) {
      container = document.getElementById(container);
      if (!container) {
        throw new Error('Please specify the container for the chart!');
      }
      this.set('container', container);
    }
    var wrapperEl = DomUtil.createDom('<div style="position:relative;"></div>');
    container.appendChild(wrapperEl);
    this.set('wrapperEl', wrapperEl);
    if (this.get('forceFit')) {
      width = DomUtil.getWidth(container);
      this.set('width', width);
    }
    var canvas = new Canvas({
      containerDOM: wrapperEl,
      width: width,
      height: height,
      pixelRatio: this.get('pixelRatio')
    });
    this.set('canvas', canvas);
  };

  // 初始化绘图区间


  Chart.prototype._initPlot = function _initPlot() {
    this._initPlotBack(); // 最底层的是背景相关的 group
    var canvas = this.get('canvas');
    var backPlot = canvas.addGroup({
      zIndex: 1
    }); // 图表最后面的容器
    var plotContainer = canvas.addGroup({
      zIndex: 2
    }); // 图表所在的容器
    var frontPlot = canvas.addGroup({
      zIndex: 3
    }); // 图表前面的容器

    this.set('backPlot', backPlot);
    this.set('middlePlot', plotContainer);
    this.set('frontPlot', frontPlot);
  };

  // 初始化背景


  Chart.prototype._initPlotBack = function _initPlotBack() {
    var canvas = this.get('canvas');
    var plot = canvas.addGroup(Component.Plot, {
      padding: this.get('padding'),
      plotBackground: Util.mix({}, Global.plotBackground, this.get('plotBackground')),
      background: Util.mix({}, Global.background, this.get('background'))
    });
    this.set('plot', plot);
    this.set('plotRange', plot.get('plotRange'));
  };

  Chart.prototype._initEvents = function _initEvents() {
    if (this.get('forceFit')) {
      window.addEventListener('resize', Util.wrapBehavior(this, '_initForceFitEvent'));
    }
  };

  Chart.prototype._initForceFitEvent = function _initForceFitEvent() {
    var timer = setTimeout(Util.wrapBehavior(this, 'forceFit'), 200);
    clearTimeout(this.get('resizeTimer'));
    this.set('resizeTimer', timer);
  };

  // 绘制图例


  Chart.prototype._renderLegends = function _renderLegends() {
    var options = this.get('options');
    var legendOptions = options.legends;
    if (Util.isNil(legendOptions) || legendOptions !== false) {
      // 没有关闭图例
      var legendController = this.get('legendController');
      legendController.options = legendOptions || {};
      legendController.plotRange = this.get('plotRange');

      if (legendOptions && legendOptions.custom) {
        // 用户自定义图例
        legendController.addCustomLegend();
      } else {
        var geoms = this.getAllGeoms();
        var scales = [];
        Util.each(geoms, function (geom) {
          var view = geom.get('view');
          var attrs = geom.getAttrsForLegend();
          Util.each(attrs, function (attr) {
            var type = attr.type;
            var scale = attr.getScale(type);
            if (scale.type !== 'identity' && !_isScaleExist(scales, scale)) {
              scales.push(scale);
              var filteredValues = view.getFilteredValues(scale.field);
              legendController.addLegend(scale, attr, geom, filteredValues);
            }
          });
        });
      }

      legendController.alignLegends();
    }
  };

  // 绘制 tooltip


  Chart.prototype._renderTooltips = function _renderTooltips() {
    var options = this.get('options');
    if (Util.isNil(options.tooltip) || options.tooltip !== false) {
      // 用户没有关闭 tooltip
      var tooltipController = this.get('tooltipController');
      tooltipController.options = options.tooltip || {};
      tooltipController.renderTooltip();
    }
  };

  /**
   * 获取所有的几何标记
   * @return {Array} 所有的几何标记
   */


  Chart.prototype.getAllGeoms = function getAllGeoms() {
    var geoms = [];
    geoms = geoms.concat(this.get('geoms'));

    var views = this.get('views');
    Util.each(views, function (view) {
      geoms = geoms.concat(view.get('geoms'));
    });

    return geoms;
  };

  /**
   * 自适应宽度
   * @chainable
   * @return {Chart} 图表对象
   */


  Chart.prototype.forceFit = function forceFit() {
    var self = this;
    var container = self.get('container');
    var width = DomUtil.getWidth(container);
    if (width !== this.get('width')) {
      var height = this.get('height');
      this.changeSize(width, height);
    }
    return self;
  };

  /**
   * 改变大小
   * @param  {Number} width  图表宽度
   * @param  {Number} height 图表高度
   * @return {Chart} 图表对象
   */


  Chart.prototype.changeSize = function changeSize(width, height) {
    var self = this;
    var canvas = self.get('canvas');
    canvas.changeSize(width, height);

    self.set('width', width);
    self.set('height', height);
    var plot = self.get('plot');
    plot.repaint();

    self.repaint();
    this.emit('afterchangesize');
    return self;
  };
  /**
   * 改变宽度
   * @param  {Number} width  图表宽度
   * @return {Chart} 图表对象
   */


  Chart.prototype.changeWidth = function changeWidth(width) {
    return this.changeSize(width, this.get('height'));
  };
  /**
   * 改变宽度
   * @param  {Number} height  图表高度
   * @return {Chart} 图表对象
   */


  Chart.prototype.changeHeight = function changeHeight(height) {
    return this.changeSize(this.get('width'), height);
  };

  Chart.prototype.facet = function facet(type, cfg) {
    var cls = Facets[Util.upperFirst(type)];
    if (!cls) {
      throw new Error('Not support such type of facets as: ' + type);
    }
    var preFacets = this.get('facets');
    if (preFacets) {
      preFacets.destroy();
    }
    cfg.chart = this;
    var facets = new cls(cfg);
    this.set('facets', facets);
  };

  /**
   * 创建一个视图
   * @param  {Object} cfg 视图的配置项
   * @return {View} 视图对象
   */


  Chart.prototype.view = function view(cfg) {
    cfg = cfg || {};
    cfg.parent = this;
    cfg.backPlot = this.get('backPlot');
    cfg.middlePlot = this.get('middlePlot');
    cfg.frontPlot = this.get('frontPlot');
    cfg.canvas = this.get('canvas');
    if (Util.isNil(cfg.animate)) {
      cfg.animate = this.get('animate');
    }
    cfg.options = Util.mix({}, this._getSharedOptions(), cfg.options);
    var view = new View(cfg);
    view.set('_id', 'view' + this.get('views').length); // 标识 ID，防止同用户设定的 id 重名
    this.get('views').push(view);
    this.emit('addview', { view: view });
    return view;
  };

  Chart.prototype.removeView = function removeView(view) {
    var views = this.get('views');
    Util.Array.remove(views, view);
    view.destroy();
  };

  Chart.prototype._getSharedOptions = function _getSharedOptions() {
    var options = this.get('options');
    var sharedOptions = {};
    Util.each(['scales', 'coord', 'axes'], function (name) {
      sharedOptions[name] = Util.cloneDeep(options[name]);
    });
    return sharedOptions;
  };

  /**
   * @override
   * 当前chart 的范围
   */


  Chart.prototype.getViewRegion = function getViewRegion() {
    var plotRange = this.get('plotRange');
    return {
      start: plotRange.bl,
      end: plotRange.tr
    };
  };

  /**
   * 设置图例配置信息
   * @param  {String|Object} field 字段名
   * @param  {Object} [cfg] 图例的配置项
   * @return {Chart} 当前的图表对象
   */


  Chart.prototype.legend = function legend(field, cfg) {
    var options = this.get('options');
    if (!options.legends) {
      options.legends = {};
    }

    var legends = {};
    if (field === false) {
      options.legends = false;
    } else if (Util.isObject(field)) {
      legends = field;
    } else if (Util.isString(field)) {
      legends[field] = cfg;
    } else {
      legends = cfg;
    }
    Util.mix(options.legends, legends);

    return this;
  };

  /**
   * 设置提示信息
   * @param  {String|Object} visible 是否可见
   * @param  {Object} [cfg] 提示信息的配置项
   * @return {Chart} 当前的图表对象
   */


  Chart.prototype.tooltip = function tooltip(visible, cfg) {
    var options = this.get('options');
    if (!options.tooltip) {
      options.tooltip = {};
    }

    if (visible === false) {
      options.tooltip = false;
    } else if (Util.isObject(visible)) {
      Util.mix(options.tooltip, visible);
    } else {
      Util.mix(options.tooltip, cfg);
    }

    return this;
  };

  /**
   * 清空图表
   * @return {Chart} 当前的图表对象
   */


  Chart.prototype.clear = function clear() {
    this.emit('beforeclear');
    var views = this.get('views');
    while (views.length > 0) {
      var view = views.shift();
      view.destroy();
    }
    _View.prototype.clear.call(this);
    var canvas = this.get('canvas');
    canvas.draw();
    this.emit('afterclear');
    return this;
  };

  Chart.prototype.clearInner = function clearInner() {
    var views = this.get('views');
    Util.each(views, function (view) {
      view.clearInner();
    });

    var tooltipController = this.get('tooltipController');
    tooltipController && tooltipController.clear();

    if (!this.get('keepLegend')) {
      var legendController = this.get('legendController');
      legendController && legendController.clear();
    }

    _View.prototype.clearInner.call(this);
  };

  /**
   * 绘制图表
   * @override
   */


  Chart.prototype.paint = function paint() {
    _View.prototype.paint.call(this);
    !this.get('keepLegend') && this._renderLegends(); // 渲染图例
    this._renderTooltips(); // 渲染 tooltip
    this.set('keepLegend', false);
  };

  /**
   * @override
   * 显示或者隐藏
   */


  Chart.prototype.changeVisible = function changeVisible(visible) {
    var wrapperEl = this.get('wrapperEl');
    var visibleStr = visible ? '' : 'none';
    wrapperEl.style.display = visibleStr;
  };

  /**
   * 返回图表的 dataUrl 用于生成图片
   * @return {String} dataUrl 路径
   */


  Chart.prototype.toDataURL = function toDataURL() {
    var canvas = this.get('canvas');
    var canvasDom = canvas.get('el');
    var dataURL = canvasDom.toDataURL('image/png');
    return dataURL;
  };

  /**
   * 图表导出功能
   * @param  {String} [name] 图片的名称，默认为 chart.png
   * @return {String} 返回生成图片的 dataUrl 路径
   */


  Chart.prototype.downloadImage = function downloadImage(name) {
    var dataURL = this.toDataURL();
    var link = document.createElement('a');
    link.download = (name || 'chart') + '.png';
    link.href = dataURL.replace('image/png', 'image/octet-stream');
    link.click();
    return dataURL;
  };

  /**
   * 根据坐标点显示对应的 tooltip
   * @param  {Object} point 画布上的点
   * @return {Chart}       返回 chart 实例
   */


  Chart.prototype.showTooltip = function showTooltip(point) {
    var views = this.getViewsByPoint(point);
    if (views.length) {
      var tooltipController = this.get('tooltipController');
      tooltipController.showTooltip(point, views);
    }
    return this;
  };

  /**
   * 隐藏 tooltip
  * @return {Chart}       返回 chart 实例
   */


  Chart.prototype.hideTooltip = function hideTooltip() {
    var tooltipController = this.get('tooltipController');
    tooltipController.hideTooltip();
    return this;
  };

  /**
   * 根据传入的画布坐标，获取该处的 tooltip 上的记录信息
   * @param  {Object} point 画布坐标点
   * @return {Array}       返回结果
   */


  Chart.prototype.getTooltipItems = function getTooltipItems(point) {
    var self = this;
    var views = self.getViewsByPoint(point);
    var rst = [];
    Util.each(views, function (view) {
      var geoms = view.get('geoms');
      Util.each(geoms, function (geom) {
        var dataArray = geom.get('dataArray');
        var items = [];
        Util.each(dataArray, function (data) {
          var tmpPoint = geom.findPoint(point, data);
          if (tmpPoint) {
            var subItems = geom.getTipItems(tmpPoint);
            items = items.concat(subItems);
          }
        });
        rst = rst.concat(items);
      });
    });
    return rst;
  };

  /**
   * @override
   * 销毁图表
   */


  Chart.prototype.destroy = function destroy() {
    this.emit('beforedestroy');
    var canvas = this.get('canvas');
    var wrapperEl = this.get('wrapperEl');
    wrapperEl.parentNode.removeChild(wrapperEl);
    _View.prototype.destroy.call(this);
    canvas.destroy();
    window.removeEventListener('resize', Util.getWrapBehavior(this, '_initForceFitEvent'));
    this.emit('afterdestroy');
  };

  return Chart;
}(View);

module.exports = Chart;

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview view
 * @author dxq613@gmail.com
 */

var Base = __webpack_require__(63);
var Geom = __webpack_require__(284);
var Util = __webpack_require__(0);
var Controller = __webpack_require__(114);
var Global = __webpack_require__(1);
var FIELD_ORIGIN = '_origin';
var Animate = __webpack_require__(358);

function isFullCircle(coord) {
  var startAngle = coord.startAngle;
  var endAngle = coord.endAngle;
  if (!Util.isNil(startAngle) && !Util.isNil(endAngle) && endAngle - startAngle < Math.PI * 2) {
    return false;
  }
  return true;
}

function isBetween(value, start, end) {
  var tmp = (value - start) / (end - start);
  return tmp >= 0 && tmp <= 1;
}

function isPointInCoord(coord, point) {
  var result = false;
  if (coord) {
    var type = coord.type;
    if (type === 'theta') {
      var start = coord.start;
      var end = coord.end;
      result = isBetween(point.x, start.x, end.x) && isBetween(point.y, start.y, end.y);
    } else {
      var invertPoint = coord.invert(point);
      result = invertPoint.x >= 0 && invertPoint.y >= 0 && invertPoint.x <= 1 && invertPoint.y <= 1;
    }
  }
  return result;
}

var ViewGeoms = {};
Util.each(Geom, function (geomConstructor, className) {
  var methodName = Util.lowerFirst(className);
  ViewGeoms[methodName] = function (cfg) {
    var geom = new geomConstructor(cfg);
    this.addGeom(geom);
    return geom;
  };
});

/**
 * 图表中的视图
 * @class View
 */

var View = function (_Base) {
  _inherits(View, _Base);

  /**
   * 获取默认的配置属性
   * @protected
   * @return {Object} 默认属性
   */
  View.prototype.getDefaultCfg = function getDefaultCfg() {
    return {
      viewContainer: null,
      coord: null,
      start: { x: 0, y: 0 },
      end: { x: 1, y: 1 },
      geoms: [],
      scales: {},
      options: {},
      scaleController: null,
      padding: 0,
      parent: null,
      tooltipEnable: true, // 是否展示 tooltip
      animate: true
    };
  };

  function View(cfg) {
    _classCallCheck(this, View);

    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

    Util.mix(_this, ViewGeoms);
    _this.init();
    return _this;
  }

  /**
   * @protected
   * 初始化
   */


  View.prototype.init = function init() {
    this._initViewPlot(); // 先创建容器
    if (this.get('data')) {
      this._initData(this.get('data'));
    }
    this._initOptions();
    this._initControllers();
    this._bindEvents();
  };

  // 初始化配置项


  View.prototype._initOptions = function _initOptions() {
    var self = this;
    var options = Util.mix({}, self.get('options')); // 防止修改原始值
    if (!options.scales) {
      options.scales = {};
    }
    if (!options.coord) {
      options.coord = {};
    }

    if (options.animate === false) {
      this.set('animate', false);
    }

    if (options.tooltip === false || Util.isNull(options.tooltip)) {
      // 配置项方式关闭 tooltip
      this.set('tooltipEnable', false);
    }

    if (options.geoms && options.geoms.length) {
      Util.each(options.geoms, function (geomOption) {
        self._createGeom(geomOption);
      });
    }
    var scaleController = self.get('scaleController');
    if (scaleController) {
      scaleController.defs = options.scales;
    }
    var coordController = self.get('coordController');
    if (coordController) {
      coordController.reset(options.coord);
    }
    this.set('options', options);
  };

  View.prototype._createGeom = function _createGeom(cfg) {
    var type = cfg.type;
    var geom = void 0;
    if (this[type]) {
      geom = this[type]();
      Util.each(cfg, function (v, k) {
        if (geom[k]) {

          if (Util.isObject(v) && v.field) {
            // 配置项传入
            if (v === 'label') {
              geom[k](v.field, v.callback, v.cfg);
            } else {
              var _cfg = void 0;
              Util.each(v, function (value, key) {
                if (key !== 'field') {
                  _cfg = value;
                }
              });
              geom[k](v.field, _cfg);
            }
          } else {
            geom[k](v);
          }
        }
      });
    }
  };

  // 初始化所有的控制器


  View.prototype._initControllers = function _initControllers() {
    var options = this.get('options');

    var scaleController = new Controller.Scale({
      defs: options.scales
    });
    var coordController = new Controller.Coord(options.coord);
    this.set('scaleController', scaleController);
    this.set('coordController', coordController);

    var axisController = new Controller.Axis();
    this.set('axisController', axisController);

    var guideController = new Controller.Guide({
      options: options.guides || []
    });
    this.set('guideController', guideController);
  };

  View.prototype._initViewPlot = function _initViewPlot() {
    if (!this.get('viewContainer')) {
      // 用于 geom 的绘制
      this.set('viewContainer', this.get('middlePlot'));
    }
  };

  View.prototype._initGeoms = function _initGeoms() {
    var geoms = this.get('geoms');
    var filteredData = this.get('filteredData');
    var coord = this.get('coord');
    var viewId = this.get('_id');
    for (var i = 0; i < geoms.length; i++) {
      var geom = geoms[i];
      geom.set('data', filteredData);
      geom.set('coord', coord);
      geom.set('_id', viewId + '-geom' + i);
      geom.set('keyFields', this.get('keyFields'));
      geom.init();
    }
  };

  View.prototype._clearGeoms = function _clearGeoms() {
    var self = this;
    var geoms = self.get('geoms');
    for (var i = 0; i < geoms.length; i++) {
      var geom = geoms[i];
      geom.clear();
    }
  };

  View.prototype._removeGeoms = function _removeGeoms() {
    var self = this;
    var geoms = self.get('geoms');
    while (geoms.length > 0) {
      var geom = geoms.shift();
      geom.destroy();
    }
  };

  View.prototype._drawGeoms = function _drawGeoms() {
    var geoms = this.get('geoms');
    var coord = this.get('coord');
    for (var i = 0; i < geoms.length; i++) {
      var geom = geoms[i];
      geom.setCoord(coord);
      geom.paint();
    }
  };

  /**
   * View 所在的范围
   * @protected
   * @return {Object} View 所在的范围
   */


  View.prototype.getViewRegion = function getViewRegion() {
    var self = this;
    var parent = self.get('parent');
    var start = void 0;
    var end = void 0;
    if (parent) {
      var region = parent.getViewRegion();
      var viewRegion = self._getViewRegion(region.start, region.end);
      start = viewRegion.start;
      end = viewRegion.end;
    } else {
      start = self.get('start');
      end = self.get('end');
    }
    return {
      start: start,
      end: end
    };
  };

  // 获取 range 所在的范围


  View.prototype._getViewRegion = function _getViewRegion(plotStart, plotEnd) {
    var start = this.get('start');
    var end = this.get('end');
    var startX = start.x;
    var startY = 1 - end.y;
    var endX = end.x;
    var endY = 1 - start.y;
    var padding = this.get('padding');
    // 转换成 上、右、下、左的模式
    var allPadding = Util.toAllPadding(padding);
    var top = allPadding[0];
    var right = allPadding[1];
    var bottom = allPadding[2];
    var left = allPadding[3];

    var startPoint = {
      x: startX * (plotEnd.x - plotStart.x) + plotStart.x + left,
      y: startY * (plotEnd.y - plotStart.y) + plotStart.y - bottom

    };
    var endPoint = {
      x: endX * (plotEnd.x - plotStart.x) + plotStart.x - right,
      y: endY * (plotEnd.y - plotStart.y) + plotStart.y + top
    };

    return {
      start: startPoint,
      end: endPoint
    };
  };

  View.prototype._createCoord = function _createCoord() {
    var coordController = this.get('coordController');
    var region = this.getViewRegion();
    var coord = coordController.createCoord(region.start, region.end);
    this.set('coord', coord);
  };

  View.prototype._renderAxes = function _renderAxes() {
    var options = this.get('options');
    var axesOptions = options.axes;
    if (axesOptions === false) {
      // 不渲染坐标轴
      return;
    }
    var axisController = this.get('axisController');
    axisController.container = this.get('backPlot');
    axisController.coord = this.get('coord');
    axisController.options = axesOptions || {};
    var xScale = this.getXScale();
    var yScales = this.getYScales();
    var viewId = this.get('_id');
    axisController.createAxis(xScale, yScales, viewId);
  };

  View.prototype._renderGuides = function _renderGuides() {
    var guideController = this.get('guideController');
    if (!Util.isEmpty(guideController.options)) {
      var coord = this.get('coord');
      guideController.backContainer = this.get('backPlot');
      guideController.frontContainer = this.get('frontPlot');
      guideController.xScales = this._getScales('x');
      guideController.yScales = this._getScales('y');
      guideController.render(coord);
    }
  };
  // 注册事件


  View.prototype._bindEvents = function _bindEvents() {
    var eventController = new Controller.Event({
      view: this,
      canvas: this.get('canvas')
    });
    eventController.bindEvents();
    this.set('eventController', eventController);
  };
  // 清理时间


  View.prototype._clearEvents = function _clearEvents() {
    var eventController = this.get('eventController');
    eventController && eventController.clearEvents();
  };

  View.prototype._getScales = function _getScales(dimType) {
    var geoms = this.get('geoms');
    var result = {};
    for (var i = 0; i < geoms.length; i++) {
      var geom = geoms[i];
      var scale = dimType === 'x' ? geom.getXScale() : geom.getYScale();
      if (scale && !result[scale.field]) {
        result[scale.field] = scale;
      }
    }
    return result;
  };

  View.prototype._adjustScale = function _adjustScale() {
    this._setCatScalesRange();
    var geoms = this.get('geoms');
    var scaleController = this.get('scaleController');
    var colDefs = scaleController.defs;

    for (var i = 0; i < geoms.length; i++) {
      var geom = geoms[i];
      if (geom.get('type') === 'interval') {
        var yScale = geom.getYScale();
        var field = yScale.field;
        if (!(colDefs[field] && colDefs[field].min) && yScale.min > 0) {
          yScale.change({
            min: 0
          });
        }
      }
    }
  };

  View.prototype._setCatScalesRange = function _setCatScalesRange() {
    var self = this;
    var coord = self.get('coord');
    var xScale = self.getXScale();
    var yScales = self.getYScales();
    var scales = [];

    xScale && scales.push(xScale);
    scales = scales.concat(yScales);
    var inFullCircle = coord.isPolar && isFullCircle(coord);
    var scaleController = self.get('scaleController');
    var colDefs = scaleController.defs;
    Util.each(scales, function (scale) {
      if ((scale.isCategory || scale.isIdentity) && scale.values && !(colDefs[scale.field] && colDefs[scale.field].range)) {
        var count = scale.values.length;
        var range = void 0;
        if (count === 1) {
          range = [0.5, 1]; // 只有一个分类时,防止计算出现 [0.5,0.5]的状态
        } else {
          var widthRatio = 1;
          var offset = 0;
          if (inFullCircle) {
            if (!coord.isTransposed) {
              range = [0, 1 - 1 / count];
            } else {
              widthRatio = Global.widthRatio.multiplePie;
              offset = 1 / count * widthRatio;
              range = [offset / 2, 1 - offset / 2];
            }
          } else {
            offset = 1 / count * 1 / 2; // 两边留下分类空间的一半
            range = [offset, 1 - offset]; // 坐标轴最前面和最后面留下空白防止绘制柱状图时
          }
        }
        scale.range = range;
      }
    });
  };

  View.prototype.getXScale = function getXScale() {
    var geoms = this.get('geoms').filter(function (geom) {
      return geom.get('visible');
    });
    var xScale = null;
    if (!Util.isEmpty(geoms)) {
      xScale = geoms[0].getXScale();
    }
    return xScale;
  };

  View.prototype.getYScales = function getYScales() {
    var geoms = this.get('geoms').filter(function (geom) {
      return geom.get('visible');
    });
    var rst = [];

    for (var i = 0; i < geoms.length; i++) {
      var geom = geoms[i];
      var yScale = geom.getYScale();
      if (yScale && Util.indexOf(rst, yScale) === -1) {
        rst.push(yScale);
      }
    }
    return rst;
  };

  /**
   * 获取数据对应在画布空间的坐标
   * @param  {Object} item 原始数据
   * @return {Object}      返回对应的画布上的坐标点
   */


  View.prototype.getXY = function getXY(item) {
    var self = this;
    var coord = self.get('coord');
    var xScales = self._getScales('x');
    var yScales = self._getScales('y');
    var x = void 0;
    var y = void 0;

    for (var field in item) {
      if (xScales[field]) {
        x = xScales[field].scale(item[field]);
      }
      if (yScales[field]) {
        y = yScales[field].scale(item[field]);
      }
    }

    if (!Util.isNil(x) && !Util.isNil(y)) {
      return coord.convert({
        x: x,
        y: y
      });
    }

    return null;
  };

  /**
   * 获取逼近的点的数据集合
   * @param  {Object} point 画布上的像素点
   * @return {Array} 数据
   */


  View.prototype.getSnapRecords = function getSnapRecords(point) {
    var self = this;
    var geoms = self.get('geoms');
    var rst = [];
    Util.each(geoms, function (geom) {
      var dataArray = geom.get('dataArray');
      var record = void 0;
      Util.each(dataArray, function (data) {
        record = geom.findPoint(point, data);
        record && rst.push(record);
      });
    });
    return rst;
  };

  /**
   * @protected
   * 添加几何标记
   * @param {Geom} geom 几何标记
   */


  View.prototype.addGeom = function addGeom(geom) {
    var self = this;
    var geoms = self.get('geoms');
    geoms.push(geom);
    geom.set('view', self);
    var container = self.get('viewContainer');
    geom.set('container', container);
    geom.set('animate', self.get('animate'));
    geom.bindEvents();
  };

  /**
   * @protected
   * 移除几何标记
   * @param {Geom} geom 几何标记
   */


  View.prototype.removeGeom = function removeGeom(geom) {
    var geoms = this.get('geoms');
    Util.Array.remove(geoms, geom);
    geom.destroy();
  };

  View.prototype.createScale = function createScale(field, data) {
    var scales = this.get('scales');
    var parent = this.get('parent');
    var scale = scales[field];
    var filters = this._getFilters();
    if (!data) {
      var filteredData = this.get('filteredData');
      // 过滤导致数据为空时，需要使用全局数据
      // 参与过滤的字段的度量也根据全局数据来生成
      if (filteredData.length && !(filters && filters[field])) {
        data = filteredData;
      } else {
        data = this.get('data');
      }
    }
    var scaleController = this.get('scaleController');
    if (!scale) {
      scale = scaleController.createScale(field, data);
      if (scale.sync && parent) {
        var parentScale = parent.createScale(field, data);
        scale = this._getSyncScale(parentScale, scale);
      }
      scales[field] = scale;
    } else if (scale.sync) {
      // 防止 view 内部创建的scale，Chart 上的scale 范围更大
      var newScale = scaleController.createScale(field, data);
      this._syncScale(scale, newScale);
    }
    return scale;
  };

  // 如果需要同步度量，则使得 values,min,max的范围最大


  View.prototype._getSyncScale = function _getSyncScale(parentScale, scale) {
    if (parentScale.type !== scale.type) {
      return scale;
    }
    this._syncScale(parentScale, scale);
    return parentScale;
  };

  View.prototype._syncScale = function _syncScale(distScale, sourceScale) {
    var mergeValues = Util.union(distScale.values, sourceScale.values);
    if (sourceScale.isLinear) {
      var max = Math.max(distScale.max, sourceScale.max);
      var min = Math.min(distScale.min, sourceScale.min);
      if (distScale.max !== max || distScale.min !== min) {
        distScale.change({
          min: min,
          max: max,
          values: mergeValues
        });
      }
    }

    if (mergeValues.length !== distScale.values.length) {
      distScale.change({
        values: mergeValues
      });
    }
  };

  View.prototype.getFilteredValues = function getFilteredValues(field) {
    var scale = this.get('scales')[field];
    var values = scale.values;
    var filters = this._getFilters();
    var rst = void 0;
    if (filters && filters[field]) {
      rst = values.filter(filters[field]);
    } else {
      rst = values.slice(0);
    }
    return rst;
  };

  View.prototype.filter = function filter(field, condition) {
    var options = this.get('options');
    if (!options.filters) {
      options.filters = {};
    }
    options.filters[field] = condition;
  };

  // 获取 filters


  View.prototype._getFilters = function _getFilters() {
    var options = this.get('options');
    return options.filters;
  };

  // 执行 filter 数据


  View.prototype.execFilter = function execFilter(data) {
    var self = this;
    var filters = self._getFilters();
    if (filters) {
      data = data.filter(function (obj) {
        var rst = true;
        Util.each(filters, function (fn, k) {
          rst = fn(obj[k], obj);
          if (!rst) {
            return false;
          }
        });
        return rst;
      });
    }
    return data;
  };

  View.prototype.axis = function axis(field, cfg) {
    var options = this.get('options');
    if (field === false) {
      options.axes = false;
    } else {
      if (!options.axes) {
        options.axes = {};
      }
      var axisOptions = options.axes;
      axisOptions[field] = cfg;
    }

    return this;
  };

  View.prototype.guide = function guide() {
    return this.get('guideController');
  };

  View.prototype._getKeyFields = function _getKeyFields(scaleDefs) {
    var keyFields = [];
    Util.each(scaleDefs, function (def, field) {
      if (def.key) {
        keyFields.push(field);
      }
    });
    this.set('keyFields', keyFields);
  };

  View.prototype.scale = function scale(field, cfg) {
    var options = this.get('options');
    var scaleDefs = options.scales;
    if (Util.isObject(field)) {
      Util.mix(scaleDefs, field);
    } else {
      scaleDefs[field] = cfg;
    }

    this._getKeyFields(scaleDefs);
    return this;
  };

  View.prototype.tooltip = function tooltip(visible) {
    this.set('tooltipEnable', visible);
    return this;
  };

  View.prototype.animate = function animate(enable) {
    var options = this.get('options');
    options.animate = enable;
    this.set('animate', enable);
    return this;
  };

  View.prototype.changeOptions = function changeOptions(options) {
    this.set('options', options);
    this._initOptions(options);
    return this;
  };

  /**
   * @internal 查找包含指定点的视图
   * @param  {Object} point 点的位置
   * @return {Array} 多个视图
   */


  View.prototype.getViewsByPoint = function getViewsByPoint(point) {
    var rst = [];
    var views = this.get('views');

    if (isPointInCoord(this.get('coord'), point)) {
      rst.push(this);
    }

    Util.each(views, function (view) {
      if (view.get('visible') && isPointInCoord(view.get('coord'), point)) {
        rst.push(view);
      }
    });
    return rst;
  };

  /**
   * 遍历所有的 shape ，用户更改 shape 后进行刷新
   * @param  {Function} fn 回调函数包含参数：record,shape,geom,view
   * @return {View} 当前视图
   */


  View.prototype.eachShape = function eachShape(fn) {
    var self = this;
    var views = self.get('views');
    var canvas = self.get('canvas');
    Util.each(views, function (view) {
      view.eachShape(fn);
    });
    var geoms = this.get('geoms');
    Util.each(geoms, function (geom) {
      var shapes = geom.getShapes();
      Util.each(shapes, function (shape) {
        var origin = shape.get('origin');
        if (Util.isArray(origin)) {
          var arr = origin.map(function (subOrigin) {
            return subOrigin[FIELD_ORIGIN];
          });
          fn(arr, shape, geom, self);
        } else {
          var obj = origin[FIELD_ORIGIN];
          fn(obj, shape, geom, self);
        }
      });
    });
    canvas.draw();
    return this;
  };

  /**
   * 遍历所有的 shape ，回调函数中 true / false 控制图形是否显示
   * @param  {Function} fn 回调函数包含参数：record,shape,geom,view
   * @return {View} 当前视图
   */


  View.prototype.filterShape = function filterShape(fn) {
    var callback = function callback(record, shape, geom, view) {
      if (!fn(record, shape, geom, view)) {
        shape.set('visible', false);
      } else {
        shape.set('visible', true);
      }
    };
    this.eachShape(callback);
    return this;
  };

  View.prototype.clearInner = function clearInner() {
    this.set('scales', {});
    var options = this.get('options');
    options.geoms = null;
    this._clearGeoms();
    // reset guide
    this.get('guideController') && this.get('guideController').reset();
    // clear axis
    this.get('axisController') && this.get('axisController').clear();
  };

  /**
   * 清除视图内容，包括 geoms
   * @return {View} 当前视图
   */


  View.prototype.clear = function clear() {
    var options = this.get('options');
    options.filters = null;
    this._removeGeoms();
    // const container = this.get('viewContainer');
    // container.clear();
    this.clearInner();
    this.get('guideController') && this.get('guideController').clear();
    this.set('isUpdate', false);
    this.set('keyFields', []);
    return this;
  };

  /**
   * 设置坐标系信息
   * @param  {String} type 类型
   * @param  {Object} cfg  配置项
   * @return {Object} coordController 坐标系的管理器
   */


  View.prototype.coord = function coord(type, cfg) {
    var coordController = this.get('coordController');
    coordController.reset({
      type: type,
      cfg: cfg
    });
    return coordController;
  };

  /**
   * 当父元素边框发生改变时坐标系需要重新调整
   * @protected
   */


  View.prototype.resetCoord = function resetCoord() {
    this._createCoord();
  };

  /**
   * 绘制 geometry 前处理一些度量统一
   * @protected
   */


  View.prototype.beforeDraw = function beforeDraw() {};

  View.prototype.source = function source(data, scales) {
    this._initData(data);
    if (scales) {
      this.scale(scales);
    }
    this.emit('setdata');
    return this;
  };

  View.prototype.changeData = function changeData(data) {
    this.emit('beforechangedata');
    this._initData(data);
    this.emit('afterchangedata');
    this.repaint();
    return this;
  };

  View.prototype._initData = function _initData(data) {
    var dataView = this.get('dataView');
    if (dataView) {
      dataView.off('change', Util.getWrapBehavior(this, '_onViewChange'));
      this.set('dataView', null);
    }
    if (data && data.isDataView) {
      data.on('change', Util.wrapBehavior(this, '_onViewChange'));
      this.set('dataView', data);
      data = data.rows;
    }
    this.set('data', data);
  };

  View.prototype._onViewChange = function _onViewChange() {
    this.emit('beforechangedata');
    var dataView = this.get('dataView');
    var rows = dataView.rows;
    this.set('data', rows);
    this.emit('afterchangedata');
    this.repaint();
  };

  View.prototype.render = function render(stopDraw) {
    this.emit('beforerender');
    var views = this.get('views');
    var animate = this.get('animate');
    // 初始化 View 的数据
    Util.each(views, function (view) {
      view.initView();
    });
    this.initView();
    this.emit('beforepaint');
    // 绘制
    Util.each(views, function (view) {
      view.paint();
    });
    this.paint();
    this.emit('afterpaint');
    if (!stopDraw) {
      var backPlot = this.get('backPlot');
      backPlot.sort();
      var canvas = this.get('canvas');

      if (animate) {
        var isUpdate = this.get('isUpdate');
        Util.each(views, function (view) {
          Animate.execAnimation(view, isUpdate);
        });
        Animate.execAnimation(this, isUpdate);
      } else {
        canvas.draw();
      }
    }
    this.emit('afterrender');
    return this;
  };

  View.prototype.initView = function initView() {
    var data = this.get('data') || [];
    var filteredData = this.execFilter(data);
    this.set('filteredData', filteredData);
    // if (!Util.isEmpty(data)) {
    this._createCoord(); // draw geometry 前绘制区域可能会发生改变
    this._initGeoms();
    this._adjustScale();
    // }
  };

  View.prototype.paint = function paint() {
    var data = this.get('data');
    if (!Util.isEmpty(data)) {
      this.beforeDraw();
      this._drawGeoms();
      this._renderGuides();
    }
    this._renderAxes();
  };

  View.prototype.changeVisible = function changeVisible(visible) {
    var geoms = this.get('geoms');
    Util.each(geoms, function (geom) {
      if (geom.get('visible')) {
        // geom 隐藏时不受
        geom.changeVisible(visible, true);
      }
    });
    this.get('axisController') && this.get('axisController').changeVisible(visible);
    this.get('guideController') && this.get('guideController').changeVisible(visible);
    var canvas = this.get('canvas');

    canvas.draw();
  };

  View.prototype.repaint = function repaint() {
    this.set('isUpdate', true);
    this.clearInner();
    this.render();
  };

  View.prototype.destroy = function destroy() {
    this._clearEvents();
    var dataView = this.get('dataView');
    dataView && dataView.off('change', Util.getWrapBehavior(this, '_onViewChange'));
    this.clear();
    _Base.prototype.destroy.call(this);
  };

  return View;
}(Base);

module.exports = View;

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * EventEmitter v5.2.4 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - http://oli.me.uk/
 * @preserve
 */

;(function (exports) {
    'use strict';

    /**
     * Class for managing events.
     * Can be extended to provide event functionality in other classes.
     *
     * @class EventEmitter Manages event registering and emitting.
     */

    function EventEmitter() {}

    // Shortcuts to improve speed and size
    var proto = EventEmitter.prototype;
    var originalGlobalValue = exports.EventEmitter;

    /**
     * Finds the index of the listener for the event in its storage array.
     *
     * @param {Function[]} listeners Array of listeners to search through.
     * @param {Function} listener Method to look for.
     * @return {Number} Index of the specified listener, -1 if not found
     * @api private
     */
    function indexOfListener(listeners, listener) {
        var i = listeners.length;
        while (i--) {
            if (listeners[i].listener === listener) {
                return i;
            }
        }

        return -1;
    }

    /**
     * Alias a method while keeping the context correct, to allow for overwriting of target method.
     *
     * @param {String} name The name of the target method.
     * @return {Function} The aliased method
     * @api private
     */
    function alias(name) {
        return function aliasClosure() {
            return this[name].apply(this, arguments);
        };
    }

    /**
     * Returns the listener array for the specified event.
     * Will initialise the event object and listener arrays if required.
     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
     * Each property in the object response is an array of listener functions.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Function[]|Object} All listener functions for the event.
     */
    proto.getListeners = function getListeners(evt) {
        var events = this._getEvents();
        var response;
        var key;

        // Return a concatenated array of all matching events if
        // the selector is a regular expression.
        if (evt instanceof RegExp) {
            response = {};
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    response[key] = events[key];
                }
            }
        } else {
            response = events[evt] || (events[evt] = []);
        }

        return response;
    };

    /**
     * Takes a list of listener objects and flattens it into a list of listener functions.
     *
     * @param {Object[]} listeners Raw listener objects.
     * @return {Function[]} Just the listener functions.
     */
    proto.flattenListeners = function flattenListeners(listeners) {
        var flatListeners = [];
        var i;

        for (i = 0; i < listeners.length; i += 1) {
            flatListeners.push(listeners[i].listener);
        }

        return flatListeners;
    };

    /**
     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Object} All listener functions for an event in an object.
     */
    proto.getListenersAsObject = function getListenersAsObject(evt) {
        var listeners = this.getListeners(evt);
        var response;

        if (listeners instanceof Array) {
            response = {};
            response[evt] = listeners;
        }

        return response || listeners;
    };

    function isValidListener(listener) {
        if (typeof listener === 'function' || listener instanceof RegExp) {
            return true;
        } else if (listener && (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) === 'object') {
            return isValidListener(listener.listener);
        } else {
            return false;
        }
    }

    /**
     * Adds a listener function to the specified event.
     * The listener will not be added if it is a duplicate.
     * If the listener returns true then it will be removed after it is called.
     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListener = function addListener(evt, listener) {
        if (!isValidListener(listener)) {
            throw new TypeError('listener must be a function');
        }

        var listeners = this.getListenersAsObject(evt);
        var listenerIsWrapped = (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) === 'object';
        var key;

        for (key in listeners) {
            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
                listeners[key].push(listenerIsWrapped ? listener : {
                    listener: listener,
                    once: false
                });
            }
        }

        return this;
    };

    /**
     * Alias of addListener
     */
    proto.on = alias('addListener');

    /**
     * Semi-alias of addListener. It will add a listener that will be
     * automatically removed after its first execution.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addOnceListener = function addOnceListener(evt, listener) {
        return this.addListener(evt, {
            listener: listener,
            once: true
        });
    };

    /**
     * Alias of addOnceListener.
     */
    proto.once = alias('addOnceListener');

    /**
     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
     * You need to tell it what event names should be matched by a regex.
     *
     * @param {String} evt Name of the event to create.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvent = function defineEvent(evt) {
        this.getListeners(evt);
        return this;
    };

    /**
     * Uses defineEvent to define multiple events.
     *
     * @param {String[]} evts An array of event names to define.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvents = function defineEvents(evts) {
        for (var i = 0; i < evts.length; i += 1) {
            this.defineEvent(evts[i]);
        }
        return this;
    };

    /**
     * Removes a listener function from the specified event.
     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to remove the listener from.
     * @param {Function} listener Method to remove from the event.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListener = function removeListener(evt, listener) {
        var listeners = this.getListenersAsObject(evt);
        var index;
        var key;

        for (key in listeners) {
            if (listeners.hasOwnProperty(key)) {
                index = indexOfListener(listeners[key], listener);

                if (index !== -1) {
                    listeners[key].splice(index, 1);
                }
            }
        }

        return this;
    };

    /**
     * Alias of removeListener
     */
    proto.off = alias('removeListener');

    /**
     * Adds listeners in bulk using the manipulateListeners method.
     * If you pass an object as the first argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
     * You can also pass it a regular expression to add the array of listeners to all events that match it.
     * Yeah, this function does quite a bit. That's probably a bad thing.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListeners = function addListeners(evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(false, evt, listeners);
    };

    /**
     * Removes listeners in bulk using the manipulateListeners method.
     * If you pass an object as the first argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be removed.
     * You can also pass it a regular expression to remove the listeners from all events that match it.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListeners = function removeListeners(evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(true, evt, listeners);
    };

    /**
     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
     * The first argument will determine if the listeners are removed (true) or added (false).
     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be added/removed.
     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
     *
     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
        var i;
        var value;
        var single = remove ? this.removeListener : this.addListener;
        var multiple = remove ? this.removeListeners : this.addListeners;

        // If evt is an object then pass each of its properties to this method
        if ((typeof evt === 'undefined' ? 'undefined' : _typeof(evt)) === 'object' && !(evt instanceof RegExp)) {
            for (i in evt) {
                if (evt.hasOwnProperty(i) && (value = evt[i])) {
                    // Pass the single listener straight through to the singular method
                    if (typeof value === 'function') {
                        single.call(this, i, value);
                    } else {
                        // Otherwise pass back to the multiple function
                        multiple.call(this, i, value);
                    }
                }
            }
        } else {
            // So evt must be a string
            // And listeners must be an array of listeners
            // Loop over it and pass each one to the multiple method
            i = listeners.length;
            while (i--) {
                single.call(this, evt, listeners[i]);
            }
        }

        return this;
    };

    /**
     * Removes all listeners from a specified event.
     * If you do not specify an event then all listeners will be removed.
     * That means every event will be emptied.
     * You can also pass a regex to remove all events that match it.
     *
     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeEvent = function removeEvent(evt) {
        var type = typeof evt === 'undefined' ? 'undefined' : _typeof(evt);
        var events = this._getEvents();
        var key;

        // Remove different things depending on the state of evt
        if (type === 'string') {
            // Remove all listeners for the specified event
            delete events[evt];
        } else if (evt instanceof RegExp) {
            // Remove all events matching the regex.
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    delete events[key];
                }
            }
        } else {
            // Remove all listeners in all events
            delete this._events;
        }

        return this;
    };

    /**
     * Alias of removeEvent.
     *
     * Added to mirror the node API.
     */
    proto.removeAllListeners = alias('removeEvent');

    /**
     * Emits an event of your choice.
     * When emitted, every listener attached to that event will be executed.
     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
     * So they will not arrive within the array on the other side, they will be separate.
     * You can also pass a regular expression to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {Array} [args] Optional array of arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emitEvent = function emitEvent(evt, args) {
        var listenersMap = this.getListenersAsObject(evt);
        var listeners;
        var listener;
        var i;
        var key;
        var response;

        for (key in listenersMap) {
            if (listenersMap.hasOwnProperty(key)) {
                listeners = listenersMap[key].slice(0);

                for (i = 0; i < listeners.length; i++) {
                    // If the listener returns true then it shall be removed from the event
                    // The function is executed either with a basic call or an apply if there is an args array
                    listener = listeners[i];

                    if (listener.once === true) {
                        this.removeListener(evt, listener.listener);
                    }

                    response = listener.listener.apply(this, args || []);

                    if (response === this._getOnceReturnValue()) {
                        this.removeListener(evt, listener.listener);
                    }
                }
            }
        }

        return this;
    };

    /**
     * Alias of emitEvent
     */
    proto.trigger = alias('emitEvent');

    /**
     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {...*} Optional additional arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emit = function emit(evt) {
        var args = Array.prototype.slice.call(arguments, 1);
        return this.emitEvent(evt, args);
    };

    /**
     * Sets the current value to check against when executing listeners. If a
     * listeners return value matches the one set here then it will be removed
     * after execution. This value defaults to true.
     *
     * @param {*} value The new value to check for when executing listeners.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.setOnceReturnValue = function setOnceReturnValue(value) {
        this._onceReturnValue = value;
        return this;
    };

    /**
     * Fetches the current value to check against when executing listeners. If
     * the listeners return value matches this one then it should be removed
     * automatically. It will return true by default.
     *
     * @return {*|Boolean} The current value to check for or the default, true.
     * @api private
     */
    proto._getOnceReturnValue = function _getOnceReturnValue() {
        if (this.hasOwnProperty('_onceReturnValue')) {
            return this._onceReturnValue;
        } else {
            return true;
        }
    };

    /**
     * Fetches the events object and creates one if required.
     *
     * @return {Object} The events storage object.
     * @api private
     */
    proto._getEvents = function _getEvents() {
        return this._events || (this._events = {});
    };

    /**
     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
     *
     * @return {Function} Non conflicting EventEmitter class.
     */
    EventEmitter.noConflict = function noConflict() {
        exports.EventEmitter = originalGlobalValue;
        return EventEmitter;
    };

    // Expose the class either via AMD, CommonJS or the global object
    if (true) {
        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
            return EventEmitter;
        }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
        module.exports = EventEmitter;
    } else {
        exports.EventEmitter = EventEmitter;
    }
})(this || {});

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {


var Geom = __webpack_require__(9);
Geom.Point = __webpack_require__(312);
Geom.PointJitter = Geom.Point.Jitter;
Geom.Path = __webpack_require__(111);
Geom.Line = __webpack_require__(313);
Geom.LineStack = Geom.Line.Stack;
Geom.Interval = __webpack_require__(314);
Geom.IntervalStack = Geom.Interval.Stack;
Geom.IntervalDodge = Geom.Interval.Dodge;
Geom.IntervalSymmetric = Geom.Interval.Symmetric;

Geom.Area = __webpack_require__(315);
Geom.AreaStack = Geom.Area.Stack;
Geom.Polygon = __webpack_require__(316);
Geom.Schema = __webpack_require__(317);
Geom.SchemaDodge = Geom.Schema.Dodge;
Geom.Edge = __webpack_require__(318);
Geom.Heatmap = __webpack_require__(319);

module.exports = Geom;

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {


var Base = __webpack_require__(16);
Base.Color = __webpack_require__(286);
Base.Size = __webpack_require__(287);
Base.Opacity = __webpack_require__(288);
Base.Shape = __webpack_require__(289);
Base.Position = __webpack_require__(290);
module.exports = Base;

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the color attribute of core
 * @author huangtonger@aliyun.com
 */

var ColorUtil = __webpack_require__(64);
var Base = __webpack_require__(16);
var Util = __webpack_require__(0);

/**
 * 视觉通道 color
 * @class Attr.Color
 */

var Color = function (_Base) {
  _inherits(Color, _Base);

  function Color(cfg) {
    _classCallCheck(this, Color);

    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

    _this.names = ['color'];
    _this.type = 'color';
    _this.gradient = null;
    if (Util.isString(_this.values)) {
      _this.linear = true;
    }
    return _this;
  }

  /**
   * @override
   */


  Color.prototype.getLinearValue = function getLinearValue(percent) {
    var gradient = this.gradient;
    if (!gradient) {
      var values = this.values;
      gradient = ColorUtil.gradient(values);
      this.gradient = gradient;
    }
    return gradient(percent);
  };

  return Color;
}(Base);

module.exports = Color;

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the size attribute of core
 * @author huangtonger@aliyun.com
 */

var Base = __webpack_require__(16);

/**
 * 视觉通道 size
 * @class Attr.Size
 */

var Size = function (_Base) {
  _inherits(Size, _Base);

  function Size(cfg) {
    _classCallCheck(this, Size);

    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

    _this.names = ['size'];
    _this.type = 'size';
    _this.gradient = null;
    return _this;
  }

  return Size;
}(Base);

module.exports = Size;

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the opacity attribute of core
 * @author huangtonger@aliyun.com
 */

var Base = __webpack_require__(16);

/**
 * 视觉通道 Opacity
 * @class Attr.Opacity
 */

var Opacity = function (_Base) {
  _inherits(Opacity, _Base);

  function Opacity(cfg) {
    _classCallCheck(this, Opacity);

    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

    _this.names = ['opacity'];
    _this.type = 'opacity';
    _this.gradient = null;
    return _this;
  }

  return Opacity;
}(Base);

module.exports = Opacity;

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the shape attribute of core
 * @author huangtonger@aliyun.com
 */

var Base = __webpack_require__(16);

/**
 * 视觉通道 Shape
 * @class Attr.Shape
 */

var Shape = function (_Base) {
  _inherits(Shape, _Base);

  function Shape(cfg) {
    _classCallCheck(this, Shape);

    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

    _this.names = ['shape'];
    _this.type = 'shape';
    _this.gradient = null;
    return _this;
  }

  /**
   * @override
   */


  Shape.prototype.getLinearValue = function getLinearValue(percent) {
    var values = this.values;
    var index = Math.round((values.length - 1) * percent);
    return values[index];
  };

  return Shape;
}(Base);

module.exports = Shape;

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the position attribute of core
 * @author huangtonger@aliyun.com
 */

var Util = __webpack_require__(0);
var Base = __webpack_require__(16);

var Position = function (_Base) {
  _inherits(Position, _Base);

  function Position(cfg) {
    _classCallCheck(this, Position);

    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

    _this.names = ['x', 'y'];
    _this.type = 'position';
    return _this;
  }

  Position.prototype.mapping = function mapping(x, y) {
    var scales = this.scales;
    var coord = this.coord;
    var scaleX = scales[0];
    var scaleY = scales[1];
    var rstX = void 0;
    var rstY = void 0;
    var obj = void 0;
    if (Util.isNil(x) || Util.isNil(y)) {
      return [];
    }
    if (Util.isArray(y) && Util.isArray(x)) {
      rstX = [];
      rstY = [];
      for (var i = 0, j = 0; i < x.length && j < y.length; i++, j++) {
        obj = coord.convertPoint({
          x: scaleX.scale(x[i]),
          y: scaleY.scale(y[j])
        });
        rstX.push(obj.x);
        rstY.push(obj.y);
      }
    } else if (Util.isArray(y)) {
      x = scaleX.scale(x);
      rstY = [];
      Util.each(y, function (yVal) {
        yVal = scaleY.scale(yVal);
        obj = coord.convertPoint({
          x: x,
          y: yVal
        });
        if (rstX && rstX !== obj.x) {
          if (!Util.isArray(rstX)) {
            rstX = [rstX];
          }
          rstX.push(obj.x);
        } else {
          rstX = obj.x;
        }
        rstY.push(obj.y);
      });
    } else if (Util.isArray(x)) {
      y = scaleY.scale(y);
      rstX = [];
      Util.each(x, function (xVal) {
        xVal = scaleX.scale(xVal);
        obj = coord.convertPoint({
          x: xVal,
          y: y
        });
        if (rstY && rstY !== obj.y) {
          if (!Util.isArray(rstY)) {
            rstY = [rstY];
          }
          rstY.push(obj.y);
        } else {
          rstY = obj.y;
        }
        rstX.push(obj.x);
      });
    } else {
      x = scaleX.scale(x);
      y = scaleY.scale(y);
      var point = coord.convertPoint({
        x: x,
        y: y
      });
      rstX = point.x;
      rstY = point.y;
    }
    return [rstX, rstY];
  };

  return Position;
}(Base);

module.exports = Position;

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview Theme entry
 * @author sima.zhang
 */
var Theme = {
  default: __webpack_require__(107),
  dark: __webpack_require__(292)
};

module.exports = Theme;

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

var _html, _tooltip;

/**
 * @fileOverview G2 3.0 dark theme
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var BasicTheme = __webpack_require__(107);

// tooltip 相关 dom 的 css 类名
var TOOLTIP_CONTAINER_CLASS = 'g2-tooltip';
var LEGEND_CONTAINER_CLASS = 'g2-legend';

var DarkTheme = Util.deepMix({}, BasicTheme, {
  background: {
    fill: '#1F1F1F',
    radius: 2
  }, // 容器区域
  plotBackground: {
    fill: '#1F1F1F'
  }, // 绘图区域
  axis: {
    top: {
      label: {
        textStyle: {
          fill: '#A6A6A6'
        }
      },
      line: {
        stroke: '#737373'
      },
      tickLine: {
        stroke: '#737373'
      }
    },
    bottom: {
      label: {
        textStyle: {
          fill: '#A6A6A6'
        }
      },
      line: {
        stroke: '#737373'
      },
      tickLine: {
        stroke: '#737373'
      }
    },
    left: {
      label: {
        textStyle: {
          fill: '#A6A6A6'
        }
      },
      grid: {
        lineStyle: {
          stroke: '#404040'
        }
      }
    },
    right: {
      label: {
        textStyle: {
          fill: '#A6A6A6'
        }
      },
      grid: {
        lineStyle: {
          stroke: '#404040'
        }
      }
    },
    circle: {
      label: {
        textStyle: {
          fill: '#A6A6A6'
        }
      },
      line: {
        stroke: '#737373'
      },
      tickLine: {
        stroke: '#737373'
      },
      grid: {
        lineStyle: {
          stroke: '#404040'
        }
      }
    },
    radius: {
      label: {
        textStyle: {
          fill: '#A6A6A6'
        }
      },
      line: {
        stroke: '#737373'
      },
      tickLine: {
        stroke: '#737373'
      },
      grid: {
        lineStyle: {
          stroke: '#404040'
        }
      }
    },
    helix: {
      line: {
        stroke: '#737373'
      },
      tickLine: {
        stroke: '#737373'
      }
    }
  },
  label: {
    textStyle: {
      fill: '#A6A6A6'
    }
  },
  legend: {
    right: {
      textStyle: {
        fill: '#737373'
      },
      unCheckColor: '#bfbfbf'
    },
    left: {
      textStyle: {
        fill: '#737373'
      }, // 图例项文本的样式
      unCheckColor: '#bfbfbf'
    },
    top: {
      textStyle: {
        fill: '#737373'
      }, // 图例项文本的样式
      unCheckColor: '#bfbfbf'
    },
    bottom: {
      textStyle: {
        fill: '#737373'
      }, // 图例项文本的样式
      unCheckColor: '#bfbfbf'
    },
    html: (_html = {}, _html['' + LEGEND_CONTAINER_CLASS] = {
      color: '#D9D9D9'
    }, _html),
    gradient: {
      textStyle: {
        fill: '#D9D9D9'
      },
      lineStyle: {
        stroke: '#404040'
      }
    }
  },
  tooltip: (_tooltip = {}, _tooltip['' + TOOLTIP_CONTAINER_CLASS] = {
    color: '#D9D9D9'
  }, _tooltip),
  tooltipCrosshairsRect: {
    type: 'rect',
    style: {
      fill: '#fff',
      opacity: 0.1
    }
  }, // tooltip 辅助背景框样式
  tooltipCrosshairsLine: {
    style: {
      stroke: 'rgba(255, 255, 255, 0.45)'
    }
  },
  guide: {
    line: {
      text: {
        style: {
          fill: '#A6A6A6'
        }
      }
    },
    text: {
      style: {
        fill: '#A6A6A6'
      }
    },
    region: {
      // TODO
      style: {
        lineWidth: 0, // 辅助框的边框宽度
        fill: '#000', // 辅助框填充的颜色
        fillOpacity: 0.04 // 辅助框的背景透明度
        // 辅助框的图形样式属性
      } }
  }
});

module.exports = DarkTheme;

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {


var Adjust = __webpack_require__(24);
Adjust.Stack = __webpack_require__(294);
Adjust.Jitter = __webpack_require__(295);
Adjust.Symmetric = __webpack_require__(296);
Adjust.Dodge = __webpack_require__(297);

module.exports = Adjust;

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview The extension function of stack ,which mixin to geom
 * @author dxq613@gmail.com
 */

var Util = __webpack_require__(0);
var Adjust = __webpack_require__(24);

/**
 * 数据调整的基类
 * @class Adjust.Stack
 */

var Stack = function (_Adjust) {
  _inherits(Stack, _Adjust);

  function Stack() {
    _classCallCheck(this, Stack);

    return _possibleConstructorReturn(this, _Adjust.apply(this, arguments));
  }

  /**
   * @override
   */
  Stack.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Adjust.prototype.getDefaultCfg.call(this);
    return Util.assign(cfg, {
      /**
       * 仅有一个维度调整时，总的高度
       * @type {Number}
       */
      height: null,
      /**
       * 单个点的大小
       * @type {Number}
       */
      size: 10,
      /**
       * 是否反序进行层叠
       * @type {Boolean}
       */
      reverseOrder: false,

      /**
       * @override
       */
      adjustNames: ['y'] // Only support stack y
    });
  };

  Stack.prototype.processOneDimStack = function processOneDimStack(dataArray) {
    var self = this;
    var xField = self.xField;
    var yField = self.yField || 'y';
    var height = self.height;

    var stackY = {};
    // 如果层叠的顺序翻转
    if (self.reverseOrder) {
      dataArray = dataArray.slice(0).reverse();
    }
    for (var i = 0; i < dataArray.length; i++) {
      // var preY = stackHeight;
      var data = dataArray[i];
      // cates
      for (var j = 0; j < data.length; j++) {
        var item = data[j];
        var size = item.size || self.size;
        var stackHeight = size * 2 / height;
        var x = item[xField];
        if (!stackY[x]) {
          stackY[x] = stackHeight / 2;
        }
        item[yField] = stackY[x];
        stackY[x] += stackHeight;
      }
    }
  };

  Stack.prototype.processAdjust = function processAdjust(dataArray) {
    var self = this;
    if (self.yField) {
      self.processStack(dataArray);
    } else {
      self.processOneDimStack(dataArray);
    }
  };

  Stack.prototype.processStack = function processStack(dataArray) {
    var self = this;
    var xField = self.xField;
    var yField = self.yField;
    var count = dataArray.length;
    var stackCache = {
      positive: {},
      negative: {}
    };
    // 层叠顺序翻转
    if (self.reverseOrder) {
      dataArray = dataArray.slice(0).reverse();
    }
    for (var i = 0; i < count; i++) {
      var data = dataArray[i];
      for (var j = 0; j < data.length; j++) {
        var item = data[j];
        var x = item[xField] || 0;
        var y = item[yField] || 0;
        var xkey = x.toString();
        y = Util.isArray(y) ? y[1] : y;
        var direction = y >= 0 ? 'positive' : 'negative';
        if (!stackCache[direction][xkey]) {
          stackCache[direction][xkey] = 0;
        }
        item[yField] = [stackCache[direction][xkey], y + stackCache[direction][xkey]];
        stackCache[direction][xkey] += y;
      }
    }
  };

  return Stack;
}(Adjust);

module.exports = Stack;

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview Repositions graphic elements randomly using a normal or uniform distribution
 * @author dxq613@gmail.com
 * reference: http://www-01.ibm.com/support/knowledgecenter/SSLVMB_21.0.0/com.ibm.spss.statistics.help/gpl_statement_element_jitter.htm
 */

var Util = __webpack_require__(0);
var Adjust = __webpack_require__(24);

/**
 * 数据调整的基类
 * @class Adjust.Jitter
 */

var Jitter = function (_Adjust) {
  _inherits(Jitter, _Adjust);

  function Jitter() {
    _classCallCheck(this, Jitter);

    return _possibleConstructorReturn(this, _Adjust.apply(this, arguments));
  }

  Jitter.prototype.getAdjustOffset = function getAdjustOffset(pre, next) {
    var r = Math.random(); // 随机位置，均匀分布
    var avg = next - pre; // * length
    var append = avg * 0.05;
    return pre + append + avg * 0.9 * r;
  };

  // adjust group data


  Jitter.prototype._adjustGroup = function _adjustGroup(group, dim, key, values) {
    var self = this;
    var range = self.getAdjustRange(dim, key, values);

    Util.each(group, function (record) {
      record[dim] = self.getAdjustOffset(range.pre, range.next); // 获取调整的位置
    });
  };

  Jitter.prototype.adjustDim = function adjustDim(dim, values, data) {
    var self = this;
    var groupData = self.groupData(data, dim);
    Util.each(groupData, function (group, key) {
      key = parseFloat(key);
      self._adjustGroup(group, dim, key, values);
    });
  };

  return Jitter;
}(Adjust);

module.exports = Jitter;

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview The extension function of symmetric ,which mixin to geom
 * @author huangtonger@aliyun.com
 */

var Util = __webpack_require__(0);
var Adjust = __webpack_require__(24);

/**
 * 数据调整的基类
 * @class Adjust.Symmetric
 */

var Symmetric = function (_Adjust) {
  _inherits(Symmetric, _Adjust);

  function Symmetric() {
    _classCallCheck(this, Symmetric);

    return _possibleConstructorReturn(this, _Adjust.apply(this, arguments));
  }

  /**
   * @override
   */
  Symmetric.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Adjust.prototype.getDefaultCfg.call(this);
    return Util.assign(cfg, {
      // 缓存的最大值
      cacheMax: null,
      /**
       * @override
       */
      adjustNames: ['y'] // Only support stack y
    });
  };
  // 获取最大的y值


  Symmetric.prototype._getMax = function _getMax(dim) {
    var self = this;
    var mergeData = self.mergeData;
    var maxRecord = Util.maxBy(mergeData, function (obj) {
      var value = obj[dim];
      if (Util.isArray(value)) {
        return Math.max.apply(null, value);
      }
      return value;
    });
    var maxValue = maxRecord[dim];
    var max = Util.isArray(maxValue) ? Math.max.apply(null, maxValue) : maxValue;
    return max;
  };

  // 获取每个字段最大的值


  Symmetric.prototype._getXValuesMax = function _getXValuesMax() {
    var self = this;
    var yField = self.yField;
    var xField = self.xField;
    var cache = {};
    var mergeData = self.mergeData;
    Util.each(mergeData, function (obj) {
      var xValue = obj[xField];
      var yValue = obj[yField];
      var max = Util.isArray(yValue) ? Math.max.apply(null, yValue) : yValue;
      cache[xValue] = cache[xValue] || 0;
      if (cache[xValue] < max) {
        cache[xValue] = max;
      }
    });
    return cache;
  };

  // 入口函数


  Symmetric.prototype.processAdjust = function processAdjust(dataArray) {
    var self = this;
    var mergeData = Util.Array.merge(dataArray);
    self.mergeData = mergeData;
    self._processSymmetric(dataArray);
    self.mergeData = null;
  };

  // 处理对称


  Symmetric.prototype._processSymmetric = function _processSymmetric(dataArray) {
    var self = this;
    var xField = self.xField;
    var yField = self.yField;
    var max = self._getMax(yField);
    var first = dataArray[0][0];

    var cache = void 0;
    if (first && Util.isArray(first[yField])) {
      cache = self._getXValuesMax();
    }
    Util.each(dataArray, function (data) {
      Util.each(data, function (obj) {
        var value = obj[yField];
        var offset = void 0;
        if (Util.isArray(value)) {
          var xValue = obj[xField];
          var valueMax = cache[xValue];
          offset = (max - valueMax) / 2;
          var tmp = [];
          /* eslint-disable no-loop-func */
          Util.each(value, function (subVal) {
            // 多个字段
            tmp.push(offset + subVal);
          });
          /* eslint-enable no-loop-func */
          obj[yField] = tmp;
        } else {
          offset = (max - value) / 2;
          obj[yField] = [offset, value + offset];
        }
      });
    });
  };

  return Symmetric;
}(Adjust);

module.exports = Symmetric;

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview Moves graphic elements next to other graphic elements that appear at the same value, rather than superimposing them.
 * @fileOverview dxq613@gmail.com
 */

var Util = __webpack_require__(0);
var Adjust = __webpack_require__(24);
var Global = __webpack_require__(1);
/**
 * 数据调整的基类
 * @class Adjust.Dodge
 */

var Dodge = function (_Adjust) {
  _inherits(Dodge, _Adjust);

  function Dodge() {
    _classCallCheck(this, Dodge);

    return _possibleConstructorReturn(this, _Adjust.apply(this, arguments));
  }

  Dodge.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Adjust.prototype.getDefaultCfg.call(this);
    return Util.assign(cfg, {
      /**
       * 调整过程中,2个数据的间距
       * @type {Number}
       */
      marginRatio: 1 / 2,

      /**
       * 调整占单位宽度的比例,例如：占2个分类间距的 1/2
       * @type {Number}
       */
      dodgeRatio: Global.widthRatio.column,

      dodgeBy: null
    });
  };

  /**
   * @protected
   * @override
   */


  Dodge.prototype.processAdjust = function processAdjust(dataArray) {
    var self = this;
    var mergeData = Util.Array.merge(dataArray);
    var dodgeDim = self.dodgeBy;
    var adjDataArray = dataArray;
    if (dodgeDim) {
      // 如果指定了分组dim的字段
      adjDataArray = Util.Array.group(mergeData, dodgeDim);
    }
    self.cacheMap = {};
    self.adjDataArray = adjDataArray;
    self.mergeData = mergeData;
    self.adjustData(adjDataArray, mergeData);

    self.adjDataArray = null;
    self.mergeData = null;
  };

  Dodge.prototype.getDistribution = function getDistribution(dim) {
    var self = this;
    var dataArray = self.adjDataArray;
    var cacheMap = self.cacheMap;
    var map = cacheMap[dim];
    if (!map) {
      map = {};
      Util.each(dataArray, function (data, index) {
        var values = Util.Array.values(data, dim);
        if (!values.length) {
          values.push(0);
        }
        Util.each(values, function (val) {
          if (!map[val]) {
            map[val] = [];
          }
          map[val].push(index);
        });
      });
      cacheMap[dim] = map;
    }

    return map;
  };

  Dodge.prototype.adjustDim = function adjustDim(dim, values, data, frameCount, frameIndex) {
    var self = this;
    var map = self.getDistribution(dim);
    var groupData = self.groupData(data, dim); // 根据值分组

    Util.each(groupData, function (group, key) {
      key = parseFloat(key);
      var range = void 0;
      if (values.length === 1) {
        range = {
          pre: values[0] - 1,
          next: values[0] + 1
        };
      } else {
        range = self.getAdjustRange(dim, key, values);
      }
      Util.each(group, function (record) {
        var value = record[dim];
        var valueArr = map[value];
        var valIndex = valueArr.indexOf(frameIndex);
        record[dim] = self.getDodgeOffset(range, valIndex, valueArr.length);
      });
    });
  };

  Dodge.prototype.getDodgeOffset = function getDodgeOffset(range, index, count) {
    var self = this;
    var pre = range.pre;
    var next = range.next;
    var tickLength = next - pre;
    var dodgeRatio = self.dodgeRatio;
    var width = tickLength * dodgeRatio / count;
    var margin = self.marginRatio * width;
    var offset = 1 / 2 * (tickLength - count * width - (count - 1) * margin) + ((index + 1) * width + index * margin) - 1 / 2 * width - 1 / 2 * tickLength;
    return (pre + next) / 2 + offset;
  };

  return Dodge;
}(Adjust);

module.exports = Dodge;

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

var GeomLabels = __webpack_require__(108);
var PolarLabels = __webpack_require__(110);
var PieLabels = __webpack_require__(301);

var Labels = {
  getLabelsClass: function getLabelsClass(coordType) {
    var rst = GeomLabels;
    if (coordType === 'polar') {
      rst = PolarLabels;
    } else if (coordType === 'theta') {
      // pie chart
      rst = PieLabels;
    }
    return rst;
  }
};

module.exports = Labels;

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview The class that performs label rendering
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Labels = __webpack_require__(109);

module.exports = {
  renderLabels: function renderLabels() {
    var labelCfg = this.get('label');

    if (Util.isNil(labelCfg)) {
      return;
    }

    if (Util.isNil(labelCfg.items)) {
      labelCfg.items = [];
    }

    var labelsGroup = this.addGroup(Labels, labelCfg);
    this.set('labelsGroup', labelsGroup);
  },
  resetLabels: function resetLabels(items) {
    var self = this;
    var labelCfg = self.get('label');

    if (!labelCfg) {
      return;
    }

    var labelsGroup = self.get('labelsGroup');
    var children = labelsGroup.getLabels();
    var count = children.length;
    items = items || labelCfg.items;
    Util.each(items, function (item, index) {
      if (index < count) {
        var label = children[index];
        labelsGroup.changeLabel(label, item);
      } else {
        var labelShape = self.addLabel(item.text, item);
        if (labelShape) {
          labelShape._id = item._id;
          labelShape.set('coord', item.coord);
        }
      }
    });
    for (var i = count - 1; i >= items.length; i--) {
      children[i].remove();
    }
  },
  addLabel: function addLabel(value, offsetPoint) {
    var self = this;
    var labelsGroup = self.get('labelsGroup');
    var label = {};
    var rst = void 0;
    if (labelsGroup) {
      label.text = value;
      label.x = offsetPoint.x;
      label.y = offsetPoint.y;
      label.point = offsetPoint;
      label.textAlign = offsetPoint.textAlign;
      if (offsetPoint.rotate) {
        label.rotate = offsetPoint.rotate;
      }
      rst = labelsGroup.addLabel(label);
    }
    return rst;
  },
  removeLabels: function removeLabels() {
    var labelsGroup = this.get('labelsGroup');
    labelsGroup && labelsGroup.remove();
    this.set('labelsGroup', null);
  }
};

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

var MatrixUtil = __webpack_require__(2).MatrixUtil;
var Vector2 = MatrixUtil.vec2;

function smoothBezier(points, smooth, isLoop, constraint) {
  var cps = [];

  var prevPoint = void 0;
  var nextPoint = void 0;
  var hasConstraint = !!constraint;
  var min = void 0,
      max = void 0;
  if (hasConstraint) {
    min = [Infinity, Infinity];
    max = [-Infinity, -Infinity];

    for (var i = 0, l = points.length; i < l; i++) {
      var point = points[i];
      min = Vector2.min([], min, point);
      max = Vector2.max([], max, point);
    }
    min = Vector2.min([], min, constraint[0]);
    max = Vector2.max([], max, constraint[1]);
  }

  for (var _i = 0, len = points.length; _i < len; _i++) {
    var _point = points[_i];
    if (isLoop) {
      prevPoint = points[_i ? _i - 1 : len - 1];
      nextPoint = points[(_i + 1) % len];
    } else {
      if (_i === 0 || _i === len - 1) {
        cps.push(_point);
        continue;
      } else {
        prevPoint = points[_i - 1];
        nextPoint = points[_i + 1];
      }
    }
    var v = [];
    v = Vector2.sub(v, nextPoint, prevPoint);
    v = Vector2.scale(v, v, smooth);

    var d0 = Vector2.distance(_point, prevPoint);
    var d1 = Vector2.distance(_point, nextPoint);

    var sum = d0 + d1;
    if (sum !== 0) {
      d0 /= sum;
      d1 /= sum;
    }

    var v1 = Vector2.scale([], v, -d0);
    var v2 = Vector2.scale([], v, d1);

    var cp0 = Vector2.add([], _point, v1);
    var cp1 = Vector2.add([], _point, v2);

    if (hasConstraint) {
      cp0 = Vector2.max([], cp0, min);
      cp0 = Vector2.min([], cp0, max);
      cp1 = Vector2.max([], cp1, min);
      cp1 = Vector2.min([], cp1, max);
    }

    cps.push(cp0);
    cps.push(cp1);
  }

  if (isLoop) {
    cps.push(cps.shift());
  }
  return cps;
}

function catmullRom2bezier(crp, z, constraint) {
  var isLoop = !!z;

  var pointList = [];

  for (var i = 0, l = crp.length; i < l; i += 2) {
    pointList.push([crp[i], crp[i + 1]]);
  }

  var controlPointList = smoothBezier(pointList, 0.4, isLoop, constraint);
  var len = pointList.length;
  var d1 = [];

  var cp1 = void 0;
  var cp2 = void 0;
  var p = void 0;

  for (var _i2 = 0; _i2 < len - 1; _i2++) {
    cp1 = controlPointList[_i2 * 2];
    cp2 = controlPointList[_i2 * 2 + 1];
    p = pointList[_i2 + 1];

    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);
  }

  if (isLoop) {
    cp1 = controlPointList[len];
    cp2 = controlPointList[len + 1];
    p = pointList[0];

    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);
  }
  return d1;
}

module.exports = {
  catmullRom2bezier: catmullRom2bezier
};

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Util = __webpack_require__(0);
var PolarLabels = __webpack_require__(110);
var PathUtil = __webpack_require__(14);
var Global = __webpack_require__(1);
var MARGIN = 5;

function getEndPoint(center, angle, r) {
  return {
    x: center.x + r * Math.cos(angle),
    y: center.y + r * Math.sin(angle)
  };
}

function antiCollision(labels, lineHeight, plotRange, center, isRight) {
  // adjust y position of labels to avoid overlapping
  var overlapping = true;
  var start = plotRange.start;
  var end = plotRange.end;
  var startY = Math.min(start.y, end.y);
  var totalHeight = Math.abs(start.y - end.y);
  var i = void 0;

  var maxY = 0;
  var minY = Number.MIN_VALUE;
  var boxes = labels.map(function (label) {
    if (label.y > maxY) {
      maxY = label.y;
    }
    if (label.y < minY) {
      minY = label.y;
    }
    return {
      size: lineHeight,
      targets: [label.y - startY]
    };
  });
  minY -= startY;
  if (maxY - startY > totalHeight) {
    totalHeight = maxY - startY;
  }

  while (overlapping) {
    /* eslint no-loop-func: 0 */
    boxes.forEach(function (box) {
      var target = (Math.min.apply(minY, box.targets) + Math.max.apply(minY, box.targets)) / 2;
      box.pos = Math.min(Math.max(minY, target - box.size / 2), totalHeight - box.size);
      // box.pos = Math.max(0, target - box.size / 2);
    });

    // detect overlapping and join boxes
    overlapping = false;
    i = boxes.length;
    while (i--) {
      if (i > 0) {
        var previousBox = boxes[i - 1];
        var box = boxes[i];
        if (previousBox.pos + previousBox.size > box.pos) {
          // overlapping
          previousBox.size += box.size;
          previousBox.targets = previousBox.targets.concat(box.targets);

          // overflow, shift up
          if (previousBox.pos + previousBox.size > totalHeight) {
            previousBox.pos = totalHeight - previousBox.size;
          }
          boxes.splice(i, 1); // removing box
          overlapping = true;
        }
      }
    }
  }

  i = 0;
  // step 4: normalize y and adjust x
  boxes.forEach(function (b) {
    var posInCompositeBox = startY + lineHeight / 2; // middle of the label
    b.targets.forEach(function () {
      labels[i].y = b.pos + posInCompositeBox;
      posInCompositeBox += lineHeight;
      i++;
    });
  });

  // (x - cx)^2 + (y - cy)^2 = totalR^2
  labels.forEach(function (label) {
    var rPow2 = label.r * label.r;
    var dyPow2 = Math.pow(Math.abs(label.y - center.y), 2);
    if (rPow2 < dyPow2) {
      label.x = center.x;
    } else {
      var dx = Math.sqrt(rPow2 - dyPow2);
      if (!isRight) {
        // left
        label.x = center.x - dx;
      } else {
        // right
        label.x = center.x + dx;
      }
    }
  });
}

var PieLabels = function (_PolarLabels) {
  _inherits(PieLabels, _PolarLabels);

  function PieLabels() {
    _classCallCheck(this, PieLabels);

    return _possibleConstructorReturn(this, _PolarLabels.apply(this, arguments));
  }

  PieLabels.prototype.getDefaultCfg = function getDefaultCfg() {
    return {
      label: Global.thetaLabels
    };
  };

  /**
   * @protected
   * to avoid overlapping
   * @param {Array} items labels to be placed
   * @return {Array} items
   */


  PieLabels.prototype.adjustItems = function adjustItems(items) {
    var self = this;
    var offset = self.getDefaultOffset();
    if (offset > 0) {
      items = self._distribute(items, offset);
    }
    return items;
  };

  /**
   * @private
   * distribute labels
   * @param {Array} labels labels
   * @param {Number} offset offset
   * @return {Array} labels
   */


  PieLabels.prototype._distribute = function _distribute(labels, offset) {
    var self = this;
    var coord = self.get('coord');
    // console.log(coord);
    var radius = coord.getRadius();
    var lineHeight = self.get('label').labelHeight;
    var center = coord.getCenter();
    var totalR = radius + offset;
    var totalHeight = totalR * 2 + lineHeight * 2;
    var plotRange = {
      start: coord.start,
      end: coord.end
    };
    var geom = self.get('geom');
    if (geom) {
      var view = geom.get('view');
      plotRange = view.getViewRegion();
    }

    // step 1: separate labels
    var halves = [[], // left
    [] // right
    ];
    labels.forEach(function (label) {
      if (label.textAlign === 'right') {
        // left
        halves[0].push(label);
      } else {
        // right or center will be put on the right side
        halves[1].push(label);
      }
    });

    halves.forEach(function (half, index) {
      // step 2: reduce labels
      var maxLabelsCountForOneSide = parseInt(totalHeight / lineHeight, 10);
      if (half.length > maxLabelsCountForOneSide) {
        half.sort(function (a, b) {
          // sort by percentage DESC
          return b['..percent'] - a['..percent'];
        });
        half.splice(maxLabelsCountForOneSide, half.length - maxLabelsCountForOneSide);
      }

      // step 3: distribute position (x and y)
      half.sort(function (a, b) {
        // sort by y ASC
        return a.y - b.y;
      });
      antiCollision(half, lineHeight, plotRange, center, index);
    });

    return halves[0].concat(halves[1]);
  };

  // 连接线


  PieLabels.prototype.lineToLabel = function lineToLabel(label, labelLine) {
    var self = this;
    var coord = self.get('coord');
    var r = coord.getRadius();
    var distance = self.getDefaultOffset();
    var angle = label.orignAngle || label.angle;
    var center = coord.getCenter();
    var start = getEndPoint(center, angle, r + MARGIN / 2);
    var inner = getEndPoint(center, angle, r + distance / 2);
    var lineGroup = self.get('lineGroup');
    // var lineShape;
    if (!lineGroup) {
      lineGroup = self.addGroup({
        elCls: 'x-line-group'
      });
      self.set('lineGroup', lineGroup);
    }
    // lineShape =
    var lineShape = lineGroup.addShape('path', {
      attrs: Util.mix({
        path: ['M' + start.x, start.y + ' Q' + inner.x, inner.y + ' ' + label.x, label.y].join(','),
        fill: null,
        stroke: label.color
      }, labelLine)
    });
    // label 对应线的动画关闭
    lineShape.name = 'labelLine';
    lineShape._id = label._id && label._id.replace('glabel', 'glabelline'); // generate labelLine id according to label id
    lineShape.set('coord', coord);
  };

  /**
   * @protected
   * get rotation for label
   * @param {Number} angle angle
   * @param {Number} offset offset
   * @return {Number} rotate
   */


  PieLabels.prototype.getLabelRotate = function getLabelRotate(angle, offset) {
    var rotate = void 0;
    if (offset < 0) {
      rotate = angle * 180 / Math.PI;
      if (rotate > 90) {
        rotate = rotate - 180;
      }
      if (rotate < -90) {
        rotate = rotate + 180;
      }
    }
    return rotate / 180 * Math.PI;
  };

  /**
   * @protected
   * get text align for label
   * @param {Object} point point
   * @return {String} align
   */


  PieLabels.prototype.getLabelAlign = function getLabelAlign(point) {
    var self = this;
    var coord = self.get('coord');
    var center = coord.getCenter();
    var align = void 0;
    if (point.angle <= Math.PI / 2 && point.x >= center.x) {
      align = 'left';
    } else {
      align = 'right';
    }

    var offset = self.getDefaultOffset();
    if (offset <= 0) {
      if (align === 'right') {
        align = 'left';
      } else {
        align = 'right';
      }
    }
    return align;
  };

  PieLabels.prototype.getArcPoint = function getArcPoint(point) {
    return point;
  };

  PieLabels.prototype.getPointAngle = function getPointAngle(point) {
    var self = this;
    var coord = self.get('coord');
    var startPoint = {
      x: Util.isArray(point.x) ? point.x[0] : point.x,
      y: point.y[0]
    };
    var endPoint = {
      x: Util.isArray(point.x) ? point.x[1] : point.x,
      y: point.y[1]
    };
    var angle = void 0;
    var startAngle = PathUtil.getPointAngle(coord, startPoint);
    if (point.points && point.points[0].y === point.points[1].y) {
      angle = startAngle;
    } else {
      var endAngle = PathUtil.getPointAngle(coord, endPoint);
      if (startAngle >= endAngle) {
        // 100% pie slice
        endAngle = endAngle + Math.PI * 2;
      }
      angle = startAngle + (endAngle - startAngle) / 2;
    }
    return angle;
  };

  PieLabels.prototype.getCirclePoint = function getCirclePoint(angle, offset) {
    var self = this;
    var coord = self.get('coord');
    var center = coord.getCenter();
    var r = coord.getRadius() + offset;
    var point = getEndPoint(center, angle, r);
    point.angle = angle;
    point.r = r;
    return point;
  };

  return PieLabels;
}(PolarLabels);

module.exports = PieLabels;

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview area shape
 * @author dxq613@gmail.com
 * @author sima.zhang1990@gmail.com
 */

var Util = __webpack_require__(0);
var Shape = __webpack_require__(10);
var PathUtil = __webpack_require__(14);
var Global = __webpack_require__(1);

function getLineAttrs(cfg) {
  var defaultAttrs = Global.shape.hollowArea;
  var lineAttrs = Util.mix({}, defaultAttrs, {
    stroke: cfg.color,
    lineWidth: cfg.size,
    strokeOpacity: cfg.opacity
  }, cfg.style);
  return lineAttrs;
}

function getFillAttrs(cfg) {
  var defaultAttrs = Global.shape.area;
  var areaAttrs = Util.mix({}, defaultAttrs, {
    fill: cfg.color,
    stroke: cfg.color,
    lineWidth: cfg.size,
    fillOpacity: cfg.opacity
  }, cfg.style);
  return areaAttrs;
}

function getPath(cfg, smooth) {
  var path = [];
  var points = [];
  var topLinePoints = []; // area 区域上部分
  var bottomLinePoints = []; // area 区域下部分
  var isInCircle = cfg.isInCircle;
  Util.each(cfg.points, function (point) {
    topLinePoints.push(point[0]);
    bottomLinePoints.push(point[1]);
  });
  bottomLinePoints = bottomLinePoints.reverse();
  points.push(topLinePoints, bottomLinePoints);
  Util.each(points, function (point, index) {
    var subPath = [];
    if (smooth) {
      subPath = PathUtil.getSplinePath(point, false);
    } else {
      subPath = PathUtil.getLinePath(point, false);
    }
    if (isInCircle) {
      var p1 = point[0];
      subPath.push(['L', p1.x, p1.y]);
    } else if (index > 0) {
      subPath[0][0] = 'L';
    }
    path = path.concat(subPath);
  });
  path.push(['Z']);
  return path;
}

// get marker cfg
function _getMarkerCfg(cfg) {
  return {
    symbol: function symbol(x, y, r, ctx) {
      // 11px * 9px
      ctx.save();
      ctx.lineWidth = 2;
      ctx.strokeStyle = ctx.fillStyle;
      ctx.moveTo(x - 5.5, y - 4);
      ctx.lineTo(x + 5.5, y - 4);
      ctx.stroke();
      ctx.restore();
      ctx.moveTo(x - 5.5, y - 4);
      ctx.lineTo(x + 5.5, y - 4);
      ctx.lineTo(x + 5.5, y + 4);
      ctx.lineTo(x - 5.5, y + 4);
      ctx.closePath();
    },

    radius: 5,
    fill: cfg.color,
    fillOpacity: 0.3
  };
}

// 鼠标悬浮触发active状态
function _getActiveCfg(type, cfg) {
  if (type === 'line' || type === 'smoothLine') {
    // 线加粗
    var lineWidth = cfg.lineWidth || 0;
    return {
      lineWidth: lineWidth + 1
    };
  }
  var opacity = cfg.fillOpacity || cfg.opacity || 1;
  return {
    fillOpacity: opacity - 0.15,
    strokeOpacity: opacity - 0.15
  };
}

// 当只有一个数据时绘制点
function drawPointShape(shapeObj, cfg, container) {
  var coord = shapeObj._coord;
  var point = coord.convertPoint(cfg.points[0][1]);
  return container.addShape('circle', {
    attrs: Util.mix({
      x: point.x,
      y: point.y,
      r: 2,
      fill: cfg.color
    }, cfg.style)
  });
}

var Area = Shape.registerFactory('area', {
  defaultShapeType: 'area',
  /**
   * @override
   * @protected
   * 计算点 如果存在多个点，分割成单个的点, 不考虑多个x对应一个y的情况
   * 单点则补上y0点
   */
  getDefaultPoints: function getDefaultPoints(pointInfo) {
    var points = [];
    var x = pointInfo.x;
    var y = pointInfo.y;
    var y0 = pointInfo.y0;
    y = Util.isArray(y) ? y : [y0, y];

    Util.each(y, function (yItem) {
      points.push({
        x: x,
        y: yItem
      });
    });
    return points;
  },

  // 获取激活的图形属性
  getActiveCfg: function getActiveCfg(type, cfg) {
    return _getActiveCfg(type, cfg);
  },
  drawShape: function drawShape(type, cfg, container) {
    var shape = this.getShape(type);
    var gShape = void 0;
    if (cfg.points.length === 1 && Global.showSinglePoint) {
      gShape = drawPointShape(this, cfg, container);
    } else {
      gShape = shape.draw(cfg, container);
    }
    if (gShape) {
      gShape.set('origin', cfg.origin);
      gShape._id = cfg.splitedIndex ? cfg._id + cfg.splitedIndex : cfg._id;
      gShape.name = this.name;
    }
    return gShape;
  },
  getSelectedCfg: function getSelectedCfg(type, cfg) {
    if (cfg && cfg.style) {
      return cfg.style;
    }
    return this.getActiveCfg(type, cfg);
  }
});

// 默认：填充区域图
Shape.registerShape('area', 'area', {
  draw: function draw(cfg, container) {
    var attrs = getFillAttrs(cfg);
    var path = getPath(cfg, false);
    path = this.parsePath(path, false);
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    return _getMarkerCfg(cfg);
  }
});

// 填充平滑区域图
Shape.registerShape('area', 'smooth', {
  draw: function draw(cfg, container) {
    var attrs = getFillAttrs(cfg);
    var coord = this._coord;
    // 曲线的限制
    cfg.constraint = [[coord.start.x, coord.end.y], [coord.end.x, coord.start.y]];
    var path = getPath(cfg, true);
    path = this.parsePath(path, false);
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    return _getMarkerCfg(cfg);
  }
});

// 封闭的折线
Shape.registerShape('area', 'line', {
  draw: function draw(cfg, container) {
    var attrs = getLineAttrs(cfg);
    var path = getPath(cfg, false);
    path = this.parsePath(path, false);
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    return _getMarkerCfg(cfg);
  }
});

// 封闭的平滑线
Shape.registerShape('area', 'smoothLine', {
  draw: function draw(cfg, container) {
    var attrs = getLineAttrs(cfg);
    var path = getPath(cfg, true);
    path = this.parsePath(path, false);
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    return _getMarkerCfg(cfg);
  }
});

Area.spline = Area.smooth;

module.exports = Area;

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview 边的 shape
 * @author dxq613@gmail.com
 */

var Util = __webpack_require__(0);
var Shape = __webpack_require__(10);
var ShapeUtil = __webpack_require__(67);
var Global = __webpack_require__(1);
var PathUtil = __webpack_require__(14);
var CORNER_PERCENT = 1 / 3;

function getAttrs(cfg) {
  var defaultCfg = Global.shape.edge;
  var shapeCfg = Util.mix({}, defaultCfg, {
    stroke: cfg.color,
    lineWidth: cfg.size,
    strokeOpacity: cfg.opacity,
    opacity: cfg.opacity
  }, cfg.style);
  return shapeCfg;
}

var Edge = Shape.registerFactory('edge', {
  defaultShapeType: 'line',
  getDefaultPoints: function getDefaultPoints(pointInfo) {
    return ShapeUtil.splitPoints(pointInfo);
  },
  getActiveCfg: function getActiveCfg(type, cfg) {
    var lineWidth = cfg.lineWidth || 0;
    return {
      lineWidth: lineWidth + 1
    };
  }
});

function getCPath(from, to) {
  var points = [];
  points.push({
    x: from.x,
    y: from.y * (1 - 1 / 2) + to.y * 1 / 2
  });

  points.push({
    y: from.y * (1 - 1 / 2) + to.y * 1 / 2,
    x: to.x
  });
  points.push(to);
  var sub = ['C'];

  Util.each(points, function (point) {
    sub.push(point.x, point.y);
  });
  return sub;
}

function getQPath(to, center) {
  var points = [];
  points.push({
    x: center.x,
    y: center.y
  });
  points.push(to);

  var sub = ['Q'];
  Util.each(points, function (point) {
    sub.push(point.x, point.y);
  });
  return sub;
}

function createSmoothPath(from, to) {
  var sub = getCPath(from, to);
  var path = [['M', from.x, from.y]];

  path.push(sub);
  return path;
}

function createArcPath(from, to, center) {
  var sub = getQPath(to, center);
  var path = [['M', from.x, from.y]];
  path.push(sub);
  return path;
}

function createArcWeightPath(points, center) {
  var arc1 = getQPath(points[1], center);
  var arc2 = getQPath(points[3], center);
  var path = [['M', points[0].x, points[0].y]];
  path.push(arc2);
  path.push(['L', points[3].x, points[3].y]);
  path.push(['L', points[2].x, points[2].y]);
  path.push(arc1);
  path.push(['L', points[1].x, points[1].y]);
  path.push(['L', points[0].x, points[0].y]);
  path.push(['Z']);
  return path;
}

function createRectPath(from, to) {
  var points = [];
  points.push({
    y: from.y * (1 - CORNER_PERCENT) + to.y * CORNER_PERCENT,
    x: from.x
  });
  points.push({
    y: from.y * (1 - CORNER_PERCENT) + to.y * CORNER_PERCENT,
    x: to.x
  });
  points.push(to);
  var path = [['M', from.x, from.y]];
  Util.each(points, function (point) {
    path.push(['L', point.x, point.y]);
  });
  return path;
}

Shape.registerShape('edge', 'line', {
  draw: function draw(cfg, container) {
    var points = this.parsePoints(cfg.points);
    var attrCfg = getAttrs(cfg);
    var path = PathUtil.getLinePath(points);
    var line = container.addShape('path', {
      attrs: Util.mix(attrCfg, {
        path: path
      })
    });
    return line;
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    return Util.mix({
      symbol: 'circle',
      radius: 4.5
    }, getAttrs(cfg));
  }
});

Shape.registerShape('edge', 'vhv', {
  draw: function draw(cfg, container) {
    var points = cfg.points;
    var attrCfg = getAttrs(cfg);
    var path = createRectPath(points[0], points[1]);
    path = this.parsePath(path);
    var line = container.addShape('path', {
      attrs: Util.mix(attrCfg, {
        path: path
      })
    });
    return line;
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    return Util.mix({
      symbol: 'circle',
      radius: 4.5
    }, getAttrs(cfg));
  }
});

Shape.registerShape('edge', 'smooth', {
  draw: function draw(cfg, container) {
    var points = cfg.points;
    var attrCfg = getAttrs(cfg);
    var path = createSmoothPath(points[0], points[1]);
    path = this.parsePath(path);

    var line = container.addShape('path', {
      attrs: Util.mix(attrCfg, {
        path: path
      })
    });
    return line;
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    return Util.mix({
      symbol: 'circle',
      radius: 4.5
    }, getAttrs(cfg));
  }
});

//  弧线包括笛卡尔坐标系下的半圆弧线、极坐标系下以圆心为控制点的二阶曲线、笛卡尔坐标系下带权重的三阶曲线、极坐标系下带权重的以圆心为控制点的二阶曲线
Shape.registerShape('edge', 'arc', {
  draw: function draw(cfg, container) {
    var points = cfg.points;
    var type = points.length > 2 ? 'weight' : 'normal';
    var attrCfg = getAttrs(cfg);
    var line = void 0;
    var path = void 0;
    if (cfg.isInCircle) {
      var center = {
        x: 0,
        y: 1
      };
      if (type === 'normal') {
        path = createArcPath(points[0], points[1], center);
      } else {
        attrCfg.fill = attrCfg.stroke;
        path = createArcWeightPath(points, center);
      }
      path = this.parsePath(path);
      line = container.addShape('path', {
        attrs: Util.mix(attrCfg, {
          path: path
        })
      });
    } else {
      if (type === 'normal') {
        points = this.parsePoints(points);
        line = container.addShape('arc', {
          attrs: Util.mix(attrCfg, {
            x: (points[1].x + points[0].x) / 2,
            y: points[0].y,
            r: Math.abs(points[1].x - points[0].x) / 2,
            startAngle: Math.PI,
            endAngle: Math.PI * 2
          })
        });
      } else {
        path = [['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y]];
        var c1 = getCPath(points[1], points[3]);
        var c2 = getCPath(points[2], points[0]);
        path.push(c1);
        path.push(['L', points[3].x, points[3].y]);
        path.push(['L', points[2].x, points[2].y]);
        path.push(c2);
        path.push(['Z']);
        path = this.parsePath(path);
        attrCfg.fill = attrCfg.stroke;
        line = container.addShape('path', {
          attrs: Util.mix(attrCfg, {
            path: path
          })
        });
      }
    }
    return line;
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    return Util.mix({
      symbol: 'circle',
      radius: 4.5
    }, getAttrs(cfg));
  }
});

module.exports = Edge;

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview interval shapes
 * @author dxq613@gmail.com
 * @author sima.zhang1990@gmail.com
 * @author huangtonger@aliyun.com
 */

var Util = __webpack_require__(0);
var Shape = __webpack_require__(10);
var PathUtil = __webpack_require__(14);
var Global = __webpack_require__(1);

// 获取柱状图的几个点
function getRectPoints(cfg, isPyramid) {
  var x = cfg.x;
  var y = cfg.y;
  var y0 = cfg.y0; // 0 点的位置
  var width = cfg.size;
  // 有3种情况，
  // 1. y，x都不是数组
  // 2. y是数组，x不是
  // 3. x是数组，y不是
  var ymin = y0;
  var ymax = y;
  if (Util.isArray(y)) {
    ymax = y[1];
    ymin = y[0];
  }

  var xmin = void 0;
  var xmax = void 0;
  if (Util.isArray(x)) {
    xmin = x[0];
    xmax = x[1];
  } else {
    xmin = x - width / 2;
    xmax = x + width / 2;
  }

  var points = [];
  points.push({
    x: xmin,
    y: ymin
  }, {
    x: xmin,
    y: ymax
  });

  if (isPyramid) {
    points.push({
      x: xmax,
      y: (ymax + ymin) / 2
    });
  } else {
    points.push({
      x: xmax,
      y: ymax
    }, {
      x: xmax,
      y: ymin
    });
  }

  return points;
}

function getRectPath(points) {
  var path = [];
  for (var i = 0; i < points.length; i++) {
    var point = points[i];
    if (point) {
      var action = i === 0 ? 'M' : 'L';
      path.push([action, point.x, point.y]);
    }
  }
  var first = points[0];
  path.push(['L', first.x, first.y]);
  path.push(['z']);
  return path;
}

function getLinePoints(cfg) {
  var x = cfg.x;
  var y = cfg.y;
  var y0 = cfg.y0; // 0 点的位置
  var points = [];

  if (Util.isArray(y)) {
    Util.each(y, function (yItem, idx) {
      points.push({
        x: Util.isArray(x) ? x[idx] : x,
        y: yItem
      });
    });
  } else {
    points.push({
      x: x,
      y: y
    }, {
      x: x,
      y: y0
    });
  }

  return points;
}

function getTickPoints(cfg) {
  var x = cfg.x;
  var y = Util.isArray(cfg.y) ? cfg.y[1] : cfg.y;
  var y0 = Util.isArray(cfg.y) ? cfg.y[0] : cfg.y0;

  var barWidth = cfg.size;
  var points = [];

  points.push({
    x: x - barWidth / 2,
    y: y
  }, {
    x: x + barWidth / 2,
    y: y
  }, {
    x: x,
    y: y
  }, {
    x: x,
    y: y0
  }, {
    x: x - barWidth / 2,
    y: y0
  }, {
    x: x + barWidth / 2,
    y: y0
  });

  return points;
}

function getTickPath(points) {
  var path = [];
  path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['M', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['M', points[4].x, points[4].y], ['L', points[5].x, points[5].y]);
  return path;
}

function getFillAttrs(cfg) {
  var defaultAttrs = Global.shape.interval;
  var attrs = Util.mix({}, defaultAttrs, {
    fill: cfg.color,
    stroke: cfg.color,
    fillOpacity: cfg.opacity
  }, cfg.style);
  return attrs;
}

function getLineAttrs(cfg) {
  var defaultAttrs = Global.shape.hollowInterval;
  var attrs = Util.mix({}, defaultAttrs, {
    stroke: cfg.color,
    strokeOpacity: cfg.opacity
  }, cfg.style);
  return attrs;
}

function getFunnelPath(cfg, isFunnel) {
  var path = [];
  var points = cfg.points;
  var nextPoints = cfg.nextPoints;
  if (!Util.isNil(nextPoints)) {
    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', nextPoints[1].x, nextPoints[1].y], ['L', nextPoints[0].x, nextPoints[0].y], ['Z']);
  } else if (isFunnel) {
    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['Z']);
  } else {
    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['Z']);
  }

  return path;
}

function getThetaCfg(point, coord) {
  var r = coord.getRadius();
  var inner = coord.innerRadius;
  var startAngle = void 0;
  var endAngle = void 0;
  var ir = r * inner;
  var startPoint = void 0;
  var endPoint = void 0;

  if (!Util.isArray(point.x) && Util.isArray(point.y)) {
    point.x = [point.x, point.x]; // 如果x是一个值，y是数组，将x转成数组
  }
  if (Util.isArray(point.x)) {
    startPoint = {
      x: point.x[0],
      y: point.y[0]
    };
    endPoint = {
      x: point.x[1],
      y: point.y[1]
    };
    startAngle = PathUtil.getPointAngle(coord, startPoint);
    endAngle = PathUtil.getPointAngle(coord, endPoint);
    if (endAngle <= startAngle) {
      // 考虑占比百分百的情形
      endAngle = endAngle + Math.PI * 2;
    }
  } else {
    endPoint = point;
    startAngle = coord.startAngle;
    endAngle = PathUtil.getPointAngle(coord, endPoint);
  }
  return {
    r: r,
    ir: ir,
    startAngle: startAngle,
    endAngle: endAngle
  };
}

// 获取选中时的样式，当前仅支持饼图
function _getSelectedCfg(type, cfg) {
  var geom = cfg.geom;
  var coord = geom.get('coord');
  var point = cfg.point;
  var r = 7.5;
  var selectedCfg = void 0;
  if (coord && coord.type === 'theta') {
    var thetaCfg = getThetaCfg(point, coord);
    var middleAngle = (thetaCfg.endAngle - thetaCfg.startAngle) / 2 + thetaCfg.startAngle;
    var x = r * Math.cos(middleAngle);
    var y = r * Math.sin(middleAngle);
    selectedCfg = {
      transform: [['t', x, y]]
    };
  }
  return Util.mix({}, selectedCfg);
}

var Interval = Shape.registerFactory('interval', {
  defaultShapeType: 'rect',
  getActiveCfg: function getActiveCfg(type, cfg) {
    if (!type || Util.inArray(['rect', 'funnel', 'pyramid'], type)) {
      // 透明度降低 0.15
      var fillOpacity = cfg.fillOpacity || cfg.opacity || 1;
      return {
        fillOpacity: fillOpacity - 0.15
      };
    }
    var lineWidth = cfg.lineWidth || 0;
    return {
      lineWidth: lineWidth + 1
    };
  },
  getDefaultPoints: function getDefaultPoints(pointInfo) {
    return getRectPoints(pointInfo);
  },
  getSelectedCfg: function getSelectedCfg(type, cfg) {
    return _getSelectedCfg(type, cfg);
  }
});

// 默认柱状图
Shape.registerShape('interval', 'rect', {
  draw: function draw(cfg, container) {
    var attrs = getFillAttrs(cfg);
    var path = getRectPath(cfg.points);
    path = this.parsePath(path);
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    var rectCfg = getFillAttrs(cfg);
    var isInCircle = cfg.isInCircle;
    return Util.mix({
      symbol: isInCircle ? 'circle' : 'square',
      radius: isInCircle ? 4.5 : 4
    }, rectCfg);
  }
});

// 空心柱状图
Shape.registerShape('interval', 'hollowRect', {
  draw: function draw(cfg, container) {
    var attrs = getLineAttrs(cfg);
    var path = getRectPath(cfg.points);
    path = this.parsePath(path);
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    var rectCfg = getLineAttrs(cfg);
    var isInCircle = cfg.isInCircle;
    return Util.mix({
      symbol: isInCircle ? 'circle' : 'square',
      radius: isInCircle ? 4.5 : 4
    }, rectCfg);
  }
});

// 线形柱状图
Shape.registerShape('interval', 'line', {
  getPoints: function getPoints(pointInfo) {
    return getLinePoints(pointInfo);
  },
  draw: function draw(cfg, container) {
    var attrs = getLineAttrs(cfg);
    attrs.lineWidth = cfg.size || 1; // size 就是线的宽度
    var path = getRectPath(cfg.points);
    path = this.parsePath(path);
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    var lineCfg = getLineAttrs(cfg);
    return Util.mix({
      symbol: 'line',
      radius: 5
    }, lineCfg);
  }
});

// 钉子形的柱状图
Shape.registerShape('interval', 'tick', {
  getPoints: function getPoints(pointInfo) {
    return getTickPoints(pointInfo);
  },
  draw: function draw(cfg, container) {
    var attrs = getLineAttrs(cfg);
    var path = getTickPath(cfg.points);
    path = this.parsePath(path);
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    var lineCfg = getLineAttrs(cfg);
    return Util.mix({
      symbol: 'tick',
      radius: 5
    }, lineCfg);
  }
});

// 漏斗图
Shape.registerShape('interval', 'funnel', {
  getPoints: function getPoints(pointInfo) {
    pointInfo.size = pointInfo.size * 2; // 漏斗图的 size 是柱状图的两倍
    return getRectPoints(pointInfo);
  },
  draw: function draw(cfg, container) {
    var attrs = getFillAttrs(cfg);
    var path = getFunnelPath(cfg, true);
    path = this.parsePath(path);
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    var funnelCfg = getFillAttrs(cfg);
    return Util.mix({
      symbol: 'square',
      radius: 4
    }, funnelCfg);
  }
});

// 金字塔图
Shape.registerShape('interval', 'pyramid', {
  getPoints: function getPoints(pointInfo) {
    pointInfo.size = pointInfo.size * 2; // 漏斗图的 size 是柱状图的两倍
    return getRectPoints(pointInfo, true);
  },
  draw: function draw(cfg, container) {
    var attrs = getFillAttrs(cfg);
    var path = getFunnelPath(cfg, false);
    path = this.parsePath(path);
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    var funnelCfg = getFillAttrs(cfg);
    return Util.mix({
      symbol: 'square',
      radius: 4
    }, funnelCfg);
  }
});
module.exports = Interval;

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview line shapes
 * @author dxq613@gmail.com
 * @author sima.zhang1990@gmail.com
 * @author huangtonger@aliyun.com
 */

var Util = __webpack_require__(0);
var PathUtil = __webpack_require__(14);
var ShapeUtil = __webpack_require__(67);
var Shape = __webpack_require__(10);
var Global = __webpack_require__(1);
var DOT_ARR = [1, 1];
var DASH_ARR = [5.5, 1];

function getAttrs(cfg) {
  var defaultCfg = Global.shape.line;
  var shapeCfg = Util.mix({}, defaultCfg, {
    stroke: cfg.color,
    lineWidth: cfg.size,
    strokeOpacity: cfg.opacity,
    opacity: cfg.opacity
  }, cfg.style);
  return shapeCfg;
}

function getMarkerAttrs(cfg) {
  var defaultCfg = Global.shape.line;
  var shapeCfg = Util.mix({}, defaultCfg, {
    stroke: cfg.color,
    lineWidth: 2,
    strokeOpacity: cfg.opacity,
    opacity: cfg.opacity,
    radius: 6
  }, cfg.style);
  return shapeCfg;
}

// 获取带有上下区间的 path
function getRangePath(points, smooth, isInCircle, cfg) {
  var topPoints = [];
  var isStack = cfg.isStack;
  var bottomPoints = [];
  for (var i = 0; i < points.length; i++) {
    var point = points[i];
    var tmp = ShapeUtil.splitPoints(point);
    bottomPoints.push(tmp[0]);
    topPoints.push(tmp[1]);
  }
  var topPath = getSinglePath(topPoints, smooth, isInCircle, cfg);
  var bottomPath = getSinglePath(bottomPoints, smooth, isInCircle, cfg);
  if (isStack) {
    return topPath;
  }
  return topPath.concat(bottomPath);
}

// 单条 path
function getSinglePath(points, smooth, isInCircle, cfg) {
  var path = void 0;
  if (!smooth) {
    path = PathUtil.getLinePath(points, false);
  } else {
    // 直角坐标系下绘制曲线时限制最大值、最小值
    var constraint = isInCircle ? null : cfg.constraint;
    path = PathUtil.getSplinePath(points, false, constraint);
  }
  if (isInCircle) {
    path.push(['Z']);
  }
  return path;
}
// get line path
function getPath(cfg, smooth) {
  var path = void 0;
  var points = cfg.points;
  var isInCircle = cfg.isInCircle;
  var first = points[0];
  if (Util.isArray(first.y)) {
    path = getRangePath(points, smooth, isInCircle, cfg);
  } else {
    path = getSinglePath(points, smooth, isInCircle, cfg);
  }
  return path;
}

function _interpPoints(points, fn) {
  var tmpPoints = [];
  Util.each(points, function (point, index) {
    var nextPoint = points[index + 1];
    tmpPoints.push(point);
    if (nextPoint) {
      tmpPoints = tmpPoints.concat(fn(point, nextPoint));
    }
  });
  return tmpPoints;
}
// 插值的图形path，不考虑null
function _getInterPath(points) {
  var path = [];
  Util.each(points, function (point, index) {
    var subPath = index === 0 ? ['M', point.x, point.y] : ['L', point.x, point.y];
    path.push(subPath);
  });
  return path;
}
// 插值的图形
function _getInterPointShapeCfg(cfg, fn) {
  var points = _interpPoints(cfg.points, fn);
  return _getInterPath(points);
}

function _markerFn(x, y, r, ctx) {
  ctx.moveTo(x - r, y);
  ctx.lineTo(x + r, y);
}

function _smoothMarkerFn(x, y, r, ctx) {
  ctx.moveTo(x - r, y);
  ctx.arcTo(x - r / 2, y - r / 2, x, y, r / 2);
  ctx.lineTo(x, y);
  ctx.arcTo(x + r / 2, y + r / 2, x + r, y - r / 2, r / 2);
}
// get marker cfg
function _getMarkerCfg(cfg, smooth) {
  return Util.mix({
    symbol: smooth ? _smoothMarkerFn : _markerFn
  }, getMarkerAttrs(cfg));
}

function _getInterMarkerCfg(cfg, fn) {
  return Util.mix({
    symbol: fn
  }, getMarkerAttrs(cfg));
}

// 当只有一个数据时绘制点
function drawPointShape(shapeObj, cfg, container) {
  var point = cfg.points[0];
  return container.addShape('circle', {
    attrs: Util.mix({
      x: point.x,
      y: point.y,
      r: 2,
      fill: cfg.color
    }, cfg.style)
  });
}

// regist line geom
var Line = Shape.registerFactory('line', {
  // 默认的shape
  defaultShapeType: 'line',
  getMarkerCfg: function getMarkerCfg(type, cfg) {
    var lineObj = Line[type] || Line.line;
    return lineObj.getMarkerCfg(cfg);
  },
  getActiveCfg: function getActiveCfg(type, cfg) {
    var lineWidth = cfg.lineWidth || 0;
    return {
      lineWidth: lineWidth + 1
    };
  },

  // 计算点 如果存在多个点，分割成单个的点, 不考虑多个x对应一个y的情况
  getDefaultPoints: function getDefaultPoints(pointInfo) {
    return ShapeUtil.splitPoints(pointInfo);
  },
  drawShape: function drawShape(type, cfg, container) {
    var shape = this.getShape(type);
    var gShape = void 0;
    if (cfg.points.length === 1 && Global.showSinglePoint) {
      gShape = drawPointShape(this, cfg, container);
    } else {
      gShape = shape.draw(cfg, container);
    }
    if (gShape) {
      gShape.set('origin', cfg.origin);
      gShape._id = cfg.splitedIndex ? cfg._id + cfg.splitedIndex : cfg._id;
      gShape.name = this.name;
    }
    return gShape;
  }
});

// draw line shape
Shape.registerShape('line', 'line', {
  draw: function draw(cfg, container) {
    var attrs = getAttrs(cfg);
    var path = getPath(cfg, false);
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    return _getMarkerCfg(cfg);
  }
});

// 点线 ···
Shape.registerShape('line', 'dot', {
  draw: function draw(cfg, container) {
    var attrs = getAttrs(cfg);
    var path = getPath(cfg, false);
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path,
        lineDash: DOT_ARR
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    var tmp = _getMarkerCfg(cfg, false);
    tmp.lineDash = DOT_ARR;
    return tmp;
  }
});

// 断线 - - -
Shape.registerShape('line', 'dash', {
  draw: function draw(cfg, container) {
    var attrs = getAttrs(cfg);
    var path = getPath(cfg, false);
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path,
        lineDash: DASH_ARR
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    var tmp = _getMarkerCfg(cfg, false);
    tmp.lineDash = DASH_ARR;
    return tmp;
  }
});

// draw smooth line shape
Shape.registerShape('line', 'smooth', {
  draw: function draw(cfg, container) {
    var attrs = getAttrs(cfg);
    var coord = this._coord;
    // 曲线的限制
    cfg.constraint = [[coord.start.x, coord.end.y], [coord.end.x, coord.start.y]];
    var path = getPath(cfg, true);
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    return _getMarkerCfg(cfg, true);
  }
});

Shape.registerShape('line', 'hv', {
  draw: function draw(cfg, container) {
    var attrs = getAttrs(cfg);
    var path = _getInterPointShapeCfg(cfg, function (point, nextPoint) {
      var tmp = [];
      tmp.push({
        x: nextPoint.x,
        y: point.y
      });
      return tmp;
    });
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    return _getInterMarkerCfg(cfg, function (x, y, r, ctx) {
      ctx.moveTo(x - r - 1, y - 2.5);
      ctx.lineTo(x, y - 2.5);
      ctx.lineTo(x, y + 2.5);
      ctx.lineTo(x + r + 1, y + 2.5);
    });
  }
});

Shape.registerShape('line', 'vh', {
  draw: function draw(cfg, container) {
    var attrs = getAttrs(cfg);
    var path = _getInterPointShapeCfg(cfg, function (point, nextPoint) {
      var tmp = [];
      tmp.push({
        x: point.x,
        y: nextPoint.y
      });
      return tmp;
    });
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    return _getInterMarkerCfg(cfg, function (x, y, r, ctx) {
      ctx.moveTo(x - r - 1, y + 2.5);
      ctx.lineTo(x, y + 2.5);
      ctx.lineTo(x, y - 2.5);
      ctx.lineTo(x + r + 1, y - 2.5);
    });
  }
});

Shape.registerShape('line', 'hvh', {
  draw: function draw(cfg, container) {
    var attrs = getAttrs(cfg);
    var path = _getInterPointShapeCfg(cfg, function (point, nextPoint) {
      var tmp = [];
      var middlex = (nextPoint.x - point.x) / 2 + point.x;
      tmp.push({
        x: middlex,
        y: point.y
      });
      tmp.push({
        x: middlex,
        y: nextPoint.y
      });
      return tmp;
    });
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    return _getInterMarkerCfg(cfg, function (x, y, r, ctx) {
      ctx.moveTo(x - (r + 1), y + 2.5);
      ctx.lineTo(x - r / 2, y + 2.5);
      ctx.lineTo(x - r / 2, y - 2.5);
      ctx.lineTo(x + r / 2, y - 2.5);
      ctx.lineTo(x + r / 2, y + 2.5);
      ctx.lineTo(x + r + 1, y + 2.5);
    });
  }
});

Shape.registerShape('line', 'vhv', {
  draw: function draw(cfg, container) {
    var attrs = getAttrs(cfg);
    var path = _getInterPointShapeCfg(cfg, function (point, nextPoint) {
      var tmp = [];
      var middley = (nextPoint.y - point.y) / 2 + point.y;
      tmp.push({
        x: point.x,
        y: middley
      });
      tmp.push({
        x: nextPoint.x,
        y: middley
      });
      return tmp;
    });
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    return _getInterMarkerCfg(cfg, function (x, y, r, ctx) {
      // 宽 13px，高 8px
      ctx.moveTo(x - 5, y + 2.5);
      ctx.lineTo(x - 5, y);
      ctx.lineTo(x, y);
      ctx.lineTo(x, y - 3);
      ctx.lineTo(x, y + 3);
      ctx.lineTo(x + 6.5, y + 3);
    });
  }
});

Line.spline = Line.smooth;

module.exports = Line;

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview point shapes
 * @author dxq613@gmail.com
 * @author sima.zhang1990@gmail.com
 * @author huangtonger@aliyun.com
 */

var Util = __webpack_require__(0);
var ShapeUtil = __webpack_require__(67);
var Marker = __webpack_require__(2).Marker;
var Global = __webpack_require__(1);
var Shape = __webpack_require__(10);
var SHAPES = ['circle', 'square', 'bowtie', 'diamond', 'hexagon', 'triangle', 'triangle-down'];
var HOLLOW_SHAPES = ['cross', 'tick', 'plus', 'hyphen', 'line', 'pointerLine', 'pointerArrow'];
var SQRT_3 = Math.sqrt(3);

// 增加marker
Util.mix(Marker.Symbols, {
  hexagon: function hexagon(x, y, r, ctx) {
    var diffX = r / 2 * SQRT_3;
    ctx.moveTo(x, y - r);
    ctx.lineTo(x + diffX, y - r / 2);
    ctx.lineTo(x + diffX, y + r / 2);
    ctx.lineTo(x, y + r);
    ctx.lineTo(x - diffX, y + r / 2);
    ctx.lineTo(x - diffX, y - r / 2);
    ctx.closePath();
  },
  bowtie: function bowtie(x, y, r, ctx) {
    var diffY = r - 1.5;
    ctx.moveTo(x - r, y - diffY);
    ctx.lineTo(x + r, y + diffY);
    ctx.lineTo(x + r, y - diffY);
    ctx.lineTo(x - r, y + diffY);
    ctx.closePath();
  },
  cross: function cross(x, y, r, ctx) {
    ctx.moveTo(x - r, y - r);
    ctx.lineTo(x + r, y + r);
    ctx.moveTo(x + r, y - r);
    ctx.lineTo(x - r, y + r);
  },
  tick: function tick(x, y, r, ctx) {
    ctx.moveTo(x - r / 2, y - r);
    ctx.lineTo(x + r / 2, y - r);
    ctx.moveTo(x, y - r);
    ctx.lineTo(x, y + r);
    ctx.moveTo(x - r / 2, y + r);
    ctx.lineTo(x + r / 2, y + r);
  },
  plus: function plus(x, y, r, ctx) {
    ctx.moveTo(x - r, y);
    ctx.lineTo(x + r, y);
    ctx.moveTo(x, y - r);
    ctx.lineTo(x, y + r);
  },
  hyphen: function hyphen(x, y, r, ctx) {
    ctx.moveTo(x - r, y);
    ctx.lineTo(x + r, y);
  },
  line: function line(x, y, r, ctx) {
    ctx.moveTo(x, y - r);
    ctx.lineTo(x, y + r);
  }
});

function getFillAttrs(cfg) {
  var defaultAttrs = Global.shape.point;
  var pointAttrs = Util.mix({}, defaultAttrs, {
    fill: cfg.color,
    fillOpacity: cfg.opacity,
    radius: cfg.size
  }, cfg.style);
  return pointAttrs;
}

function getLineAttrs(cfg) {
  var defaultAttrs = Global.shape.hollowPoint;
  var pointAttrs = Util.mix({}, defaultAttrs, {
    stroke: cfg.color,
    strokeOpacity: cfg.opacity,
    radius: cfg.size
  }, cfg.style);
  return pointAttrs;
}

var Point = Shape.registerFactory('point', {
  defaultShapeType: 'hollowCircle',
  getActiveCfg: function getActiveCfg(type, cfg) {
    // 点放大 + 颜色加亮
    var radius = cfg.radius;
    var color = void 0;
    if (type && (type.indexOf('hollow') === 0 || Util.indexOf(HOLLOW_SHAPES, type) !== -1) || !type) {
      color = cfg.stroke || cfg.strokeStyle;
    } else {
      color = cfg.fill || cfg.fillStyle;
    }

    return {
      radius: radius + 1,
      shadowBlur: radius,
      shadowColor: color,
      stroke: color,
      strokeStyle: color,
      strokeOpacity: 1,
      lineWidth: 1
    };
  },
  getDefaultPoints: function getDefaultPoints(pointInfo) {
    return ShapeUtil.splitPoints(pointInfo);
  }
});

function getRectPath(cfg) {
  var x = cfg.points[0].x;
  var y = cfg.points[0].y;
  var w = cfg.size[0];
  var h = cfg.size[1];
  var path = [['M', x - 0.5 * w, y - 0.5 * h], ['L', x + 0.5 * w, y - 0.5 * h], ['L', x + 0.5 * w, y + 0.5 * h], ['L', x - 0.5 * w, y + 0.5 * h], ['z']];
  return path;
}

// 用于桑基图的节点
Shape.registerShape('point', 'rect', {
  draw: function draw(cfg, container) {
    var rectAttrs = getFillAttrs(cfg);
    var path = getRectPath(cfg);
    path = this.parsePath(path);
    var gShape = container.addShape('path', {
      attrs: Util.mix(rectAttrs, {
        path: path
      })
    });
    return gShape;
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    var attrs = getFillAttrs(cfg);
    attrs.symbol = 'rect';
    attrs.radius = 4.5;
    return attrs;
  }
});

// 添加shapes
Util.each(SHAPES, function (shape) {
  Shape.registerShape('point', shape, {
    draw: function draw(cfg, container) {
      // cfg.points = this.parsePoints(cfg.points);
      var attrs = getFillAttrs(cfg);
      return container.addShape('Marker', {
        attrs: Util.mix(attrs, {
          symbol: shape,
          x: cfg.x,
          y: cfg.y
        })
      });
    },
    getMarkerCfg: function getMarkerCfg(cfg) {
      var attrs = getFillAttrs(cfg);
      attrs.symbol = shape;
      attrs.radius = 4.5;
      return attrs;
    }
  });
  // 添加该 shape 对应的 hollowShape
  Shape.registerShape('point', 'hollow' + Util.upperFirst(shape), {
    draw: function draw(cfg, container) {
      // cfg.points = this.parsePoints(cfg.points);
      var attrs = getLineAttrs(cfg);
      return container.addShape('Marker', {
        attrs: Util.mix(attrs, {
          symbol: shape,
          x: cfg.x,
          y: cfg.y
        })
      });
    },
    getMarkerCfg: function getMarkerCfg(cfg) {
      var attrs = getLineAttrs(cfg);
      attrs.symbol = shape;
      attrs.radius = 4.5;
      return attrs;
    }
  });
});

// 添加 hollowShapes
Util.each(HOLLOW_SHAPES, function (shape) {
  Shape.registerShape('point', shape, {
    draw: function draw(cfg, container) {
      var attrs = getLineAttrs(cfg);
      return container.addShape('Marker', {
        attrs: Util.mix(attrs, {
          symbol: shape,
          x: cfg.x,
          y: cfg.y
        })
      });
    },
    getMarkerCfg: function getMarkerCfg(cfg) {
      var attrs = getLineAttrs(cfg);
      attrs.symbol = shape;
      attrs.radius = 4.5;
      return attrs;
    }
  });
});

module.exports = Point;

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview line shapes
 * @author dxq613@gmail.com
 * @author sima.zhang1990@gmail.com
 * @author huangtonger@aliyun.com
 */

var Util = __webpack_require__(0);
var Shape = __webpack_require__(10);
var Global = __webpack_require__(1);

function getAttrs(cfg) {
  var defaultCfg = Global.shape.polygon;
  var shapeCfg = Util.mix({}, defaultCfg, {
    stroke: cfg.color,
    fill: cfg.color,
    fillOpacity: cfg.opacity
  }, cfg.style);
  return shapeCfg;
}

function getHollowAttrs(cfg) {
  var defaultCfg = Global.shape.hollowPolygon;
  var shapeCfg = Util.mix({}, defaultCfg, {
    stroke: cfg.color,
    strokeOpacity: cfg.opacity
  }, cfg.style);
  return shapeCfg;
}
function getPath(points) {
  var path = [];
  var flag = [points[0].x, points[0].y];
  var flagIndex = 0;
  var lastStartPoint = points[0];
  Util.each(points, function (obj, index) {
    var subPath = index === 0 ? ['M', obj.x, obj.y] : ['L', obj.x, obj.y];
    path.push(subPath);
    if (flagIndex !== index && index < points.length - 1 && Util.isEqualWith(flag, [obj.x, obj.y])) {
      var nextPoint = points[index + 1];
      path.push(['Z']);
      path.push(['M', nextPoint.x, nextPoint.y]);
      lastStartPoint = nextPoint;
      flagIndex = index + 1;
      flag = [nextPoint.x, nextPoint.y];
    }
  });
  path.push(['L', lastStartPoint.x, lastStartPoint.y]);
  path.push(['Z']);
  // console.log(Util.map(path, points => points.join('')).join(''));
  return path;
}

// regist line geom
var Polygon = Shape.registerFactory('polygon', {
  defaultShapeType: 'polygon',
  getDefaultPoints: function getDefaultPoints(pointInfo) {
    var points = [];
    Util.each(pointInfo.x, function (subX, index) {
      var subY = pointInfo.y[index];
      points.push({
        x: subX,
        y: subY
      });
    });
    return points;
  },
  getActiveCfg: function getActiveCfg(type, cfg) {
    var lineWidth = cfg.lineWidth || 1;
    if (type === 'hollow') {
      return {
        lineWidth: lineWidth + 1
      };
    }

    var opacity = cfg.fillOpacity || cfg.opacity || 1;
    return {
      // lineWidth,
      fillOpacity: opacity - 0.08
    };
  },
  getSelectedCfg: function getSelectedCfg(type, cfg) {
    if (cfg && cfg.style) {
      return cfg.style;
    }
    return this.getActiveCfg(type, cfg);
  }
});

Shape.registerShape('polygon', 'polygon', {
  draw: function draw(cfg, container) {
    if (!Util.isEmpty(cfg.points)) {
      var attrs = getAttrs(cfg);
      var path = getPath(cfg.points);
      path = this.parsePath(path);
      return container.addShape('path', {
        attrs: Util.mix(attrs, {
          path: path
        })
      });
    }
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    return Util.mix({
      symbol: 'square',
      radius: 4
    }, getAttrs(cfg));
  }
});

Shape.registerShape('polygon', 'hollow', {
  draw: function draw(cfg, container) {
    if (!Util.isEmpty(cfg.points)) {
      var attrs = getHollowAttrs(cfg);
      var path = getPath(cfg.points);
      path = this.parsePath(path);

      return container.addShape('path', {
        attrs: Util.mix(attrs, {
          path: path
        })
      });
    }
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    return Util.mix({
      symbol: 'square',
      radius: 4
    }, getAttrs(cfg));
  }
});

module.exports = Polygon;

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview 自定义的 shape
 * @author dxq613@gmail.com
 * @author sima.zhang1990@gmail.com
 */

var Util = __webpack_require__(0);
var Shape = __webpack_require__(10);
var Global = __webpack_require__(1);

function _parseValue(value) {
  if (!Util.isArray(value)) {
    value = [value];
  }
  var min = value[0]; // 最小值
  var max = value[value.length - 1]; // 最大值
  var min1 = value.length > 1 ? value[1] : min;
  var max1 = value.length > 3 ? value[3] : max;
  var median = value.length > 2 ? value[2] : min1;

  return {
    min: min, // 最小值
    max: max, // 最大值
    min1: min1,
    max1: max1,
    median: median
  };
}

function addPoints(from, to) {
  Util.each(from, function (subArr) {
    to.push({
      x: subArr[0],
      y: subArr[1]
    });
  });
}

function getAttrs(cfg) {
  var defaultAttrs = Global.shape.schema;
  var attrs = Util.mix({}, defaultAttrs, {
    stroke: cfg.color,
    strokeOpacity: cfg.opacity
  }, cfg.style);
  return attrs;
}

function getFillAttrs(cfg) {
  var defaultAttrs = Global.shape.schema;
  var attrs = Util.mix({}, defaultAttrs, {
    fill: cfg.color,
    stroke: cfg.color,
    fillOpacity: cfg.opacity
  }, cfg.style);
  return attrs;
}

function getBoxPoints(x, y, width) {
  var points = [];
  var pointsArray = void 0;
  var obj = void 0;
  if (Util.isArray(y)) {
    // 2维
    obj = _parseValue(y);
    pointsArray = [[x - width / 2, obj.max], [x + width / 2, obj.max], [x, obj.max], [x, obj.max1], [x - width / 2, obj.min1], [x - width / 2, obj.max1], [x + width / 2, obj.max1], [x + width / 2, obj.min1], [x, obj.min1], [x, obj.min], [x - width / 2, obj.min], [x + width / 2, obj.min], [x - width / 2, obj.median], [x + width / 2, obj.median]];
  } else {
    // 只有一个维度
    y = y || 0.5;
    obj = _parseValue(x);
    pointsArray = [[obj.min, y - width / 2], [obj.min, y + width / 2], [obj.min, y], [obj.min1, y], [obj.min1, y - width / 2], [obj.min1, y + width / 2], [obj.max1, y + width / 2], [obj.max1, y - width / 2], [obj.max1, y], [obj.max, y], [obj.max, y - width / 2], [obj.max, y + width / 2], [obj.median, y - width / 2], [obj.median, y + width / 2]];
  }
  addPoints(pointsArray, points);
  return points;
}

function _sortValue(value) {
  if (!Util.isArray(value)) {
    value = [value];
  }
  // 从大到小排序
  var sorted = value.sort(function (a, b) {
    return a < b ? 1 : -1;
  });

  var length = sorted.length;
  if (length < 4) {
    var min = sorted[length - 1];
    for (var i = 0; i < 4 - length; i++) {
      sorted.push(min);
    }
  }

  return sorted;
}

// 获取K线图的points
function getCandlePoints(x, y, width) {
  var yValues = _sortValue(y);
  var points = [{
    x: x,
    y: yValues[0]
  }, {
    x: x,
    y: yValues[1]
  }, {
    x: x - width / 2,
    y: yValues[2]
  }, {
    x: x - width / 2,
    y: yValues[1]
  }, {
    x: x + width / 2,
    y: yValues[1]
  }, {
    x: x + width / 2,
    y: yValues[2]
  }, {
    x: x,
    y: yValues[2]
  }, {
    x: x,
    y: yValues[3]
  }]; // 按照顺时针连接
  return points;
}

function getBoxPath(points) {
  var path = [['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['M', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['M', points[4].x, points[4].y], ['L', points[5].x, points[5].y], ['L', points[6].x, points[6].y], ['L', points[7].x, points[7].y], ['L', points[4].x, points[4].y], // 封闭 z
  ['Z'], ['M', points[8].x, points[8].y], ['L', points[9].x, points[9].y], ['M', points[10].x, points[10].y], ['L', points[11].x, points[11].y], ['M', points[12].x, points[12].y], ['L', points[13].x, points[13].y]];
  return path;
}

function getCandlePath(points) {
  var path = [['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['M', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['L', points[4].x, points[4].y], ['L', points[5].x, points[5].y], ['Z'], ['M', points[6].x, points[6].y], ['L', points[7].x, points[7].y]];
  return path;
}

var Schema = Shape.registerFactory('schema', {
  defaultShapeType: '',
  getActiveCfg: function getActiveCfg(type, cfg) {
    if (type === 'box') {
      var lineWidth = cfg.lineWidth || 1;
      return {
        lineWidth: lineWidth + 1
      };
    }
    var opacity = cfg.fillOpacity || cfg.opacity || 1;
    return {
      fillOpacity: opacity - 0.15,
      strokeOpacity: opacity - 0.15
    };
  },
  getSelectedCfg: function getSelectedCfg(type, cfg) {
    if (cfg && cfg.style) {
      return cfg.style;
    }
    return this.getActiveCfg(type, cfg);
  }
});

// 箱线图
Shape.registerShape('schema', 'box', {
  getPoints: function getPoints(pointInfo) {
    return getBoxPoints(pointInfo.x, pointInfo.y, pointInfo.size);
  },
  draw: function draw(cfg, container) {
    var attrs = getAttrs(cfg);
    var path = getBoxPath(cfg.points);
    path = this.parsePath(path);
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    return {
      symbol: function symbol(x, y, r, ctx) {
        var yValues = [y - 6, y - 3, y, y + 3, y + 6];
        var points = getBoxPoints(x, yValues, r);
        ctx.moveTo(points[0].x + 1, points[0].y);
        ctx.lineTo(points[1].x - 1, points[1].y);
        ctx.moveTo(points[2].x, points[2].y);
        ctx.lineTo(points[3].x, points[3].y);
        ctx.moveTo(points[4].x, points[4].y);
        ctx.lineTo(points[5].x, points[5].y);
        ctx.lineTo(points[6].x, points[6].y);
        ctx.lineTo(points[7].x, points[7].y);
        ctx.lineTo(points[4].x, points[4].y);
        ctx.closePath();
        ctx.moveTo(points[8].x, points[8].y);
        ctx.lineTo(points[9].x, points[9].y);
        ctx.moveTo(points[10].x + 1, points[10].y);
        ctx.lineTo(points[11].x - 1, points[11].y);
        ctx.moveTo(points[12].x, points[12].y);
        ctx.lineTo(points[13].x, points[13].y);
      },

      radius: 6,
      lineWidth: 1,
      stroke: cfg.color
    };
  }
});

// K线
Shape.registerShape('schema', 'candle', {
  getPoints: function getPoints(pointInfo) {
    return getCandlePoints(pointInfo.x, pointInfo.y, pointInfo.size);
  },
  draw: function draw(cfg, container) {
    var attrs = getFillAttrs(cfg);
    var path = getCandlePath(cfg.points);
    path = this.parsePath(path);
    return container.addShape('path', {
      attrs: Util.mix(attrs, {
        path: path
      })
    });
  },
  getMarkerCfg: function getMarkerCfg(cfg) {
    return {
      symbol: function symbol(x, y, r, ctx) {
        y = [y + 7.5, y + 3, y - 3, y - 7.5];
        var points = getCandlePoints(x, y, r);
        ctx.moveTo(points[0].x, points[0].y);
        ctx.lineTo(points[1].x, points[1].y);
        ctx.moveTo(points[2].x, points[2].y);
        ctx.lineTo(points[3].x, points[3].y);
        ctx.lineTo(points[4].x, points[4].y);
        ctx.lineTo(points[5].x, points[5].y);
        ctx.closePath();
        ctx.moveTo(points[6].x, points[6].y);
        ctx.lineTo(points[7].x, points[7].y);
      },

      lineWidth: 1,
      stroke: cfg.color,
      fill: cfg.color,
      radius: 6
    };
  }
});

module.exports = Schema;

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview The tooltip handler
 * @author sima.zhang
 */
var Util = __webpack_require__(0);

var _require = __webpack_require__(1),
    defaultColor = _require.defaultColor;

var FIELD_ORIGIN = '_origin';

function getScaleName(scale) {
  return scale.alias || scale.field;
}

var TooltipMixin = {
  _snapEqual: function _snapEqual(v1, v2, scale) {
    var equals = void 0;
    v1 = scale.translate(v1);
    v2 = scale.translate(v2);

    if (scale.isCategory) {
      equals = v1 === v2;
    } else {
      equals = Util.snapEqual(v1, v2);
    }
    return equals;
  },
  _getScaleValueByPoint: function _getScaleValueByPoint(point) {
    var result = 0;
    var coord = this.get('coord');
    var xScale = this.getXScale();
    var invertPoint = coord.invert(point);
    var xValue = invertPoint.x;

    if (this.isInCircle() && xValue > (1 + xScale.rangeMax()) / 2) {
      xValue = xScale.rangeMin(); // 极坐标下，scale 的 range 被做过特殊处理 see view.js#L88
    }
    result = xScale.invert(xValue);

    if (xScale.isCategory) {
      result = xScale.translate(result); // 防止分类类型
    }

    return result;
  },
  _getOriginByPoint: function _getOriginByPoint(point) {
    var xScale = this.getXScale();
    var yScale = this.getYScale();
    var xField = xScale.field;
    var yField = yScale.field;
    var coord = this.get('coord');
    var invertPoint = coord.invert(point);
    var xValue = xScale.invert(invertPoint.x);
    var yValue = yScale.invert(invertPoint.y);

    var result = {};
    result[xField] = xValue;
    result[yField] = yValue;
    return result;
  },
  _getScale: function _getScale(field) {
    var self = this;
    var scales = self.get('scales');
    var rst = null;

    Util.each(scales, function (scale) {
      if (scale.field === field) {
        rst = scale;
        return false;
      }
    });
    return rst;
  },


  // 获取值对应的度量
  _getTipValueScale: function _getTipValueScale() {
    var attrs = this.getAttrsForLegend();
    var scale = void 0;
    Util.each(attrs, function (attr) {
      var tmpScale = attr.getScale(attr.type);
      if (tmpScale.isLinear) {
        // 如果指定字段是非position的，同时是连续的
        scale = tmpScale;
        return false;
      }
    });

    var xScale = this.getXScale();
    var yScale = this.getYScale();

    if (!scale && yScale && yScale.field === '..y') {
      return xScale;
    }

    return scale || yScale || xScale;
  },
  _getTipTitleScale: function _getTipTitleScale(titleField) {
    var self = this;
    if (titleField) {
      return self._getScale(titleField);
    }
    var position = self.getAttr('position');
    var fields = position.getFields();
    var tmpField = void 0;
    Util.each(fields, function (field) {
      if (field.indexOf('..') === -1) {
        tmpField = field;
        return false;
      }
    });
    return self._getScale(tmpField);
  },
  _filterValue: function _filterValue(arr, point) {
    var coord = this.get('coord');
    var yScale = this.getYScale();
    var yField = yScale.field;
    var invertPoint = coord.invert(point);
    var yValue = invertPoint.y;
    yValue = yScale.invert(yValue);
    var rst = arr[arr.length - 1];

    Util.each(arr, function (obj) {
      var origin = obj[FIELD_ORIGIN];
      if (origin[yField][0] <= yValue && origin[yField][1] >= yValue) {
        rst = obj;
        return false;
      }
    });
    return rst;
  },
  getXDistance: function getXDistance() {
    var self = this;
    var distance = self.get('xDistance');
    if (!distance) {
      var xScale = self.getXScale();
      if (xScale.isCategory) {
        distance = 1;
      } else {
        var values = xScale.values; // values 是无序的
        var min = xScale.translate(values[0]);
        var max = min;
        Util.each(values, function (value) {
          // 时间类型需要 translate
          value = xScale.translate(value);
          if (value < min) {
            min = value;
          }
          if (value > max) {
            max = value;
          }
        });
        var length = values.length;
        // 应该是除以 length - 1
        distance = (max - min) / (length - 1);
      }
      self.set('xDistance', distance);
    }

    return distance;
  },
  findPoint: function findPoint(point, dataArray) {
    var self = this;
    var type = self.get('type');
    var xScale = self.getXScale();
    var yScale = self.getYScale();
    var xField = xScale.field;
    var yField = yScale.field;
    var rst = null;

    if (Util.indexOf(['heatmap'], type) > -1) {
      var coord = self.get('coord');
      var invertPoint = coord.invert(point);
      var xValue = xScale.invert(invertPoint.x);
      var yValue = yScale.invert(invertPoint.y);
      var min = Infinity;
      Util.each(dataArray, function (obj) {
        var distance = Math.pow(obj[FIELD_ORIGIN][xField] - xValue, 2) + Math.pow(obj[FIELD_ORIGIN][yField] - yValue, 2);
        if (distance < min) {
          min = distance;
          rst = obj;
        }
      });
      return rst;
    }

    var first = dataArray[0];
    var last = dataArray[dataArray.length - 1];

    if (!first) {
      return rst;
    }

    var value = self._getScaleValueByPoint(point); // 根据该点获得对应度量后数据的值
    var firstXValue = first[FIELD_ORIGIN][xField];
    var firstYValue = first[FIELD_ORIGIN][yField];
    var lastXValue = last[FIELD_ORIGIN][xField];
    var isYRange = yScale.isLinear && Util.isArray(firstYValue); // 考虑 x 维度相同，y 是数组区间的情况

    // 如果x的值是数组
    if (Util.isArray(firstXValue)) {
      Util.each(dataArray, function (record) {
        var origin = record[FIELD_ORIGIN];
        if (xScale.translate(origin[xField][0]) <= value && xScale.translate(origin[xField][1]) >= value) {
          if (isYRange) {
            if (!Util.isArray(rst)) {
              rst = [];
            }
            rst.push(record);
          } else {
            rst = record;
            return false;
          }
        }
      });
      if (Util.isArray(rst)) {
        rst = this._filterValue(rst, point);
      }
    } else {
      var next = void 0;
      if (!xScale.isLinear && xScale.type !== 'timeCat') {
        Util.each(dataArray, function (record, index) {
          var origin = record[FIELD_ORIGIN];
          if (self._snapEqual(origin[xField], value, xScale)) {
            if (isYRange) {
              if (!Util.isArray(rst)) {
                rst = [];
              }
              rst.push(record);
            } else {
              rst = record;
              return false;
            }
          } else if (xScale.translate(origin[xField]) <= value) {
            last = record;
            next = dataArray[index + 1];
          }
        });

        if (Util.isArray(rst)) {
          rst = this._filterValue(rst, point);
        }
      } else {
        if ((value > xScale.translate(lastXValue) || value < xScale.translate(firstXValue)) && (value > xScale.max || value < xScale.min)) {
          return null;
        }

        var firstIdx = 0;
        var lastIdx = dataArray.length - 1;
        var middleIdx = void 0;
        while (firstIdx <= lastIdx) {
          middleIdx = Math.floor((firstIdx + lastIdx) / 2);
          var item = dataArray[middleIdx][FIELD_ORIGIN][xField];
          if (self._snapEqual(item, value, xScale)) {
            return dataArray[middleIdx];
          }

          if (xScale.translate(item) <= xScale.translate(value)) {
            firstIdx = middleIdx + 1;
            last = dataArray[middleIdx];
            next = dataArray[middleIdx + 1];
          } else {
            if (lastIdx === 0) {
              last = dataArray[0];
            }
            lastIdx = middleIdx - 1;
          }
        }
      }

      if (last && next) {
        // 计算最逼近的
        if (Math.abs(xScale.translate(last[FIELD_ORIGIN][xField]) - value) > Math.abs(xScale.translate(next[FIELD_ORIGIN][xField]) - value)) {
          last = next;
        }
      }
    }

    var distance = self.getXDistance(); // 每个分类间的平均间距
    if (!rst && Math.abs(xScale.translate(last[FIELD_ORIGIN][xField]) - value) <= distance / 2) {
      rst = last;
    }

    return rst;
  },

  /**
   * @protected
   * 获取tooltip的标题
   * @param  {Object} origin 点的原始信息
   * @param  {String} titleField 标题的字段
   * @return {String} 提示信息的标题
   */
  getTipTitle: function getTipTitle(origin, titleField) {
    var tipTitle = '';
    var titleScale = this._getTipTitleScale(titleField);

    if (titleScale) {
      var value = origin[titleScale.field];
      tipTitle = titleScale.getText(value);
    } else if (this.get('type') === 'heatmap') {
      // 热力图在不存在 title 的时候特殊处理
      var xScale = this.getXScale();
      var yScale = this.getYScale();
      var xValue = xScale.getText(origin[xScale.field]);
      var yValue = yScale.getText(origin[yScale.field]);

      tipTitle = '( ' + xValue + ', ' + yValue + ' )';
    }
    return tipTitle;
  },
  getTipValue: function getTipValue(origin, valueScale) {
    var value = void 0;
    var field = valueScale.field;
    value = origin[field];

    if (Util.isArray(value)) {
      var tmp = [];
      Util.each(value, function (sub) {
        tmp.push(valueScale.getText(sub));
      });
      value = tmp.join('-');
    } else {
      value = valueScale.getText(value);
    }
    return value;
  },

  /**
   * @protected
   * 获取tooltip的名称
   * @param  {Object} origin 点的原始信息
   * @return {String} 提示信息的名称
   */
  getTipName: function getTipName(origin) {
    var name = void 0;
    var nameScale = void 0;
    var groupScales = this._getGroupScales();
    if (groupScales.length) {
      // 如果存在分组类型，取第一个分组类型
      Util.each(groupScales, function (scale) {
        nameScale = scale;
        return false;
      });
    }
    if (nameScale) {
      var field = nameScale.field;
      name = nameScale.getText(origin[field]);
    } else {
      var valueScale = this._getTipValueScale();
      name = getScaleName(valueScale);
    }
    return name;
  },

  /**
   * 获取点对应tooltip的信息
   * @protected
   * @param  {Object} point 原始的数据记录
   * @param  {String} titleField tooltipTitle 配置信息
   * @return {Array}  一条或者多条记录
   */
  getTipItems: function getTipItems(point, titleField) {
    var self = this;
    var origin = point[FIELD_ORIGIN];
    var tipTitle = self.getTipTitle(origin, titleField);
    var tooltipCfg = self.get('tooltipCfg');
    var items = [];
    var name = void 0;
    var value = void 0;

    function addItem(itemName, itemValue, cfg) {
      if (!Util.isNil(itemValue) && itemValue !== '') {
        // 值为null的时候，忽视
        var item = {
          title: tipTitle,
          point: point,
          name: itemName || tipTitle,
          value: itemValue,
          color: point.color || defaultColor,
          marker: true
        };
        if (self.get('type') === 'interval' || self.get('type') === 'schema') {
          item.size = self.getSize();
        }

        items.push(Util.mix({}, item, cfg));
      }
    }

    if (tooltipCfg) {
      var fields = tooltipCfg.fields;
      var cfg = tooltipCfg.cfg;
      var callbackParams = [];
      Util.each(fields, function (field) {
        callbackParams.push(origin[field]);
      });
      if (cfg) {
        // 存在回调函数
        if (Util.isFunction(cfg)) {
          cfg = cfg.apply(null, callbackParams);
        }
        var itemCfg = Util.mix({}, {
          point: point,
          title: tipTitle,
          color: point.color || defaultColor,
          marker: true // 默认展示 marker
        }, cfg);
        if (self.get('type') === 'interval' || self.get('type') === 'schema') {
          itemCfg.size = self.getSize();
        }
        items.push(itemCfg);
      } else {
        Util.each(fields, function (field) {
          if (!Util.isNil(origin[field])) {
            // 字段数据为null ,undefined时不显示
            var scale = self._getScale(field);
            name = getScaleName(scale);
            value = scale.getText(origin[field]);
            addItem(name, value);
          }
        });
      }
    } else {
      var valueScale = self._getTipValueScale();
      if (!Util.isNil(origin[valueScale.field])) {
        // 字段数据为null ,undefined时不显示
        value = self.getTipValue(origin, valueScale);
        name = self.getTipName(origin);
        addItem(name, value);
      }
    }
    return items;
  },
  isShareTooltip: function isShareTooltip() {
    var shareTooltip = this.get('shareTooltip');
    var type = this.get('type');
    var view = this.get('view');
    var options = void 0;
    if (view.get('parent')) {
      options = view.get('parent').get('options');
    } else {
      options = view.get('options');
    }

    if (type === 'interval') {
      var coord = this.get('coord');
      var coordType = coord.type;
      if (coordType === 'theta' || coordType === 'polar' && coord.isTransposed) {
        shareTooltip = false;
      }
    } else if (!this.getYScale() || Util.inArray(['contour', 'point', 'polygon', 'edge'], type)) {
      shareTooltip = false;
    }

    if (options.tooltip && Util.isBoolean(options.tooltip.shared)) {
      // 以用户设置的为准
      shareTooltip = options.tooltip.shared;
    }
    return shareTooltip;
  }
};

module.exports = TooltipMixin;

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview the interaction when geom was actived
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var FIELD_ORIGIN = '_origin';

function isSameShape(shape1, shape2) {
  if (Util.isNil(shape1) || Util.isNil(shape2)) {
    return false;
  }
  var shape1Origin = shape1.get('origin');
  var shape2Origin = shape2.get('origin');
  return Util.isEqual(shape1Origin, shape2Origin);
}

function isChange(preShapes, shapes) {
  if (!preShapes) {
    return true;
  }

  if (preShapes.length !== shapes.length) {
    return true;
  }

  var rst = false;
  Util.each(shapes, function (shape, index) {
    if (!isSameShape(shape, preShapes[index])) {
      rst = true;
      return false;
    }
  });
  return rst;
}

var ActiveMixin = {
  _isAllowActive: function _isAllowActive() {
    var allowActive = this.get('allowActive');
    if (Util.isNil(allowActive)) {
      // 用户未设置，使用默认的策略
      var view = this.get('view');
      var isShareTooltip = this.isShareTooltip();
      var options = view.get('options');
      // 默认情况下，tooltip 关闭或者 tooltip 模式为 shared === false 的时候允许 active
      if (options.tooltip === false || !isShareTooltip) {
        return true;
      }
    } else {
      return allowActive;
    }

    return false;
  },
  _onMouseenter: function _onMouseenter(ev) {
    var self = this;
    var shape = ev.shape;
    var shapeContainer = self.get('shapeContainer');
    if (shape && !shape.get('animating') && shapeContainer.contain(shape) && self._isAllowActive()) {
      self.setShapesActived(shape);
    }
  },
  _onMouseleave: function _onMouseleave() {
    var self = this;
    var view = self.get('view');
    var canvas = view.get('canvas');
    if (self.get('activeShapes')) {
      self.clearActivedShapes();
      canvas.draw();
    }
  },
  _bindActiveAction: function _bindActiveAction() {
    var self = this;
    var view = self.get('view');
    var type = self.get('type');
    view.on(type + ':mouseenter', Util.wrapBehavior(self, '_onMouseenter'));
    view.on(type + ':mouseleave', Util.wrapBehavior(self, '_onMouseleave'));
  },
  _offActiveAction: function _offActiveAction() {
    var self = this;
    var view = self.get('view');
    var type = self.get('type');
    view.off(type + ':mouseenter', Util.getWrapBehavior(self, '_onMouseenter'));
    view.off(type + ':mouseleave', Util.getWrapBehavior(self, '_onMouseleave'));
  },
  _setActiveShape: function _setActiveShape(shape) {
    var self = this;
    var shapeData = shape.get('origin');
    var shapeName = shapeData.shape || self.getDefaultValue('shape');
    if (Util.isArray(shapeName)) {
      shapeName = shapeName[0];
    }
    var shapeFactory = self.get('shapeFactory');
    var shapeCfg = Util.mix({}, shape.__attrs, {
      origin: shapeData
    });
    var activeCfg = shapeFactory.getActiveCfg(shapeName, shapeCfg);
    Util.mix(shape.__attrs, activeCfg);
    shape.setZIndex(1); // 提前
  },
  setShapesActived: function setShapesActived(shapes) {
    var self = this;
    var isStop = false; // 判断 shape 是否正在动画
    if (!Util.isArray(shapes)) {
      shapes = [shapes];
    }

    var preShapes = self.get('preShapes'); // 获取上次被激活的 shapes
    if (!isChange(preShapes, shapes)) {
      return;
    }
    if (preShapes) {
      self.clearActivedShapes(); // 先清除激活元素
    }
    var view = self.get('view');
    var canvas = view.get('canvas');
    var shapeContainer = self.get('shapeContainer');
    Util.each(shapes, function (shape) {
      if (shape.get('animating')) {
        isStop = true;
        return false;
      }
      if (!shape.get('_originAttrs')) {
        shape.set('_originAttrs', Util.cloneDeep(shape.__attrs)); // 缓存原来的属性，由于 __attrs.matrix 是数组，所以此处需要深度复制
      }
      if (shape.get('visible') && !shape.get('selected')) {
        self._setActiveShape(shape);
      }
    });

    if (isStop) {
      return;
    }

    self.set('activeShapes', shapes);
    self.set('preShapes', shapes);
    shapeContainer.sort();
    canvas.draw();
  },
  clearActivedShapes: function clearActivedShapes() {
    var self = this;
    var shapeContainer = self.get('shapeContainer');
    if (shapeContainer && !shapeContainer.get('destroyed')) {
      var activeShapes = self.get('activeShapes');
      Util.each(activeShapes, function (activeShape) {
        if (!activeShape.get('selected')) {
          var originAttrs = activeShape.get('_originAttrs');
          activeShape.__attrs = Util.cloneDeep(originAttrs);
          activeShape.setZIndex(0);
          activeShape.set('_originAttrs', null);
        }
      });
      var preHighlightShapes = self.get('preHighlightShapes');
      if (preHighlightShapes) {
        var shapes = shapeContainer.get('children');
        Util.each(shapes, function (shape) {
          if (!shape.get('selected')) {
            var originAttrs = shape.get('_originAttrs');
            if (originAttrs) {
              shape.__attrs = Util.cloneDeep(originAttrs);
              shape.setZIndex(0);
              shape.set('_originAttrs', null);
            }
          }
        });
      }
      // 恢复原来排序
      var children = shapeContainer.get('children');
      children.sort(function (obj1, obj2) {
        return obj1._INDEX - obj2._INDEX;
      });

      self.set('activeShapes', null);
      self.set('preShapes', null);
      self.set('preHighlightShapes', null);
    }
  },
  getGroupShapesByPoint: function getGroupShapesByPoint(point) {
    var self = this;
    var shapeContainer = self.get('shapeContainer');
    var activeShapes = [];
    if (shapeContainer) {
      var xField = self.getXScale().field;
      var shapes = self.getShapes();
      var originObj = self._getOriginByPoint(point);
      Util.each(shapes, function (shape) {
        var origin = shape.get('origin');
        if (shape.get('visible') && origin) {
          // 有可能不是图形，而是label文本，所以判断一下
          var shapeXValue = origin[FIELD_ORIGIN][xField];
          if (shapeXValue === originObj[xField]) {
            activeShapes.push(shape);
          }
        }
      });
    }
    return activeShapes;
  },
  getSingleShapeByPoint: function getSingleShapeByPoint(point) {
    var self = this;
    var shapeContainer = self.get('shapeContainer');
    var canvas = shapeContainer.get('canvas');
    var pixelRatio = canvas.get('pixelRatio');
    var result = void 0;
    if (shapeContainer) {
      result = shapeContainer.getShape(point.x * pixelRatio, point.y * pixelRatio);
    }

    if (result && result.get('origin')) {
      return result;
    }
  },
  highlightShapes: function highlightShapes(_highlightShapes, highlightCfg) {
    var self = this;
    if (!Util.isArray(_highlightShapes)) {
      _highlightShapes = [_highlightShapes];
    }

    var preHighlightShapes = self.get('preHighlightShapes'); // 获取上次被激活的 shapes
    if (!isChange(preHighlightShapes, _highlightShapes)) {
      return;
    }

    if (preHighlightShapes) {
      self.clearActivedShapes();
    }

    var shapes = self.getShapes();

    Util.each(shapes, function (shape) {
      if (!shape.get('_originAttrs')) {
        shape.set('_originAttrs', Util.cloneDeep(shape.__attrs)); // 缓存原来的属性
      }
      if (Util.indexOf(_highlightShapes, shape) !== -1) {
        shape.__attrs = Util.mix({}, shape.get('_originAttrs'), highlightCfg);
        shape.setZIndex(1); // 提前
      } else {
        Util.mix(shape.__attrs, {
          fill: '#fff',
          fillOpacity: 0.3,
          strokeOpacity: 0.3,
          stroke: '#fff'
        });
        shape.setZIndex(0);
      }
    });
    self.set('preHighlightShapes', _highlightShapes);
    self.set('activeShapes', _highlightShapes);
  }
};

module.exports = ActiveMixin;

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview the interaction when geom was selected
 * @author sima.zhang
 */
var Util = __webpack_require__(0);

function isSameShape(shape1, shape2) {
  if (Util.isNil(shape1) || Util.isNil(shape2)) {
    return false;
  }
  var shape1Origin = shape1.get('origin');
  var shape2Origin = shape2.get('origin');
  return Util.isEqual(shape1Origin, shape2Origin);
}

var SelectMixin = {
  _isAllowSelect: function _isAllowSelect() {
    var isAllowSelect = this.get('allowSelect');
    if (Util.isNil(isAllowSelect)) {
      var type = this.get('type');
      var coord = this.get('coord');
      var coordType = coord && coord.type;

      if (type === 'interval' && coordType === 'theta') {
        // 饼图默认可以进行选中
        return true;
      }
    } else {
      // 用户设置了 select 配置
      return isAllowSelect;
    }

    return false;
  },
  _onClick: function _onClick(ev) {
    var self = this;
    if (self._isAllowSelect()) {
      // 允许选中下才执行
      self.clearActivedShapes(); // 清除hover效果
      var shape = ev.shape;
      var shapeContainer = self.get('shapeContainer');
      if (shape && !shape.get('animating') && shapeContainer.contain(shape)) {
        self.setShapeSelected(shape);
      }
    }
  },
  _bindSelectedAction: function _bindSelectedAction() {
    var self = this;
    var view = self.get('view');
    var type = self.get('type');
    view.on(type + ':click', Util.wrapBehavior(self, '_onClick'));
  },
  _offSelectedAction: function _offSelectedAction() {
    var self = this;
    var view = self.get('view');
    var type = self.get('type');
    view.off(type + ':click', Util.getWrapBehavior(self, '_onClick'));
  },
  _setShapeStatus: function _setShapeStatus(shape, status) {
    var self = this;
    var view = self.get('view');
    var selectedOptions = self.get('selectedOptions') || {};
    var animate = selectedOptions.animate !== false; // 默认允许动画
    var canvas = view.get('canvas');

    shape.set('selected', status);
    var shapeData = shape.get('origin');

    if (status) {
      // 选中状态
      var shapeName = shapeData.shape || self.getDefaultValue('shape');
      if (Util.isArray(shapeName)) {
        shapeName = shapeName[0];
      }
      var shapeFactory = self.get('shapeFactory');
      var cfg = Util.mix({
        geom: self,
        point: shapeData
      }, selectedOptions);
      var selectedStyle = shapeFactory.getSelectedCfg(shapeName, cfg);
      Util.mix(selectedStyle, cfg.style); // 用户设置的优先级更高

      if (!shape.get('_originAttrs')) {
        // 缓存原有属性
        shape.set('_originAttrs', Util.cloneDeep(shape.__attrs));
      }

      if (animate) {
        shape.animate(selectedStyle, 300);
      } else {
        shape.attr(selectedStyle);
        canvas.draw();
      }
    } else {
      var originAttrs = shape.get('_originAttrs');
      if (animate) {
        shape.animate(originAttrs, 300);
      } else {
        shape.attr(originAttrs);
        canvas.draw();
      }
    }
  },
  setShapeSelected: function setShapeSelected(shape) {
    var self = this;
    var selectedShapes = self._getSelectedShapes();
    var selectedOptions = self.get('selectedOptions') || {};
    var cancelable = selectedOptions.cancelable !== false; // 选中状态是否允许取消，默认允许
    if (selectedOptions.mode === 'multiple') {
      // 支持多选
      if (Util.indexOf(selectedShapes, shape) === -1) {
        selectedShapes.push(shape);
        self._setShapeStatus(shape, true);
      } else if (cancelable) {
        // 图形已经被选中并且选中状态允许取消选中
        Util.Array.remove(selectedShapes, shape);
        self._setShapeStatus(shape, false);
      }
    } else {
      var selectedShape = selectedShapes[0];
      if (cancelable) {
        // 如果允许取消，则选中null
        shape = isSameShape(selectedShape, shape) ? null : shape;
      }
      if (!isSameShape(selectedShape, shape)) {
        if (selectedShape) {
          self._setShapeStatus(selectedShape, false);
        }
        if (shape) {
          self._setShapeStatus(shape, true);
        }
      }
    }
  },
  clearSelected: function clearSelected() {
    var self = this;
    var shapeContainer = self.get('shapeContainer');
    if (shapeContainer && !shapeContainer.get('destroyed')) {
      var selectedShapes = self._getSelectedShapes();
      Util.each(selectedShapes, function (shape) {
        self._setShapeStatus(shape, false);
        shape.set('_originAttrs', null);
      });
    }
  },
  _getSelectedShapes: function _getSelectedShapes() {
    var self = this;
    var shapes = self.getShapes();
    var selectedShapes = [];

    Util.each(shapes, function (shape) {
      if (shape.get('selected')) {
        selectedShapes.push(shape);
      }
    });
    self.set('selectedShapes', selectedShapes);
    return selectedShapes;
  }
};

module.exports = SelectMixin;

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview 点图
 * @author dxq613@gmail.com
 */

var GeomBase = __webpack_require__(9);
var Util = __webpack_require__(0);

var Point = function (_GeomBase) {
  _inherits(Point, _GeomBase);

  function Point() {
    _classCallCheck(this, Point);

    return _possibleConstructorReturn(this, _GeomBase.apply(this, arguments));
  }

  /**
   * 获取默认的配置属性
   * @protected
   * @return {Object} 默认属性
   */
  Point.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
    cfg.type = 'point';
    cfg.shapeType = 'point';
    cfg.generatePoints = true;
    return cfg;
  };

  Point.prototype.drawPoint = function drawPoint(obj, container, shapeFactory, index) {
    var self = this;
    var shape = obj.shape;
    var cfg = self.getDrawCfg(obj);
    var geomShape = void 0;
    if (Util.isArray(obj.y)) {
      var hasAdjust = self.hasStack();
      Util.each(obj.y, function (y, idx) {
        cfg.y = y;
        cfg.yIndex = idx;
        if (!hasAdjust || idx !== 0) {
          geomShape = shapeFactory.drawShape(shape, cfg, container);
          geomShape.setSilent('index', index + idx);
          geomShape.setSilent('coord', self.get('coord'));
          if (self.get('animate') && self.get('animateCfg')) {
            geomShape.setSilent('animateCfg', self.get('animateCfg'));
          }
        }
      });
    } else if (!Util.isNil(obj.y)) {
      geomShape = shapeFactory.drawShape(shape, cfg, container);
      geomShape.setSilent('index', index);
      geomShape.setSilent('coord', self.get('coord'));

      if (self.get('animate') && self.get('animateCfg')) {
        geomShape.setSilent('animateCfg', self.get('animateCfg'));
      }
    }
  };

  return Point;
}(GeomBase);

var PointJitter = function (_Point) {
  _inherits(PointJitter, _Point);

  function PointJitter() {
    _classCallCheck(this, PointJitter);

    return _possibleConstructorReturn(this, _Point.apply(this, arguments));
  }

  PointJitter.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Point.prototype.getDefaultCfg.call(this);
    cfg.hasDefaultAdjust = true;
    cfg.adjusts = [{ type: 'jitter' }];
    return cfg;
  };

  return PointJitter;
}(Point);

Point.Jitter = PointJitter;

module.exports = Point;

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview 线图
 * @author dxq613@gmail.com
 */

var Path = __webpack_require__(111);

var Line = function (_Path) {
  _inherits(Line, _Path);

  function Line() {
    _classCallCheck(this, Line);

    return _possibleConstructorReturn(this, _Path.apply(this, arguments));
  }

  /**
   * 获取默认的配置属性
   * @protected
   * @return {Object} 默认属性
   */
  Line.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Path.prototype.getDefaultCfg.call(this);
    cfg.type = 'line';
    cfg.sortable = true;
    return cfg;
  };

  return Line;
}(Path);

var LineStack = function (_Line) {
  _inherits(LineStack, _Line);

  function LineStack() {
    _classCallCheck(this, LineStack);

    return _possibleConstructorReturn(this, _Line.apply(this, arguments));
  }

  LineStack.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Line.prototype.getDefaultCfg.call(this);
    cfg.hasDefaultAdjust = true;
    cfg.adjusts = [{ type: 'stack' }];
    return cfg;
  };

  return LineStack;
}(Line);

Line.Stack = LineStack;
module.exports = Line;

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview interval geometry
 * @author dxq613@gmail.com
 */

var GeomBase = __webpack_require__(9);
var Util = __webpack_require__(0);
var SizeMixin = __webpack_require__(113);

var Interval = function (_GeomBase) {
  _inherits(Interval, _GeomBase);

  /**
   * 获取默认的配置属性
   * @protected
   * @return {Object} 默认属性
   */
  Interval.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
    cfg.type = 'interval';
    cfg.shapeType = 'interval';
    cfg.generatePoints = true;
    return cfg;
  };

  function Interval(cfg) {
    _classCallCheck(this, Interval);

    var _this = _possibleConstructorReturn(this, _GeomBase.call(this, cfg));

    Util.assign(_this, SizeMixin);
    return _this;
  }

  Interval.prototype.createShapePointsCfg = function createShapePointsCfg(obj) {
    var cfg = _GeomBase.prototype.createShapePointsCfg.call(this, obj);
    cfg.size = this.getNormalizedSize(obj);
    return cfg;
  };

  Interval.prototype.clearInner = function clearInner() {
    _GeomBase.prototype.clearInner.call(this);
    this.set('defaultSize', null);
  };

  return Interval;
}(GeomBase);

var IntervalStack = function (_Interval) {
  _inherits(IntervalStack, _Interval);

  function IntervalStack() {
    _classCallCheck(this, IntervalStack);

    return _possibleConstructorReturn(this, _Interval.apply(this, arguments));
  }

  IntervalStack.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Interval.prototype.getDefaultCfg.call(this);
    cfg.hasDefaultAdjust = true;
    cfg.adjusts = [{ type: 'stack' }];
    return cfg;
  };

  return IntervalStack;
}(Interval);

var IntervalDodge = function (_Interval2) {
  _inherits(IntervalDodge, _Interval2);

  function IntervalDodge() {
    _classCallCheck(this, IntervalDodge);

    return _possibleConstructorReturn(this, _Interval2.apply(this, arguments));
  }

  IntervalDodge.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Interval2.prototype.getDefaultCfg.call(this);
    cfg.hasDefaultAdjust = true;
    cfg.adjusts = [{ type: 'dodge' }];
    return cfg;
  };

  return IntervalDodge;
}(Interval);

var IntervalSymmetric = function (_Interval3) {
  _inherits(IntervalSymmetric, _Interval3);

  function IntervalSymmetric() {
    _classCallCheck(this, IntervalSymmetric);

    return _possibleConstructorReturn(this, _Interval3.apply(this, arguments));
  }

  IntervalSymmetric.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Interval3.prototype.getDefaultCfg.call(this);
    cfg.hasDefaultAdjust = true;
    cfg.adjusts = [{ type: 'symmetric' }];
    return cfg;
  };

  return IntervalSymmetric;
}(Interval);

Interval.Stack = IntervalStack;
Interval.Dodge = IntervalDodge;
Interval.Symmetric = IntervalSymmetric;

module.exports = Interval;

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview 面积图
 * @author dxq613@gmail.com
 */

var GeomBase = __webpack_require__(9);
var SplitMixin = __webpack_require__(112);
var Util = __webpack_require__(0);

var Area = function (_GeomBase) {
  _inherits(Area, _GeomBase);

  /**
   * 获取默认的配置属性
   * @protected
   * @return {Object} 默认属性
   */
  Area.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
    cfg.type = 'area';
    cfg.shapeType = 'area';
    cfg.generatePoints = true;
    cfg.sortable = true;
    return cfg;
  };

  function Area(cfg) {
    _classCallCheck(this, Area);

    var _this = _possibleConstructorReturn(this, _GeomBase.call(this, cfg));

    Util.assign(_this, SplitMixin);
    return _this;
  }

  Area.prototype.draw = function draw(data, container, shapeFactory, index) {
    var self = this;
    var cfg = this.getDrawCfg(data[0]);
    var splitArray = this.splitData(data);

    cfg.origin = data; // path,line,area 等图的origin 是整个序列
    Util.each(splitArray, function (subData, splitedIndex) {
      cfg.splitedIndex = splitedIndex; // 传入分割片段索引 用于生成id
      var points = subData.map(function (obj) {
        return obj.points;
      });
      cfg.points = points;
      var geomShape = shapeFactory.drawShape(cfg.shape, cfg, container);
      geomShape.setSilent('index', index + splitedIndex);
      geomShape.setSilent('coord', self.get('coord'));

      if (self.get('animate') && self.get('animateCfg')) {
        geomShape.setSilent('animateCfg', self.get('animateCfg'));
      }
    });
  };

  return Area;
}(GeomBase);

var AreaStack = function (_Area) {
  _inherits(AreaStack, _Area);

  function AreaStack() {
    _classCallCheck(this, AreaStack);

    return _possibleConstructorReturn(this, _Area.apply(this, arguments));
  }

  AreaStack.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Area.prototype.getDefaultCfg.call(this);
    cfg.hasDefaultAdjust = true;
    cfg.adjusts = [{ type: 'stack' }];
    return cfg;
  };

  return AreaStack;
}(Area);

Area.Stack = AreaStack;
module.exports = Area;

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview 多边形
 * @author dxq613@gmail.com
 */

var GeomBase = __webpack_require__(9);
var Util = __webpack_require__(0);

var Polygon = function (_GeomBase) {
  _inherits(Polygon, _GeomBase);

  function Polygon() {
    _classCallCheck(this, Polygon);

    return _possibleConstructorReturn(this, _GeomBase.apply(this, arguments));
  }

  /**
   * 获取默认的配置属性
   * @protected
   * @return {Object} 默认属性
   */
  Polygon.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
    cfg.type = 'polygon';
    cfg.shapeType = 'polygon';
    cfg.generatePoints = true;
    return cfg;
  };

  Polygon.prototype.createShapePointsCfg = function createShapePointsCfg(obj) {
    var cfg = _GeomBase.prototype.createShapePointsCfg.call(this, obj);
    var self = this;
    var x = cfg.x;
    var y = cfg.y;
    var temp = void 0;
    if (!(Util.isArray(x) && Util.isArray(y))) {
      // x y 都是数组时，不做处理
      var xScale = self.getXScale();
      var yScale = self.getYScale();
      var xCount = xScale.values ? xScale.values.length : xScale.ticks.length;
      var yCount = yScale.values ? yScale.values.length : yScale.ticks.length;
      var xOffset = 0.5 * 1 / xCount;
      var yOffset = 0.5 * 1 / yCount;
      if (xScale.isCategory && yScale.isCategory) {
        // 如果x,y都是分类
        x = [x - xOffset, x - xOffset, x + xOffset, x + xOffset];
        y = [y - yOffset, y + yOffset, y + yOffset, y - yOffset];
      } else if (Util.isArray(x)) {
        // x 是数组
        temp = x;
        x = [temp[0], temp[0], temp[1], temp[1]];
        y = [y - yOffset / 2, y + yOffset / 2, y + yOffset / 2, y - yOffset / 2];
      } else if (Util.isArray(y)) {
        // y 是数组
        temp = y;
        y = [temp[0], temp[1], temp[1], temp[0]];
        x = [x - xOffset / 2, x - xOffset / 2, x + xOffset / 2, x + xOffset / 2];
      }
      cfg.x = x;
      cfg.y = y;
    }
    return cfg;
  };

  return Polygon;
}(GeomBase);

module.exports = Polygon;

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview 自定义图形
 * @author dxq613@gmail.com
 */

var GeomBase = __webpack_require__(9);
var Util = __webpack_require__(0);
var SizeMixin = __webpack_require__(113);

var Schema = function (_GeomBase) {
  _inherits(Schema, _GeomBase);

  /**
   * 获取默认的配置属性
   * @protected
   * @return {Object} 默认属性
   */
  Schema.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
    cfg.type = 'schema';
    cfg.shapeType = 'schema';
    cfg.generatePoints = true;
    return cfg;
  };

  function Schema(cfg) {
    _classCallCheck(this, Schema);

    var _this = _possibleConstructorReturn(this, _GeomBase.call(this, cfg));

    Util.assign(_this, SizeMixin);
    return _this;
  }

  Schema.prototype.createShapePointsCfg = function createShapePointsCfg(obj) {
    var cfg = _GeomBase.prototype.createShapePointsCfg.call(this, obj);
    cfg.size = this.getNormalizedSize(obj);
    return cfg;
  };

  return Schema;
}(GeomBase);

var SchemaDodge = function (_Schema) {
  _inherits(SchemaDodge, _Schema);

  function SchemaDodge() {
    _classCallCheck(this, SchemaDodge);

    return _possibleConstructorReturn(this, _Schema.apply(this, arguments));
  }

  SchemaDodge.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Schema.prototype.getDefaultCfg.call(this);
    cfg.hasDefaultAdjust = true;
    cfg.adjusts = [{ type: 'dodge' }];
    return cfg;
  };

  return SchemaDodge;
}(Schema);

Schema.Dodge = SchemaDodge;
module.exports = Schema;

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview 边，用于关系图的边
 * @author dxq613@gmail.com
 */

var GeomBase = __webpack_require__(9);

var Edge = function (_GeomBase) {
  _inherits(Edge, _GeomBase);

  function Edge() {
    _classCallCheck(this, Edge);

    return _possibleConstructorReturn(this, _GeomBase.apply(this, arguments));
  }

  /**
   * 获取默认的配置属性
   * @protected
   * @return {Object} 默认属性
   */
  Edge.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
    cfg.type = 'edge';
    cfg.shapeType = 'edge';
    cfg.generatePoints = true;
    return cfg;
  };

  return Edge;
}(GeomBase);

module.exports = Edge;

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview heatmap
 * @author leungwensen@gmail.com
 */
var GeomBase = __webpack_require__(9);
var colorUtil = __webpack_require__(64);
var Util = __webpack_require__(0);

var ORIGIN_FIELD = '_origin';
var SHADOW_CANVAS_CTX = 'shadowCanvasCtx';
var VALUE_RANGE = 'valueRange';
var IMAGE_SHAPE = 'imageShape';
var MAPPED_DATA = 'mappedData';
var GRAY_SCALE_BLURRED_CANVAS = 'grayScaleBlurredCanvas';
var HEATMAP_SIZE = 'heatmapSize';

var paletteCache = {};

var Heatmap = function (_GeomBase) {
  _inherits(Heatmap, _GeomBase);

  function Heatmap() {
    _classCallCheck(this, Heatmap);

    return _possibleConstructorReturn(this, _GeomBase.apply(this, arguments));
  }

  /**
   * get default configuration
   * @protected
   * @return {Object} configuration
   */
  Heatmap.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
    cfg.type = 'heatmap';
    // cfg.shapeType = 'heatmap';
    return cfg;
  };

  Heatmap.prototype._prepareRange = function _prepareRange() {
    var self = this;

    var data = self.get(MAPPED_DATA);
    var colorAttr = self.getAttr('color');
    var colorField = colorAttr.field;

    var min = Infinity;
    var max = -Infinity;
    data.forEach(function (row) {
      var value = row[ORIGIN_FIELD][colorField];
      if (value > max) {
        max = value;
      }
      if (value < min) {
        min = value;
      }
    });
    if (min === max) {
      min = max - 1;
    }

    var range = [min, max];
    self.set(VALUE_RANGE, range);
  };

  Heatmap.prototype._prepareSize = function _prepareSize() {
    var self = this;
    var radius = self.getDefaultValue('size');
    if (!Util.isNumber(radius)) {
      radius = self._getDefaultSize();
    }
    var styleOptions = self.get('styleOptions');
    var blur = styleOptions && Util.isObject(styleOptions.style) ? styleOptions.style.blur : null;
    if (!Util.isFinite(blur)) {
      blur = radius / 2;
    }
    self.set(HEATMAP_SIZE, {
      blur: blur,
      radius: radius
    });
  };

  Heatmap.prototype._getDefaultSize = function _getDefaultSize() {
    var self = this;
    var position = self.getAttr('position');
    var coord = self.get('coord');
    var radius = Math.min(coord.width / (position.scales[0].ticks.length * 4), coord.height / (position.scales[1].ticks.length * 4));
    return radius;
  };

  Heatmap.prototype._colorize = function _colorize(img) {
    var self = this;
    var colorAttr = self.getAttr('color');
    var pixels = img.data;
    for (var i = 3; i < pixels.length; i += 4) {
      var alpha = pixels[i]; // get gradient color from opacity value
      if (alpha) {
        var palette = void 0;
        if (paletteCache[alpha]) {
          palette = paletteCache[alpha];
        } else {
          palette = colorUtil.rgb2arr(colorAttr.gradient(alpha / 256));
          paletteCache[alpha] = palette;
        }
        // const palette = colorUtil.rgb2arr(colorAttr.gradient(alpha / 256));
        pixels[i - 3] = palette[0];
        pixels[i - 2] = palette[1];
        pixels[i - 1] = palette[2];
        pixels[i] = alpha;
      }
    }
  };

  Heatmap.prototype._prepareGreyScaleBlurredCircle = function _prepareGreyScaleBlurredCircle(r, blur) {
    var self = this;
    var circleCanvas = self.get(GRAY_SCALE_BLURRED_CANVAS);
    if (!circleCanvas) {
      circleCanvas = document.createElement('canvas');
      self.set(GRAY_SCALE_BLURRED_CANVAS, circleCanvas);
    }
    var r2 = r + blur;
    var ctx = circleCanvas.getContext('2d');
    circleCanvas.width = circleCanvas.height = r2 * 2;
    ctx.clearRect(0, 0, circleCanvas.width, circleCanvas.height);
    ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;
    ctx.shadowBlur = blur;
    ctx.shadowColor = 'black';

    ctx.beginPath();
    ctx.arc(-r2, -r2, r, 0, Math.PI * 2, true);
    ctx.closePath();
    ctx.fill();
  };

  Heatmap.prototype._drawGrayScaleBlurredCircle = function _drawGrayScaleBlurredCircle(x, y, r, alpha, ctx) {
    var circleCanvas = this.get(GRAY_SCALE_BLURRED_CANVAS);
    ctx.globalAlpha = alpha;
    ctx.drawImage(circleCanvas, x - r, y - r);
  };

  Heatmap.prototype._getShadowCanvasCtx = function _getShadowCanvasCtx() {
    var self = this;
    var ctx = self.get(SHADOW_CANVAS_CTX);
    if (ctx) {
      return ctx;
    }
    var coord = self.get('coord');
    var width = coord.x.end;
    var height = coord.y.start;
    var heatmapCanvas = document.createElement('canvas');
    heatmapCanvas.width = width;
    heatmapCanvas.height = height;
    ctx = heatmapCanvas.getContext('2d');
    self.set(SHADOW_CANVAS_CTX, ctx);
    return ctx;
  };

  Heatmap.prototype._clearShadowCanvasCtx = function _clearShadowCanvasCtx() {
    var ctx = this.get(SHADOW_CANVAS_CTX);
    if (ctx) {
      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    }
  };

  Heatmap.prototype._getImageShape = function _getImageShape() {
    var self = this;
    var imageShape = self.get(IMAGE_SHAPE);
    if (imageShape) {
      return imageShape;
    }
    var container = self.get('container');
    imageShape = container.addShape('Image', {});
    self.set(IMAGE_SHAPE, imageShape);
    return imageShape;
  };

  Heatmap.prototype.drawWithRange = function drawWithRange(range) {
    var self = this;

    // canvas size
    var coord = self.get('coord');
    var width = coord.width;
    var height = coord.height;

    // value, range, etc
    var valueField = self.getAttr('color').field;
    var size = self.get(HEATMAP_SIZE);

    // prepare shadow canvas context
    self._clearShadowCanvasCtx();
    var ctx = self._getShadowCanvasCtx();

    // filter data
    var data = self.get(MAPPED_DATA);
    if (range) {
      data = data.filter(function (row) {
        return row[ORIGIN_FIELD][valueField] <= range[1] && row[ORIGIN_FIELD][valueField] >= range[0];
      });
    }

    // step1. draw points with shadow
    var scale = self._getScale(valueField);
    for (var i = 0; i < data.length; i++) {
      var obj = data[i];
      var cfg = self.getDrawCfg(obj);
      var alpha = scale.scale(obj[ORIGIN_FIELD][valueField]);
      self._drawGrayScaleBlurredCircle(cfg.x, cfg.y, size.radius, alpha, ctx);
    }

    // step2. convert pixels
    var colored = ctx.getImageData(coord.start.x, coord.end.y, width + coord.start.x, height + coord.end.y);
    self._clearShadowCanvasCtx();
    self._colorize(colored);
    ctx.putImageData(colored, 0, 0);
    var imageShape = self._getImageShape();
    imageShape.attr('x', coord.start.x);
    imageShape.attr('y', coord.end.y);
    imageShape.attr('width', width + coord.start.x);
    imageShape.attr('height', height + coord.end.y);
    imageShape.attr('img', ctx.canvas);
  };

  Heatmap.prototype.draw = function draw(data /* , container, shapeFactory, index */) {
    var self = this;
    self.set(MAPPED_DATA, data);

    self._prepareRange();
    self._prepareSize();

    var size = self.get(HEATMAP_SIZE);
    self._prepareGreyScaleBlurredCircle(size.radius, size.blur);

    var range = self.get(VALUE_RANGE);
    self.drawWithRange(range);
    // super.draw(data, container, shapeFactory, index);
  };

  return Heatmap;
}(GeomBase);

module.exports = Heatmap;

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @fileOverview 度量的控制器
 * @author dxq613@gmail.com
 */

var Util = __webpack_require__(0);
var Global = __webpack_require__(1);
var Scale = __webpack_require__(115);
var dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\1(?:29|30)|(?:0?[13578]|1[02])\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]?)0?2\2(?:29))(\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;
var TYPES = {
  LINEAR: 'linear',
  CAT: 'cat',
  TIME: 'time'
};

var ScaleController = function () {
  function ScaleController(cfg) {
    _classCallCheck(this, ScaleController);

    // defs 列定义
    this.defs = {};
    Util.assign(this, cfg);
  }

  ScaleController.prototype._getDef = function _getDef(field) {
    var defs = this.defs;
    var def = null;
    if (Global.scales[field] || defs[field]) {
      def = Util.mix({}, Global.scales[field]);
      // 处理覆盖属性的问题
      Util.each(defs[field], function (v, k) {
        if (Util.isNil(v)) {
          delete def[k];
        } else {
          def[k] = v;
        }
      });
    }
    return def;
  };

  ScaleController.prototype._getDefaultType = function _getDefaultType(field, data) {
    var type = TYPES.LINEAR;
    var value = Util.Array.firstValue(data, field);
    if (Util.isArray(value)) {
      value = value[0];
    }
    if (dateRegex.test(value)) {
      type = TYPES.TIME;
    } else if (Util.isString(value)) {
      type = TYPES.CAT;
    }
    return type;
  };

  ScaleController.prototype._getScaleCfg = function _getScaleCfg(type, field, data) {
    var cfg = {
      field: field
    };
    var values = Util.Array.values(data, field);
    cfg.values = values;
    if (!Scale.isCategory(type) && type !== 'time') {
      var range = Util.Array.getRange(values);
      cfg.min = range.min;
      cfg.max = range.max;
      cfg.nice = true;
    }

    if (type === 'time') {
      cfg.nice = false;
    }
    return cfg;
  };

  ScaleController.prototype.createScale = function createScale(field, data) {
    var self = this;
    var def = self._getDef(field);
    var scale = void 0;
    // 如果数据为空直接返回常量度量
    if (!data || !data.length) {
      if (def && def.type) {
        scale = Scale[def.type](def);
      } else {
        scale = Scale.identity({
          value: field,
          field: field.toString(),
          values: [field]
        });
      }
      return scale;
    }
    var firstValue = Util.Array.firstValue(data, field);

    if (Util.isNumber(field) || Util.isNil(firstValue) && !def) {
      scale = Scale.identity({
        value: field,
        field: field.toString(),
        values: [field]
      });
    } else {
      // 如果已经定义过这个度量
      var type = void 0;
      if (def) {
        type = def.type;
      }
      type = type || self._getDefaultType(field, data);
      var cfg = self._getScaleCfg(type, field, data);
      if (def) {
        Util.mix(cfg, def);
      }
      scale = Scale[type](cfg);
    }
    return scale;
  };

  return ScaleController;
}();

module.exports = ScaleController;

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview 自动计算数字坐标轴
 * @author dxq613@gmail.com
 */

var Util = __webpack_require__(0);
var AutoUtil = __webpack_require__(116);
var MIN_COUNT = 5;
var MAX_COUNT = 7;
var Global = __webpack_require__(1);

module.exports = function (info) {
  var min = info.min;
  var max = info.max;
  var interval = info.interval;
  var ticks = [];
  var minCount = info.minCount || MIN_COUNT;
  var maxCount = info.maxCount || MAX_COUNT;
  var isFixedCount = minCount === maxCount; // 是否限定死了个数
  var minLimit = Util.isNil(info.minLimit) ? -Infinity : info.minLimit; // 限定的最小值
  var maxLimit = Util.isNil(info.maxLimit) ? Infinity : info.maxLimit; // 限定最大值
  var avgCount = (minCount + maxCount) / 2;
  var count = avgCount;
  // 用户传入的逼近数组
  var snapArray = info.snapArray ? info.snapArray : isFixedCount ? Global.snapCountArray : Global.snapArray;

  // 如果限定大小范围，同时大小范围等于用户传入的范围，同时限定了个数，interval 按照个数均分
  if (min === minLimit && max === maxLimit && isFixedCount) {
    interval = (max - min) / (count - 1);
  }

  if (Util.isNil(min)) {
    min = 0;
  }
  if (Util.isNil(max)) {
    max = 0;
  }
  if (max === min) {
    if (min === 0) {
      max = 1;
    } else {
      if (min > 0) {
        min = 0;
      } else {
        max = 0;
      }
    }
    if (max - min < 5 && !interval && max - min >= 1) {
      interval = 1;
    }
  }

  if (Util.isNil(interval)) {
    // 计算间距
    var temp = (max - min) / (avgCount - 1);
    interval = AutoUtil.snapFactorTo(temp, snapArray, 'ceil');
    if (maxCount !== minCount) {
      count = parseInt((max - min) / interval, 10);
      if (count > maxCount) {
        count = maxCount;
      }
      if (count < minCount) {
        count = minCount;
      }
      // 不确定tick的个数时，使得tick偏小
      interval = AutoUtil.snapFactorTo((max - min) / (count - 1), snapArray, 'floor');
    }
  }
  if (info.interval || maxCount !== minCount) {
    // 校正 max 和 min
    max = Math.min(AutoUtil.snapMultiple(max, interval, 'ceil'), maxLimit); // 向上逼近
    min = Math.max(AutoUtil.snapMultiple(min, interval, 'floor'), minLimit); // 向下逼近

    count = Math.round((max - min) / interval);
    min = Util.fixedBase(min, interval);
    max = Util.fixedBase(max, interval);
  } else {
    avgCount = parseInt(avgCount, 10); // 取整
    var avg = (max + min) / 2;
    var avgTick = AutoUtil.snapMultiple(avg, interval, 'ceil');
    var sideCount = Math.floor((avgCount - 2) / 2);
    var maxTick = avgTick + sideCount * interval;
    var minTick = void 0;
    if (avgCount % 2 === 0) {
      minTick = avgTick - sideCount * interval;
    } else {
      minTick = avgTick - (sideCount + 1) * interval;
    }
    if (maxTick < max) {
      maxTick = maxTick + interval;
    }
    if (minTick > min) {
      minTick = minTick - interval;
    }
    max = Util.fixedBase(maxTick, interval);
    min = Util.fixedBase(minTick, interval);
  }

  max = Math.min(max, maxLimit);
  min = Math.max(min, minLimit);

  ticks.push(min);
  for (var i = 1; i < count; i++) {
    var tickValue = Util.fixedBase(interval * i + min, interval);
    if (tickValue < max) {
      ticks.push(tickValue);
    }
  }
  if (ticks[ticks.length - 1] < max) {
    ticks.push(max);
  }
  return {
    min: min,
    max: max,
    interval: interval,
    count: count,
    ticks: ticks
  };
};

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview The data is replaced with constant
 * @author dxq613@gmail.com
 */

var Base = __webpack_require__(41);
var Util = __webpack_require__(0);

var Identity = function (_Base) {
  _inherits(Identity, _Base);

  function Identity() {
    _classCallCheck(this, Identity);

    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
  }

  /**
   * @override
   */
  Identity.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      isIdentity: true,
      /**
       * @override
       * @type {String}
       */
      type: 'identity',

      /**
       * 常量值
       * @type {*}
       */
      value: null
    });
  };

  /**
   * @override
   */


  Identity.prototype.getText = function getText() {
    return this.value.toString();
  };

  /**
   * @override
   */


  Identity.prototype.scale = function scale(value) {
    if (this.value !== value && Util.isNumber(value)) {
      return value;
    }
    return this.range[0];
  };

  /**
   * @override
   */


  Identity.prototype.invert = function invert() {
    return this.value;
  };

  return Identity;
}(Base);

module.exports = Identity;

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview The measurement of linear data scale function
 * @author dxq613@gmail.com
 */

var Linear = __webpack_require__(42);
var Util = __webpack_require__(0);
var timeAuto = __webpack_require__(324);
var fecha = __webpack_require__(119);
var TimeUtil = __webpack_require__(120);

/**
 * 时间度量的构造函数
 * @class Scale.Time
 */

var Time = function (_Linear) {
  _inherits(Time, _Linear);

  function Time() {
    _classCallCheck(this, Time);

    return _possibleConstructorReturn(this, _Linear.apply(this, arguments));
  }

  /**
   * @override
   */
  Time.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Linear.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      /**
       * @override
       */
      type: 'time',

      /**
       * 格式化符
       * @type {String}
       */
      mask: 'YYYY-MM-DD'
    });
  };

  /**
   * @override
   */


  Time.prototype.init = function init() {
    var self = this;
    var values = self.values;
    if (values) {
      // 重新计算最大最小值
      var timeStamps = [];
      var min = Infinity; // 最小值
      var secondMin = min; // 次小值
      var max = 0;
      // 使用一个循环，计算min,max,secondMin
      Util.each(values, function (v) {
        var timeStamp = self._toTimeStamp(v);
        if (min > timeStamp) {
          secondMin = min;
          min = timeStamp;
        } else if (secondMin > timeStamp) {
          secondMin = timeStamp;
        }
        if (max < timeStamp) {
          max = timeStamp;
        }
        timeStamps.push(timeStamp);
      });
      // 存在多个值时，设置最小间距
      if (values.length > 1) {
        self.minTickInterval = secondMin - min;
      }
      if (Util.isNil(self.min) || self._toTimeStamp(self.min) > min) {
        self.min = min;
      }
      if (Util.isNil(self.max) || self._toTimeStamp(self.max) < max) {
        self.max = max;
      }
    }
    _Linear.prototype.init.call(this);
  };

  Time.prototype.calculateTicks = function calculateTicks() {
    var self = this;
    var min = self.min;
    var max = self.max;
    var count = self.tickCount;
    var interval = self.tickInterval;
    var tmp = timeAuto({
      min: min,
      max: max,
      minCount: count,
      maxCount: count,
      interval: interval,
      minInterval: self.minTickInterval
    });
    return tmp.ticks;
  };

  /**
   * @override
   */


  Time.prototype.getText = function getText(value) {
    var formatter = this.formatter;
    value = this.translate(value);
    value = formatter ? formatter(value) : fecha.format(value, this.mask);
    return value;
  };

  /**
   * @override
   */


  Time.prototype.scale = function scale(value) {
    if (Util.isString(value)) {
      value = this.translate(value);
    }
    return _Linear.prototype.scale.call(this, value);
  };

  /**
   * @override
   */


  Time.prototype.translate = function translate(value) {
    return this._toTimeStamp(value);
  };

  // 将时间转换为时间戳


  Time.prototype._toTimeStamp = function _toTimeStamp(value) {
    return TimeUtil.toTimeStamp(value);
  };

  return Time;
}(Linear);

module.exports = Time;

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview 计算时间坐标轴
 * @author dxq613@gmail.com
 */

var Util = __webpack_require__(0);
var AutoUtil = __webpack_require__(116);

var MAX_COUNT = 6;
var SNAP_ARRAY = [1, 2, 4, 6, 8, 12];
var MINUTE_MS = 60 * 1000;
var HOUR_MS = 3600 * 1000;
var DAY_MS = 24 * 3600 * 1000;

function getYear(date) {
  return new Date(date).getFullYear();
}

function createYear(year) {
  return new Date(year, 0, 1).getTime();
}

function getMonth(date) {
  return new Date(date).getMonth();
}

function diffMonth(min, max) {
  var minYear = getYear(min);
  var maxYear = getYear(max);
  var minMonth = getMonth(min);
  var maxMonth = getMonth(max);
  return (maxYear - minYear) * 12 + (maxMonth - minMonth) % 12;
}

function creatMonth(year, month) {
  return new Date(year, month, 1).getTime();
}

function diffDay(min, max) {
  return Math.ceil((max - min) / DAY_MS);
}

function diffHour(min, max) {
  return Math.ceil((max - min) / HOUR_MS);
}

function diffMinus(min, max) {
  return Math.ceil((max - min) / (60 * 1000));
}

module.exports = function (info) {
  var minInterval = info.minInterval;
  var ticks = [];
  var min = info.min;
  var max = info.max;
  var interval = info.interval;
  var count = void 0;

  // 如果最大值和最小值相等，则设置最大值大于最小值一天
  if (max === min) {
    max = min + DAY_MS;
  }

  // 计算间距
  if (Util.isNil(interval)) {
    var innerTime = max - min;
    var dms = DAY_MS; // 天代表的秒
    var yms = 365 * dms; // 年代表的秒
    interval = parseInt(innerTime / (info.maxCount || MAX_COUNT), 10);
    if (minInterval && minInterval > interval) {
      interval = minInterval;
    }
    var yfactor = interval / yms;
    var minYear = getYear(min);
    // 大于半年
    if (yfactor > 0.51) {
      var year = Math.ceil(yfactor);
      // interval = year * yms;
      var maxYear = getYear(max);

      for (var i = minYear; i <= maxYear + year; i = i + year) {
        ticks.push(createYear(i));
      }
      interval = null;
    } else if (yfactor > 0.0834) {
      // 大于一个月
      var month = Math.ceil(yfactor / 0.0834);
      var mmMoth = getMonth(min);
      var dMonths = diffMonth(min, max);

      for (var _i = 0; _i <= dMonths + month; _i = _i + month) {
        ticks.push(creatMonth(minYear, _i + mmMoth));
      }
      interval = null;
    } else if (interval > dms * 0.5) {
      // 大于一天
      var date = new Date(min);
      var _year = date.getFullYear();
      var _month = date.getMonth(min);
      var mday = date.getDate();
      var day = Math.ceil(interval / dms);
      var ddays = diffDay(min, max);
      interval = day * dms;
      for (var _i2 = 0; _i2 < ddays + day; _i2 = _i2 + day) {
        ticks.push(new Date(_year, _month, mday + _i2).getTime());
      }
    } else if (interval > HOUR_MS) {
      // 大于一个小时
      var _date = new Date(min);
      var _year2 = _date.getFullYear();
      var _month2 = _date.getMonth(min);
      var _day = _date.getDate();
      var hour = _date.getHours();
      var hours = AutoUtil.snapTo(SNAP_ARRAY, Math.ceil(interval / HOUR_MS));
      var dHours = diffHour(min, max);
      interval = hours * HOUR_MS;

      for (var _i3 = 0; _i3 <= dHours + hours; _i3 = _i3 + hours) {
        ticks.push(new Date(_year2, _month2, _day, hour + _i3).getTime());
      }
    } else if (interval > MINUTE_MS) {
      // 最小单位是分钟
      var dMinus = diffMinus(min, max);
      var minutes = Math.ceil(interval / MINUTE_MS);
      interval = minutes * MINUTE_MS;

      for (var _i4 = 0; _i4 <= dMinus + minutes; _i4 = _i4 + minutes) {
        ticks.push(min + _i4 * MINUTE_MS);
      }
    } else {
      if (interval < 1000) {
        interval = 1000;
      }
      min = Math.floor(min / 1000) * 1000;
      var dSeconds = Math.ceil((max - min) / 1000);
      var seconds = Math.ceil(interval / 1000);
      interval = seconds * 1000;

      for (var _i5 = 0; _i5 < dSeconds + seconds; _i5 = _i5 + seconds) {
        ticks.push(min + _i5 * 1000);
      }
    }
  }

  if (!ticks.length) {
    min = Math.floor(min / 1000) * 1000;
    max = Math.ceil(max / 1000) * 1000;
    count = (max - min) / interval;
    for (var _i6 = 0; _i6 <= count; _i6++) {
      ticks.push(Util.fixedBase(interval * _i6 + min, interval));
    }
  }

  return {
    max: max,
    min: min,
    interval: interval,
    ticks: ticks,
    count: ticks.length
  };
};

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview 时间数据作为分类类型
 * @author dxq613@gmail.com
 */

var Category = __webpack_require__(117);
var Util = __webpack_require__(0);
var fecha = __webpack_require__(119);
var catAuto = __webpack_require__(118);
var TimeUtil = __webpack_require__(120);

/**
 * 度量的构造函数
 * @class Scale.TimeCategory
 */

var TimeCategory = function (_Category) {
  _inherits(TimeCategory, _Category);

  function TimeCategory() {
    _classCallCheck(this, TimeCategory);

    return _possibleConstructorReturn(this, _Category.apply(this, arguments));
  }

  /**
   * @override
   */
  TimeCategory.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Category.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      /**
       * @override
       */
      type: 'timeCat',

      /**
       * 格式化符
       * @type {String}
       */
      mask: 'YYYY-MM-DD',

      /**
       * @override
       */
      tickCount: 5
    });
  };

  TimeCategory.prototype.init = function init() {
    var self = this;
    var values = this.values;
    // 针对时间分类类型，会将时间统一转换为时间戳
    Util.each(values, function (v, i) {
      values[i] = self._toTimeStamp(v);
    });
    values.sort(function (v1, v2) {
      return v1 - v2;
    });

    if (!self.ticks) {
      self.ticks = this.calculateTicks(false);
    }
  };

  /**
   * 计算 ticks
   * @param  {boolean} formated 是否将 ticks 按照指定的 mask 格式化
   * @return {array} 返回 ticks 数组
   */


  TimeCategory.prototype.calculateTicks = function calculateTicks(formated) {
    var self = this;
    var count = self.tickCount;
    var temp = catAuto({
      maxCount: count,
      data: self.values
    });

    var ticks = temp.ticks;
    if (formated) {
      Util.each(ticks, function (value, index) {
        ticks[index] = fecha.format(value, self.mask);
      });
    }
    return ticks;
  };

  /**
   * @override
   */


  TimeCategory.prototype.translate = function translate(value) {
    value = this._toTimeStamp(value);
    var index = this.values.indexOf(value);

    if (index === -1) {
      if (Util.isNumber(value) && value < this.values.length) {
        index = value;
      } else {
        index = NaN;
      }
    }
    return index;
  };

  /**
   * @override
   */


  TimeCategory.prototype.scale = function scale(value) {
    var rangeMin = this.rangeMin();
    var rangeMax = this.rangeMax();
    var index = this.translate(value);
    var percent = void 0;

    if (this.values.length === 1) {
      percent = index;
    } else if (index > -1) {
      percent = index / (this.values.length - 1);
    } else {
      percent = 0;
    }

    return rangeMin + percent * (rangeMax - rangeMin);
  };

  /**
   * @override
   */


  TimeCategory.prototype.getText = function getText(value) {
    var result = '';
    var index = this.translate(value);
    if (index > -1) {
      result = this.values[index];
    } else {
      result = value;
    }

    var formatter = this.formatter;
    result = parseInt(result, 10);
    result = formatter ? formatter(result) : fecha.format(result, this.mask);
    return result;
  };

  /**
   * @override
   */


  TimeCategory.prototype.getTicks = function getTicks() {
    var self = this;
    var ticks = this.ticks;
    var rst = [];
    Util.each(ticks, function (tick) {
      var obj = void 0;
      if (Util.isObject(tick)) {
        obj = tick;
      } else {
        obj = {
          text: Util.isString(tick) ? tick : self.getText(tick),
          value: self.scale(tick)
        };
      }
      rst.push(obj);
    });
    return rst;
  };

  // 将时间转换为时间戳


  TimeCategory.prototype._toTimeStamp = function _toTimeStamp(value) {
    return TimeUtil.toTimeStamp(value);
  };

  return TimeCategory;
}(Category);

module.exports = TimeCategory;

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview 使用度量，进行log转换
 * @author dxq613@gmail.com
 */

var Linear = __webpack_require__(42);
var Util = __webpack_require__(0);

// 计算log
function log(a, b) {
  if (a === 1) {
    return 1;
  }
  return Math.log(b) / Math.log(a);
}

/**
 * 度量的log计算
 * @class Scale.Log
 */

var Log = function (_Linear) {
  _inherits(Log, _Linear);

  function Log() {
    _classCallCheck(this, Log);

    return _possibleConstructorReturn(this, _Linear.apply(this, arguments));
  }

  /**
   * @override
   */
  Log.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Linear.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      /**
       * @override
       */
      type: 'log',

      /**
       * 进行log计算的基数
       * @type {Number}
       */
      base: 2,

      /**
       * @override
       * log 的坐标点的个数控制在10个以下
       * @type {Number}
       */
      tickCount: 10,

      // 最小的tick，仅内部使用
      _minTick: null
    });
  };
  /**
   * @override
   */


  Log.prototype.calculateTicks = function calculateTicks() {
    var self = this;
    var base = self.base;
    var minTick = void 0;
    if (self.min < 0) {
      throw new Error('The minimum value must be greater than zero!');
    }
    var maxTick = log(base, self.max);

    if (self.min > 0) {
      minTick = Math.floor(log(base, self.min));
    } else {
      var values = self.values;
      var positiveMin = self.max; // 查找大于0的第一个值, 如果都小于0，默认为1
      Util.each(values, function (value) {
        if (value > 0 && value < positiveMin) {
          positiveMin = value;
        }
      });
      if (positiveMin === self.max) {
        positiveMin = self.max / base;
      }
      if (positiveMin > 1) {
        positiveMin = 1;
      }
      minTick = Math.floor(log(base, positiveMin));
      self._minTick = minTick;
      self.positiveMin = positiveMin;
    }
    var count = maxTick - minTick;
    var tickCount = self.tickCount;
    var avg = Math.ceil(count / tickCount);
    var ticks = [];

    for (var i = minTick; i < maxTick + avg; i = i + avg) {
      ticks.push(Math.pow(base, i));
    } /**/
    if (self.min === 0) {
      ticks.unshift(0);
    }
    return ticks;
  };
  // 获取度量计算时，value占的定义域百分比


  Log.prototype._getScalePercent = function _getScalePercent(value) {
    var max = this.max;
    var min = this.min;
    if (max === min) {
      return 0;
    }
    // 如果值小于等于0，则按照0处理
    if (value <= 0) {
      return 0;
    }
    var base = this.base;
    var positiveMin = this.positiveMin;
    // 如果min == 0, 则根据比0大的最小值，计算比例关系。这个最小值作为坐标轴上的第二个tick，第一个是0但是不显示
    if (positiveMin) {
      min = positiveMin * 1 / base;
    }
    var percent = void 0;
    // 如果数值小于次小值，那么就计算 value / 次小值 占整体的比例
    if (value < positiveMin) {
      percent = value / positiveMin / (log(base, max) - log(base, min));
    } else {
      percent = (log(base, value) - log(base, min)) / (log(base, max) - log(base, min));
    }
    return percent;
  };

  /**
   * @override
   */


  Log.prototype.scale = function scale(value) {
    var percent = this._getScalePercent(value);
    var rangeMin = this.rangeMin();
    var rangeMax = this.rangeMax();
    return rangeMin + percent * (rangeMax - rangeMin);
  };
  /**
   * @override
   */


  Log.prototype.invert = function invert(value) {
    var base = this.base;
    var max = log(base, this.max);
    var rangeMin = this.rangeMin();
    var range = this.rangeMax() - rangeMin;
    var min = void 0;
    var positiveMin = this.positiveMin;
    if (positiveMin) {
      if (value === 0) {
        return 0;
      }
      min = log(base, positiveMin / base);
      var appendPercent = 1 / (max - min) * range; // 0 到 positiveMin的占比
      if (value < appendPercent) {
        // 落到 0 - positiveMin 之间
        return value / appendPercent * positiveMin;
      }
    } else {
      min = log(base, this.min);
    }
    var percent = (value - rangeMin) / range;
    var tmp = percent * (max - min) + min;
    return Math.pow(base, tmp);
  };

  return Log;
}(Linear);

module.exports = Log;

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview 使用pow进行度量计算
 * @author dxq613@gmail.com
 */

var Linear = __webpack_require__(42);
var Util = __webpack_require__(0);

// 求以a为次幂，结果为b的基数，如 x^^a = b;求x
function calBase(a, b) {
  var e = Math.E;
  var value = Math.pow(e, Math.log(b) / a); // 使用换底公式求底
  return value;
}

/**
 * 度量的Pow计算
 * @class Scale.Log
 */

var Pow = function (_Linear) {
  _inherits(Pow, _Linear);

  function Pow() {
    _classCallCheck(this, Pow);

    return _possibleConstructorReturn(this, _Linear.apply(this, arguments));
  }

  /**
   * @override
   */
  Pow.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Linear.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      /**
       * @override
       */
      type: 'pow',

      /**
       * 进行pow计算的基数
       * @type {Number}
       */
      exponent: 2,

      /**
       * @override
       * pow 的坐标点的个数控制在10个以下
       * @type {Number}
       */
      tickCount: 10
    });
  };

  /**
   * @override
   */


  Pow.prototype.calculateTicks = function calculateTicks() {
    var self = this;
    var exponent = self.exponent;
    var min = void 0;
    var max = Math.ceil(calBase(exponent, self.max));

    if (self.min >= 0) {
      min = Math.floor(calBase(exponent, self.min));
    } else {
      min = 0;
    }
    if (min > max) {
      var tmp = max;
      max = min;
      min = tmp;
    }
    var count = max - min;
    var tickCount = self.tickCount;
    var avg = Math.ceil(count / tickCount);
    var ticks = [];

    for (var i = min; i < max + avg; i = i + avg) {
      ticks.push(Math.pow(i, exponent));
    }
    return ticks;
  };

  // 获取度量计算时，value占的定义域百分比


  Pow.prototype._getScalePercent = function _getScalePercent(value) {
    var max = this.max;
    var min = this.min;
    if (max === min) {
      return 0;
    }
    var exponent = this.exponent;
    var percent = (calBase(exponent, value) - calBase(exponent, min)) / (calBase(exponent, max) - calBase(exponent, min));
    return percent;
  };

  /**
   * @override
   */


  Pow.prototype.scale = function scale(value) {
    var percent = this._getScalePercent(value);
    var rangeMin = this.rangeMin();
    var rangeMax = this.rangeMax();
    return rangeMin + percent * (rangeMax - rangeMin);
  };

  /**
   * @override
   */


  Pow.prototype.invert = function invert(value) {
    var percent = (value - this.rangeMin()) / (this.rangeMax() - this.rangeMin());
    var exponent = this.exponent;
    var max = calBase(exponent, this.max);
    var min = calBase(exponent, this.min);
    var tmp = percent * (max - min) + min;
    return Math.pow(tmp, exponent);
  };

  return Pow;
}(Linear);

module.exports = Pow;

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @fileOverview The controller of coordinate
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Coord = __webpack_require__(329);

var CoordController = function () {
  function CoordController(option) {
    _classCallCheck(this, CoordController);

    this.type = 'rect';
    this.actions = [];
    this.cfg = {};
    Util.mix(this, option);
    this.option = option || {};
  }

  CoordController.prototype.reset = function reset(coordOption) {
    this.actions = coordOption.actions || [];
    this.type = coordOption.type;
    this.cfg = coordOption.cfg;
    this.option.actions = this.actions;
    this.option.type = this.type;
    this.option.cfg = this.cfg;
    return this;
  };

  CoordController.prototype._execActions = function _execActions(coord) {
    var actions = this.actions;
    Util.each(actions, function (action) {
      var m = action[0];
      coord[m](action[1], action[2]);
    });
  };

  CoordController.prototype.hasAction = function hasAction(actionName) {
    var actions = this.actions;
    var rst = false;
    Util.each(actions, function (action) {
      if (actionName === action[0]) {
        rst = true;
        return false;
      }
    });
    return rst;
  };
  /**
   * 创建坐标系对象
   * @param  {Object} start 坐标系起始点
   * @param  {Object} end   坐标系结束点
   * @return {Function} 坐标系的构造函数
   */


  CoordController.prototype.createCoord = function createCoord(start, end) {
    var self = this;
    var type = self.type;
    var cfg = self.cfg;
    var C = void 0; // 构造函数
    var coord = void 0;

    var coordCfg = Util.mix({
      start: start,
      end: end
    }, cfg);

    if (type === 'theta') {
      C = Coord.Polar;

      if (!self.hasAction('transpose')) {
        self.transpose(); // 极坐标，同时transpose
      }
      coord = new C(coordCfg);
      coord.type = type;
    } else {
      C = Coord[Util.upperFirst(type)] || Coord.Rect;
      coord = new C(coordCfg);
    }

    self._execActions(coord);
    return coord;
  };

  CoordController.prototype.rotate = function rotate(angle) {
    angle = angle * Math.PI / 180;
    this.actions.push(['rotate', angle]);
    return this;
  };

  CoordController.prototype.reflect = function reflect(dim) {
    this.actions.push(['reflect', dim]);
    return this;
  };

  CoordController.prototype.scale = function scale(sx, sy) {
    this.actions.push(['scale', sx, sy]);
    return this;
  };

  CoordController.prototype.transpose = function transpose() {
    this.actions.push(['transpose']);
    return this;
  };

  return CoordController;
}();

module.exports = CoordController;

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview the entry of coordinate
 * @author sima.zhang1990@gmail.com
 */
var Coord = __webpack_require__(43);
Coord.Cartesian = __webpack_require__(330);
Coord.Rect = Coord.Cartesian;
Coord.Polar = __webpack_require__(331);
Coord.Helix = __webpack_require__(332);

module.exports = Coord;

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the class of Cartesian Coordinate
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Base = __webpack_require__(43);

var Cartesian = function (_Base) {
  _inherits(Cartesian, _Base);

  /**
   * @override
   */
  Cartesian.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 0,
        y: 0
      },
      type: 'cartesian',
      isRect: true
    });
  };

  function Cartesian(cfg) {
    _classCallCheck(this, Cartesian);

    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

    _this._init();
    return _this;
  }

  Cartesian.prototype._init = function _init() {
    var start = this.start,
        end = this.end;

    var x = {
      start: start.x,
      end: end.x
    };
    var y = {
      start: start.y,
      end: end.y
    };
    this.x = x;
    this.y = y;
  };

  Cartesian.prototype.convertPoint = function convertPoint(point) {
    var x = void 0;
    var y = void 0;
    if (this.isTransposed) {
      x = point.y;
      y = point.x;
    } else {
      x = point.x;
      y = point.y;
    }

    return {
      x: this.convertDim(x, 'x'),
      y: this.convertDim(y, 'y')
    };
  };

  Cartesian.prototype.invertPoint = function invertPoint(point) {
    var x = this.invertDim(point.x, 'x');
    var y = this.invertDim(point.y, 'y');

    if (this.isTransposed) {
      return {
        x: y,
        y: x
      };
    }

    return {
      x: x,
      y: y
    };
  };

  return Cartesian;
}(Base);

module.exports = Cartesian;

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the class of Polar Coordinate
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Base = __webpack_require__(43);
var MatrixUtil = __webpack_require__(2).MatrixUtil;
var mat3 = MatrixUtil.mat3;
var vec2 = MatrixUtil.vec2;
var vec3 = MatrixUtil.vec3;

var Polar = function (_Base) {
  _inherits(Polar, _Base);

  Polar.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      startAngle: -Math.PI / 2,
      endAngle: Math.PI * 3 / 2,
      innerRadius: 0,
      type: 'polar',
      isPolar: true
    });
  };

  function Polar(cfg) {
    _classCallCheck(this, Polar);

    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

    _this._init();
    return _this;
  }

  Polar.prototype._init = function _init() {
    var radius = this.radius;
    var innerRadius = this.innerRadius;
    var startAngle = this.startAngle;
    var endAngle = this.endAngle;
    var center = this.center;
    var oneBox = this.getOneBox();

    var oneWidth = oneBox.maxX - oneBox.minX;
    var oneHeight = oneBox.maxY - oneBox.minY;
    var left = Math.abs(oneBox.minX) / oneWidth;
    var top = Math.abs(oneBox.minY) / oneHeight;
    var width = this.width;
    var height = this.height;
    var maxRadius = void 0;
    var circleCentre = void 0;
    if (height / oneHeight > width / oneWidth) {
      // width为主
      maxRadius = width / oneWidth;
      circleCentre = {
        x: center.x - (0.5 - left) * width,
        y: center.y - (0.5 - top) * maxRadius * oneHeight
      };
    } else {
      // height为主
      maxRadius = height / oneHeight;
      circleCentre = {
        x: center.x - (0.5 - left) * maxRadius * oneWidth,
        y: center.y - (0.5 - top) * height
      };
    }

    if (!radius) {
      radius = maxRadius;
    } else if (radius > 0 && radius <= 1) {
      radius = maxRadius * radius;
    } else if (radius <= 0 || radius > maxRadius) {
      radius = maxRadius;
    }

    var x = {
      start: startAngle,
      end: endAngle
    };

    var y = {
      start: innerRadius * radius,
      end: radius
    };

    this.x = x;
    this.y = y;
    this.radius = radius;
    this.circleCentre = circleCentre;
    this.center = circleCentre;
  };

  Polar.prototype.getCenter = function getCenter() {
    return this.circleCentre;
  };

  Polar.prototype.getOneBox = function getOneBox() {
    var startAngle = this.startAngle;
    var endAngle = this.endAngle;
    if (endAngle - startAngle >= Math.PI * 2) {
      return {
        minX: -1,
        maxX: 1,
        minY: -1,
        maxY: 1
      };
    }
    var xs = [0, Math.cos(startAngle), Math.cos(endAngle)];
    var ys = [0, Math.sin(startAngle), Math.sin(endAngle)];

    for (var i = -Math.PI * 5 / 2; i < Math.PI * 3 / 2; i += Math.PI / 2) {
      if (startAngle <= i && i <= endAngle) {
        xs.push(Math.cos(i));
        ys.push(Math.sin(i));
      }
    }

    return {
      minX: Math.min.apply(Math, xs),
      maxX: Math.max.apply(Math, xs),
      minY: Math.min.apply(Math, ys),
      maxY: Math.max.apply(Math, ys)
    };
  };

  Polar.prototype.getRadius = function getRadius() {
    return this.radius;
  };

  Polar.prototype.convertPoint = function convertPoint(point) {
    var center = this.getCenter();
    var x = this.isTransposed ? point.y : point.x;
    var y = this.isTransposed ? point.x : point.y;

    x = this.convertDim(x, 'x');
    y = this.convertDim(y, 'y');

    return {
      x: center.x + Math.cos(x) * y,
      y: center.y + Math.sin(x) * y
    };
  };

  Polar.prototype.invertPoint = function invertPoint(point) {
    var center = this.getCenter();
    var vPoint = [point.x - center.x, point.y - center.y];
    var x = this.x;
    var m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
    mat3.rotate(m, m, x.start);

    var vStart = [1, 0, 0];
    vec3.transformMat3(vStart, vStart, m);
    vStart = [vStart[0], vStart[1]];
    var angle = vec2.angleTo(vStart, vPoint, x.end < x.start);
    if (Util.snapEqual(angle, Math.PI * 2)) {
      angle = 0;
    }
    var radius = vec2.length(vPoint);

    var xPercent = angle / (x.end - x.start);
    xPercent = x.end - x.start > 0 ? xPercent : -xPercent;

    var yPercent = this.invertDim(radius, 'y');
    var rst = {};
    rst.x = this.isTransposed ? yPercent : xPercent;
    rst.y = this.isTransposed ? xPercent : yPercent;
    return rst;
  };

  return Polar;
}(Base);

module.exports = Polar;

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the class of Helix Coordinate
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Base = __webpack_require__(43);
var MatrixUtil = __webpack_require__(2).MatrixUtil;
var vec2 = MatrixUtil.vec2;

var Helix = function (_Base) {
  _inherits(Helix, _Base);

  Helix.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      startAngle: 1.25 * Math.PI,
      endAngle: 7.25 * Math.PI,
      innerRadius: 0,
      type: 'helix',
      isHelix: true
    });
  };

  function Helix(cfg) {
    _classCallCheck(this, Helix);

    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

    _this._init();
    return _this;
  }

  Helix.prototype._init = function _init() {
    var width = this.width;
    var height = this.height;
    var radius = this.radius;
    var innerRadius = this.innerRadius;
    var startAngle = this.startAngle;
    var endAngle = this.endAngle;

    var index = (endAngle - startAngle) / (2 * Math.PI) + 1; // 螺线圈数
    var maxRadius = Math.min(width, height) / 2;
    if (radius && radius >= 0 && radius <= 1) {
      maxRadius = maxRadius * radius;
    }

    var d = Math.floor(maxRadius * (1 - innerRadius) / index);
    var a = d / (Math.PI * 2); // 螺线系数

    var x = {
      start: startAngle,
      end: endAngle
    };
    var y = {
      start: innerRadius * maxRadius,
      end: innerRadius * maxRadius + d * 0.99
    };

    this.a = a;
    this.d = d;
    this.x = x;
    this.y = y;
  };

  Helix.prototype.getCenter = function getCenter() {
    return this.center;
  };

  /**
   * 将百分比数据变成屏幕坐标
   * @param  {Object} point 归一化的点坐标
   * @return {Object}       返回对应的屏幕坐标
   */


  Helix.prototype.convertPoint = function convertPoint(point) {
    var a = this.a;
    var center = this.center;
    var x = void 0;
    var y = void 0;

    if (this.isTransposed) {
      x = point.y;
      y = point.x;
    } else {
      x = point.x;
      y = point.y;
    }

    var thi = this.convertDim(x, 'x');
    var r = a * thi;
    var newY = this.convertDim(y, 'y');

    return {
      x: center.x + Math.cos(thi) * (r + newY),
      y: center.y + Math.sin(thi) * (r + newY)
    };
  };

  /**
   * 将屏幕坐标点还原成百分比数据
   * @param  {Object} point 屏幕坐标
   * @return {Object}       返回对应的归一化后的数据
   */


  Helix.prototype.invertPoint = function invertPoint(point) {
    var center = this.center;
    var a = this.a;
    var d = this.d + this.y.start;
    var v = vec2.subtract([], [point.x, point.y], [center.x, center.y]);
    var thi = vec2.angleTo(v, [1, 0], true);
    var rMin = thi * a; // 坐标与原点的连线在第一圈上的交点，最小r值

    if (vec2.length(v) < rMin) {
      // 坐标与原点的连线不可能小于最小r值，但不排除因小数计算产生的略小于rMin的情况
      rMin = vec2.length(v);
    }

    var index = Math.floor((vec2.length(v) - rMin) / d); // 当前点位于第index圈
    thi = 2 * index * Math.PI + thi;
    var r = a * thi;
    var newY = vec2.length(v) - r;
    newY = Util.snapEqual(newY, 0) ? 0 : newY;

    var x = this.invertDim(thi, 'x');
    var y = this.invertDim(newY, 'y');
    x = Util.snapEqual(x, 0) ? 0 : x;
    y = Util.snapEqual(y, 0) ? 0 : y;

    var rst = {};
    rst.x = this.isTransposed ? y : x;
    rst.y = this.isTransposed ? x : y;
    return rst;
  };

  return Helix;
}(Base);

module.exports = Helix;

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @fileOverview The controller of axis
 * @author sima.zhang
 */
var Util = __webpack_require__(0);

var _require = __webpack_require__(25),
    Axis = _require.Axis;

var vec2 = __webpack_require__(2).MatrixUtil.vec2;

var Global = __webpack_require__(1);

function formatTicks(ticks) {
  var tmp = [];
  if (ticks.length > 0) {
    tmp = ticks.slice(0);
    var first = tmp[0];
    var last = tmp[tmp.length - 1];
    if (first.value !== 0) {
      tmp.unshift({
        value: 0
      });
    }
    if (last.value !== 1) {
      tmp.push({
        value: 1
      });
    }
  }
  return tmp;
}

var AxisController = function () {
  function AxisController(cfg) {
    _classCallCheck(this, AxisController);

    this.visible = true;
    this.container = null;
    this.coord = null;
    this.options = null;
    this.axes = [];
    Util.mix(this, cfg);
  }

  AxisController.prototype._isHide = function _isHide(field) {
    // 对应的坐标轴是否隐藏
    var options = this.options;

    if (options && options[field] === false) {
      return true;
    }
    return false;
  };

  AxisController.prototype._getMiddleValue = function _getMiddleValue(curValue, ticks, index) {
    var tickCount = ticks.length;
    if (index === tickCount - 1) {
      return null;
    }
    var nextValue = ticks[index + 1].value;
    return (curValue + nextValue) / 2;
  };

  AxisController.prototype._getLineRange = function _getLineRange(coord, scale, dimType, index) {
    var start = void 0;
    var end = void 0;
    var isVertical = void 0;
    var field = scale.field;
    var options = this.options;
    var position = '';
    if (options[field] && options[field].position) {
      position = options[field].position;
    }

    if (dimType === 'x') {
      // x轴的坐标轴,底部的横坐标
      start = {
        x: 0,
        y: position === 'top' ? 1 : 0
      };
      end = {
        x: 1,
        y: position === 'top' ? 1 : 0
      };
      isVertical = false;
    } else {
      // y轴坐标轴
      if (index) {
        // 多轴的情况
        start = {
          x: position === 'left' ? 0 : 1,
          y: 0
        };
        end = {
          x: position === 'left' ? 0 : 1,
          y: 1
        };
      } else {
        // 单个y轴，或者第一个y轴
        start = {
          x: position === 'right' ? 1 : 0,
          y: 0
        };
        end = {
          x: position === 'right' ? 1 : 0,
          y: 1
        };
      }
      isVertical = true;
    }

    start = coord.convert(start);
    end = coord.convert(end);

    return {
      start: start,
      end: end,
      isVertical: isVertical
    };
  };

  AxisController.prototype._getLineCfg = function _getLineCfg(coord, scale, dimType, index) {
    var factor = void 0;
    var range = this._getLineRange(coord, scale, dimType, index);
    var isVertical = range.isVertical; // 标识该坐标轴是否是纵坐标
    var start = range.start;
    var end = range.end;
    var center = coord.center;

    if (coord.isTransposed) {
      isVertical = !isVertical;
    }

    if (isVertical && start.x > center.x || !isVertical && start.y > center.y) {
      factor = 1;
    } else {
      factor = -1;
    }

    return {
      isVertical: isVertical,
      factor: factor,
      start: start,
      end: end
    };
  };

  // 获取圆弧坐标轴配置项信息


  AxisController.prototype._getCircleCfg = function _getCircleCfg(coord) {
    var circleCfg = {};
    var rangeX = coord.x;
    var rangeY = coord.y;
    var isReflectY = rangeY.start > rangeY.end;
    var start = void 0;
    if (coord.isTransposed) {
      start = {
        x: isReflectY ? 0 : 1,
        y: 0
      };
    } else {
      start = {
        x: 0,
        y: isReflectY ? 0 : 1
      };
    }

    start = coord.convert(start);
    var center = coord.circleCentre;
    var startVector = [start.x - center.x, start.y - center.y];
    var normalVector = [1, 0];
    var startAngle = void 0;
    if (start.y > center.y) {
      startAngle = vec2.angle(startVector, normalVector);
    } else {
      startAngle = vec2.angle(startVector, normalVector) * -1;
    }
    var endAngle = startAngle + (rangeX.end - rangeX.start);

    circleCfg.startAngle = startAngle;
    circleCfg.endAngle = endAngle;
    circleCfg.center = center;
    circleCfg.radius = Math.sqrt(Math.pow(start.x - center.x, 2) + Math.pow(start.y - center.y, 2));
    circleCfg.inner = coord.innerRadius || 0;
    return circleCfg;
  };

  AxisController.prototype._getRadiusCfg = function _getRadiusCfg(coord) {
    var startAngle = coord.x.start;
    var factor = startAngle < 0 ? -1 : 1;
    var start = void 0;
    var end = void 0;
    if (coord.isTransposed) {
      start = {
        x: 0,
        y: 0
      };
      end = {
        x: 1,
        y: 0
      };
    } else {
      start = {
        x: 0,
        y: 0
      };
      end = {
        x: 0,
        y: 1
      };
    }
    return {
      factor: factor,
      start: coord.convert(start),
      end: coord.convert(end)
    };
  };

  // 确定坐标轴的位置


  AxisController.prototype._getAxisPosition = function _getAxisPosition(coord, dimType, index, field) {
    var position = '';
    // 用户自己定义了 position
    var options = this.options;
    if (options[field] && options[field].position) {
      position = options[field].position;
    } else {
      var coordType = coord.type;
      if (coord.isRect) {
        if (dimType === 'x') {
          position = 'bottom';
        } else if (dimType === 'y') {
          if (index) {
            position = 'right';
          } else {
            position = 'left';
          }
        }
      } else if (coordType === 'helix') {
        position = 'helix';
      } else if (dimType === 'x') {
        position = coord.isTransposed ? 'radius' : 'circle';
      } else {
        position = coord.isTransposed ? 'circle' : 'radius';
      }
    }

    return position;
  };

  // 获取坐标轴构成的配置信息


  AxisController.prototype._getAxisDefaultCfg = function _getAxisDefaultCfg(coord, scale, type, position) {
    var self = this;
    var cfg = {};
    var options = self.options;
    var field = scale.field;
    var isShowTitle = !!(Global.axis[position] && Global.axis[position].title); // 用户全局禁用 title
    var titleCfg = void 0;

    // bugfix: title was set by chart.axis('field', { title: {} })
    if (isShowTitle || options[field] && options[field].title) {
      titleCfg = {
        title: {
          text: scale.alias || field
        }
      };
    }
    cfg = Util.deepMix({}, Global.axis[position], cfg, options[field]);
    Util.mix(cfg, titleCfg);
    cfg.ticks = scale.getTicks();

    if (coord.isPolar && !scale.isCategory) {
      if (type === 'x' && Math.abs(coord.endAngle - coord.startAngle) === Math.PI * 2) {
        cfg.ticks.pop();
      }
    }

    cfg.coord = coord;
    if (cfg.label && Util.isNil(cfg.label.autoRotate)) {
      cfg.label.autoRotate = true; // 允许自动旋转，避免重叠
    }
    return cfg;
  };

  // 确定坐标轴的配置信息


  AxisController.prototype._getAxisCfg = function _getAxisCfg(coord, scale, verticalScale, dimType) {
    var index = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
    var viewId = arguments[5];

    var self = this;
    var position = self._getAxisPosition(coord, dimType, index, scale.field);
    var cfg = self._getAxisDefaultCfg(coord, scale, dimType, position);
    if (!Util.isEmpty(cfg.grid) && verticalScale) {
      // 生成 gridPoints
      var gridPoints = [];
      var verticalTicks = formatTicks(verticalScale.getTicks());
      // 没有垂直的坐标点时不会只栅格
      if (verticalTicks.length) {
        var ticks = cfg.ticks;
        Util.each(ticks, function (tick, idx) {
          var subPoints = [];
          var value = tick.value;
          if (cfg.grid.align === 'center') {
            value = self._getMiddleValue(value, ticks, idx);
          }
          if (!Util.isNil(value)) {
            var rangeX = coord.x;
            var rangeY = coord.y;
            Util.each(verticalTicks, function (verticalTick) {
              var x = dimType === 'x' ? value : verticalTick.value;
              var y = dimType === 'x' ? verticalTick.value : value;
              var point = coord.convert({
                x: x,
                y: y
              });
              if (coord.isPolar) {
                var center = coord.circleCentre;
                if (rangeY.start > rangeY.end) {
                  y = 1 - y;
                }
                point.flag = rangeX.start > rangeX.end ? 0 : 1;
                point.radius = Math.sqrt(Math.pow(point.x - center.x, 2) + Math.pow(point.y - center.y, 2));
              }
              subPoints.push(point);
            });
            gridPoints.push({
              _id: viewId + '-' + dimType + index + '-grid-' + tick.tickValue,
              points: subPoints
            });
          }
        });

        // TODO: 临时解决，需要添加一条以满足最后一格能颜色交替
        if (ticks.length % 2 === 0 && cfg.grid.align === 'center' && cfg.grid.alternateColor) {
          gridPoints.push({
            points: [{ x: coord.end.x, y: coord.start.y }, { x: coord.end.x, y: coord.end.y }]
          });
        }
      }
      cfg.grid.items = gridPoints;
    }
    return cfg;
  };

  AxisController.prototype._getHelixCfg = function _getHelixCfg(coord) {
    var helixCfg = {};
    var a = coord.a;
    var startAngle = coord.startAngle;
    var endAngle = coord.endAngle;
    var index = 100;
    var crp = [];
    for (var i = 0; i <= index; i++) {
      var point = coord.convert({
        x: i / 100,
        y: 0
      });
      crp.push(point.x);
      crp.push(point.y);
    }
    var axisStart = coord.convert({
      x: 0,
      y: 0
    });
    helixCfg.a = a;
    helixCfg.startAngle = startAngle;
    helixCfg.endAngle = endAngle;
    helixCfg.crp = crp;
    helixCfg.axisStart = axisStart;
    helixCfg.center = coord.center;
    helixCfg.inner = coord.y.start; // 内半径
    return helixCfg;
  };

  AxisController.prototype._drawAxis = function _drawAxis(coord, scale, verticalScale, dimType, viewId, xAxis, index) {
    var container = this.container;
    var C = void 0; // 坐标轴类
    var appendCfg = void 0; // 每个坐标轴 start end 等绘制边界的信息

    if (coord.type === 'cartesian') {
      C = Axis.Line;
      appendCfg = this._getLineCfg(coord, scale, dimType, index);
    } else if (coord.type === 'helix' && dimType === 'x') {
      C = Axis.Helix;
      appendCfg = this._getHelixCfg(coord);
    } else if (dimType === 'x') {
      C = Axis.Circle;
      appendCfg = this._getCircleCfg(coord);
    } else {
      C = Axis.Line;
      appendCfg = this._getRadiusCfg(coord);
    }
    var cfg = this._getAxisCfg(coord, scale, verticalScale, dimType, index, viewId);
    cfg = Util.mix({}, cfg, appendCfg);

    if (dimType === 'y' && xAxis && xAxis.get('type') === 'circle') {
      cfg.circle = xAxis;
    }
    cfg._id = viewId + '-' + dimType;
    if (!Util.isNil(index)) {
      cfg._id = viewId + '-' + dimType + index;
    }

    var axis = container.addGroup(C, cfg);
    this.axes.push(axis);
    return axis;
  };

  AxisController.prototype.createAxis = function createAxis(xScale, yScales, viewId) {
    var self = this;
    var coord = this.coord;
    var coordType = coord.type;

    // theta坐标系默认不绘制坐标轴
    if (coordType !== 'theta' && !(coordType === 'polar' && coord.isTransposed)) {
      var xAxis = void 0;
      if (xScale && !self._isHide(xScale.field)) {
        xAxis = self._drawAxis(coord, xScale, yScales[0], 'x', viewId); // 绘制 x 轴
      }
      if (!Util.isEmpty(yScales) && coordType !== 'helix') {
        Util.each(yScales, function (yScale, index) {
          if (!self._isHide(yScale.field)) {
            self._drawAxis(coord, yScale, xScale, 'y', viewId, xAxis, index);
          }
        });
      }
    }
  };

  AxisController.prototype.changeVisible = function changeVisible(visible) {
    var axes = this.axes;
    Util.each(axes, function (axis) {
      axis.set('visible', visible);
    });
  };

  AxisController.prototype.clear = function clear() {
    var axes = this.axes;
    Util.each(axes, function (axis) {
      axis.remove();
    });
    this.axes = [];
  };

  return AxisController;
}();

module.exports = AxisController;

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview the entry of axis
 * @author sima.zhang
 */
module.exports = {
  Line: __webpack_require__(335), // 基础的直线坐标轴
  Circle: __webpack_require__(337), // 极坐标下
  Helix: __webpack_require__(338), // 螺旋坐标轴
  PolyLine: __webpack_require__(339) // 多线段组成的坐标轴
};

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the radius axis of polar coordinate and axis of cartesian coordinate
 * @author sima.zhang
 */
var Base = __webpack_require__(44);
var Util = __webpack_require__(0);

var _require = __webpack_require__(2),
    MatrixUtil = _require.MatrixUtil;

var vec2 = MatrixUtil.vec2;

var Line = function (_Base) {
  _inherits(Line, _Base);

  function Line() {
    _classCallCheck(this, Line);

    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
  }

  Line.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      x: null, // @type {Number} 距离初始位置的x轴偏移量,仅对于左侧、右侧的纵向坐标有效
      y: null, // @type {Number} 距离初始位置的y轴偏移量，仅对顶部、底部的横向坐标轴有效
      line: { // @type {Attrs} 坐标轴线的图形属性,如果设置成null，则不显示轴线
        lineWidth: 1,
        stroke: '#C0D0E0'
      },
      tickLine: { // @type {Attrs} 标注坐标线的图形属性
        lineWidth: 1,
        stroke: '#C0D0E0',
        length: 5
      },
      isVertical: false,
      start: null, // @type {Object} 起点
      end: null // @type {Object} 终点
    });
  };

  Line.prototype._getAvgLabelLength = function _getAvgLabelLength(labelsGroup) {
    var labels = labelsGroup.get('children');
    return labels[1].attr('x') - labels[0].attr('x');
  };

  /**
   * 获取距离坐标轴的向量
   * @override
   * @param  {Number} offset 偏移值
   * @return {Array}        返回二维向量
   */


  Line.prototype.getSideVector = function getSideVector(offset) {
    var self = this;
    var factor = self.get('factor');
    var isVertical = self.get('isVertical');
    var start = self.get('start');
    var end = self.get('end');
    var axisVector = self.getAxisVector();
    var normal = vec2.normalize([], axisVector);
    var direction = false;
    if (isVertical && start.y < end.y || !isVertical && start.x > end.x) {
      direction = true;
    }
    var verticalVector = vec2.vertical([], normal, direction);
    return vec2.scale([], verticalVector, offset * factor);
  };

  Line.prototype.getAxisVector = function getAxisVector() {
    var start = this.get('start');
    var end = this.get('end');
    return [end.x - start.x, end.y - start.y];
  };

  Line.prototype.getLinePath = function getLinePath() {
    var self = this;
    var start = self.get('start');
    var end = self.get('end');
    var path = [];
    path.push(['M', start.x, start.y]);
    path.push(['L', end.x, end.y]);
    return path;
  };

  Line.prototype.getTickEnd = function getTickEnd(start, value) {
    var self = this;
    var offsetVector = self.getSideVector(value);
    return {
      x: start.x + offsetVector[0],
      y: start.y + offsetVector[1]
    };
  };

  Line.prototype.getTickPoint = function getTickPoint(tickValue) {
    var self = this;
    var start = self.get('start');
    var end = self.get('end');
    var rangeX = end.x - start.x;
    var rangeY = end.y - start.y;
    return {
      x: start.x + rangeX * tickValue,
      y: start.y + rangeY * tickValue
    };
  };

  Line.prototype.renderTitle = function renderTitle() {
    var self = this;
    var title = self.get('title');
    var offsetPoint = self.getTickPoint(0.5);
    var titleOffset = title.offset;
    if (!titleOffset) {
      // 没有指定 offset 则自动计算
      titleOffset = 20;
      var labelsGroup = self.get('labelsGroup');
      if (labelsGroup) {
        var labelLength = self.getMaxLabelWidth(labelsGroup);
        var labelOffset = self.get('label').offset || self.get('_labelOffset');
        titleOffset += labelLength + labelOffset;
      }
    }

    var textStyle = title.textStyle;
    var cfg = Util.mix({}, textStyle);
    if (title.text) {
      var vector = self.getAxisVector(); // 坐标轴方向的向量

      if (title.autoRotate && !textStyle.rotate) {
        // 自动旋转并且用户没有指定标题的旋转角度
        var angle = 0;
        if (!Util.snapEqual(vector[1], 0)) {
          // 所有水平坐标轴，文本不转置
          var v1 = [1, 0];
          var v2 = [vector[0], vector[1]];
          angle = vec2.angleTo(v2, v1, true);
        }

        cfg.rotate = angle * (180 / Math.PI);
      } else if (textStyle.rotate) {
        // 用户设置了旋转角度就以用户设置的为准
        cfg.rotate = textStyle.rotate / 180 * Math.PI; // 将角度转换为弧度
      }

      var sideVector = self.getSideVector(titleOffset);
      var point = void 0;
      var position = title.position;
      if (position === 'start') {
        point = {
          x: this.get('start').x + sideVector[0],
          y: this.get('start').y + sideVector[1]
        };
      } else if (position === 'end') {
        point = {
          x: this.get('end').x + sideVector[0],
          y: this.get('end').y + sideVector[1]
        };
      } else {
        point = {
          x: offsetPoint.x + sideVector[0],
          y: offsetPoint.y + sideVector[1]
        };
      }

      cfg.x = point.x;
      cfg.y = point.y;
      cfg.text = title.text;

      var titleShape = self.addShape('Text', {
        zIndex: 2,
        attrs: cfg
      });
      titleShape.name = 'axis-title';
      self.get('appendInfo') && titleShape.setSilent('appendInfo', self.get('appendInfo'));
    }
  };

  Line.prototype.autoRotateLabels = function autoRotateLabels() {
    var self = this;
    var labelsGroup = self.get('labelsGroup');
    var title = self.get('title');
    if (labelsGroup) {
      var offset = self.get('label').offset;
      var append = 12;
      var titleOffset = title ? title.offset : 48;
      if (titleOffset < 0) {
        // 如果是负的的话就不旋转
        return;
      }
      var vector = self.getAxisVector(); // 坐标轴的向量，仅处理水平或者垂直的场景
      var angle = void 0;
      var maxWidth = void 0;
      if (Util.snapEqual(vector[0], 0) && title && title.text) {
        // 坐标轴垂直，由于不知道边距，只能防止跟title重合，如果title不存在，则不自动旋转
        maxWidth = self.getMaxLabelWidth(labelsGroup);
        if (maxWidth > titleOffset - offset - append) {
          angle = Math.acos((titleOffset - offset - append) / maxWidth) * -1;
        }
      } else if (Util.snapEqual(vector[1], 0) && labelsGroup.getCount() > 1) {
        // 坐标轴水平，不考虑边距，根据最长的和平均值进行翻转
        var avgWidth = Math.abs(self._getAvgLabelLength(labelsGroup));
        maxWidth = self.getMaxLabelWidth(labelsGroup);
        if (maxWidth > avgWidth) {
          angle = Math.asin((titleOffset - offset - append) * 1.25 / maxWidth);
        }
      }

      if (angle) {
        var factor = self.get('factor');
        Util.each(labelsGroup.get('children'), function (label) {
          label.rotateAtStart(angle);
          if (Util.snapEqual(vector[1], 0)) {
            if (factor > 0) {
              label.attr('textAlign', 'left');
            } else {
              label.attr('textAlign', 'right');
            }
          }
        });
      }
    }
  };

  return Line;
}(Base);

module.exports = Line;

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the grid of axis
 * @author sima.zhang
 */
var _require = __webpack_require__(2),
    Group = _require.Group;

var Util = __webpack_require__(0);

var Grid = function (_Group) {
  _inherits(Grid, _Group);

  function Grid() {
    _classCallCheck(this, Grid);

    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
  }

  Grid.prototype.getDefaultCfg = function getDefaultCfg() {
    return {
      zIndex: 1,
      /**
       * 栅格线的类型
       *  - line 不封闭的线
       *  - polygon 封闭的多边形
       * @type {String}
       */
      type: 'line',
      /**
       * 线的样式配置
       * @type {Object}
       */
      lineStyle: null,
      /**
       * 线集合的配置
       * @type {Array}
       */
      items: null,
      /**
       * 为网格设置交替的背景色，指定一个值则先渲染奇数层，两个值则交替渲染
       * @type {String | Array}
       */
      alternateColor: null,
      matrix: null,
      /**
       * 是否隐藏第一条网格线，默认为 false
       * @type {Boolean}
       */
      hideFirstLine: false,
      /**
       * 是否隐藏最后一条网格线，默认为 false
       * @type {Boolean}
       */
      hideLastLine: false
    };
  };

  Grid.prototype._renderUI = function _renderUI() {
    _Group.prototype._renderUI.call(this);
    this._drawLines();
  };

  Grid.prototype._drawLines = function _drawLines() {
    var self = this;
    var lineStyle = self.get('lineStyle');
    var items = self.get('items');
    if (items && items.length) {
      self._precessItems(items);
      self._drawGridLines(items, lineStyle);
    }
  };

  Grid.prototype._precessItems = function _precessItems(items) {
    var self = this;
    var preItem = void 0;
    Util.each(items, function (item, index) {
      if (preItem && self.get('alternateColor')) {
        self._drawAlternativeBg(item, preItem, index);
      }

      preItem = item;
    });
  };

  Grid.prototype._drawGridLines = function _drawGridLines(items, lineStyle) {
    var self = this;
    var type = this.get('type');
    var gridLine = void 0;
    var path = void 0;
    var cfg = void 0;
    var points = void 0;
    var itemsLength = items.length;

    if (type === 'line' || type === 'polygon') {
      Util.each(items, function (item, idx) {
        if (self.get('hideFirstLine') && idx === 0) {
          // 不展示第一条网格线
          return;
        }
        if (self.get('hideLastLine') && idx === itemsLength - 1) {
          // 不展示最后一条网格线
          return;
        }

        points = item.points;
        path = [];
        if (type === 'line') {
          path.push(['M', points[0].x, points[0].y]);
          path.push(['L', points[points.length - 1].x, points[points.length - 1].y]);
        } else {
          Util.each(points, function (point, index) {
            if (index === 0) {
              path.push(['M', point.x, point.y]);
            } else {
              path.push(['L', point.x, point.y]);
            }
          });
        }

        cfg = Util.mix({}, lineStyle, {
          path: path
        });
        gridLine = self.addShape('path', {
          attrs: cfg
        });
        gridLine.name = 'axis-grid';
        gridLine._id = item._id;
        gridLine.set('coord', self.get('coord'));
        self.get('appendInfo') && gridLine.setSilent('appendInfo', self.get('appendInfo'));
      });
    } else {
      Util.each(items, function (item, idx) {
        if (self.get('hideFirstLine') && idx === 0) {
          // 不展示第一条网格线
          return;
        }
        if (self.get('hideLastLine') && idx === itemsLength - 1) {
          // 不展示最后一条网格线
          return;
        }

        points = item.points;
        path = [];
        Util.each(points, function (point, index) {
          var radius = point.radius;
          if (index === 0) {
            path.push(['M', point.x, point.y]);
          } else {
            path.push(['A', radius, radius, 0, 0, point.flag, point.x, point.y]);
          }
        });
        cfg = Util.mix({}, lineStyle, {
          path: path
        });
        gridLine = self.addShape('path', {
          attrs: cfg
        });
        gridLine.name = 'axis-grid';
        gridLine._id = item._id;
        gridLine.set('coord', self.get('coord'));
        self.get('appendInfo') && gridLine.setSilent('appendInfo', self.get('appendInfo'));
      });
    }
  };

  Grid.prototype._drawAlternativeBg = function _drawAlternativeBg(item, preItem, index) {
    var self = this;
    var alternateColor = self.get('alternateColor');
    var attrs = void 0;
    var oddColor = void 0;
    var evenColor = void 0;

    if (Util.isString(alternateColor)) {
      oddColor = alternateColor;
    } else if (Util.isArray(alternateColor)) {
      oddColor = alternateColor[0];
      evenColor = alternateColor[1];
    }

    if (index % 2 === 0) {
      if (evenColor) {
        attrs = self._getBackItem(preItem.points, item.points, evenColor);
      }
    } else if (oddColor) {
      attrs = self._getBackItem(preItem.points, item.points, oddColor);
    }

    var shape = self.addShape('Path', {
      attrs: attrs
    });
    shape.name = 'axis-grid-rect';
    shape._id = item._id && item._id.replace('grid', 'grid-rect');
    shape.set('coord', self.get('coord'));
    self.get('appendInfo') && shape.setSilent('appendInfo', self.get('appendInfo'));
  };

  Grid.prototype._getBackItem = function _getBackItem(start, end, bgColor) {
    var path = [];
    var type = this.get('type');

    if (type === 'line') {
      path.push(['M', start[0].x, start[0].y]);
      path.push(['L', start[start.length - 1].x, start[start.length - 1].y]);
      path.push(['L', end[end.length - 1].x, end[end.length - 1].y]);
      path.push(['L', end[0].x, end[0].y]);
      path.push(['Z']);
    } else if (type === 'polygon') {
      Util.each(start, function (subItem, index) {
        if (index === 0) {
          path.push(['M', subItem.x, subItem.y]);
        } else {
          path.push(['L', subItem.x, subItem.y]);
        }
      });
      for (var i = end.length - 1; i >= 0; i--) {
        path.push(['L', end[i].x, end[i].y]);
      }
      path.push(['Z']);
    } else {
      var flag = start[0].flag;
      Util.each(start, function (subItem, index) {
        var radius = subItem.radius;
        if (index === 0) {
          path.push(['M', subItem.x, subItem.y]);
        } else {
          path.push(['A', radius, radius, 0, 0, subItem.flag, subItem.x, subItem.y]);
        }
      });
      for (var j = end.length - 1; j >= 0; j--) {
        var endSubItem = end[j];
        var endRadius = endSubItem.radius;
        if (j === end.length - 1) {
          path.push(['M', endSubItem.x, endSubItem.y]);
        } else {
          path.push(['A', endRadius, endRadius, 0, 0, flag === 1 ? 0 : 1, endSubItem.x, endSubItem.y]);
        }
      }
    }

    return {
      fill: bgColor,
      path: path
    };
  };

  return Grid;
}(Group);

module.exports = Grid;

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the circle axis of polar coordinate
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Base = __webpack_require__(44);

var vec2 = __webpack_require__(2).MatrixUtil.vec2;

var Circle = function (_Base) {
  _inherits(Circle, _Base);

  function Circle() {
    _classCallCheck(this, Circle);

    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
  }

  Circle.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);

    return Util.mix({}, cfg, {
      /**
       * 坐标轴的类型
       * @type {String}
       */
      type: 'circle',
      /**
       * 指定刻度之间的间距
       * @type {Number}
       */
      tickInterval: null,
      /**
       * 开始弧度
       * @type {Number}
       */
      startAngle: -Math.PI / 2,
      /**
       * 结束弧度
       * @type {Number}
       */
      endAngle: Math.PI * 3 / 2,
      line: { // @type {Attrs} 坐标轴线的图形属性,如果设置成null，则不显示轴线
        lineWidth: 1,
        stroke: '#C0D0E0'
      },
      tickLine: { // @type {Attrs} 标注坐标线的图形属性
        lineWidth: 1,
        stroke: '#C0D0E0',
        length: 5
      },
      /**
       * 默认文本距离轴线的距离
       * @type {Number}
       */
      _labelOffset: 5
    });
  };

  Circle.prototype.parseTick = function parseTick(tick, index, length) {
    return {
      text: tick,
      value: index / length
    };
  };

  Circle.prototype._getCirclePoint = function _getCirclePoint(angle, radius) {
    var self = this;
    var center = self.get('center');
    radius = radius || self.get('radius');
    return {
      x: center.x + Math.cos(angle) * radius,
      y: center.y + Math.sin(angle) * radius
    };
  };

  Circle.prototype.getTickPoint = function getTickPoint(value) {
    var self = this;
    var startAngle = self.get('startAngle');
    var endAngle = self.get('endAngle');
    var angle = startAngle + (endAngle - startAngle) * value;
    return self._getCirclePoint(angle);
  };

  Circle.prototype.getSideVector = function getSideVector(offset, point) {
    var self = this;
    var center = self.get('center');
    var vector = [point.x - center.x, point.y - center.y];
    if (!Util.isNil(offset)) {
      var vecLen = vec2.length(vector);
      vec2.scale(vector, vector, offset / vecLen);
    }
    return vector;
  };

  Circle.prototype.getSidePoint = function getSidePoint(point, offset) {
    var self = this;
    var vector = self.getSideVector(offset, point);

    return {
      x: point.x + vector[0],
      y: point.y + vector[1]
    };
  };

  Circle.prototype.getTickEnd = function getTickEnd(start, length) {
    var self = this;
    var tickLine = self.get('tickLine');
    length = length ? length : tickLine.length;
    return self.getSidePoint(start, length);
  };

  Circle.prototype.getTextAnchor = function getTextAnchor(vector) {
    var align = void 0;
    if (Util.snapEqual(vector[0], 0)) {
      align = 'center';
    } else if (vector[0] > 0) {
      align = 'left';
    } else if (vector[0] < 0) {
      align = 'right';
    }
    return align;
  };

  Circle.prototype.getLinePath = function getLinePath() {
    var self = this;
    var center = self.get('center');
    var x = center.x;
    var y = center.y;
    var rx = self.get('radius');
    var ry = rx;
    var startAngle = self.get('startAngle');
    var endAngle = self.get('endAngle');
    var inner = self.get('inner');

    var path = [];
    if (Math.abs(endAngle - startAngle) === Math.PI * 2) {
      path = [['M', x, y], ['m', 0, -ry], ['a', rx, ry, 0, 1, 1, 0, 2 * ry], ['a', rx, ry, 0, 1, 1, 0, -2 * ry], ['z']];
    } else {
      var startPoint = self._getCirclePoint(startAngle);
      var endPoint = self._getCirclePoint(endAngle);
      var large = Math.abs(endAngle - startAngle) > Math.PI ? 1 : 0;
      var sweep = startAngle > endAngle ? 0 : 1;
      if (!inner) {
        path = [['M', x, y], ['L', startPoint.x, startPoint.y], ['A', rx, ry, 0, large, sweep, endPoint.x, endPoint.y], ['L', x, y]];
      } else {
        var innerStartVector = self.getSideVector(inner * rx, startPoint);
        var innerEndVector = self.getSideVector(inner * rx, endPoint);
        var innerStartPoint = {
          x: innerStartVector[0] + x,
          y: innerStartVector[1] + y
        };
        var innerEndPoint = {
          x: innerEndVector[0] + x,
          y: innerEndVector[1] + y
        };

        path = [['M', innerStartPoint.x, innerStartPoint.y], ['L', startPoint.x, startPoint.y], ['A', rx, ry, 0, large, sweep, endPoint.x, endPoint.y], ['L', innerEndPoint.x, innerEndPoint.y], ['A', rx * inner, ry * inner, 0, large, Math.abs(sweep - 1), innerStartPoint.x, innerStartPoint.y]];
      }
    }
    return path;
  };

  Circle.prototype.addLabel = function addLabel(tick, point, index) {
    var self = this;
    var offset = self.get('label').offset || self.get('_labelOffset') || 0.001;
    point = self.getSidePoint(point, offset);
    _Base.prototype.addLabel.call(this, tick, point, index);
  };

  Circle.prototype.autoRotateLabels = function autoRotateLabels() {
    var self = this;
    var ticks = self.get('ticks');
    var labelsGroup = self.get('labelsGroup');
    if (labelsGroup && ticks.length > 12) {
      // 小于12个文本时文本不旋转
      var radius = self.get('radius');
      var startAngle = self.get('startAngle');
      var endAngle = self.get('endAngle');
      var totalAngle = endAngle - startAngle;
      var avgAngle = totalAngle / (ticks.length - 1);
      var avgWidth = Math.sin(avgAngle / 2) * radius * 2;
      var maxLength = self.getMaxLabelWidth(labelsGroup);
      Util.each(labelsGroup.get('children'), function (label, index) {
        var tick = ticks[index];
        var angle = tick.value * totalAngle + startAngle;
        var mode = angle % (Math.PI * 2);
        if (maxLength < avgWidth) {
          // 文本的最大宽度大于
          if (mode <= 0) {
            angle = angle + Math.PI;
          }
          if (mode > Math.PI) {
            angle = angle - Math.PI;
          }
          angle = angle - Math.PI / 2;
          label.attr('textAlign', 'center');
        } else {
          if (mode > Math.PI / 2) {
            angle = angle - Math.PI;
          } else if (mode < Math.PI / 2 * -1) {
            angle = angle + Math.PI;
          }
        }
        label.rotateAtStart(angle);
      });
    }
  };

  return Circle;
}(Base);

module.exports = Circle;

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the helix axis of helix coordinate
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Base = __webpack_require__(44);

var _require = __webpack_require__(2),
    MatrixUtil = _require.MatrixUtil,
    PathUtil = _require.PathUtil;

var vec2 = MatrixUtil.vec2;

var Helix = function (_Base) {
  _inherits(Helix, _Base);

  function Helix() {
    _classCallCheck(this, Helix);

    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
  }

  Helix.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);

    return Util.mix({}, cfg, {
      type: 'helix',
      line: { // @type {Attrs} 坐标轴线的图形属性,如果设置成null，则不显示轴线
        lineWidth: 1,
        stroke: '#C0D0E0'
      },
      tickLine: { // @type {Attrs} 标注坐标线的图形属性
        lineWidth: 1,
        stroke: '#C0D0E0',
        length: 5
      },
      startAngle: 1.25 * Math.PI,
      endAngle: 7.25 * Math.PI,
      // 螺旋系数
      a: 0,
      // 画布中心坐标
      center: null,
      // 坐标轴绘制起点
      axisStart: null,
      // 坐标轴的n个坐标点
      crp: []
    });
  };

  Helix.prototype.getLinePath = function getLinePath() {
    var self = this;
    var crp = self.get('crp');
    var axisStart = self.get('axisStart');
    var path = PathUtil.catmullRomToBezier(crp);
    path.unshift(['M', axisStart.x, axisStart.y]);
    return path;
  };

  Helix.prototype.getTickPoint = function getTickPoint(value) {
    var self = this;
    var startAngle = self.get('startAngle');
    var endAngle = self.get('endAngle');
    var angle = startAngle + (endAngle - startAngle) * value;
    return self._getHelixPoint(angle);
  };

  Helix.prototype._getHelixPoint = function _getHelixPoint(angle) {
    var self = this;
    var center = self.get('center');
    var a = self.get('a'); // 螺线系数
    var radius = a * angle + self.get('inner'); // 螺线方程
    return {
      x: center.x + Math.cos(angle) * radius,
      y: center.y + Math.sin(angle) * radius
    };
  };

  Helix.prototype.getSideVector = function getSideVector(offset, point) {
    var self = this;
    var center = self.get('center');
    var vector = [point.x - center.x, point.y - center.y];
    if (offset) {
      var vecLen = vec2.length(vector);
      vec2.scale(vector, vector, offset / vecLen);
    }
    return vector;
  };

  Helix.prototype.getSidePoint = function getSidePoint(point, offset) {
    var self = this;
    var vector = self.getSideVector(offset, point);

    return {
      x: point.x + vector[0],
      y: point.y + vector[1]
    };
  };

  Helix.prototype.getTickEnd = function getTickEnd(start, length) {
    var self = this;
    var tickLine = self.get('tickLine');
    length = length ? length : tickLine.length;
    return self.getSidePoint(start, length);
  };

  return Helix;
}(Base);

module.exports = Helix;

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the axis of map coodinate
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Base = __webpack_require__(44);

var _require = __webpack_require__(2),
    MatrixUtil = _require.MatrixUtil,
    PathUtil = _require.PathUtil;

var vec2 = MatrixUtil.vec2;

var Polyline = function (_Base) {
  _inherits(Polyline, _Base);

  function Polyline() {
    _classCallCheck(this, Polyline);

    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
  }

  Polyline.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);

    return Util.mix({}, cfg, {
      type: 'polyline'
    });
  };

  Polyline.prototype.getLinePath = function getLinePath() {
    var self = this;
    var tickPoints = self.get('tickPoints');
    var start = self.get('start');
    var end = self.get('end');
    var points = [];
    points.push(start.x);
    points.push(start.y);
    Util.each(tickPoints, function (tick) {
      points.push(tick.x);
      points.push(tick.y);
    });
    points.push(end.x);
    points.push(end.y);

    var path = PathUtil.catmullRomToBezier(points);
    path.unshift(['M', start.x, start.y]);
    return path;
  };

  Polyline.prototype.getTickPoint = function getTickPoint(value, index) {
    var tickPoints = this.get('tickPoints');
    return tickPoints[index];
  };

  Polyline.prototype.getTickEnd = function getTickEnd(start, value, index) {
    var self = this;
    var lineAttrs = self.get('tickLine');
    var tickLength = value ? value : lineAttrs.length;
    var offsetVector = self.getSideVector(tickLength, start, index);
    return {
      x: start.x + offsetVector[0],
      y: start.y + offsetVector[1]
    };
  };

  Polyline.prototype.getSideVector = function getSideVector(offset, point, index) {
    var self = this;
    var preTickPoint = void 0;
    if (index === 0) {
      preTickPoint = self.get('start');
    } else {
      var tickPoints = self.get('tickPoints');
      preTickPoint = tickPoints[index - 1];
    }

    var vector = [point.x - preTickPoint.x, point.y - preTickPoint.y];
    var normal = vec2.normalize([], vector);
    var verticalVector = vec2.vertical([], normal, false);
    return vec2.scale([], verticalVector, offset);
  };

  return Polyline;
}(Base);

module.exports = Polyline;

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview the entry of guide
 * @author sima.zhang
 */
module.exports = {
  Line: __webpack_require__(341),
  Text: __webpack_require__(342),
  Image: __webpack_require__(343),
  Region: __webpack_require__(344),
  Html: __webpack_require__(345),
  Arc: __webpack_require__(346)
};

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the line guide
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Base = __webpack_require__(17);

var vec2 = __webpack_require__(2).MatrixUtil.vec2;

var Line = function (_Base) {
  _inherits(Line, _Base);

  function Line() {
    _classCallCheck(this, Line);

    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
  }

  Line.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      /**
       * 辅助元素类型
       * @type {String}
       */
      type: 'line',
      zIndex: 15,
      /**
       * 辅助线的起点位置
       * @type {Object | Function | Array}
       */
      start: null,
      /**
       * 辅助线的终点位置
       * @type {Object | Function | Array}
       */
      end: null,
      /**
       * 辅助线的图形样式
       * @type {Object}
       */
      lineStyle: {
        stroke: '#000',
        lineWidth: 1
      },
      /**
       * 辅助文本配置
       * @type {Object}
       */
      text: {
        position: 'end', // 文本的显示位置： start / center / end / 百分比
        autoRotate: true, // 文本是否沿着辅助线的方向自动旋转
        style: {
          fill: '#999',
          fontSize: 12,
          fontWeight: 500,
          fontFamily: 'sans-serif'
        }, // 辅助文本的样式
        content: null // 辅助文本的文字
      }
    });
  };

  Line.prototype.render = function render(coord, group) {
    var self = this;
    var start = self.parsePoint(coord, self.start);
    var end = self.parsePoint(coord, self.end);
    var guideLineGroup = group.addGroup();

    self._drawLines(start, end, guideLineGroup);
    if (this.text && this.text.content) {
      self._drawText(start, end, guideLineGroup);
    }
    self.el = guideLineGroup;
  };

  Line.prototype._drawLines = function _drawLines(start, end, group) {
    var path = [['M', start.x, start.y], ['L', end.x, end.y]];
    var guideLine = group.addShape('Path', {
      attrs: Util.mix({
        path: path
      }, this.lineStyle)
    });
    guideLine.name = 'guide-line';
    this.appendInfo && guideLine.setSilent('appendInfo', this.appendInfo);
  };

  Line.prototype._drawText = function _drawText(start, end, group) {
    var textCfg = this.text;
    var position = textCfg.position;
    var textStyle = textCfg.style;

    var percent = void 0;
    if (position === 'start') {
      percent = 0;
    } else if (position === 'center') {
      percent = 0.5;
    } else if (Util.isString(position) && position.indexOf('%') !== -1) {
      percent = parseInt(position, 10) / 100;
    } else if (Util.isNumber(position)) {
      percent = position;
    } else {
      percent = 1;
    }

    if (percent > 1 || percent < 0) {
      percent = 1;
    }

    var cfg = {
      x: start.x + (end.x - start.x) * percent,
      y: start.y + (end.y - start.y) * percent
    };

    if (textCfg.offsetX) {
      // 设置了偏移量
      cfg.x += textCfg.offsetX;
    }

    if (textCfg.offsetY) {
      // 设置了偏移量
      cfg.y += textCfg.offsetY;
    }

    cfg.text = textCfg.content;
    cfg = Util.mix({}, cfg, textStyle);
    if (textCfg.autoRotate && !textStyle.rotate) {
      var angle = vec2.angleTo([end.x - start.x, end.y - start.y], [1, 0], 1);
      cfg.rotate = angle;
    } else if (textStyle.rotate) {
      cfg.rotate = textStyle.rotate * Math.PI / 180;
    }

    var shape = group.addShape('Text', {
      attrs: cfg
    });
    shape.name = 'guide-line-text';
    this.appendInfo && shape.setSilent('appendInfo', this.appendInfo);
  };

  return Line;
}(Base);

module.exports = Line;

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the text guide
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Base = __webpack_require__(17);

var Text = function (_Base) {
  _inherits(Text, _Base);

  function Text() {
    _classCallCheck(this, Text);

    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
  }

  Text.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      /**
       * 辅助元素类型
       * @type {String}
       */
      type: 'text',
      // TODO 需要调整
      zIndex: 15,
      /**
       * 辅助文本的位置
       * @type {Object | Function | Array}
       */
      position: null,
      /**
       * 辅助文本的显示文字
       * @type {String}
       */
      content: null,
      /**
       * 辅助文本的样式配置
       * @type {Object}
       */
      style: {
        fill: '#999',
        fontSize: 12,
        fontWeight: 500,
        textAlign: 'center'
      },
      /**
       * x 方向的偏移量
       * @type {Number}
       */
      offsetX: null,
      /**
       * y 方向的偏移量
       * @type {Number}
       */
      offsetY: null
    });
  };

  Text.prototype.render = function render(coord, group) {
    var self = this;
    var position = self.position;
    var point = self.parsePoint(coord, position);
    var textStyle = Util.mix({}, this.style);

    if (self.offsetX) {
      point.x += self.offsetX;
    }

    if (self.offsetY) {
      point.y += self.offsetY;
    }

    if (textStyle.rotate) {
      textStyle.rotate = textStyle.rotate * Math.PI / 180; // 将角度转换为弧度
    }

    var guideText = group.addShape('Text', {
      zIndex: self.zIndex,
      attrs: Util.mix({
        text: self.content
      }, textStyle, point)
    });
    guideText.name = 'guide-text';
    self.appendInfo && guideText.setSilent('appendInfo', self.appendInfo);
    self.el = guideText;
  };

  return Text;
}(Base);

module.exports = Text;

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the image guide
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Base = __webpack_require__(17);

var Image = function (_Base) {
  _inherits(Image, _Base);

  function Image() {
    _classCallCheck(this, Image);

    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
  }

  Image.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      /**
       * 辅助元素类型
       * @type {String}
       */
      type: 'image',
      zIndex: 1,
      /**
       * 辅助图片的起点位置
       * @type {Object | Function | Array}
       */
      start: null,
      /**
       * 辅助图片的终点位置
       * @type {Object | Function | Array}
       */
      end: null,
      /**
       * 辅助图片的地址
       * @type {Strinf}
       */
      src: null,
      /**
       * x 方向的偏移量
       * @type {Number}
       */
      offsetX: null,
      /**
       * y 方向的偏移量
       * @type {Number}
       */
      offsetY: null
    });
  };

  Image.prototype.render = function render(coord, group) {
    var self = this;
    var start = self.parsePoint(coord, self.start);

    var cfg = {
      x: start.x,
      y: start.y
    };
    cfg.img = self.src;

    if (!self.end) {
      // 如果咩有指定结束点，则 start 为图片的左上角坐标
      if (self.width) {
        cfg.width = self.width;
      }

      if (self.height) {
        cfg.height = self.height;
      }
    } else {
      var end = self.parsePoint(coord, self.end);
      cfg.width = Math.abs(end.x - start.x);
      cfg.height = Math.abs(start.y - end.y);
    }

    if (self.offsetX) {
      cfg.x += self.offsetX;
    }

    if (self.offsetY) {
      cfg.y += self.offsetY;
    }

    var imgGuide = group.addShape('Image', {
      zIndex: 1,
      attrs: cfg
    });
    imgGuide.name = 'guide-image';
    self.appendInfo && imgGuide.setSilent('appendInfo', self.appendInfo);
    self.el = imgGuide;
  };

  return Image;
}(Base);

module.exports = Image;

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the region guide
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Base = __webpack_require__(17);

var Region = function (_Base) {
  _inherits(Region, _Base);

  function Region() {
    _classCallCheck(this, Region);

    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
  }

  Region.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);

    return Util.mix({}, cfg, {
      type: 'region',
      zIndex: 1,
      start: null,
      end: null,
      style: {
        lineWidth: 0,
        fill: '#CCD7EB',
        opacity: 0.4
      }
    });
  };

  Region.prototype.render = function render(coord, group) {
    var self = this;
    var rectStyle = self.style;
    var path = self._getPath(coord);

    var regionGroup = group.addShape('path', {
      zIndex: self.zIndex,
      attrs: Util.mix({
        path: path
      }, rectStyle)
    });
    regionGroup.name = 'guide-region';
    self.appendInfo && regionGroup.setSilent('appendInfo', self.appendInfo);
    self.el = regionGroup;
  };

  Region.prototype._getPath = function _getPath(coord) {
    var self = this;
    var start = self.parsePoint(coord, self.start);
    var end = self.parsePoint(coord, self.end);
    var path = [];
    path.push(['M', start.x, start.y]);
    path.push(['L', end.x, start.y]);
    path.push(['L', end.x, end.y]);
    path.push(['L', start.x, end.y]);
    path.push(['z']);
    return path;
  };

  return Region;
}(Base);

module.exports = Region;

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the html guide
 * @author sima.zhang
 */
var Util = __webpack_require__(0);

var _require = __webpack_require__(2),
    DomUtil = _require.DomUtil;

var Base = __webpack_require__(17);

var Html = function (_Base) {
  _inherits(Html, _Base);

  function Html() {
    _classCallCheck(this, Html);

    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
  }

  Html.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      /**
       * 辅助元素类型
       * @type {String}
       */
      type: 'html',
      zIndex: 15,
      /**
       * dom 显示位置点
       * @type {Object | Array}
       */
      position: null,
      /**
       * 水平方向对齐方式，可取值 'left'、'middle'、'right'
       * @type {String}
       */
      alignX: 'middle',
      /**
       * 垂直方向对齐方式，可取值 'top'、'middle'、'bottom'
       * @type {String}
       */
      alignY: 'middle',
      /**
       * x 方向的偏移量
       * @type {Number}
       */
      offsetX: null,
      /**
       * y 方向的偏移量
       * @type {Number}
       */
      offsetY: null,
      /**
      * html内容
      *@type {String | Function}
      */
      html: null
    });
  };

  Html.prototype.render = function render(coord, group) {
    var self = this;
    var position = self.parsePoint(coord, self.position);

    var parentNode = group.get('canvas').get('el').parentNode;
    var wrapperNode = DomUtil.createDom('<div class="g-guide"></div>');
    parentNode.appendChild(wrapperNode);

    var html = self.html;
    if (Util.isFunction(html)) {
      html = html(self.xScales, self.yScales);
    }
    var htmlNode = DomUtil.createDom(html);
    wrapperNode.appendChild(htmlNode);
    self._setDomPosition(wrapperNode, htmlNode, position);
    self.el = wrapperNode;
  };

  Html.prototype._setDomPosition = function _setDomPosition(parentDom, childDom, point) {
    var self = this;
    var alignX = self.alignX;
    var alignY = self.alignY;
    var domWidth = DomUtil.getOuterWidth(childDom);
    var domHeight = DomUtil.getOuterHeight(childDom);

    var position = {
      x: point.x,
      y: point.y
    };

    if (alignX === 'middle' && alignY === 'top') {
      position.x -= Util.round(domWidth / 2);
    } else if (alignX === 'middle' && alignY === 'bottom') {
      position.x -= Util.round(domWidth / 2);
      position.y -= Util.round(domHeight);
    } else if (alignX === 'left' && alignY === 'bottom') {
      position.y -= Util.round(domHeight);
    } else if (alignX === 'left' && alignY === 'middle') {
      position.y -= Util.round(domHeight / 2);
    } else if (alignX === 'left' && alignY === 'top') {
      position.x = point.x;
      position.y = point.y;
    } else if (alignX === 'right' && alignY === 'bottom') {
      position.x -= Util.round(domWidth);
      position.y -= Util.round(domHeight);
    } else if (alignX === 'right' && alignY === 'middle') {
      position.x -= Util.round(domWidth);
      position.y -= Util.round(domHeight / 2);
    } else if (alignX === 'right' && alignY === 'top') {
      position.x -= Util.round(domWidth);
    } else {
      // 默认位于中心点
      position.x -= Util.round(domWidth / 2);
      position.y -= Util.round(domHeight / 2);
    }

    if (self.offsetX) {
      position.x += self.offsetX;
    }

    if (self.offsetY) {
      position.y += self.offsetY;
    }

    DomUtil.modifyCSS(parentDom, {
      position: 'absolute',
      top: Math.round(position.y) + 'px',
      left: Math.round(position.x) + 'px',
      visibility: 'visible',
      zIndex: self.zIndex
    });
  };

  Html.prototype.remove = function remove() {
    var self = this;
    var el = self.el;
    if (el) {
      el.parentNode.removeChild(el);
    }
  };

  return Html;
}(Base);

module.exports = Html;

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview the arc guide
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Base = __webpack_require__(17);

var Arc = function (_Base) {
  _inherits(Arc, _Base);

  function Arc() {
    _classCallCheck(this, Arc);

    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
  }

  Arc.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      /**
       * 辅助元素类型
       * @type {String}
       */
      type: 'arc',
      zIndex: 15,
      /**
       * 辅助弧线的起始点
       * @type {Object | Function | Array}
       */
      start: null,
      /**
       * 辅助弧线的终止点
       * @type {Object | Function | Array}
       */
      end: null,
      /**
       * 辅助文本的样式配置
       * @type {Object}
       */
      style: {
        stroke: '#999',
        lineWidth: 1
      }
    });
  };

  Arc.prototype.render = function render(coord, group) {
    var self = this;
    var start = self.parsePoint(coord, self.start);
    var end = self.parsePoint(coord, self.end);
    var coordCenter = coord.getCenter();
    var radius = Math.sqrt((start.x - coordCenter.x) * (start.x - coordCenter.x) + (start.y - coordCenter.y) * (start.y - coordCenter.y));
    var startAngle = Math.atan2(start.y - coordCenter.y, start.x - coordCenter.x);
    var endAngle = Math.atan2(end.y - coordCenter.y, end.x - coordCenter.x);

    var arcShape = group.addShape('arc', {
      zIndex: self.zIndex,
      attrs: Util.mix({
        x: coordCenter.x,
        y: coordCenter.y,
        r: radius,
        startAngle: startAngle,
        endAngle: endAngle
      }, self.style)
    });
    arcShape.name = 'guide-arc';
    self.appendInfo && arcShape.setSilent('appendInfo', self.appendInfo);
    self.el = arcShape;
  };

  return Arc;
}(Base);

module.exports = Arc;

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview The entry of legend
 * @author sima.zhang
 */
module.exports = {
  Category: __webpack_require__(348), // 分类图例
  Color: __webpack_require__(349), // 颜色图例
  Size: __webpack_require__(351) // 大小图例
};

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview The class of category legend
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Base = __webpack_require__(121);

var _require = __webpack_require__(2),
    DomUtil = _require.DomUtil,
    Event = _require.Event,
    Group = _require.Group;

var Global = __webpack_require__(1);
var LEGEND_STYLE = Global.legend.html;

var CONTAINER_CLASS = 'g2-legend';
var TITLE_CLASS = 'g2-legend-title';
var LIST_CLASS = 'g2-legend-list';
var ITEM_CLASS = 'g2-legend-list-item';
var TEXT_CLASS = 'g2-legend-text';
var MARKER_CLASS = 'g2-legend-marker';

function findNodeByClass(node, className) {
  return node.getElementsByClassName(className)[0];
}

function getParentNode(node, className) {
  var nodeClass = node.className;
  nodeClass = nodeClass.split(' ');
  if (nodeClass.indexOf(className) > -1) {
    return node;
  }

  if (node.parentNode) {
    if (node.parentNode.className === CONTAINER_CLASS) {
      return node.parentNode;
    }
    return getParentNode(node.parentNode, className);
  }

  return null;
}

function findItem(items, refer) {
  var rst = null;
  var value = refer instanceof Group ? refer.get('value') : refer;
  Util.each(items, function (item) {
    if (item.value === value) {
      rst = item;
      return false;
    }
  });

  return rst;
}

function findShapeByName(group, name) {
  return group.findBy(function (node) {
    return node.name === name;
  });
}

var Category = function (_Base) {
  _inherits(Category, _Base);

  function Category() {
    _classCallCheck(this, Category);

    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
  }

  Category.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      /**
       * type标识
       * @type {String}
       */
      type: 'category-legend',
      /**
       * 子项集合
       * @type {Array}
       */
      items: null,
      /**
       * TODO：rename
       * 图例项水平方向的间距
       * @type {Number}
       */
      itemGap: 5,
      /**
       * TODO：rename
       * 图例标题距离图例项的距离
       * @type {Number}
       */
      titleGap: 15,
      /**
       * TODO：rename
       * 图例项垂直方向的间距
       * @type {Number}
       */
      itemMarginBottom: 8,
      /**
       * 图例项图组
       * @type {Group}
       */
      itemsGroup: null,
      /**
       * 布局方式： horizontal，vertical
       * @type {String}
       */
      layout: 'horizontal',
      /**
       * 是否允许全部取消，默认 false，即必须保留一个被选中
       * @type {Boolean}
       */
      allowAllCanceled: false,
      /**
       * 边框内边距
       * @type {Array}
       */
      backPadding: [0, 0, 0, 0],
      /**
       * 是否能被点击
       * @type {Boolean}
       */
      checkable: true,
      /**
       * 图例项取消选中的颜色
       * @type {String}
       */
      unCheckColor: '#ccc',
      /**
       * 图例背景层属性设置
       * @type {Obejct}
       */
      background: {
        fill: '#fff',
        fillOpacity: 0
      },
      /**
       * 图例项的宽度，当图例有很多图例项，并且用户想要这些图例项在同一平面内垂直对齐，此时这个属性可帮用户实现此效果
       * @type {Number}
       */
      itemWidth: null,
      textStyle: {
        fill: '#333',
        fontSize: 12,
        textAlign: 'start',
        textBaseline: 'middle',
        fontFamily: Global.fontFamily
      },
      /**
       * marker 和文字的距离
       * @type {Number}
       */
      _wordSpaceing: 8,
      /**
       * 是否使用 html 进行渲染，默认为 false
       * @type {Boolean}
       */
      useHtml: false,
      /**
       * useHtml 为 true 时生效，用于自动定位
       * @type {[type]}
       */
      autoPosition: true,
      container: null,
      /**
       * 使用html时的外层模板
       * @type {String}
       */
      containerTpl: '<div class="' + CONTAINER_CLASS + '">' + '<h4 class="' + TITLE_CLASS + '"></h4>' + '<ul class="' + LIST_CLASS + '"></ul>' + '</div>',
      /**
       * 默认的图例项 html 模板
       * @type {String}
       */
      _defaultItemTpl: '<li class="' + ITEM_CLASS + ' item-{index} {checked}" data-color="{originColor}" data-value="{originValue}">' + '<i class="' + MARKER_CLASS + '" style="background-color:{color};"></i>' + '<span class="' + TEXT_CLASS + '">{value}</span></li>',
      /**
       * 用户设置的图例项 html 模板
       * @type {String|Function}
       */
      itemTpl: null,
      /**
       * 图例项是否可点击，默认为 true
       * @type {Boolean}
       */
      clickable: true,
      /**
       * TODO: rename
       * 图例项的选择模式，多选和单选 multiple、single
       * @type {String}
       */
      selectedMode: 'multiple',
      /**
       * 图例项的顺序是否要逆序，默认为 false
       * @type {Boolean}
       */
      reversed: false,
      /**
       * 是否自动换行
       * @type {Boolean}
       */
      autoWrap: true
    });
  };

  Category.prototype._beforeRenderUI = function _beforeRenderUI() {
    _Base.prototype._beforeRenderUI.call(this);
  };

  Category.prototype._renderUI = function _renderUI() {
    if (!this.get('useHtml')) {
      _Base.prototype._renderUI.call(this);
      this._renderItems();
      this.get('autoWrap') && this._adjustItems(); // 默认自动换行
      this._renderBack();
    } else {
      // 使用 html 渲染图例
      this._renderHTML();
    }
  };

  Category.prototype._bindUI = function _bindUI() {
    if (this.get('hoverable')) {
      this.on('mousemove', Util.wrapBehavior(this, '_onMousemove'));
      this.on('mouseleave', Util.wrapBehavior(this, '_onMouseleave'));
    }

    if (this.get('clickable')) {
      this.on('click', Util.wrapBehavior(this, '_onClick'));
    }
  };

  Category.prototype._getLegendItem = function _getLegendItem(target) {
    var item = target.get('parent');
    if (item && item.name === 'legendGroup') {
      return item;
    }
    return null;
  };

  Category.prototype._onMousemove = function _onMousemove(ev) {
    var item = this._getLegendItem(ev.currentTarget);
    if (item && item.get('checked')) {
      var items = this.get('items');
      var itemhover = new Event('itemhover', ev, true, true);
      itemhover.item = findItem(items, item);
      itemhover.checked = item.get('checked');
      this.emit('itemhover', itemhover);
    } else if (!item) {
      this.emit('itemunhover', ev);
    }

    return;
  };

  Category.prototype._onMouseleave = function _onMouseleave(ev) {
    this.emit('itemunhover', ev);
    return;
  };

  Category.prototype._onClick = function _onClick(ev) {
    var clickedItem = this._getLegendItem(ev.currentTarget);
    var items = this.get('items');
    if (clickedItem && !clickedItem.get('destroyed')) {
      var checked = clickedItem.get('checked');
      if (!this.get('allowAllCanceled') && checked && this.getCheckedCount() === 1) {
        return;
      }
      var mode = this.get('selectedMode');
      var item = findItem(items, clickedItem);
      var itemclick = new Event('itemclick', ev, true, true);
      itemclick.item = item;
      itemclick.currentTarget = clickedItem;
      itemclick.checked = mode === 'single' ? true : !checked;

      var unCheckColor = this.get('unCheckColor');
      var checkColor = this.get('textStyle').fill;
      var markerItem = void 0;
      var textItem = void 0;
      var legendItem = void 0;
      if (mode === 'single') {
        var itemsGroup = this.get('itemsGroup');
        var children = itemsGroup.get('children');
        Util.each(children, function (child) {
          markerItem = findShapeByName(child, 'legend-marker');
          textItem = findShapeByName(child, 'legend-text');
          legendItem = findShapeByName(child, 'legend-item');
          if (child !== clickedItem) {
            if (markerItem.attr('fill')) {
              markerItem.attr('fill', unCheckColor);
            }
            if (markerItem.attr('stroke')) {
              markerItem.attr('stroke', unCheckColor);
            }
            textItem.attr('fill', unCheckColor);
            markerItem.setSilent('checked', false);
            textItem.setSilent('checked', false);
            legendItem.setSilent('checked', false);
            child.setSilent('checked', false);
          } else {
            if (markerItem.attr('fill')) {
              markerItem.attr('fill', item.marker.fill);
            }
            if (markerItem.attr('stroke')) {
              markerItem.attr('stroke', item.marker.stroke);
            }
            textItem.attr('fill', checkColor);
            markerItem.setSilent('checked', true);
            textItem.setSilent('checked', true);
            legendItem.setSilent('checked', true);
            child.setSilent('checked', true);
          }
        });
      } else {
        markerItem = findShapeByName(clickedItem, 'legend-marker');
        textItem = findShapeByName(clickedItem, 'legend-text');
        legendItem = findShapeByName(clickedItem, 'legend-item');

        if (markerItem.attr('fill')) {
          markerItem.attr('fill', checked ? unCheckColor : item.marker.fill);
        }
        if (markerItem.attr('stroke')) {
          markerItem.attr('stroke', checked ? unCheckColor : item.marker.stroke);
        }
        textItem.attr('fill', checked ? unCheckColor : checkColor);
        clickedItem.setSilent('checked', !checked);
        markerItem.setSilent('checked', !checked);
        textItem.setSilent('checked', !checked);
        legendItem.setSilent('checked', !checked);
      }
      this.emit('itemclick', itemclick);
    }
    return;
  };

  Category.prototype._renderHTML = function _renderHTML() {
    var _this2 = this;

    var self = this;
    var canvas = self.get('canvas');
    var outterNode = canvas.get('el').parentNode;
    var title = this.get('title');
    var containerTpl = self.get('containerTpl');
    var legendWrapper = DomUtil.createDom(containerTpl);
    var titleDom = findNodeByClass(legendWrapper, TITLE_CLASS);
    var itemListDom = findNodeByClass(legendWrapper, LIST_CLASS);
    var unCheckedColor = self.get('unCheckColor');
    var mode = self.get('selectedMode');

    DomUtil.modifyCSS(itemListDom, Util.mix({}, LEGEND_STYLE[LIST_CLASS], self.get(LIST_CLASS)));

    if (titleDom) {
      if (title && title.text) {
        titleDom.innerHTML = title.text;
        DomUtil.modifyCSS(titleDom, Util.mix({}, LEGEND_STYLE[TITLE_CLASS], self.get(TITLE_CLASS)));
      } else {
        legendWrapper.removeChild(titleDom);
      }
    }

    // 开始渲染图例项
    var items = self.get('items');
    var itemTpl = self.get('_defaultItemTpl');
    var userItemTpl = self.get('itemTpl');
    if (userItemTpl && userItemTpl !== itemTpl) {
      itemTpl = userItemTpl;
    }

    if (self.get('reversed')) {
      items.reverse();
    }

    var position = self.get('position');
    var itemStyle = Util.mix({}, LEGEND_STYLE[ITEM_CLASS], {
      display: position === 'right' || position === 'left' ? 'block' : 'inline-block'
    }, self.get(ITEM_CLASS));
    var markerStyle = Util.mix({}, LEGEND_STYLE[MARKER_CLASS], self.get(MARKER_CLASS));
    Util.each(items, function (item, index) {
      var checked = item.checked;
      var value = self._formatItemValue(item.value);
      var markerColor = item.marker.fill || item.marker.stroke;
      var color = checked ? markerColor : unCheckedColor;
      var domStr = void 0;
      if (Util.isFunction(itemTpl)) {
        domStr = itemTpl(value, color, checked, index);
      } else {
        domStr = itemTpl;
      }
      var itemDiv = Util.substitute(domStr, {
        index: index,
        checked: checked ? 'checked' : 'unChecked',
        value: value,
        color: color,
        originColor: markerColor,
        originValue: item.value
      });
      var itemDom = DomUtil.createDom(itemDiv);
      var markerDom = findNodeByClass(itemDom, MARKER_CLASS);
      DomUtil.modifyCSS(itemDom, itemStyle);
      markerDom && DomUtil.modifyCSS(markerDom, markerStyle);

      if (!checked) {
        itemDom.style.color = unCheckedColor;
        if (markerDom) {
          markerDom.style.backgroundColor = unCheckedColor;
        }
      }
      itemListDom.appendChild(itemDom);
    });

    if (self.get('clickable')) {
      var childNodes = itemListDom.childNodes;
      // 注册事件
      legendWrapper.onclick = function (ev) {
        var target = ev.target;
        var targetClass = target.className;
        targetClass = targetClass.split(' ');
        if (targetClass.indexOf(CONTAINER_CLASS) > -1 || targetClass.indexOf(LIST_CLASS) > -1) {
          return;
        }
        var parentDom = getParentNode(target, ITEM_CLASS);
        var textDom = findNodeByClass(parentDom, TEXT_CLASS);
        var markerDom = findNodeByClass(parentDom, MARKER_CLASS);
        var clickedItem = findItem(items, parentDom.getAttribute('data-value'));

        if (!clickedItem) {
          return;
        }
        // update checked status
        clickedItem.checked = mode === 'single' ? true : !clickedItem.checked;
        var domClass = parentDom.className;
        var originColor = parentDom.getAttribute('data-color');
        if (mode === 'single') {
          // 单选模式
          // 其他图例项全部置灰
          Util.each(childNodes, function (child) {
            if (child !== parentDom) {
              var childMarkerDom = findNodeByClass(child, MARKER_CLASS);
              childMarkerDom.style.backgroundColor = unCheckedColor;
              child.className = Util.replace(child.className, 'checked', 'unChecked');
              child.style.color = unCheckedColor;

              var childItem = findItem(items, child.getAttribute('data-value'));
              childItem.checked = false;
            } else {
              if (textDom) {
                textDom.style.color = self.get('textStyle').fill;
              }
              if (markerDom) {
                markerDom.style.backgroundColor = originColor;
              }
              parentDom.className = Util.replace(domClass, 'unChecked', 'checked');
            }
          });
        } else {
          // 混合模式
          var clickedItemChecked = domClass.includes('checked');
          var count = 0;
          Util.each(childNodes, function (child) {
            if (child.className.includes('checked')) {
              count++;
            }
          });
          if (!_this2.get('allowAllCanceled') && clickedItemChecked && count === 1) {
            return;
          }
          if (clickedItemChecked) {
            if (markerDom) {
              markerDom.style.backgroundColor = unCheckedColor;
            }
            parentDom.className = Util.replace(domClass, 'checked', 'unChecked');
            parentDom.style.color = unCheckedColor;
          } else {
            if (markerDom) {
              markerDom.style.backgroundColor = originColor;
            }
            parentDom.className = Util.replace(domClass, 'unChecked', 'checked');
            parentDom.style.color = self.get('textStyle').fill;
          }
        }

        self.emit('itemclick', {
          item: clickedItem,
          currentTarget: parentDom,
          checked: mode === 'single' ? true : clickedItem.checked
        });
      };
    }
    if (self.get('hoverable')) {
      legendWrapper.onmousemove = function (ev) {
        var target = ev.target;
        var targetClass = target.className;
        targetClass = targetClass.split(' ');
        if (targetClass.indexOf(CONTAINER_CLASS) > -1 || targetClass.indexOf(LIST_CLASS) > -1) {
          return;
        }
        var parentDom = getParentNode(target, ITEM_CLASS);
        var domClass = parentDom.className;
        var hoveredItem = findItem(items, parentDom.getAttribute('data-value'));
        if (hoveredItem && domClass.includes('checked')) {
          self.emit('itemhover', {
            item: hoveredItem,
            currentTarget: parentDom,
            checked: hoveredItem.checked
          });
        } else if (!hoveredItem) {
          self.emit('itemunhover', ev);
        }
      };

      legendWrapper.onmouseout = function (ev) {
        self.emit('itemunhover', ev);
      };
    }

    var container = self.get('container');
    if (/^\#/.test(container)) {
      // 如果传入 dom 节点的 id
      var id = container.replace('#', '');
      container = document.getElementById(id);
      // container.style.position = 'relative';
      container.appendChild(legendWrapper);
    } else {
      var _position = self.get('position');
      var _canvas = self.get('canvas');
      var rangeStyle = {};
      if (_position === 'left' || _position === 'right') {
        rangeStyle = {
          maxHeight: (self.get('maxLength') || _canvas.get('height')) + 'px'
        };
      } else {
        rangeStyle = {
          maxWidth: (self.get('maxLength') || _canvas.get('width')) + 'px'
        };
      }

      DomUtil.modifyCSS(legendWrapper, Util.mix({}, LEGEND_STYLE[CONTAINER_CLASS], rangeStyle, self.get(CONTAINER_CLASS)));
      outterNode.appendChild(legendWrapper);
    }
    self.set('legendWrapper', legendWrapper);
  };

  Category.prototype._renderItems = function _renderItems() {
    var self = this;
    var items = self.get('items');
    if (self.get('reversed')) {
      items.reverse();
    }
    Util.each(items, function (item, index) {
      self._addItem(item, index);
    });
  };

  Category.prototype._renderBack = function _renderBack() {
    var padding = this.get('backPadding');
    var backAttrs = this.get('background');
    this.renderBack(padding, backAttrs);
  };

  Category.prototype._formatItemValue = function _formatItemValue(value) {
    var formatter = this.get('itemFormatter');
    if (formatter) {
      value = formatter.call(this, value);
    }
    return value;
  };

  Category.prototype._getNextX = function _getNextX() {
    var layout = this.get('layout');
    var itemGap = this.get('itemGap');
    var itemsGroup = this.get('itemsGroup');
    var itemWidth = this.get('itemWidth');
    var children = itemsGroup.get('children');
    var nextX = 0;

    if (layout === 'horizontal') {
      // 水平布局
      Util.each(children, function (v) {
        nextX += (itemWidth ? itemWidth : v.getBBox().width) + itemGap;
      });
    }
    return nextX;
  };

  Category.prototype._getNextY = function _getNextY() {
    var itemMarginBottom = this.get('itemMarginBottom');
    var titleGap = this.get('titleShape') ? this.get('titleGap') : 0;
    var layout = this.get('layout');
    var itemsGroup = this.get('itemsGroup');
    var titleShape = this.get('titleShape');
    var children = itemsGroup.get('children');
    var nextY = titleGap;
    if (titleShape) {
      nextY += titleShape.getBBox().height;
    }

    if (layout === 'vertical') {
      // 竖直布局
      Util.each(children, function (v) {
        nextY += v.getBBox().height + itemMarginBottom;
      });
    }
    return nextY;
  };

  Category.prototype._addItem = function _addItem(item) {
    var itemsGroup = this.get('itemsGroup');
    var x = this._getNextX();
    var y = this._getNextY();
    var unCheckColor = this.get('unCheckColor');
    var itemGroup = itemsGroup.addGroup({
      x: x,
      y: y,
      value: item.value,
      checked: item.checked
    });

    var textStyle = this.get('textStyle');
    var wordSpace = this.get('_wordSpaceing');
    var startX = 0;

    if (item.marker) {
      // 如果有marker添加marker
      var markerAttrs = Util.mix({}, item.marker, {
        x: item.marker.radius + x,
        y: y
      });

      if (!item.checked) {
        if (markerAttrs.fill) {
          markerAttrs.fill = unCheckColor;
        }
        if (markerAttrs.stroke) {
          markerAttrs.stroke = unCheckColor;
        }
      }

      var markerShape = itemGroup.addShape('marker', {
        type: 'marker',
        attrs: markerAttrs
      });
      markerShape.attr('cursor', 'pointer');
      markerShape.name = 'legend-marker';
      startX += markerShape.getBBox().width + wordSpace;
    }

    var textAttrs = Util.mix({}, textStyle, {
      x: startX + x,
      y: y,
      text: this._formatItemValue(item.value)
    });
    if (!item.checked) {
      Util.mix(textAttrs, {
        fill: unCheckColor
      });
    }

    var textShape = itemGroup.addShape('text', {
      attrs: textAttrs
    });
    textShape.attr('cursor', 'pointer');
    textShape.name = 'legend-text';
    this.get('appendInfo') && textShape.setSilent('appendInfo', this.get('appendInfo'));

    // 添加一个包围矩形，用于事件支持
    var bbox = itemGroup.getBBox();
    var itemWidth = this.get('itemWidth');
    var wrapperShape = itemGroup.addShape('rect', {
      attrs: {
        x: x,
        y: y - bbox.height / 2,
        fill: '#fff',
        fillOpacity: 0,
        width: itemWidth || bbox.width,
        height: bbox.height
      }
    });
    wrapperShape.attr('cursor', 'pointer');
    wrapperShape.setSilent('origin', item); // 保存图例项相关的数据，便于事件操作
    wrapperShape.name = 'legend-item';
    this.get('appendInfo') && wrapperShape.setSilent('appendInfo', this.get('appendInfo'));
    itemGroup.name = 'legendGroup';
    return itemGroup;
  };

  Category.prototype._adjustHorizontal = function _adjustHorizontal() {
    var itemsGroup = this.get('itemsGroup');
    var children = itemsGroup.get('children');
    var maxLength = this.get('maxLength');
    var itemGap = this.get('itemGap');
    var itemMarginBottom = this.get('itemMarginBottom');
    var titleGap = this.get('titleShape') ? this.get('titleGap') : 0;
    var row = 0;
    var rowLength = 0;
    var width = void 0;
    var height = void 0;
    var box = void 0;
    var itemWidth = this.get('itemWidth');
    if (itemsGroup.getBBox().width > maxLength) {
      Util.each(children, function (child) {
        box = child.getBBox();
        width = itemWidth || box.width;
        height = box.height + itemMarginBottom;

        if (maxLength - rowLength < width) {
          row++;
          rowLength = 0;
        }
        child.move(rowLength, row * height + titleGap);
        rowLength += width + itemGap;
      });
    }
    return;
  };

  Category.prototype._adjustVertical = function _adjustVertical() {
    var itemsGroup = this.get('itemsGroup');
    var titleShape = this.get('titleShape');
    var children = itemsGroup.get('children');
    var maxLength = this.get('maxLength'); // 垂直布局，则 maxLength 代表容器的高度
    var itemGap = this.get('itemGap');
    var itemMarginBottom = this.get('itemMarginBottom');
    var titleGap = this.get('titleGap');
    var titleHeight = titleShape ? titleShape.getBBox().height + titleGap : 0;
    var itemWidth = this.get('itemWidth');
    var colLength = titleHeight;
    var width = void 0;
    var height = void 0;
    var box = void 0;
    var maxItemWidth = 0;
    var totalLength = 0;

    if (itemsGroup.getBBox().height > maxLength) {
      Util.each(children, function (v) {
        box = v.getBBox();
        width = box.width;
        height = box.height;

        if (itemWidth) {
          maxItemWidth = itemWidth + itemGap;
        } else if (width > maxItemWidth) {
          maxItemWidth = width + itemGap;
        }

        if (maxLength - colLength < height) {
          colLength = titleHeight;
          totalLength += maxItemWidth;
          v.move(totalLength, titleHeight);
        } else {
          v.move(totalLength, colLength);
        }

        colLength += height + itemMarginBottom;
      });
    }
    return;
  };

  Category.prototype._adjustItems = function _adjustItems() {
    var layout = this.get('layout');
    if (layout === 'horizontal') {
      this._adjustHorizontal();
    } else {
      this._adjustVertical();
    }
  };

  Category.prototype.getWidth = function getWidth() {
    if (this.get('useHtml')) {
      return DomUtil.getOuterWidth(this.get('legendWrapper'));
    }
    return _Base.prototype.getWidth.call(this);
  };

  Category.prototype.getHeight = function getHeight() {
    if (this.get('useHtml')) {
      return DomUtil.getOuterHeight(this.get('legendWrapper'));
    }

    return _Base.prototype.getHeight.call(this);
  };

  Category.prototype.move = function move(x, y) {
    if (this.get('useHtml') && !/^\#/.test(this.get('container'))) {
      DomUtil.modifyCSS(this.get('legendWrapper'), {
        left: x + 'px',
        top: y + 'px'
      });
    } else {
      _Base.prototype.move.call(this, x, y);
    }
  };

  Category.prototype.remove = function remove() {
    if (this.get('useHtml')) {
      // 移除元素
      var legendWrapper = this.get('legendWrapper');
      if (legendWrapper && legendWrapper.parentNode) {
        legendWrapper.parentNode.removeChild(legendWrapper);
      }
    }
    _Base.prototype.remove.call(this); // must be called
  };

  return Category;
}(Base);

module.exports = Category;

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview The class of the gradient color legend
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Continuous = __webpack_require__(122);
var ColorUtil = __webpack_require__(64); // TODO： 这个 Util 是否可换个位置

var Color = function (_Continuous) {
  _inherits(Color, _Continuous);

  function Color() {
    _classCallCheck(this, Color);

    return _possibleConstructorReturn(this, _Continuous.apply(this, arguments));
  }

  Color.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Continuous.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      /**
       * 类型
       * @type {String}
       */
      type: 'color-legend',
      /**
       * 布局方式
       * horizontal 水平
       * vertical 垂直
       * @type {String}
       */
      layout: 'vertical',
      labelOffset: 15,
      lineStyle: {
        lineWidth: 1,
        stroke: '#fff'
      }
    });
  };

  Color.prototype._renderSliderShape = function _renderSliderShape() {
    var slider = this.get('slider');
    var backgroundElement = slider.get('backgroundElement');
    var width = this.get('width');
    var height = this.get('height');
    var layout = this.get('layout');
    var items = this.get('items');
    var fill = '';
    var rgbColor = void 0;

    if (layout === 'vertical') {
      fill += 'l (90) ';
      Util.each(items, function (v) {
        rgbColor = ColorUtil.toRGB(v.attrValue);
        fill += 1 - v.scaleValue + ':' + rgbColor + ' ';
      });
    } else {
      fill += 'l (0) ';
      Util.each(items, function (v) {
        rgbColor = ColorUtil.toRGB(v.attrValue);
        fill += v.scaleValue + ':' + rgbColor + ' ';
      });
    }
    return this._addBackground(backgroundElement, 'Rect', {
      x: 0,
      y: 0,
      width: width,
      height: height,
      fill: fill,
      strokeOpacity: 0
    });
  };

  Color.prototype._renderBackground = function _renderBackground() {
    var self = this;
    var titleShape = this.get('titleShape');
    var titleGap = this.get('titleGap');
    titleGap = titleShape ? titleShape.getBBox().height + titleGap : titleGap;
    var width = this.get('width');
    var height = this.get('height');
    var layout = this.get('layout');
    var items = this.get('items');
    var fill = '';
    var rgbColor = void 0;

    var path = [];
    var bgGroup = this.addGroup();

    if (layout === 'vertical') {
      fill += 'l (90) ';
      Util.each(items, function (v, index) {
        if (index !== 0 && index !== items.length - 1) {
          path.push(['M', 0, height - v.scaleValue * height]);
          path.push(['L', width, height - v.scaleValue * height]);
        }

        rgbColor = ColorUtil.toRGB(v.attrValue);
        fill += 1 - v.scaleValue + ':' + rgbColor + ' ';
        bgGroup.addShape('text', {
          attrs: Util.mix({}, {
            x: width + self.get('labelOffset') / 2,
            y: height - v.scaleValue * height,
            text: self._formatItemValue(v.value) + '' // 以字符串格式展示
          }, self.get('textStyle'), {
            textAlign: 'start'
          })
        });
      });
    } else {
      fill += 'l (0) ';
      Util.each(items, function (v, index) {
        if (index !== 0 && index !== items.length - 1) {
          path.push(['M', v.scaleValue * width, 0]);
          path.push(['L', v.scaleValue * width, height]);
        }
        rgbColor = ColorUtil.toRGB(v.attrValue);
        fill += v.scaleValue + ':' + rgbColor + ' ';
        bgGroup.addShape('text', {
          attrs: Util.mix({}, {
            x: v.scaleValue * width,
            y: height + self.get('labelOffset'),
            text: self._formatItemValue(v.value) + '' // 以字符串格式展示
          }, self.get('textStyle'))
        });
      });
    }
    bgGroup.addShape('rect', {
      attrs: {
        x: 0,
        y: 0,
        width: width,
        height: height,
        fill: fill,
        strokeOpacity: 0
      }
    });

    bgGroup.addShape('path', {
      attrs: Util.mix({
        path: path
      }, this.get('lineStyle'))
    });

    bgGroup.move(0, titleGap);
  };

  return Color;
}(Continuous);

module.exports = Color;

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview The class of slider
 * @author sima.zhang
 */
var Util = __webpack_require__(0);

var _require = __webpack_require__(2),
    Group = _require.Group,
    DomUtil = _require.DomUtil;

var Slider = function (_Group) {
  _inherits(Slider, _Group);

  function Slider() {
    _classCallCheck(this, Slider);

    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
  }

  Slider.prototype.getDefaultCfg = function getDefaultCfg() {
    return {
      /**
       * 范围
       * @type {Array}
       */
      range: null,
      /**
       * 中滑块属性
       * @type {ATTRS}
       */
      middleAttr: null,
      /**
       * 背景
       * @type {G-Element}
       */
      backgroundElement: null,
      /**
       * 下滑块
       * @type {G-Element}
       */
      minHandleElement: null,
      /**
       * 上滑块
       * @type {G-Element}
       */
      maxHandleElement: null,
      /**
       * 中块
       * @type {G-Element}
       */
      middleHandleElement: null,
      /**
       * 当前的激活的元素
       * @type {G-Element}
       */
      currentTarget: null,
      /**
       * 布局方式： horizontal，vertical
       * @type {String}
       */
      layout: 'vertical',
      /**
       * 宽
       * @type {Number}
       */
      width: null,
      /**
       * 高
       * @type {Number}
       */
      height: null,
      /**
       * 当前的PageX
       * @type {Number}
       */
      pageX: null,
      /**
       * 当前的PageY
       * @type {Number}
       */
      pageY: null
    };
  };

  Slider.prototype._beforeRenderUI = function _beforeRenderUI() {
    var layout = this.get('layout');
    var backgroundElement = this.get('backgroundElement');
    var minHandleElement = this.get('minHandleElement');
    var maxHandleElement = this.get('maxHandleElement');
    var middleHandleElement = this.addShape('rect', {
      attrs: this.get('middleAttr')
    });
    var trigerCursor = layout === 'vertical' ? 'ns-resize' : 'ew-resize';

    this.add([backgroundElement, minHandleElement, maxHandleElement]);
    this.set('middleHandleElement', middleHandleElement);
    backgroundElement.set('zIndex', 0);
    middleHandleElement.set('zIndex', 1);
    minHandleElement.set('zIndex', 2);
    maxHandleElement.set('zIndex', 2);
    middleHandleElement.attr('cursor', 'move');
    minHandleElement.attr('cursor', trigerCursor);
    maxHandleElement.attr('cursor', trigerCursor);
    this.sort();
  };

  Slider.prototype._renderUI = function _renderUI() {
    if (this.get('layout') === 'horizontal') {
      this._renderHorizontal();
    } else {
      this._renderVertical();
    }
  };

  Slider.prototype._transform = function _transform(layout) {
    var range = this.get('range');
    var minRatio = range[0] / 100;
    var maxRatio = range[1] / 100;
    var width = this.get('width');
    var height = this.get('height');
    var minHandleElement = this.get('minHandleElement');
    var maxHandleElement = this.get('maxHandleElement');
    var middleHandleElement = this.get('middleHandleElement');

    minHandleElement.initTransform();
    maxHandleElement.initTransform();

    if (layout === 'horizontal') {
      middleHandleElement.attr({
        x: width * minRatio,
        y: 0,
        width: (maxRatio - minRatio) * width,
        height: height
      });
      minHandleElement.translate(minRatio * width, height);
      maxHandleElement.translate(maxRatio * width, height);
    } else {
      middleHandleElement.attr({
        x: 0,
        y: height * (1 - maxRatio),
        width: width,
        height: (maxRatio - minRatio) * height
      });
      minHandleElement.translate(width / 2, (1 - minRatio) * height);
      maxHandleElement.translate(width / 2, (1 - maxRatio) * height);
    }
  };

  Slider.prototype._renderHorizontal = function _renderHorizontal() {
    this._transform('horizontal');
  };

  Slider.prototype._renderVertical = function _renderVertical() {
    this._transform('vertical');
  };

  Slider.prototype._bindUI = function _bindUI() {
    this.on('mousedown', Util.wrapBehavior(this, '_onMouseDown'));
  };

  Slider.prototype._isElement = function _isElement(target, name) {
    // 判断是否是该元素
    var element = this.get(name);
    if (target === element) {
      return true;
    }
    if (element.isGroup) {
      var elementChildren = element.get('children');
      return elementChildren.indexOf(target) > -1;
    }
    return false;
  };

  Slider.prototype._getRange = function _getRange(diff, range) {
    var rst = diff + range;
    rst = rst > 100 ? 100 : rst;
    rst = rst < 0 ? 0 : rst;
    return rst;
  };

  Slider.prototype._updateStatus = function _updateStatus(dim, ev) {
    var totalLength = dim === 'x' ? this.get('width') : this.get('height');
    dim = Util.upperFirst(dim);
    var range = this.get('range');
    var page = this.get('page' + dim);
    var currentTarget = this.get('currentTarget');
    var rangeStash = this.get('rangeStash');
    var layout = this.get('layout');
    var sign = layout === 'vertical' ? -1 : 1;
    var currentPage = ev['page' + dim];
    var diffPage = currentPage - page;
    var diffRange = diffPage / totalLength * 100 * sign;
    var diffStashRange = void 0;

    if (range[1] <= range[0]) {
      if (this._isElement(currentTarget, 'minHandleElement') || this._isElement(currentTarget, 'maxHandleElement')) {
        range[0] = this._getRange(diffRange, range[0]);
        range[1] = this._getRange(diffRange, range[0]);
      }
    } else {
      if (this._isElement(currentTarget, 'minHandleElement')) {
        range[0] = this._getRange(diffRange, range[0]);
      }
      if (this._isElement(currentTarget, 'maxHandleElement')) {
        range[1] = this._getRange(diffRange, range[1]);
      }
    }

    if (this._isElement(currentTarget, 'middleHandleElement')) {
      diffStashRange = rangeStash[1] - rangeStash[0];
      range[0] = this._getRange(diffRange, range[0]);
      range[1] = range[0] + diffStashRange;
      if (range[1] > 100) {
        range[1] = 100;
        range[0] = range[1] - diffStashRange;
      }
    }

    this.emit('sliderchange', {
      range: range
    });

    this.set('page' + dim, currentPage);
    this._renderUI();
    this.get('canvas').draw(); // need delete
    return;
  };

  Slider.prototype._onMouseDown = function _onMouseDown(ev) {
    var currentTarget = ev.currentTarget;
    var originEvent = ev.event;
    var range = this.get('range');
    originEvent.stopPropagation();
    originEvent.preventDefault();
    this.set('pageX', originEvent.pageX);
    this.set('pageY', originEvent.pageY);
    this.set('currentTarget', currentTarget);
    this.set('rangeStash', [range[0], range[1]]);
    this._bindCanvasEvents();
  };

  Slider.prototype._bindCanvasEvents = function _bindCanvasEvents() {
    var containerDOM = this.get('canvas').get('containerDOM');
    this.onMouseMoveListener = DomUtil.addEventListener(containerDOM, 'mousemove', Util.wrapBehavior(this, '_onCanvasMouseMove'));
    this.onMouseUpListener = DomUtil.addEventListener(containerDOM, 'mouseup', Util.wrapBehavior(this, '_onCanvasMouseUp'));
  };

  Slider.prototype._onCanvasMouseMove = function _onCanvasMouseMove(ev) {
    var layout = this.get('layout');
    if (layout === 'horizontal') {
      this._updateStatus('x', ev);
    } else {
      this._updateStatus('y', ev);
    }
  };

  Slider.prototype._onCanvasMouseUp = function _onCanvasMouseUp() {
    this._removeDocumentEvents();
  };

  Slider.prototype._removeDocumentEvents = function _removeDocumentEvents() {
    this.onMouseMoveListener.remove();
    this.onMouseUpListener.remove();
  };

  return Slider;
}(Group);

module.exports = Slider;

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview The class of the size legend
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Global = __webpack_require__(1);
var Continuous = __webpack_require__(122);
var CIRCLE_GAP = 8;

var Size = function (_Continuous) {
  _inherits(Size, _Continuous);

  function Size() {
    _classCallCheck(this, Size);

    return _possibleConstructorReturn(this, _Continuous.apply(this, arguments));
  }

  Size.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Continuous.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      /**
       * 类型
       * @type {String}
       */
      type: 'size-legend',
      width: 100,
      height: 200,
      _circleStyle: {
        stroke: '#4E7CCC',
        fill: '#fff',
        fillOpacity: 0
      },
      textStyle: {
        fill: '#333',
        textAlign: 'start',
        textBaseline: 'middle',
        fontFamily: Global.fontFamily
      }
    });
  };

  Size.prototype._renderSliderShape = function _renderSliderShape() {
    var slider = this.get('slider');
    var backgroundElement = slider.get('backgroundElement');
    var width = this.get('width');
    var height = this.get('height');
    var inRange = this.get('inRange');
    var layout = this.get('layout');
    var points = layout === 'vertical' ? [[0, 0], [width, 0], [width, height]] : [[0, height], [width, 0], [width, height]];

    return this._addBackground(backgroundElement, 'Polygon', Util.mix({
      points: points
    }, inRange));
  };

  Size.prototype._addCircle = function _addCircle(x, y, r, text, maxWidth) {
    var group = this.addGroup();
    var circleStyle = this.get('_circleStyle');
    var textStyle = this.get('textStyle');
    var titleShape = this.get('titleShape');
    var titleGap = this.get('titleGap');
    if (titleShape) {
      titleGap += titleShape.getBBox().height;
    }

    group.addShape('circle', {
      attrs: Util.mix({
        x: x,
        y: y + titleGap,
        r: r === 0 ? 1 : r
      }, circleStyle)
    });
    group.addShape('text', {
      attrs: Util.mix({
        x: maxWidth + 5,
        y: y + titleGap,
        text: text === 0 ? '0' : text
      }, textStyle)
    });
  };

  Size.prototype._renderBackground = function _renderBackground() {
    var self = this;
    var minRadius = this.get('firstItem').attrValue * 1;
    var maxRadius = this.get('lastItem').attrValue * 1;
    var medianRadius = (minRadius + maxRadius) / 2;
    self._addCircle(maxRadius, maxRadius, maxRadius, medianRadius, 2 * maxRadius);
    self._addCircle(maxRadius, maxRadius * 2 + CIRCLE_GAP + medianRadius, medianRadius, (minRadius + medianRadius) / 2, 2 * maxRadius);
    self._addCircle(maxRadius, (maxRadius + CIRCLE_GAP + medianRadius) * 2 + minRadius, minRadius, minRadius, 2 * maxRadius);
  };

  return Size;
}(Continuous);

module.exports = Size;

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview The class of canvas plot
 * @author sima.zhang
 */
var Util = __webpack_require__(0);

var _require = __webpack_require__(2),
    Group = _require.Group;

var PlotBack = function (_Group) {
  _inherits(PlotBack, _Group);

  function PlotBack() {
    _classCallCheck(this, PlotBack);

    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
  }

  PlotBack.prototype.getDefaultCfg = function getDefaultCfg() {
    return {
      /**
       * 类型
       * @type {String}
       */
      type: 'plotBack',
      /**
       * 画布边距
       * @type {Number | Array | Object | "auto"}
       */
      padding: null,
      /**
       * 大背景
       * @type {Object}
       */
      background: null,
      /**
       * 绘图区域范围
       * @type {Object}
       */
      plotRange: null,
      /**
       * 绘图区域背景
       * @type {Object}
       */
      plotBackground: null
    };
  };

  PlotBack.prototype._beforeRenderUI = function _beforeRenderUI() {
    this._calculateRange();
  };

  PlotBack.prototype._renderUI = function _renderUI() {
    this._renderBackground();
    this._renderPlotBackground();
  };

  PlotBack.prototype._renderBackground = function _renderBackground() {
    var self = this;
    var background = self.get('background');
    if (background) {
      var canvas = this.get('canvas');
      var width = self.get('width') || canvas.get('width');
      var height = self.get('height') || canvas.get('height');
      var cfg = {
        x: 0,
        y: 0,
        width: width,
        height: height
      };

      var rect = self.get('backgroundShape');
      if (!rect) {
        rect = this.addShape('rect', {
          attrs: Util.mix(cfg, background)
        });
        this.set('backgroundShape', rect);
      } else {
        rect.attr(cfg);
      }
    } else {
      return;
    }
  };

  PlotBack.prototype._renderPlotBackground = function _renderPlotBackground() {
    var self = this;
    var plotBackground = self.get('plotBackground');
    if (plotBackground) {
      var plotRange = self.get('plotRange');
      var width = plotRange.br.x - plotRange.bl.x;
      var height = plotRange.br.y - plotRange.tr.y;
      var tl = plotRange.tl;
      var cfg = {
        x: tl.x,
        y: tl.y,
        width: width,
        height: height
      };
      var plotBackShape = self.get('plotBackShape');
      if (!plotBackShape) {
        if (plotBackground.image) {
          cfg.img = plotBackground.image;
          plotBackShape = self.addShape('image', {
            attrs: cfg
          });
        } else {
          // 矩形
          Util.mix(cfg, plotBackground);
          plotBackShape = self.addShape('rect', {
            attrs: cfg
          });
        }
        self.set('plotBackShape', plotBackShape);
      } else {
        plotBackShape.attr(cfg);
      }
    } else {
      return;
    }
  };

  PlotBack.prototype._convert = function _convert(val, isHorizontal) {
    if (Util.isString(val) && val.indexOf('%') !== -1) {
      var canvas = this.get('canvas');
      var width = this.get('width') || canvas.get('width');
      var height = this.get('height') || canvas.get('height');
      val = parseInt(val, 10) / 100;
      val = isHorizontal ? val * width : val * height;
    }

    return val;
  };

  PlotBack.prototype._calculateRange = function _calculateRange() {
    var self = this;
    var plotRange = self.get('plotRange');
    if (Util.isNil(plotRange)) {
      plotRange = {};
    }

    var padding = self.get('padding');
    var canvas = this.get('canvas');
    var width = self.get('width') || canvas.get('width');
    var height = self.get('height') || canvas.get('height');

    var allPadding = Util.toAllPadding(padding);

    var top = self._convert(allPadding[0], false);
    var right = self._convert(allPadding[1], true);
    var bottom = self._convert(allPadding[2], false);
    var left = self._convert(allPadding[3], true);

    var minX = Math.min(left, width - right);
    var maxX = Math.max(left, width - right);
    var minY = Math.min(height - bottom, top);
    var maxY = Math.max(height - bottom, top);

    plotRange.tl = {
      x: minX,
      y: minY
    }; // top-left

    plotRange.tr = {
      x: maxX,
      y: minY
    }; // top-right

    plotRange.bl = {
      x: minX,
      y: maxY
    }; // bottom-left

    plotRange.br = {
      x: maxX,
      y: maxY
    }; // bottom-right

    plotRange.cc = {
      x: (maxX + minX) / 2,
      y: (maxY + minY) / 2
    };

    this.set('plotRange', plotRange);
  };

  PlotBack.prototype.repaint = function repaint() {
    this._calculateRange();
    this._renderBackground();
    this._renderPlotBackground();
    return this;
  };

  return PlotBack;
}(Group);

module.exports = PlotBack;

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview The class of tooltip
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Base = __webpack_require__(63);
var Global = __webpack_require__(1);

var _require = __webpack_require__(2),
    DomUtil = _require.DomUtil;

var CONTAINER_CLASS = 'g2-tooltip';
var TITLE_CLASS = 'g2-tooltip-title';
var LIST_CLASS = 'g2-tooltip-list';
var MARKER_CLASS = 'g2-tooltip-marker';
var LIST_ITEM_CLASS = 'g2-tooltip-list-item';

function find(dom, cls) {
  return dom.getElementsByClassName(cls)[0];
}

function refixTooltipPosition(x, y, el, viewWidth, viewHeight) {
  var width = el.clientWidth;
  var height = el.clientHeight;
  var gap = 20;

  if (x + width + gap > viewWidth) {
    x -= width + gap;
    x = x < 0 ? 0 : x;
  } else {
    x += gap;
  }
  if (y + height + gap > viewHeight) {
    y -= height + gap;
    y = x < 0 ? 0 : y;
  } else {
    y += gap;
  }
  return [x, y];
}

function calcTooltipPosition(x, y, position, dom, target) {
  var domWidth = dom.clientWidth;
  var domHeight = dom.clientHeight;
  var rectWidth = 0;
  var rectHeight = 0;
  var gap = 20;

  if (target) {
    var rect = target.getBBox();
    rectWidth = rect.width;
    rectHeight = rect.height;
    x = rect.x;
    y = rect.y;
    gap = 5;
  }
  switch (position) {
    case 'inside':
      x = x + rectWidth / 2 - domWidth / 2;
      y = y + rectHeight / 2 - domHeight / 2;
      break;
    case 'top':
      x = x + rectWidth / 2 - domWidth / 2;
      y = y - domHeight - gap;
      break;
    case 'left':
      x = x - domWidth - gap;
      y = y + rectHeight / 2 - domHeight / 2;
      break;
    case 'right':
      x = x + rectWidth + gap;
      y = y + rectHeight / 2 - domHeight / 2;
      break;
    case 'bottom':
    default:
      x = x + rectWidth / 2 - domWidth / 2;
      y = y + rectHeight + gap;
      break;
  }
  return [x, y];
}

function confineTooltipPosition(x, y, el, plotRange) {
  var gap = 20;
  var width = el.clientWidth;
  var height = el.clientHeight;
  if (x + width > plotRange.tr.x) {
    x -= width + 2 * gap;
  }

  if (x < plotRange.tl.x) {
    x = plotRange.tl.x;
  }

  if (y + height > plotRange.bl.y) {
    y -= height + 2 * gap;
  }

  if (y < plotRange.tl.y) {
    y = plotRange.tl.y;
  }

  return [x, y];
}

var Tooltip = function (_Base) {
  _inherits(Tooltip, _Base);

  Tooltip.prototype.getDefaultCfg = function getDefaultCfg() {
    return {
      /**
       * 右下角坐标
       * @type {Number}
       */
      x: 0,
      /**
       * y 右下角坐标
       * @type {Number}
       */
      y: 0,
      /**
       * tooltip 记录项
       * @type {Array}
       */
      items: null,
      /**
       * 是否展示 title
       * @type {Boolean}
       */
      showTitle: true,
      /**
       * tooltip 辅助线配置
       * @type {Object}
       */
      crosshairs: null,
      /**
       * 视图范围
       * @type {Object}
       */
      plotRange: null,
      /**
       * x轴上，移动到位置的偏移量
       * @type {Number}
       */
      offset: 10,
      /**
       * 时间戳
       * @type {Number}
       */
      timeStamp: 0,
      /**
       * tooltip 容器模板
       * @type {String}
       */
      containerTpl: '<div class="' + CONTAINER_CLASS + '">' + '<div class="' + TITLE_CLASS + '"></div>' + '<ul class="' + LIST_CLASS + '"></ul>' + '</div>',
      /**
       * tooltip 列表项模板
       * @type {String}
       */
      itemTpl: '<li data-index={index}>' + '<span style="background-color:{color};" class=' + MARKER_CLASS + '></span>' + '{name}: {value}</li>',
      /**
       * 将 tooltip 展示在指定区域内
       * @type {Boolean}
       */
      inPlot: true,
      /**
       * tooltip 内容跟随鼠标移动
       * @type {Boolean}
       */
      follow: true,
      /**
       * 是否允许鼠标停留在 tooltip 上，默认不允许
       * @type {Boolean}
       */
      enterable: false
    };
  };

  Tooltip.prototype._initTooltipWrapper = function _initTooltipWrapper() {
    var self = this;
    var containerTpl = self.get('containerTpl');
    var outterNode = self.get('canvas').get('el').parentNode;
    var container = void 0;
    if (/^\#/.test(containerTpl)) {
      // 如果传入 dom 节点的 id
      var id = containerTpl.replace('#', '');
      container = document.getElementById(id);
    } else {
      container = DomUtil.createDom(containerTpl);
      DomUtil.modifyCSS(container, self.get(CONTAINER_CLASS));
      outterNode.appendChild(container);
      outterNode.style.position = 'relative';
    }
    self.set('container', container);
  };

  Tooltip.prototype._init = function _init() {
    var crosshairs = this.get('crosshairs');
    var frontPlot = this.get('frontPlot');
    var backPlot = this.get('backPlot');
    var crosshairsGroup = void 0;

    if (crosshairs) {
      if (crosshairs.type === 'rect') {
        this.set('crosshairs', Util.deepMix({}, Global.tooltipCrosshairsRect, crosshairs));
        crosshairsGroup = backPlot.addGroup({
          zIndex: 0
        });
      } else {
        this.set('crosshairs', Util.deepMix({}, Global.tooltipCrosshairsLine, crosshairs));
        crosshairsGroup = frontPlot.addGroup();
      }
    }

    this.set('crosshairsGroup', crosshairsGroup);
    this._initTooltipWrapper();
  };

  function Tooltip(cfg) {
    _classCallCheck(this, Tooltip);

    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

    _this._init(); // 初始化属性

    if (_this.get('items')) {
      _this._renderTooltip();
    }
    _this._renderCrosshairs();
    return _this;
  }

  Tooltip.prototype._clearDom = function _clearDom() {
    var container = this.get('container');
    var titleDom = find(container, TITLE_CLASS);
    var listDom = find(container, LIST_CLASS);
    if (titleDom) {
      titleDom.innerHTML = '';
    }
    if (listDom) {
      listDom.innerHTML = '';
    }
  };

  Tooltip.prototype._addItem = function _addItem(item, index) {
    var itemTpl = this.get('itemTpl'); // TODO: 有可能是个回调函数

    var itemDiv = Util.substitute(itemTpl, Util.mix({
      index: index
    }, item));

    var itemDOM = DomUtil.createDom(itemDiv);
    DomUtil.modifyCSS(itemDOM, this.get(LIST_ITEM_CLASS));
    var markerDom = find(itemDOM, MARKER_CLASS);
    if (markerDom) {
      DomUtil.modifyCSS(markerDom, this.get(MARKER_CLASS));
    }

    return itemDOM;
  };

  Tooltip.prototype._renderTooltip = function _renderTooltip() {
    var self = this;
    var showTitle = self.get('showTitle');
    var titleContent = self.get('titleContent');
    var container = self.get('container');
    var titleDom = find(container, TITLE_CLASS);
    var listDom = find(container, LIST_CLASS);
    var items = self.get('items');
    self._clearDom();

    if (titleDom && showTitle) {
      DomUtil.modifyCSS(titleDom, self.get(TITLE_CLASS));
      titleDom.innerHTML = titleContent;
    }

    if (listDom) {
      DomUtil.modifyCSS(listDom, self.get(LIST_CLASS));
      Util.each(items, function (item, index) {
        listDom.appendChild(self._addItem(item, index));
      });
    }
  };

  Tooltip.prototype._clearCrosshairsGroup = function _clearCrosshairsGroup() {
    var crosshairsGroup = this.get('crosshairsGroup');
    this.set('crossLineShapeX', null);
    this.set('crossLineShapeY', null);
    this.set('crosshairsRectShape', null);
    crosshairsGroup.clear();
  };

  Tooltip.prototype._renderCrosshairs = function _renderCrosshairs() {
    var crosshairs = this.get('crosshairs');
    var canvas = this.get('canvas');
    var plotRange = this.get('plotRange');
    var isTransposed = this.get('isTransposed');
    if (crosshairs) {
      this._clearCrosshairsGroup();
      switch (crosshairs.type) {
        case 'x':
          this._renderHorizontalLine(canvas, plotRange);
          break;
        case 'y':
          this._renderVerticalLine(canvas, plotRange);
          break;
        case 'cross':
          this._renderHorizontalLine(canvas, plotRange);
          this._renderVerticalLine(canvas, plotRange);
          break;
        case 'rect':
          this._renderBackground(canvas, plotRange);
          break;
        default:
          isTransposed ? this._renderHorizontalLine(canvas, plotRange) : this._renderVerticalLine(canvas, plotRange);
      }
    }
  };

  Tooltip.prototype._addCrossLineShape = function _addCrossLineShape(attrs, type) {
    var crosshairsGroup = this.get('crosshairsGroup');
    var shape = crosshairsGroup.addShape('line', {
      attrs: attrs
    });
    shape.hide();
    this.set('crossLineShape' + type, shape);
    return shape;
  };

  Tooltip.prototype._renderVerticalLine = function _renderVerticalLine(canvas, plotRange) {
    var _get = this.get('crosshairs'),
        style = _get.style;

    var attrs = Util.mix({
      x1: 0,
      y1: plotRange ? plotRange.bl.y : canvas.get('height'),
      x2: 0,
      y2: plotRange ? plotRange.tl.y : 0
    }, style);

    this._addCrossLineShape(attrs, 'Y');
  };

  Tooltip.prototype._renderHorizontalLine = function _renderHorizontalLine(canvas, plotRange) {
    var _get2 = this.get('crosshairs'),
        style = _get2.style;

    var attrs = Util.mix({
      x1: plotRange ? plotRange.bl.x : canvas.get('width'),
      y1: 0,
      x2: plotRange ? plotRange.br.x : 0,
      y2: 0
    }, style);

    this._addCrossLineShape(attrs, 'X');
  };

  Tooltip.prototype._renderBackground = function _renderBackground(canvas, plotRange) {
    var _get3 = this.get('crosshairs'),
        style = _get3.style;

    var crosshairsGroup = this.get('crosshairsGroup');
    var attrs = Util.mix({
      x: plotRange ? plotRange.tl.x : 0,
      y: plotRange ? plotRange.tl.y : canvas.get('height'),
      width: plotRange ? plotRange.br.x - plotRange.bl.x : canvas.get('width'),
      height: plotRange ? Math.abs(plotRange.tl.y - plotRange.bl.y) : canvas.get('height')
    }, style);

    var shape = crosshairsGroup.addShape('rect', {
      attrs: attrs
    });
    shape.hide();
    this.set('crosshairsRectShape', shape);
    return shape;
  };

  Tooltip.prototype._isContentChange = function _isContentChange(title, items) {
    var titleContent = this.get('titleContent');
    var lastItems = this.get('items');
    var isChanged = !(title === titleContent && lastItems.length === items.length);
    if (!isChanged) {
      Util.each(items, function (item, index) {
        var preItem = lastItems[index];
        isChanged = item.value !== preItem.value || item.color !== preItem.color || item.name !== preItem.name || item.title !== preItem.title;
        if (isChanged) {
          return false;
        }
      });
    }

    return isChanged;
  };

  Tooltip.prototype.setContent = function setContent(title, items) {
    var isChange = this._isContentChange(title, items);
    if (isChange) {
      var timeStamp = +new Date();
      this.set('items', items);
      this.set('titleContent', title);
      this.set('timeStamp', timeStamp);
      this._renderTooltip();
    }
    return this;
  };

  Tooltip.prototype.setMarkers = function setMarkers(markerItems, markerCfg) {
    var self = this;
    var markerGroup = self.get('markerGroup');
    var frontPlot = self.get('frontPlot');
    if (!markerGroup) {
      markerGroup = frontPlot.addGroup({
        zIndex: 1
      });
      self.set('markerGroup', markerGroup);
    } else {
      markerGroup.clear();
    }
    Util.each(markerItems, function (item) {
      markerGroup.addShape('marker', {
        color: item.color,
        attrs: Util.mix({}, markerCfg, {
          x: item.x,
          y: item.y
        })
      });
    });
    this.set('markerItems', markerItems);
  };

  Tooltip.prototype.clearMarkers = function clearMarkers() {
    var markerGroup = this.get('markerGroup');
    markerGroup && markerGroup.clear();
  };

  Tooltip.prototype.setPosition = function setPosition(x, y, target) {
    var container = this.get('container');
    var crossLineShapeX = this.get('crossLineShapeX');
    var crossLineShapeY = this.get('crossLineShapeY');
    var crosshairsRectShape = this.get('crosshairsRectShape');
    var endx = x;
    var endy = y;
    // const outterNode = this.get('canvas').get('el').parentNode;
    var outterNode = this.get('canvas').get('el');
    var viewWidth = DomUtil.getWidth(outterNode);
    var viewHeight = DomUtil.getHeight(outterNode);
    var offset = this.get('offset');

    var position = void 0;
    if (this.get('position')) {
      position = calcTooltipPosition(x, y, this.get('position'), container, target);
      x = position[0];
      y = position[1];
    } else if (!this.get('position')) {
      position = refixTooltipPosition(x, y, container, viewWidth, viewHeight);
      x = position[0];
      y = position[1];
    }

    if (this.get('inPlot')) {
      // tooltip 必须限制在绘图区域内
      var plotRange = this.get('plotRange');
      position = confineTooltipPosition(x, y, container, plotRange);
      x = position[0];
      y = position[1];
    }

    if (this.get('x') !== x || this.get('y') !== y) {
      var markerItems = this.get('markerItems');
      if (!Util.isEmpty(markerItems)) {
        endx = markerItems[0].x;
        endy = markerItems[0].y;
      }
      if (crossLineShapeY) {
        // 第一次进入时，画布需要单独绘制，所以需要先设定corss的位置
        crossLineShapeY.move(endx, 0);
      }
      if (crossLineShapeX) {
        crossLineShapeX.move(0, endy);
      }

      if (crosshairsRectShape) {
        var isTransposed = this.get('isTransposed');
        var items = this.get('items');
        var firstItem = items[0];
        var lastItem = items[items.length - 1];
        var dim = isTransposed ? 'y' : 'x';
        var attr = isTransposed ? 'height' : 'width';
        var startDim = firstItem[dim];
        if (items.length > 1 && firstItem[dim] > lastItem[dim]) {
          startDim = lastItem[dim];
        }

        if (this.get('crosshairs').width) {
          // 用户定义了 width
          crosshairsRectShape.attr(dim, startDim - this.get('crosshairs').width / 2);
          crosshairsRectShape.attr(attr, this.get('crosshairs').width);
        } else {
          offset = firstItem.size / 2 + firstItem.size / 4 || 10;
          crosshairsRectShape.attr(dim, startDim - offset);

          if (items.length === 1) {
            crosshairsRectShape.attr(attr, firstItem.size + firstItem.size / 2);
          } else {
            var _lastItem = items[items.length - 1];
            crosshairsRectShape.attr(attr, Math.abs(_lastItem[dim] - firstItem[dim]) + 2 * offset);
          }
        }
      }

      var follow = this.get('follow');
      container.style.left = follow ? x + 'px' : 0;
      container.style.top = follow ? y + 'px' : 0;
    }
  };

  Tooltip.prototype.show = function show() {
    var crossLineShapeX = this.get('crossLineShapeX');
    var crossLineShapeY = this.get('crossLineShapeY');
    var crosshairsRectShape = this.get('crosshairsRectShape');
    var markerGroup = this.get('markerGroup');
    var container = this.get('container');
    var canvas = this.get('canvas');
    crossLineShapeX && crossLineShapeX.show();
    crossLineShapeY && crossLineShapeY.show();
    crosshairsRectShape && crosshairsRectShape.show();
    markerGroup && markerGroup.show();
    _Base.prototype.show.call(this);
    container.style.visibility = 'visible';
    // canvas.sort();
    canvas.draw();
  };

  Tooltip.prototype.hide = function hide() {
    var self = this;
    var container = self.get('container');
    var crossLineShapeX = self.get('crossLineShapeX');
    var crossLineShapeY = self.get('crossLineShapeY');
    var crosshairsRectShape = this.get('crosshairsRectShape');
    var markerGroup = self.get('markerGroup');
    var canvas = self.get('canvas');
    container.style.visibility = 'hidden';
    crossLineShapeX && crossLineShapeX.hide();
    crossLineShapeY && crossLineShapeY.hide();
    crosshairsRectShape && crosshairsRectShape.hide();
    markerGroup && markerGroup.hide();
    _Base.prototype.hide.call(this);
    canvas.draw();
  };

  Tooltip.prototype.destroy = function destroy() {
    var self = this;
    var crossLineShapeX = self.get('crossLineShapeX');
    var crossLineShapeY = self.get('crossLineShapeY');
    var markerGroup = self.get('markerGroup');
    var crosshairsRectShape = self.get('crosshairsRectShape');
    var container = self.get('container');
    var containerTpl = self.get('containerTpl');

    if (container && !/^\#/.test(containerTpl)) {
      container.parentNode.removeChild(container);
    }

    crossLineShapeX && crossLineShapeX.remove();
    crossLineShapeY && crossLineShapeY.remove();
    markerGroup && markerGroup.remove();
    crosshairsRectShape && crosshairsRectShape.remove();
    // super.remove();
    _Base.prototype.destroy.call(this);
  };

  return Tooltip;
}(Base);

module.exports = Tooltip;

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @fileOverview The controller of guide
 * @author sima.zhang
 */
var Util = __webpack_require__(0);

var _require = __webpack_require__(25),
    Guide = _require.Guide;

var Global = __webpack_require__(1);

var GuideController = function () {
  function GuideController(cfg) {
    _classCallCheck(this, GuideController);

    this.guides = [];
    this.options = [];
    this.xScales = null;
    this.yScales = null;
    this.container = null;
    Util.mix(this, cfg);
  }

  GuideController.prototype._creatGuides = function _creatGuides() {
    var self = this;
    var options = this.options;
    var xScales = this.xScales;
    var yScales = this.yScales;
    options.forEach(function (option) {
      var type = option.type;
      var config = Util.deepMix({
        xScales: xScales,
        yScales: yScales
      }, Global.guide[type], option);
      type = Util.upperFirst(type);
      var guide = new Guide[type](config);
      self.guides.push(guide);
    });

    return self.guides;
  };

  GuideController.prototype.line = function line() {
    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.options.push(Util.mix({
      type: 'line'
    }, cfg));
    return this;
  };

  GuideController.prototype.arc = function arc() {
    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.options.push(Util.mix({
      type: 'arc'
    }, cfg));
    return this;
  };

  GuideController.prototype.text = function text() {
    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.options.push(Util.mix({
      type: 'text'
    }, cfg));
    return this;
  };

  GuideController.prototype.image = function image() {
    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.options.push(Util.mix({
      type: 'image'
    }, cfg));
    return this;
  };

  GuideController.prototype.region = function region() {
    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.options.push(Util.mix({
      type: 'region'
    }, cfg));
    return this;
  };

  GuideController.prototype.html = function html() {
    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.options.push(Util.mix({
      type: 'html'
    }, cfg));
    return this;
  };

  GuideController.prototype.render = function render(coord) {
    var self = this;
    var guides = self._creatGuides();
    var container = self.backContainer;

    Util.each(guides, function (guide) {
      if (guide.top) {
        // 默认 guide 绘制到 backPlot，用户也可以声明 top: true，显示在最上层
        container = self.frontContainer;
      }
      guide.render(coord, container);
    });
  };

  GuideController.prototype.clear = function clear() {
    this.options = [];
    this.reset();
  };

  GuideController.prototype.changeVisible = function changeVisible(visible) {
    var guides = this.guides;
    Util.each(guides, function (guide) {
      guide.setVisible(visible);
    });
  };

  GuideController.prototype.reset = function reset() {
    var guides = this.guides;
    Util.each(guides, function (guide) {
      guide.remove();
    });
    this.guides = [];
  };

  return GuideController;
}();

module.exports = GuideController;

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Util = __webpack_require__(0);
var Global = __webpack_require__(1);

var _require = __webpack_require__(25),
    Legend = _require.Legend;

var Shape = __webpack_require__(66);

var FIELD_ORIGIN = '_origin';
var MARGIN = 24;
var MARGIN_LEGEND = 24;
var requireAnimationFrameFn = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

function _snapEqual(v1, v2, scale) {
  var isEqual = void 0;
  if (Util.isNil(scale)) {
    return false;
  }
  v1 = scale.translate(v1);
  v2 = scale.translate(v2);
  if (scale.isCategory) {
    isEqual = v1 === v2;
  } else {
    isEqual = Math.abs(v1 - v2) <= 1;
  }
  return isEqual;
}

function findGeom(geoms, value) {
  var rst = void 0;
  Util.each(geoms, function (geom) {
    if (geom.get('visible')) {
      var yScale = geom.getYScale();
      if (yScale.field === value) {
        rst = geom;
        return;
      }
    }
  });

  return rst;
}

var LegendController = function () {
  function LegendController(cfg) {
    _classCallCheck(this, LegendController);

    this.options = {};
    Util.mix(this, cfg);
    this.clear();
    var chart = this.chart;
    this.container = chart.get('frontPlot');
    this.plotRange = chart.get('plotRange');
  }

  LegendController.prototype.clear = function clear() {
    var legends = this.legends;
    Util.each(legends, function (legendItems) {
      Util.each(legendItems, function (legend) {
        legend.remove();
      });
    });
    this.legends = {};
  };

  LegendController.prototype._isFieldInView = function _isFieldInView(field, value, view) {
    var flag = false;
    var scales = view.get('scales');
    var fieldScale = scales[field];
    if (fieldScale && fieldScale.values) {
      flag = Util.inArray(fieldScale.values, value);
    }

    return flag;
  };

  LegendController.prototype._bindClickEvent = function _bindClickEvent(legend, scale, filterVals) {
    var self = this;
    var chart = self.chart;
    var views = chart.get('views');
    var field = scale.field;
    var options = self.options;

    legend.on('itemclick', function (ev) {
      if (options.onClick) {
        // 用户自定义了图例点击事件
        options.onClick(ev);
      } else {
        var item = ev.item;
        var checked = ev.checked;
        var isSingeSelected = legend.get('selectedMode') === 'single'; // 图例的选中模式
        var clickedValue = item.dataValue; // import: 需要取该图例项原始的数值

        if (checked) {
          filterVals.push(clickedValue);
          if (self._isFieldInView(field, clickedValue, chart)) {
            chart.filter(field, function (field) {
              return isSingeSelected ? field === clickedValue : Util.inArray(filterVals, field);
            });
          }
          Util.each(views, function (view) {
            if (self._isFieldInView(field, clickedValue, view)) {
              view.filter(field, function (field) {
                return isSingeSelected ? field === clickedValue : Util.inArray(filterVals, field);
              });
            }
          });
        } else if (!isSingeSelected) {
          Util.Array.remove(filterVals, clickedValue);

          if (self._isFieldInView(field, clickedValue, chart)) {
            chart.filter(field, function (field) {
              return Util.inArray(filterVals, field);
            });
          }
          Util.each(views, function (view) {
            if (self._isFieldInView(field, clickedValue, view)) {
              view.filter(field, function (field) {
                return Util.inArray(filterVals, field);
              });
            }
          });
        }
        chart.set('keepLegend', true); // 图例不重新渲染
        chart.repaint();
      }
    });
  };

  LegendController.prototype._filterLabels = function _filterLabels(shape, geom, visible) {
    if (shape.get('gLabel')) {
      shape.get('gLabel').set('visible', visible);
    } else {
      var labelCfg = geom.get('labelCfg');
      if (labelCfg && labelCfg.fields && labelCfg.fields.length > 0) {
        var xScale = geom.getXScale();
        var yScale = geom.getYScale();
        var xField = xScale.field;
        var yField = yScale.field;
        var shapeData = shape.get('origin')._origin;
        var labelContainer = geom.get('labelContainer');
        var labels = labelContainer.get('labelsGroup').get('children');
        Util.each(labels, function (label) {
          var labelData = label.get('origin') || [];
          if (labelData[xField] === shapeData[xField] && labelData[yField] === shapeData[yField]) {
            label.set('visible', visible);
            shape.set('gLabel', label);
          }
        });
      }
    }
  };

  LegendController.prototype._bindFilterEvent = function _bindFilterEvent(legend, scale) {
    var self = this;
    var chart = this.chart;
    var field = scale.field;
    legend.on('itemfilter', function (ev) {
      var range = ev.range;
      chart.filterShape(function (obj, shape, geom) {
        if (obj[field]) {
          var filtered = obj[field] >= range[0] && obj[field] <= range[1];
          // shape 带 label，则还需要隐藏 label
          self._filterLabels(shape, geom, filtered);
          return filtered;
        }
        return true;
      });
      var geoms = chart.getAllGeoms() || [];

      var _loop = function _loop(i) {
        var geom = geoms[i];
        if (geom.get('type') === 'heatmap') {
          requireAnimationFrameFn(function () {
            geom.drawWithRange(range);
          });
        }
      };

      for (var i = 0; i < geoms.length; i++) {
        _loop(i);
      }
    });
  };

  LegendController.prototype._getShapeData = function _getShapeData(shape) {
    var originData = shape.get('origin');

    if (Util.isArray(originData)) {
      originData = originData[0];
    }
    return originData[FIELD_ORIGIN];
  };

  LegendController.prototype._bindHoverEvent = function _bindHoverEvent(legend, field) {
    var self = this;
    var chart = self.chart;
    var geoms = chart.getAllGeoms();
    var options = self.options;
    var canvas = chart.get('canvas');
    legend.on('itemhover', function (ev) {
      var value = ev.item.value;
      var pre = self.pre;
      if (!pre) {
        Util.each(geoms, function (geom) {
          var shapeContainer = geom.get('shapeContainer');
          var shapes = geom.getShapes();
          var activeShapes = [];
          if (field) {
            var scale = geom.get('scales')[field];
            Util.each(shapes, function (shape) {
              var origin = self._getShapeData(shape);
              if (origin && _snapEqual(origin[field], value, scale)) {
                activeShapes.push(shape);
              }
            });
          } else if (geom.getYScale().field === value) {
            activeShapes = shapes;
          }

          if (!Util.isEmpty(activeShapes)) {
            ev.shapes = activeShapes;
            ev.geom = geom;
            if (options.onHover) {
              options.onHover(ev);
              shapeContainer.sort();
              canvas.draw();
            } else {
              geom.setShapesActived(activeShapes);
            }
          }
        });
        self.pre = value;
      } else if (pre === value) {
        return;
      }
    });

    legend.on('itemunhover', function () {
      self.pre = null;
      Util.each(geoms, function (geom) {
        if (geom.get('activeShapes')) {
          geom.clearActivedShapes();
          canvas.draw();
        }
      });
    });
  };

  LegendController.prototype._isFiltered = function _isFiltered(scale, values, value) {
    if (!scale.isCategory) {
      return true;
    }
    var rst = false;
    value = scale.invert(value);
    Util.each(values, function (val) {
      rst = rst || scale.getText(val) === scale.getText(value);
      if (rst) {
        return false;
      }
    });
    return rst;
  };

  LegendController.prototype._alignLegend = function _alignLegend(legend, pre, region, position) {
    var self = this;
    var container = self.container;
    var canvas = container.get('canvas');
    var width = canvas.get('width');
    var height = canvas.get('height');
    var plotRange = self.plotRange;
    var offsetX = legend.get('offsetX') || 0;
    var offsetY = legend.get('offsetY') || 0;
    var offset = Util.isNil(legend.get('offset')) ? MARGIN : legend.get('offset');
    var legendHeight = legend.getHeight();

    var x = 0;
    var y = 0;

    if (position === 'left' || position === 'right') {
      // 垂直
      height = plotRange.br.y;
      x = position === 'left' ? offset : plotRange.br.x + offset;
      y = height - legendHeight;

      if (pre) {
        y = pre.get('y') - legendHeight - MARGIN_LEGEND;
      }
    } else {
      x = (width - region.totalWidth) / 2;
      y = position === 'top' ? offset : plotRange.bl.y + offset;

      if (pre) {
        var preWidth = pre.getWidth();
        x = pre.get('x') + preWidth + MARGIN_LEGEND;
      }
    }

    legend.move(x + offsetX, y + offsetY);
  };

  LegendController.prototype._getRegion = function _getRegion(legends) {
    var maxWidth = 0;
    var totalWidth = 0;
    Util.each(legends, function (legend) {
      var width = legend.getWidth();
      if (maxWidth < width) {
        maxWidth = width;
      }
      totalWidth += width;
    });
    return {
      maxWidth: maxWidth,
      totalWidth: totalWidth
    };
  };

  LegendController.prototype._addCategroyLegend = function _addCategroyLegend(scale, attr, geom, filterVals, position) {
    var self = this;
    var field = scale.field;
    var legendOptions = self.options;
    var legends = self.legends;
    legends[position] = legends[position] || [];
    var container = self.container;
    var items = [];
    var ticks = scale.getTicks();

    var isByAttr = true;
    var shapeType = geom.get('shapeType') || 'point';
    var shape = geom.getDefaultValue('shape') || 'circle';
    if (legendOptions[field] && legendOptions[field].marker) {
      // 用户为 field 对应的图例定义了 marker
      shape = legendOptions[field].marker;
      shapeType = 'point';
      isByAttr = false;
    } else if (legendOptions.marker) {
      shape = legendOptions.marker;
      shapeType = 'point';
      isByAttr = false;
    }

    var chart = self.chart;
    var canvas = chart.get('canvas');
    var plotRange = self.plotRange;
    var maxLength = position === 'right' || position === 'left' ? plotRange.bl.y - plotRange.tr.y : canvas.get('width');

    Util.each(ticks, function (tick) {
      var text = tick.text;
      var name = text;
      var scaleValue = tick.value;
      var value = scale.invert(scaleValue);
      var cfg = {
        isInCircle: geom.isInCircle()
      };
      var checked = filterVals ? self._isFiltered(scale, filterVals, scaleValue) : true;

      var colorAttr = geom.getAttr('color');
      var shapeAttr = geom.getAttr('shape');
      if (colorAttr) {
        // 存在颜色映射
        if (colorAttr.callback && colorAttr.callback.length > 1) {
          // 多参数映射，阻止程序报错
          var restArgs = Array(colorAttr.callback.length - 1).fill('');
          cfg.color = colorAttr.mapping.apply(colorAttr, [value].concat(restArgs)).join('') || Global.defaultColor;
        } else {
          cfg.color = colorAttr.mapping(value).join('') || Global.defaultColor;
        }
      }
      if (isByAttr && shapeAttr) {
        // 存在形状映射
        if (shapeAttr.callback && shapeAttr.callback.length > 1) {
          // 多参数映射，阻止程序报错
          var _restArgs = Array(shapeAttr.callback.length - 1).fill('');
          shape = shapeAttr.mapping.apply(shapeAttr, [value].concat(_restArgs)).join('');
        } else {
          shape = shapeAttr.mapping(value).join('');
        }
      }

      var shapeObject = Shape.getShapeFactory(shapeType);
      var marker = shapeObject.getMarkerCfg(shape, cfg);

      if (Util.isFunction(shape)) {
        marker.symbol = shape;
      }

      items.push({
        value: name, // 图例项显示文本的内容
        dataValue: value, // 图例项对应原始数据中的数值
        checked: checked,
        marker: marker
      });
    });

    var legendCfg = Util.deepMix({
      title: {
        text: scale.alias || scale.field
      }
    }, Global.legend[position], legendOptions[field] || legendOptions, {
      maxLength: maxLength,
      items: items
    });

    var legend = container.addGroup(Legend.Category, legendCfg);
    self._bindClickEvent(legend, scale, filterVals);
    legends[position].push(legend);
    return legend;
  };

  LegendController.prototype._addContinuousLegend = function _addContinuousLegend(scale, attr, position) {
    var self = this;
    var legends = self.legends;
    legends[position] = legends[position] || [];
    var container = self.container;
    var field = scale.field;
    var ticks = scale.getTicks();
    var items = [];
    var legend = void 0;
    var minValue = void 0;
    var maxValue = void 0;

    Util.each(ticks, function (tick) {
      var scaleValue = tick.value;
      var invertValue = scale.invert(scaleValue);
      var attrValue = attr.mapping(invertValue).join('');

      items.push({
        value: tick.text,
        attrValue: attrValue,
        scaleValue: scaleValue
      });
      if (scaleValue === 0) {
        minValue = true;
      }
      if (scaleValue === 1) {
        maxValue = true;
      }
    });

    if (!minValue) {
      items.push({
        value: scale.getText(scale.invert(0)),
        attrValue: attr.mapping(0).join(''),
        scaleValue: 0
      });
    }
    if (!maxValue) {
      items.push({
        value: scale.getText(scale.invert(1)),
        attrValue: attr.mapping(1).join(''),
        scaleValue: 1
      });
    }

    var options = self.options;

    var defaultCfg = Global.legend[position];
    if (options && options.slidable === false || options[field] && options[field].slidable === false) {
      defaultCfg = Util.mix({}, defaultCfg, Global.legend.gradient);
    }

    var legendCfg = Util.deepMix({
      title: {
        text: scale.alias || scale.field
      }
    }, defaultCfg, options[field] || options, {
      items: items,
      attr: attr
    });

    if (attr.type === 'color') {
      legend = container.addGroup(Legend.Color, legendCfg);
    } else if (attr.type === 'size') {
      legend = container.addGroup(Legend.Size, legendCfg);
    }
    self._bindFilterEvent(legend, scale);
    legends[position].push(legend);
    return legend;
  };

  LegendController.prototype.addLegend = function addLegend(scale, attr, geom, filterVals) {
    var self = this;
    var legendOptions = self.options;
    var field = scale.field;
    var fieldOption = legendOptions[field];

    if (fieldOption === false) {
      // 如果不显示此图例
      return null;
    }

    if (fieldOption && fieldOption.custom) {
      self.addCustomLegend(field);
    } else {
      var position = legendOptions.position || Global.defaultLegendPosition;
      if (fieldOption && fieldOption.position) {
        // 如果对某个图例单独设置 position，则对 position 重新赋值
        position = fieldOption.position;
      }

      var legend = void 0;
      if (scale.isLinear) {
        legend = self._addContinuousLegend(scale, attr, position);
      } else {
        legend = self._addCategroyLegend(scale, attr, geom, filterVals, position);
      }
      self._bindHoverEvent(legend, field);
    }
  };

  /**
   * 自定义图例
   * @param {string} field 自定义图例的数据字段名，可以为空
   */


  LegendController.prototype.addCustomLegend = function addCustomLegend(field) {
    var self = this;
    var chart = self.chart;
    var container = self.container;
    var legendOptions = self.options;

    if (field) {
      legendOptions = legendOptions[field];
    }

    var position = legendOptions.position || Global.defaultLegendPosition;
    var legends = self.legends;
    legends[position] = legends[position] || [];
    var items = legendOptions.items;
    if (!items) {
      return;
    }

    var geoms = chart.getAllGeoms();
    Util.each(items, function (item) {
      var geom = findGeom(geoms, item.value);
      if (!Util.isObject(item.marker)) {
        item.marker = {
          symbol: item.marker ? item.marker : 'circle',
          fill: item.fill,
          radius: 4.5
        };
      }
      item.checked = Util.isNil(item.checked) ? true : item.checked;
      item.geom = geom;
    });

    var canvas = chart.get('canvas');
    var plotRange = self.plotRange;
    var maxLength = position === 'right' || position === 'left' ? plotRange.bl.y - plotRange.tr.y : canvas.get('width');

    var legendCfg = Util.deepMix({}, Global.legend[position], legendOptions, {
      maxLength: maxLength,
      items: items
    });

    var legend = container.addGroup(Legend.Category, legendCfg);
    legends[position].push(legend);

    legend.on('itemclick', function (ev) {
      if (legendOptions.onClick) {
        // 用户自定义了图例点击事件
        legendOptions.onClick(ev);
      }
    });

    self._bindHoverEvent(legend);
  };

  LegendController.prototype.alignLegends = function alignLegends() {
    var self = this;
    var legends = self.legends;
    Util.each(legends, function (legendItems, position) {
      var region = self._getRegion(legendItems);
      Util.each(legendItems, function (legend, index) {
        var pre = legendItems[index - 1];
        if (!(legend.get('useHtml') && !legend.get('autoPosition'))) {
          self._alignLegend(legend, pre, region, position);
        }
      });
    });

    return this;
  };

  return LegendController;
}();

module.exports = LegendController;

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @fileOverview The controller of tooltip
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Global = __webpack_require__(1);

var _require = __webpack_require__(25),
    Tooltip = _require.Tooltip;

var MatrixUtil = __webpack_require__(2).MatrixUtil;
var Vector2 = MatrixUtil.vec2;

var TYPE_SHOW_MARKERS = ['line', 'area', 'path', 'areaStack']; // 默认展示 tooltip marker 的几何图形
var TYPE_SHOW_CROSSHAIRS = ['line', 'area']; // 默认展示十字瞄准线的几何图形

function _indexOfArray(items, item) {
  var rst = -1;
  Util.each(items, function (sub, index) {
    if (sub.title === item.title && sub.name === item.name && sub.value === item.value && sub.color === item.color) {
      rst = index;
      return false;
    }
  });
  return rst;
}

// 判断是否有样式
function _hasClass(dom, className) {
  if (!dom) {
    return false;
  }
  var cls = '';
  if (!dom.className) return false;
  if (!Util.isNil(dom.className.baseVal)) {
    cls = dom.className.baseVal;
  } else {
    cls = dom.className;
  }
  return cls.indexOf(className) !== -1;
}

function _isParent(dom, cls) {
  var parent = dom.parentNode;
  var rst = false;
  while (parent && parent !== document.body) {
    if (_hasClass(parent, cls)) {
      rst = true;
      break;
    }
    parent = parent.parentNode;
  }
  return rst;
}

// 去除重复的值, 去除不同图形相同数据，只展示一份即可
function _uniqItems(items) {
  var tmp = [];
  Util.each(items, function (item) {
    var index = _indexOfArray(tmp, item);
    if (index === -1) {
      tmp.push(item);
    } else {
      tmp[index] = item;
    }
  });
  return tmp;
}

var TooltipController = function () {
  function TooltipController(cfg) {
    _classCallCheck(this, TooltipController);

    Util.assign(this, cfg);
    this.timeStamp = 0;
  }

  TooltipController.prototype._normalizeEvent = function _normalizeEvent(event) {
    var chart = this.chart;
    var canvas = this._getCanvas();
    var point = canvas.getPointByClient(event.clientX, event.clientY);
    var pixelRatio = canvas.get('pixelRatio');
    point.x = point.x / pixelRatio;
    point.y = point.y / pixelRatio;
    var views = chart.getViewsByPoint(point);
    point.views = views;
    return point;
  };

  TooltipController.prototype._getCanvas = function _getCanvas() {
    return this.chart.get('canvas');
  };

  TooltipController.prototype._getTriggerEvent = function _getTriggerEvent() {
    var options = this.options;
    var triggerOn = options.triggerOn;
    var eventName = void 0;

    if (!triggerOn || triggerOn === 'mousemove') {
      eventName = 'plotmove';
    } else if (triggerOn === 'click') {
      eventName = 'plotclick';
    } else if (triggerOn === 'none') {
      eventName = null;
    }

    return eventName;
  };

  TooltipController.prototype._getDefaultTooltipCfg = function _getDefaultTooltipCfg() {
    var self = this;
    var options = self.options;
    var defaultCfg = Util.mix({}, Global.tooltip);
    var chart = self.chart;
    var geoms = chart.getAllGeoms().filter(function (geom) {
      return geom.get('visible');
    });
    var shapes = [];
    Util.each(geoms, function (geom) {
      var type = geom.get('type');
      var adjusts = geom.get('adjusts');
      var isSymmetric = false;
      if (adjusts) {
        Util.each(adjusts, function (adjust) {
          if (adjust.type === 'symmetric' || adjust.type === 'Symmetric') {
            isSymmetric = true;
            return false;
          }
        });
      }
      if (Util.indexOf(shapes, type) === -1 && !isSymmetric) {
        shapes.push(type);
      }
    });

    var crosshairsCfg = void 0;
    if (geoms.length && geoms[0].get('coord') && geoms[0].get('coord').type === 'cartesian' && shapes.length === 1) {
      if (shapes[0] === 'interval' && options.shared !== false) {
        // 直角坐标系下 interval 的 crosshair 为矩形背景框
        crosshairsCfg = {
          zIndex: 0, // 矩形背景框不可覆盖 geom
          crosshairs: Global.tooltipCrosshairsRect
        };
      } else if (Util.indexOf(TYPE_SHOW_CROSSHAIRS, shapes[0]) > -1) {
        crosshairsCfg = {
          crosshairs: Global.tooltipCrosshairsLine
        };
      }
    }

    return Util.mix(defaultCfg, crosshairsCfg, {
      isTransposed: geoms[0].get('coord').isTransposed
    });
  };

  TooltipController.prototype._bindEvent = function _bindEvent() {
    var chart = this.chart;
    var triggerEvent = this._getTriggerEvent();
    if (triggerEvent) {
      chart.on(triggerEvent, Util.wrapBehavior(this, 'onMouseMove'));
      chart.on('plotleave', Util.wrapBehavior(this, 'onMouseOut'));
    }
  };

  TooltipController.prototype._offEvent = function _offEvent() {
    var chart = this.chart;
    var triggerEvent = this._getTriggerEvent();
    if (triggerEvent) {
      chart.off(triggerEvent, Util.getWrapBehavior(this, 'onMouseMove'));
      chart.off('plotleave', Util.getWrapBehavior(this, 'onMouseOut'));
    }
  };

  TooltipController.prototype._setTooltip = function _setTooltip(title, point, items, markersItems, target) {
    var self = this;
    var tooltip = self.tooltip;
    var prePoint = self.prePoint;
    if (!prePoint || prePoint.x !== point.x || prePoint.y !== point.y) {
      items = _uniqItems(items);
      self.prePoint = point;

      var chart = self.chart;
      var x = Util.isArray(point.x) ? point.x[point.x.length - 1] : point.x;
      var y = Util.isArray(point.y) ? point.y[point.y.length - 1] : point.y;
      if (!tooltip.get('visible')) {
        chart.emit('tooltip:show', {
          x: x,
          y: y,
          tooltip: tooltip
        });
      }
      chart.emit('tooltip:change', {
        tooltip: tooltip,
        x: x,
        y: y,
        items: items
      });
      tooltip.setContent(title, items);
      if (!Util.isEmpty(markersItems)) {
        if (self.options.hideMarkers === true) {
          // 不展示 tooltip marker
          tooltip.set('markerItems', markersItems); // 用于 tooltip 辅助线的定位
        } else {
          tooltip.setMarkers(markersItems, Global.tooltipMarker);
        }
      } else {
        tooltip.clearMarkers();
      }

      tooltip.setPosition(x, y, target);
      tooltip.show();
    }
  };

  TooltipController.prototype.hideTooltip = function hideTooltip() {
    var tooltip = this.tooltip;
    var chart = this.chart;
    var canvas = this._getCanvas();
    this.prePoint = null;
    tooltip.hide();
    chart.emit('tooltip:hide', {
      tooltip: tooltip
    });
    canvas.draw();
  };

  TooltipController.prototype.onMouseMove = function onMouseMove(ev) {
    if (Util.isEmpty(ev.views)) {
      return;
    }

    var lastTimeStamp = this.timeStamp;
    var timeStamp = +new Date();
    var point = {
      x: ev.x,
      y: ev.y
    };
    if (timeStamp - lastTimeStamp > 16) {
      var target = void 0;
      if (ev.shape && Util.inArray(['point', 'interval', 'polygon', 'schema'], ev.shape.name)) {
        target = ev.shape;
      }
      this.showTooltip(point, ev.views, target);
      this.timeStamp = timeStamp;
    }
  };

  TooltipController.prototype.onMouseOut = function onMouseOut(ev) {
    var tooltip = this.tooltip;
    var canvas = this._getCanvas();
    if (!tooltip.get('visible')) {
      return;
    }
    if (ev && ev.target !== canvas) {
      return;
    }
    if (ev && ev.toElement && (_hasClass(ev.toElement, 'g2-tooltip') || _isParent(ev.toElement, 'g2-tooltip'))) {
      return;
    }
    this.hideTooltip();
  };

  TooltipController.prototype.renderTooltip = function renderTooltip() {
    var self = this;
    if (self.tooltip) {
      // tooltip 对象已经创建
      return;
    }
    var chart = self.chart;
    var canvas = self._getCanvas();
    var defaultCfg = self._getDefaultTooltipCfg();
    var options = self.options;
    options = Util.deepMix({
      plotRange: chart.get('plotRange'),
      capture: false,
      canvas: canvas,
      frontPlot: chart.get('frontPlot'),
      backPlot: chart.get('backPlot')
    }, defaultCfg, options);
    if (options.crosshairs && options.crosshairs.type === 'rect') {
      options.zIndex = 0; // toolip 背景框不可遮盖住 geom，防止用户配置了 crosshairs
    }

    options.visible = false;
    if (options.shared === false && Util.isNil(options.position)) {
      options.position = 'top';
    }

    var tooltip = new Tooltip(options);
    self.tooltip = tooltip;

    var triggerEvent = self._getTriggerEvent();
    if (!tooltip.get('enterable') && triggerEvent === 'plotmove') {
      // 鼠标不允许进入 tooltip 容器
      var tooltipContainer = tooltip.get('container');
      if (tooltipContainer) {
        tooltipContainer.onmousemove = function (e) {
          // 避免 tooltip 频繁闪烁
          var eventObj = self._normalizeEvent(e);
          chart.emit(triggerEvent, eventObj);
        };
      }
    }
    self._bindEvent();
  };

  TooltipController.prototype.showTooltip = function showTooltip(point, views, target) {
    var self = this;
    if (Util.isEmpty(views) || !point) {
      return;
    }
    if (!this.tooltip) {
      this.renderTooltip(); // 如果一开始 tooltip 关闭，用户重新调用的时候需要先生成 tooltip
    }
    var options = self.options;
    var markersItems = [];
    var items = [];

    Util.each(views, function (view) {
      if (!view.get('tooltipEnable')) {
        // 如果不显示tooltip，则跳过
        return true;
      }
      var geoms = view.get('geoms');
      var coord = view.get('coord');
      Util.each(geoms, function (geom) {
        var type = geom.get('type');
        if (geom.get('visible') && geom.get('tooltipCfg') !== false) {
          var dataArray = geom.get('dataArray');
          if (geom.isShareTooltip() || options.shared === false && Util.inArray(['area', 'line', 'path'], type)) {
            Util.each(dataArray, function (obj) {
              var tmpPoint = geom.findPoint(point, obj);
              if (tmpPoint) {
                var subItems = geom.getTipItems(tmpPoint, options.title);
                if (Util.indexOf(TYPE_SHOW_MARKERS, type) !== -1) {
                  Util.each(subItems, function (v) {
                    var point = v.point;
                    if (point && point.x && point.y) {
                      // hotfix: make sure there is no null value
                      var x = Util.isArray(point.x) ? point.x[point.x.length - 1] : point.x;
                      var y = Util.isArray(point.y) ? point.y[point.y.length - 1] : point.y;
                      point = coord.applyMatrix(x, y, 1);
                      v.x = point[0];
                      v.y = point[1];
                      v.showMarker = true;
                      markersItems.push(v);
                    }
                  });
                }
                items = items.concat(subItems);
              }
            });
          } else {
            var geomContainer = geom.get('shapeContainer');
            var canvas = geomContainer.get('canvas');
            var pixelRatio = canvas.get('pixelRatio');
            var shape = geomContainer.getShape(point.x * pixelRatio, point.y * pixelRatio);
            if (shape && shape.get('visible') && shape.get('origin')) {
              items = geom.getTipItems(shape.get('origin'), options.title);
            }
          }
        }
      });

      Util.each(items, function (item) {
        var point = item.point;
        var x = Util.isArray(point.x) ? point.x[point.x.length - 1] : point.x;
        var y = Util.isArray(point.y) ? point.y[point.y.length - 1] : point.y;
        point = coord.applyMatrix(x, y, 1);
        item.x = point[0];
        item.y = point[1];
      });
    });

    if (items.length) {
      var first = items[0];

      // bugfix: multiple tooltip items with different titles
      if (!items.every(function (item) {
        return item.title === first.title;
      })) {
        var nearestItem = first;
        var nearestDistance = Infinity;
        items.forEach(function (item) {
          var distance = Vector2.distance([point.x, point.y], [item.x, item.y]);
          if (distance < nearestDistance) {
            nearestDistance = distance;
            nearestItem = item;
          }
        });
        items = items.filter(function (item) {
          return item.title === nearestItem.title;
        });
        markersItems = markersItems.filter(function (item) {
          return item.title === nearestItem.title;
        });
      }

      if (options.shared === false && items.length > 1) {
        var snapItem = items[0];
        var min = Math.abs(point.y - snapItem.y);
        Util.each(items, function (aItem) {
          if (Math.abs(point.y - aItem.y) <= min) {
            snapItem = aItem;
            min = Math.abs(point.y - aItem.y);
          }
        });
        if (snapItem && snapItem.x && snapItem.y) {
          markersItems = [snapItem];
        }
        items = [snapItem];
      }
      // 3.0 采用当前鼠标位置作为 tooltip 的参考点
      // if (!Util.isEmpty(markersItems)) {
      //   point = markersItems[0];
      // }
      var title = first.title || first.name;

      self._setTooltip(title, point, items, markersItems, target);
    } else {
      self.hideTooltip();
    }
  };

  TooltipController.prototype.clear = function clear() {
    var tooltip = this.tooltip;
    tooltip && tooltip.destroy();
    this.tooltip = null;
    this.prePoint = null;
    this._offEvent();
  };

  return TooltipController;
}();

module.exports = TooltipController;

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @fileOverview The controller of chart's events
 * @author sima.zhang
 */
var Util = __webpack_require__(0);

function isSameShape(shape1, shape2) {
  if (Util.isNil(shape1) || Util.isNil(shape2)) {
    return false;
  }
  var shape1Origin = shape1.get('origin');
  var shape2Origin = shape2.get('origin');

  // hotfix: if both shapes have no data，just compare shapes.
  if (Util.isNil(shape1Origin) && Util.isNil(shape2Origin)) {
    return Util.isEqual(shape1, shape2);
  }

  return Util.isEqual(shape1Origin, shape2Origin);
}

function registerData(eventObj) {
  if (eventObj.shape && eventObj.shape.get('origin')) {
    eventObj.data = eventObj.shape.get('origin');
  }
}

var EventController = function () {
  function EventController(cfg) {
    _classCallCheck(this, EventController);

    this.view = null;
    this.canvas = null;
    Util.assign(this, cfg);

    this._init();
  }

  EventController.prototype._init = function _init() {
    this.pixelRatio = this.canvas.get('pixelRatio');
  };

  EventController.prototype._getShapeEventObj = function _getShapeEventObj(ev) {
    return {
      x: ev.x / this.pixelRatio,
      y: ev.y / this.pixelRatio,
      target: ev.target, // canvas 元素
      toElement: ev.event.toElement || ev.event.relatedTarget
    };
  };

  EventController.prototype._getShape = function _getShape(x, y) {
    var view = this.view;
    var container = view.get('canvas');
    return container.getShape(x, y);
  };

  EventController.prototype._getPointInfo = function _getPointInfo(ev) {
    var view = this.view;
    var point = {
      x: ev.x / this.pixelRatio,
      y: ev.y / this.pixelRatio
    };
    var views = view.getViewsByPoint(point);
    point.views = views;
    return point;
  };

  EventController.prototype._getEventObj = function _getEventObj(ev, point, views) {
    return {
      x: point.x,
      y: point.y,
      target: ev.target, // canvas 元素
      toElement: ev.event.toElement || ev.event.relatedTarget, // 目标元素
      views: views
    };
  };

  EventController.prototype.bindEvents = function bindEvents() {
    var canvas = this.canvas;
    canvas.on('mousedown', Util.wrapBehavior(this, 'onDown'));
    canvas.on('mousemove', Util.wrapBehavior(this, 'onMove'));
    canvas.on('mouseleave', Util.wrapBehavior(this, 'onOut'));
    canvas.on('mouseup', Util.wrapBehavior(this, 'onUp'));
    canvas.on('click', Util.wrapBehavior(this, 'onClick'));
    canvas.on('dblclick', Util.wrapBehavior(this, 'onClick'));
    canvas.on('touchstart', Util.wrapBehavior(this, 'onTouchstart'));
    canvas.on('touchmove', Util.wrapBehavior(this, 'onTouchmove'));
    canvas.on('touchend', Util.wrapBehavior(this, 'onTouchend'));
  };

  EventController.prototype._triggerShapeEvent = function _triggerShapeEvent(shape, eventName, eventObj) {
    if (shape && shape.name) {
      var view = this.view;
      var name = shape.name + ':' + eventName;
      eventObj.view = view;
      eventObj.appendInfo = shape.get('appendInfo'); // appendInfo is defined by user
      view.emit(name, eventObj);
      // const parent = view.get('parent');
      // if (parent) { // chart 上也需要抛出该事件，本期先不抛出
      //   parent.emit(name, eventObj);
      // }
    }
  };

  EventController.prototype.onDown = function onDown(ev) {
    var view = this.view;
    var eventObj = this._getShapeEventObj(ev);
    eventObj.shape = this.currentShape;
    registerData(eventObj);
    view.emit('mousedown', eventObj);
    this._triggerShapeEvent(this.currentShape, 'mousedown', eventObj);
  };

  EventController.prototype.onMove = function onMove(ev) {
    var self = this;
    var view = self.view;
    var currentShape = self.currentShape;
    var shape = self._getShape(ev.x, ev.y);
    var eventObj = self._getShapeEventObj(ev);
    eventObj.shape = shape;
    registerData(eventObj);
    view.emit('mousemove', eventObj);
    self._triggerShapeEvent(shape, 'mousemove', eventObj);

    if (currentShape && !isSameShape(currentShape, shape)) {
      var leaveObj = self._getShapeEventObj(ev);
      leaveObj.shape = currentShape;
      leaveObj.toShape = shape;
      registerData(leaveObj);
      self._triggerShapeEvent(currentShape, 'mouseleave', leaveObj);
    }

    if (shape && !isSameShape(currentShape, shape)) {
      var enterObj = self._getShapeEventObj(ev);
      enterObj.shape = shape;
      enterObj.fromShape = currentShape;
      registerData(enterObj);
      self._triggerShapeEvent(shape, 'mouseenter', enterObj);
    }
    self.currentShape = shape;

    var point = self._getPointInfo(ev);
    var preViews = self.curViews || [];

    if (preViews.length === 0 && point.views.length) {
      view.emit('plotenter', self._getEventObj(ev, point, point.views));
    }
    if (preViews.length && point.views.length === 0) {
      view.emit('plotleave', self._getEventObj(ev, point, preViews));
    }

    if (point.views.length) {
      eventObj = self._getEventObj(ev, point, point.views);
      eventObj.shape = shape;
      registerData(eventObj);
      view.emit('plotmove', eventObj);
    }

    self.curViews = point.views;
  };

  EventController.prototype.onOut = function onOut(ev) {
    var self = this;
    var view = self.view;
    var point = self._getPointInfo(ev);
    view.emit('plotleave', self._getEventObj(ev, point, self.curViews));
  };

  EventController.prototype.onUp = function onUp(ev) {
    var view = this.view;
    var eventObj = this._getShapeEventObj(ev);
    eventObj.shape = this.currentShape;
    view.emit('mouseup', eventObj);
    this._triggerShapeEvent(this.currentShape, 'mouseup', eventObj);
  };

  EventController.prototype.onClick = function onClick(ev) {
    var self = this;
    var view = self.view;
    var shape = self._getShape(ev.x, ev.y);
    var shapeEventObj = self._getShapeEventObj(ev);
    shapeEventObj.shape = shape;
    registerData(shapeEventObj);
    view.emit('click', shapeEventObj);
    self._triggerShapeEvent(shape, ev.type, shapeEventObj);
    self.currentShape = shape;

    var point = self._getPointInfo(ev);
    var views = point.views;
    if (!Util.isEmpty(views)) {
      var eventObj = self._getEventObj(ev, point, views);
      if (self.currentShape) {
        var _shape = self.currentShape;
        eventObj.shape = _shape;
        registerData(eventObj);
        // eventObj.data = shape.get('origin');
      }
      view.emit('plotclick', eventObj);
      if (ev.type === 'dblclick') {
        view.emit('plotdblclick', eventObj);
        view.emit('dblclick', shapeEventObj);
      }
    }
  };

  EventController.prototype.onTouchstart = function onTouchstart(ev) {
    var view = this.view;
    var shape = this._getShape(ev.x, ev.y);
    var eventObj = this._getShapeEventObj(ev);
    eventObj.shape = shape;
    registerData(eventObj);
    view.emit('touchstart', eventObj);
    this._triggerShapeEvent(shape, 'touchstart', eventObj);
    this.currentShape = shape;
  };

  EventController.prototype.onTouchmove = function onTouchmove(ev) {
    var view = this.view;
    var shape = this._getShape(ev.x, ev.y);
    var eventObj = this._getShapeEventObj(ev);
    eventObj.shape = shape;
    registerData(eventObj);
    view.emit('touchmove', eventObj);
    this._triggerShapeEvent(shape, 'touchmove', eventObj);
    this.currentShape = shape;
  };

  EventController.prototype.onTouchend = function onTouchend(ev) {
    var view = this.view;
    var eventObj = this._getShapeEventObj(ev);
    eventObj.shape = this.currentShape;
    registerData(eventObj);
    view.emit('touchend', eventObj);
    this._triggerShapeEvent(this.currentShape, 'touchend', eventObj);
  };

  EventController.prototype.clearEvents = function clearEvents() {
    var canvas = this.canvas;
    canvas.off('mousemove', Util.getWrapBehavior(this, 'onMove'));
    canvas.off('mouseleave', Util.getWrapBehavior(this, 'onOut'));
    canvas.off('mousedown', Util.getWrapBehavior(this, 'onDown'));
    canvas.off('mouseup', Util.getWrapBehavior(this, 'onUp'));
    canvas.off('click', Util.getWrapBehavior(this, 'onClick'));
    canvas.off('dblclick', Util.getWrapBehavior(this, 'onClick'));
    canvas.off('touchstart', Util.getWrapBehavior(this, 'onTouchstart'));
    canvas.off('touchmove', Util.getWrapBehavior(this, 'onTouchmove'));
    canvas.off('touchend', Util.getWrapBehavior(this, 'onTouchend'));
  };

  return EventController;
}();

module.exports = EventController;

/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview The entry of chart's animation
 * @author sima.zhang
 */
var Util = __webpack_require__(0);
var Animate = __webpack_require__(68);

var _require = __webpack_require__(2),
    MatrixUtil = _require.MatrixUtil;

var mat3 = MatrixUtil.mat3;

// 获取图组内所有的shapes

function getShapes(container, viewId) {
  var shapes = [];
  if (container.get('animate') === false) {
    return [];
  }
  var children = container.get('children');
  Util.each(children, function (child) {
    if (child.isGroup) {
      shapes = shapes.concat(getShapes(child, viewId));
    } else if (child.isShape && child._id) {
      var id = child._id;
      id = id.split('-')[0];
      if (id === viewId) {
        shapes.push(child);
      }
    }
  });

  return shapes;
}

function cache(shapes) {
  var rst = {};
  Util.each(shapes, function (shape) {
    if (!shape._id || shape.isClip) return;
    var id = shape._id;
    rst[id] = {
      _id: id,
      type: shape.get('type'),
      attrs: Util.cloneDeep(shape.__attrs), // 原始属性
      name: shape.name,
      index: shape.get('index'),
      animateCfg: shape.get('animateCfg'),
      coord: shape.get('coord')
    };
  });
  return rst;
}

function getAnimate(geomType, coord, animationType, animationName) {
  var result = void 0;
  if (animationName) {
    result = Animate.Action[animationType][animationName];
  } else {
    result = Animate.getAnimation(geomType, coord, animationType);
  }
  return result;
}

function getAnimateCfg(geomType, animationType, animateCfg) {
  var defaultCfg = Animate.getAnimateCfg(geomType, animationType);
  if (animateCfg && animateCfg[animationType]) {
    return Util.deepMix({}, defaultCfg, animateCfg[animationType]);
  }
  return defaultCfg;
}

function addAnimate(cache, shapes, canvas, isUpdate) {
  var animate = void 0;
  var animateCfg = void 0;
  var canvasDrawn = false;

  if (isUpdate) {
    // Step: leave -> update -> enter
    var updateShapes = []; // 存储的是 shapes
    var newShapes = []; // 存储的是 shapes
    Util.each(shapes, function (shape) {
      var result = cache[shape._id];
      if (!result) {
        newShapes.push(shape);
      } else {
        shape.setSilent('cacheShape', result);
        updateShapes.push(shape);
        delete cache[shape._id];
      }
    });

    Util.each(cache, function (deletedShape) {
      var name = deletedShape.name,
          coord = deletedShape.coord,
          _id = deletedShape._id,
          attrs = deletedShape.attrs,
          index = deletedShape.index,
          type = deletedShape.type;

      animateCfg = getAnimateCfg(name, 'leave', deletedShape.animateCfg);
      animate = getAnimate(name, coord, 'leave', animateCfg.animation);
      if (Util.isFunction(animate)) {
        var tempShape = canvas.addShape(type, {
          attrs: attrs,
          index: index
        });
        tempShape._id = _id;
        tempShape.name = name;
        if (coord) {
          var tempShapeMatrix = tempShape.getMatrix();
          var finalMatrix = mat3.multiply([], tempShapeMatrix, coord.matrix);
          tempShape.setMatrix(finalMatrix);
        }
        canvasDrawn = true;
        animate(tempShape, animateCfg, coord);
      }
    });

    Util.each(updateShapes, function (updateShape) {
      var name = updateShape.name;
      var coord = updateShape.get('coord');
      var cacheAttrs = updateShape.get('cacheShape').attrs;
      // 判断如果属性相同的话就不进行变换
      if (!Util.isEqual(cacheAttrs, updateShape.__attrs)) {
        animateCfg = getAnimateCfg(name, 'update', updateShape.get('animateCfg'));
        animate = getAnimate(name, coord, 'update', animateCfg.animation);
        if (Util.isFunction(animate)) {
          animate(updateShape, animateCfg, coord);
        } else {
          var endState = Util.cloneDeep(updateShape.__attrs);
          // updateShape.__attrs = cacheAttrs;
          updateShape.attr(cacheAttrs);
          updateShape.animate(endState, animateCfg.duration, animateCfg.easing, function () {
            updateShape.setSilent('cacheShape', null);
          });
        }
        canvasDrawn = true;
      }
    });

    Util.each(newShapes, function (newShape) {
      var name = newShape.name;
      var coord = newShape.get('coord');

      animateCfg = getAnimateCfg(name, 'enter', newShape.get('animateCfg'));
      animate = getAnimate(name, coord, 'enter', animateCfg.animation);
      if (Util.isFunction(animate)) {
        animate(newShape, animateCfg, coord);
        canvasDrawn = true;
      }
    });
  } else {
    Util.each(shapes, function (shape) {
      var name = shape.name;
      var coord = shape.get('coord');
      animateCfg = getAnimateCfg(name, 'appear', shape.get('animateCfg'));
      animate = getAnimate(name, coord, 'appear', animateCfg.animation);
      if (Util.isFunction(animate)) {
        animate(shape, animateCfg, coord);
        canvasDrawn = true;
      }
    });
  }
  return canvasDrawn;
}

module.exports = {
  execAnimation: function execAnimation(view, isUpdate) {
    var viewContainer = view.get('middlePlot');
    var axisContainer = view.get('backPlot');
    var viewId = view.get('_id');
    var canvas = view.get('canvas');
    var caches = canvas.get(viewId + 'caches') || [];
    var shapes = getShapes(viewContainer, viewId);
    var axisShapes = getShapes(axisContainer, viewId);
    var cacheShapes = shapes.concat(axisShapes);
    canvas.setSilent(viewId + 'caches', cache(cacheShapes));
    var drawn = void 0;
    if (isUpdate) {
      drawn = addAnimate(caches, cacheShapes, canvas, isUpdate);
    } else {
      drawn = addAnimate(caches, shapes, canvas, isUpdate);
    }
    if (!drawn) {
      canvas.draw();
    }
  }
};

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @fileOverview Facet 的入口
 * @author dxq613@gmail.com
 */

var Facets = {};

Facets.Rect = __webpack_require__(123);
Facets.List = __webpack_require__(124);
Facets.Circle = __webpack_require__(360);
Facets.Tree = __webpack_require__(361);
Facets.Mirror = __webpack_require__(362);
Facets.Matrix = __webpack_require__(363);

module.exports = Facets;

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview circle facets
 * @author dxq613@gmail.com
 */

var Base = __webpack_require__(45);

function getPoint(center, r, angle) {
  return {
    x: center.x + r * Math.cos(angle),
    y: center.y + r * Math.sin(angle)
  };
}

var Circle = function (_Base) {
  _inherits(Circle, _Base);

  function Circle() {
    _classCallCheck(this, Circle);

    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
  }

  Circle.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);
    cfg.type = 'circle';
    return cfg;
  };

  Circle.prototype.getRegion = function getRegion(count, index) {
    var r = 1 / 2; // 画布半径
    var avgAngle = Math.PI * 2 / count;
    var angle = -1 * Math.PI / 2 + avgAngle * index; // 当前分面所在的弧度
    var facetR = r / (1 + 1 / Math.sin(avgAngle / 2));
    var center = { x: 0.5, y: 0.5 }; // 画布圆心
    var middle = getPoint(center, r - facetR, angle); // 分面的中心点
    var startAngle = Math.PI * 5 / 4; // 右上角
    var endAngle = Math.PI * 1 / 4; // 左下角

    return {
      start: getPoint(middle, facetR, startAngle),
      end: getPoint(middle, facetR, endAngle)
    };
  };

  Circle.prototype.generateFacets = function generateFacets(data) {
    var self = this;
    var fields = self.fields;
    var field = fields[0];
    if (!field) {
      throw 'Please specify for the field for facet!';
    }
    var values = self.getFieldValues(field, data);
    var count = values.length;
    var rst = [];
    values.forEach(function (value, index) {
      var conditions = [{ field: field, value: value, values: values }];
      var filter = self.getFilter(conditions);
      var subData = data.filter(filter);
      var facet = {
        type: self.type,
        colValue: value,
        colField: field,
        colIndex: index,
        cols: count,
        rows: 1,
        rowIndex: 0,
        data: subData,
        region: self.getRegion(count, index)
      };
      rst.push(facet);
    });
    return rst;
  };

  return Circle;
}(Base);

module.exports = Circle;

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview tree facets
 * @author dxq613@gmail.com
 */

var assign = __webpack_require__(60);
var Base = __webpack_require__(45);

var Tree = function (_Base) {
  _inherits(Tree, _Base);

  function Tree() {
    _classCallCheck(this, Tree);

    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
  }

  Tree.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Base.prototype.getDefaultCfg.call(this);
    cfg.type = 'tree';
    cfg.line = {
      lineWidth: 1,
      stroke: '#ddd'
    };
    cfg.lineSmooth = false;
    return cfg;
  };

  Tree.prototype.generateFacets = function generateFacets(data) {
    var self = this;
    var fields = self.fields;
    if (!fields.length) {
      throw 'Please specify for the fields for facet!';
    }
    var rst = [];
    var root = self.getRootFacet(data);
    // if (self.showRoot) {
    rst.push(root);
    // }
    root.children = self.getChildFacets(data, 1, rst);
    self.setRegion(rst);
    return rst;
  };

  Tree.prototype.getRootFacet = function getRootFacet(data) {
    var self = this;
    var facet = {
      type: self.type,
      rows: self.getRows(),
      rowIndex: 0,
      colIndex: 0,
      colValue: self.rootTitle,
      data: data
    };
    return facet;
  };

  Tree.prototype.getRows = function getRows() {
    return this.fields.length + 1;
  };

  // get child


  Tree.prototype.getChildFacets = function getChildFacets(data, level, arr) {
    var self = this;
    var fields = self.fields;
    var length = fields.length;
    if (length < level) {
      return;
    }
    var rst = [];
    var field = fields[level - 1];
    var values = self.getFieldValues(field, data);
    values.forEach(function (value, index) {
      var conditions = [{ field: field, value: value, values: values }];
      var filter = self.getFilter(conditions);
      var subData = data.filter(filter);
      if (subData.length) {
        var facet = {
          type: self.type,
          colValue: value,
          colField: field,
          colIndex: index,
          rows: self.getRows(),
          rowIndex: level,
          data: subData,
          children: self.getChildFacets(subData, level + 1, arr)
        };
        rst.push(facet);
        arr.push(facet);
      }
    });
    return rst;
  };

  // 设置 region


  Tree.prototype.setRegion = function setRegion(facets) {
    var self = this;
    self.forceColIndex(facets);
    facets.forEach(function (facet) {
      facet.region = self.getRegion(facet.rows, facet.cols, facet.colIndex, facet.rowIndex);
    });
  };

  // set column index of facets


  Tree.prototype.forceColIndex = function forceColIndex(facets) {
    var self = this;
    var leafs = [];
    var index = 0;
    facets.forEach(function (facet) {
      if (self.isLeaf(facet)) {
        leafs.push(facet);
        facet.colIndex = index;
        index++;
      }
    });

    leafs.forEach(function (facet) {
      facet.cols = leafs.length;
    });
    var maxLevel = self.fields.length;
    for (var i = maxLevel - 1; i >= 0; i--) {
      var levelFacets = self.getFacetsByLevel(facets, i);
      // var yIndex = maxLevel - i;
      for (var j = 0; j < levelFacets.length; j++) {
        var facet = levelFacets[j];
        if (!self.isLeaf(facet)) {
          facet.originColIndex = facet.colIndex;
          facet.colIndex = self.getRegionIndex(facet.children);
          facet.cols = leafs.length;
        }
      }
    }
  };

  // get facet use level


  Tree.prototype.getFacetsByLevel = function getFacetsByLevel(facets, level) {
    var rst = [];
    facets.forEach(function (facet) {
      if (facet.rowIndex === level) {
        rst.push(facet);
      }
    });
    return rst;
  };

  // set facets region


  Tree.prototype.getRegion = function getRegion(rows, cols, xIndex, yIndex) {
    var xWidth = 1 / cols; // x轴方向的每个分面的偏移
    var yWidth = 1 / rows; // y轴方向的每个分面的偏移

    var start = {
      x: xWidth * xIndex,
      y: yWidth * yIndex
    };

    var end = {
      x: start.x + xWidth,
      y: start.y + yWidth * 2 / 3 // 预留1/3的空隙，方便添加连接线
    };
    return {
      start: start,
      end: end
    };
  };

  // if the facet has children , make it's column index in the middle of it's children


  Tree.prototype.getRegionIndex = function getRegionIndex(children) {
    var first = children[0];
    var last = children[children.length - 1];
    return (last.colIndex - first.colIndex) / 2 + first.colIndex;
  };

  // is  a leaf without children


  Tree.prototype.isLeaf = function isLeaf(facet) {
    return !facet.children || !facet.children.length;
  };

  Tree.prototype.setXAxis = function setXAxis(xField, axes, facet) {
    // 当是最后一行或者下面没有 view 时文本不显示
    if (facet.rowIndex !== facet.rows - 1) {
      axes[xField].label = null;
      axes[xField].title = null;
    }
  };

  // 设置 y 坐标轴的文本、title 是否显示


  Tree.prototype.setYAxis = function setYAxis(yField, axes, facet) {
    if (facet.originColIndex !== 0 && facet.colIndex !== 0) {
      axes[yField].title = null;
      axes[yField].label = null;
    }
  };

  // 绘制完成后


  Tree.prototype.onPaint = function onPaint() {
    _Base.prototype.onPaint.call(this);
    this.group.clear();
    if (this.facets && this.line) {
      this.drawLines(this.facets, this.group);
    }
  };

  Tree.prototype.drawLines = function drawLines(facets, group) {
    var self = this;
    var lineGroup = group.addGroup();
    facets.forEach(function (facet) {
      if (!self.isLeaf(facet)) {
        var children = facet.children;
        self._addFacetLines(facet, children, lineGroup);
      }
    });
  };

  // add lines with it's children


  Tree.prototype._addFacetLines = function _addFacetLines(facet, children, group) {
    var self = this;
    var view = facet.view;
    var region = view.getViewRegion();
    var start = {
      x: region.start.x + (region.end.x - region.start.x) / 2,
      y: region.start.y
    };

    children.forEach(function (subFacet) {
      var subRegion = subFacet.view.getViewRegion();
      var end = {
        x: subRegion.start.x + (subRegion.end.x - subRegion.start.x) / 2,
        y: subRegion.end.y
      };
      var middle1 = {
        x: start.x,
        y: start.y + (end.y - start.y) / 2
      };
      var middle2 = {
        x: end.x,
        y: middle1.y
      };
      self._drawLine([start, middle1, middle2, end], group);
    });
  };

  Tree.prototype._getPath = function _getPath(points) {
    var self = this;
    var path = [];
    var smooth = self.lineSmooth;
    if (smooth) {
      path.push(['M', points[0].x, points[0].y]);
      path.push(['C', points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y]);
    } else {
      points.forEach(function (point, index) {
        if (index === 0) {
          path.push(['M', point.x, point.y]);
        } else {
          path.push(['L', point.x, point.y]);
        }
      });
    }

    return path;
  };

  // draw line width points


  Tree.prototype._drawLine = function _drawLine(points, group) {
    var self = this;
    var path = self._getPath(points);
    var line = self.line;
    group.addShape('path', {
      attrs: assign({
        path: path
      }, line)
    });
  };

  return Tree;
}(Base);

module.exports = Tree;

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview mirror facets
 * @author dxq613@gmail.com
 */

var List = __webpack_require__(124);

var Mirror = function (_List) {
  _inherits(Mirror, _List);

  function Mirror() {
    _classCallCheck(this, Mirror);

    return _possibleConstructorReturn(this, _List.apply(this, arguments));
  }

  Mirror.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _List.prototype.getDefaultCfg.call(this);
    cfg.type = 'mirror';
    this.transpose = false;
    return cfg;
  };

  Mirror.prototype.init = function init() {
    var self = this;
    if (self.transpose) {
      self.cols = 2;
      self.rows = 1;
    } else {
      self.cols = 1;
      self.rows = 2;
    }
    _List.prototype.init.call(this);
  };

  Mirror.prototype.beforeProcessView = function beforeProcessView(view, facet) {
    if (this.transpose) {
      if (facet.colIndex % 2 === 0) {
        view.coord().transpose().scale(-1, 1);
      } else {
        view.coord().transpose();
      }
    } else {
      if (facet.rowIndex % 2 !== 0) {
        view.coord().scale(1, -1);
      }
    }
  };

  Mirror.prototype.renderTitle = function renderTitle(view, facet) {
    if (this.transpose) {
      this.drawColTitle(view, facet);
    } else {
      this.drawRowTitle(view, facet);
    }
  };

  Mirror.prototype.setXAxis = function setXAxis(xField, axes, facet) {
    // 当是最后一行或者下面没有 view 时文本不显示
    if (facet.colIndex === 1 || facet.rowIndex === 1) {
      axes[xField].label = null;
      axes[xField].title = null;
    }
  };

  Mirror.prototype.setYAxis = function setYAxis() /* yField, axes, facet */{};

  return Mirror;
}(List);

module.exports = Mirror;

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview Use matrices to compare different fields
 * @author dxq613@gmail.com
 */

var Rect = __webpack_require__(123);

var Matrix = function (_Rect) {
  _inherits(Matrix, _Rect);

  function Matrix() {
    _classCallCheck(this, Matrix);

    return _possibleConstructorReturn(this, _Rect.apply(this, arguments));
  }

  Matrix.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Rect.prototype.getDefaultCfg.call(this);
    cfg.type = 'matrix';
    cfg.showTitle = false;
    return cfg;
  };

  Matrix.prototype.generateFacets = function generateFacets(data) {
    var self = this;
    var fields = self.fields;
    var rows = fields.length;
    var cols = rows; // 矩阵中行列相等，等于指定的字段个数
    var rst = [];
    for (var i = 0; i < cols; i++) {
      var colField = fields[i];
      for (var j = 0; j < rows; j++) {
        var rowField = fields[j];
        var facet = {
          type: self.type,
          colValue: colField,
          rowValue: rowField,
          colField: colField,
          rowField: rowField,
          colIndex: i,
          rowIndex: j,
          cols: cols,
          rows: rows,
          data: data,
          region: self.getRegion(rows, cols, i, j)
        };
        rst.push(facet);
      }
    }
    return rst;
  };

  // 设置 x 坐标轴的文本、title 是否显示


  Matrix.prototype.setXAxis = function setXAxis(xField, axes, facet) {
    if (facet.rowIndex !== facet.rows - 1) {
      axes[xField].title = null;
      axes[xField].label = null;
    }
  };

  // 设置 y 坐标轴的文本、title 是否显示


  Matrix.prototype.setYAxis = function setYAxis(yField, axes, facet) {
    if (facet.colIndex !== 0) {
      axes[yField].title = null;
      axes[yField].label = null;
    }
  };

  return Matrix;
}(Rect);

module.exports = Matrix;

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @fileOverview track g2
 * @author dxq613@gmail.com
 */
var Global = __webpack_require__(1);
var SERVER_URL = 'https://kcart.alipay.com/web/bi.do';
var Util = __webpack_require__(0);

var Monitor = function () {
  function Monitor(opt) {
    _classCallCheck(this, Monitor);

    var _self = this;
    var config = opt || {};
    var image = new Image();
    Util.mix(_self, {
      image: image,
      server: SERVER_URL
    }, config);
  }
  /**
   * 发送请求
   * @param {object} opt 埋点记录参数
   *   opt.pg：访问的页面url
   */


  Monitor.prototype.log = function log(opt) {
    var _self = this;
    var config = opt || {};
    var newObj = Util.mix({
      pg: document.URL,
      r: new Date().getTime()
    }, config);
    var d = encodeURIComponent(JSON.stringify([newObj]));
    _self.image.src = _self.server + '?BIProfile=merge&d=' + d;
  };

  return Monitor;
}();

// 延迟发送请求


setTimeout(function () {
  if (Global.trackable) {
    var m = new Monitor();
    m.log({
      g2: true,
      version: Global.version,
      page_type: 'syslog'
    });
  }
}, 3000);

/***/ })
/******/ ]);
});
//# sourceMappingURL=g2.js.map

/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimal(1.23) returns ["123", 0].
/* harmony default export */ __webpack_exports__["a"] = (function(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
  var i, coefficient = x.slice(0, i);

  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
});


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

var isPrototype = __webpack_require__(17),
    nativeKeys = __webpack_require__(83);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;


/***/ }),
/* 50 */
/***/ (function(module, exports) {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ }),
/* 52 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;


/***/ }),
/* 53 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

var SetCache = __webpack_require__(124),
    arraySome = __webpack_require__(127),
    cacheHas = __webpack_require__(128);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(1);

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;


/***/ }),
/* 56 */
/***/ (function(module, exports) {

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;


/***/ }),
/* 57 */
/***/ (function(module, exports) {

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(59),
    getSymbols = __webpack_require__(39),
    keys = __webpack_require__(13);

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(38),
    isArray = __webpack_require__(0);

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;


/***/ }),
/* 60 */
/***/ (function(module, exports) {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var baseTimes = __webpack_require__(132),
    isArguments = __webpack_require__(19),
    isArray = __webpack_require__(0),
    isBuffer = __webpack_require__(20),
    isIndex = __webpack_require__(40),
    isTypedArray = __webpack_require__(34);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(36),
    arrayEach = __webpack_require__(138),
    assignValue = __webpack_require__(63),
    baseAssign = __webpack_require__(139),
    baseAssignIn = __webpack_require__(140),
    cloneBuffer = __webpack_require__(143),
    copyArray = __webpack_require__(144),
    copySymbols = __webpack_require__(145),
    copySymbolsIn = __webpack_require__(146),
    getAllKeys = __webpack_require__(58),
    getAllKeysIn = __webpack_require__(68),
    getTag = __webpack_require__(30),
    initCloneArray = __webpack_require__(147),
    initCloneByTag = __webpack_require__(148),
    initCloneObject = __webpack_require__(157),
    isArray = __webpack_require__(0),
    isBuffer = __webpack_require__(20),
    isObject = __webpack_require__(7),
    keys = __webpack_require__(13);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, baseClone, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(64),
    eq = __webpack_require__(23);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__(65);

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(6);

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(61),
    baseKeysIn = __webpack_require__(141),
    isArrayLike = __webpack_require__(10);

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(38),
    getPrototype = __webpack_require__(44),
    getSymbols = __webpack_require__(39),
    stubArray = __webpack_require__(60);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

module.exports = getSymbolsIn;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(59),
    getSymbolsIn = __webpack_require__(67),
    keysIn = __webpack_require__(66);

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;


/***/ }),
/* 69 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

module.exports = arrayReduce;


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(2),
    getPrototype = __webpack_require__(44),
    isObjectLike = __webpack_require__(3);

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(38),
    isFlattenable = __webpack_require__(166);

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

module.exports = baseFlatten;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var apply = __webpack_require__(167);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

var baseSetToString = __webpack_require__(168),
    shortOut = __webpack_require__(170);

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.supportD3Formatter = undefined;

var _isString2 = __webpack_require__(75);

var _isString3 = _interopRequireDefault(_isString2);

var _get2 = __webpack_require__(11);

var _get3 = _interopRequireDefault(_get2);

var _d3Format = __webpack_require__(179);

var d3 = _interopRequireWildcard(_d3Format);

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var supportD3Formatter = exports.supportD3Formatter = function supportD3Formatter(obj) {
    var _loop_1 = function _loop_1(item) {
        if (obj.hasOwnProperty(item)) {
            var formatter_1 = (0, _get3.default)(obj[item], 'formatter');
            if ((0, _isString3.default)(formatter_1)) {
                obj[item].formatter = function (val) {
                    return d3.format(formatter_1)(val);
                };
            }
        }
    };
    for (var item in obj) {
        _loop_1(item);
    }
    return obj;
};
//# sourceMappingURL=setCustomFormatter.js.map

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(2),
    isArray = __webpack_require__(0),
    isObjectLike = __webpack_require__(3);

/** `Object#toString` result references. */
var stringTag = '[object String]';

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
}

module.exports = isString;


/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__exponent__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__formatGroup__ = __webpack_require__(181);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__formatNumerals__ = __webpack_require__(182);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__formatSpecifier__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__formatTypes__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__formatPrefixAuto__ = __webpack_require__(79);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__identity__ = __webpack_require__(185);








var prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

/* harmony default export */ __webpack_exports__["a"] = (function(locale) {
  var group = locale.grouping && locale.thousands ? Object(__WEBPACK_IMPORTED_MODULE_1__formatGroup__["a" /* default */])(locale.grouping, locale.thousands) : __WEBPACK_IMPORTED_MODULE_6__identity__["a" /* default */],
      currency = locale.currency,
      decimal = locale.decimal,
      numerals = locale.numerals ? Object(__WEBPACK_IMPORTED_MODULE_2__formatNumerals__["a" /* default */])(locale.numerals) : __WEBPACK_IMPORTED_MODULE_6__identity__["a" /* default */],
      percent = locale.percent || "%";

  function newFormat(specifier) {
    specifier = Object(__WEBPACK_IMPORTED_MODULE_3__formatSpecifier__["a" /* default */])(specifier);

    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        type = specifier.type;

    // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.
    var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? percent : "";

    // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?
    var formatType = __WEBPACK_IMPORTED_MODULE_4__formatTypes__["a" /* default */][type],
        maybeSuffix = !type || /[defgprs%]/.test(type);

    // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].
    precision = precision == null ? (type ? 6 : 12)
        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
        : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i, n, c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;

        // Perform the initial formatting.
        var valueNegative = value < 0;
        value = formatType(Math.abs(value), precision);

        // If a negative value rounds to zero during formatting, treat as positive.
        if (valueNegative && +value === 0) valueNegative = false;

        // Compute the prefix and suffix.
        valuePrefix = (valueNegative ? (sign === "(" ? sign : "-") : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = valueSuffix + (type === "s" ? prefixes[8 + __WEBPACK_IMPORTED_MODULE_5__formatPrefixAuto__["b" /* prefixExponent */] / 3] : "") + (valueNegative && sign === "(" ? ")" : "");

        // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }

      // If the fill character is not "0", grouping is applied before padding.
      if (comma && !zero) value = group(value, Infinity);

      // Compute the padding.
      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : "";

      // If the fill character is "0", grouping is applied after padding.
      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

      // Reconstruct the final output based on the desired alignment.
      switch (align) {
        case "<": value = valuePrefix + value + valueSuffix + padding; break;
        case "=": value = valuePrefix + padding + value + valueSuffix; break;
        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
        default: value = padding + valuePrefix + value + valueSuffix; break;
      }

      return numerals(value);
    }

    format.toString = function() {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = Object(__WEBPACK_IMPORTED_MODULE_3__formatSpecifier__["a" /* default */])(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor(Object(__WEBPACK_IMPORTED_MODULE_0__exponent__["a" /* default */])(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function(value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
});


/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = formatSpecifier;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__formatTypes__ = __webpack_require__(78);


// [[fill]align][sign][symbol][0][width][,][.precision][type]
var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  return new FormatSpecifier(specifier);
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);

  var match,
      fill = match[1] || " ",
      align = match[2] || ">",
      sign = match[3] || "-",
      symbol = match[4] || "",
      zero = !!match[5],
      width = match[6] && +match[6],
      comma = !!match[7],
      precision = match[8] && +match[8].slice(1),
      type = match[9] || "";

  // The "n" type is an alias for ",g".
  if (type === "n") comma = true, type = "g";

  // Map invalid types to the default format.
  else if (!__WEBPACK_IMPORTED_MODULE_0__formatTypes__["a" /* default */][type]) type = "";

  // If zero fill is specified, padding goes after sign and before digits.
  if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

  this.fill = fill;
  this.align = align;
  this.sign = sign;
  this.symbol = symbol;
  this.zero = zero;
  this.width = width;
  this.comma = comma;
  this.precision = precision;
  this.type = type;
}

FormatSpecifier.prototype.toString = function() {
  return this.fill
      + this.align
      + this.sign
      + this.symbol
      + (this.zero ? "0" : "")
      + (this.width == null ? "" : Math.max(1, this.width | 0))
      + (this.comma ? "," : "")
      + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0))
      + this.type;
};


/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__formatDefault__ = __webpack_require__(183);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__formatPrefixAuto__ = __webpack_require__(79);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__formatRounded__ = __webpack_require__(184);




/* harmony default export */ __webpack_exports__["a"] = ({
  "": __WEBPACK_IMPORTED_MODULE_0__formatDefault__["a" /* default */],
  "%": function(x, p) { return (x * 100).toFixed(p); },
  "b": function(x) { return Math.round(x).toString(2); },
  "c": function(x) { return x + ""; },
  "d": function(x) { return Math.round(x).toString(10); },
  "e": function(x, p) { return x.toExponential(p); },
  "f": function(x, p) { return x.toFixed(p); },
  "g": function(x, p) { return x.toPrecision(p); },
  "o": function(x) { return Math.round(x).toString(8); },
  "p": function(x, p) { return Object(__WEBPACK_IMPORTED_MODULE_2__formatRounded__["a" /* default */])(x * 100, p); },
  "r": __WEBPACK_IMPORTED_MODULE_2__formatRounded__["a" /* default */],
  "s": __WEBPACK_IMPORTED_MODULE_1__formatPrefixAuto__["a" /* default */],
  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
  "x": function(x) { return Math.round(x).toString(16); }
});


/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return prefixExponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__formatDecimal__ = __webpack_require__(48);


var prefixExponent;

/* harmony default export */ __webpack_exports__["a"] = (function(x, p) {
  var d = Object(__WEBPACK_IMPORTED_MODULE_0__formatDecimal__["a" /* default */])(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient
      : i > n ? coefficient + new Array(i - n + 1).join("0")
      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
      : "0." + new Array(1 - i).join("0") + Object(__WEBPACK_IMPORTED_MODULE_0__formatDecimal__["a" /* default */])(x, Math.max(0, p + i - 1))[0]; // less than 1y!
});


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(7);

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;


/***/ }),
/* 81 */
/***/ (function(module, exports) {

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Global = exports.registerShape = exports.registerAnimation = undefined;

var _isEmpty2 = __webpack_require__(5);

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _isNil2 = __webpack_require__(8);

var _isNil3 = _interopRequireDefault(_isNil2);

exports.default = function (config) {
    if ((0, _isNil3.default)(config) || (0, _isEmpty3.default)(config)) {
        return;
    }
    var commonChart = new _CommonChart2.default(config);
    commonChart.render();
    return commonChart;
};

var _CommonChart = __webpack_require__(99);

var _CommonChart2 = _interopRequireDefault(_CommonChart);

var _CustomizeUtils = __webpack_require__(46);

var CustomizeUtils = _interopRequireWildcard(_CustomizeUtils);

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var G2 = __webpack_require__(47);
var registerAnimation = exports.registerAnimation = CustomizeUtils.registerAnimation;
var registerShape = exports.registerShape = CustomizeUtils.registerShape;

//# sourceMappingURL=index.js.map
var Global = exports.Global = G2.Global;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(50);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(6),
    root = __webpack_require__(1);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(18),
    isMasked = __webpack_require__(89),
    isObject = __webpack_require__(7),
    toSource = __webpack_require__(52);

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;


/***/ }),
/* 86 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(9);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),
/* 88 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

var coreJsData = __webpack_require__(90);

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(1);

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;


/***/ }),
/* 91 */
/***/ (function(module, exports) {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(6),
    root = __webpack_require__(1);

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(6),
    root = __webpack_require__(1);

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(6),
    root = __webpack_require__(1);

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(2),
    isObjectLike = __webpack_require__(3);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;


/***/ }),
/* 96 */
/***/ (function(module, exports) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(2),
    isLength = __webpack_require__(32),
    isObjectLike = __webpack_require__(3);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(51);

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(33)(module)))

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _isEqual2 = __webpack_require__(100);

var _isEqual3 = _interopRequireDefault(_isEqual2);

var _get2 = __webpack_require__(11);

var _get3 = _interopRequireDefault(_get2);

var _isFunction2 = __webpack_require__(18);

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _omit2 = __webpack_require__(15);

var _omit3 = _interopRequireDefault(_omit2);

var _isNil2 = __webpack_require__(8);

var _isNil3 = _interopRequireDefault(_isNil2);

var _isEmpty2 = __webpack_require__(5);

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _cloneDeep2 = __webpack_require__(4);

var _cloneDeep3 = _interopRequireDefault(_cloneDeep2);

var _loadShapes = __webpack_require__(171);

var _loadShapes2 = _interopRequireDefault(_loadShapes);

var _CommonDataSet = __webpack_require__(174);

var _CommonDataSet2 = _interopRequireDefault(_CommonDataSet);

var _EventUtils = __webpack_require__(12);

var EventUtils = _interopRequireWildcard(_EventUtils);

var _setCoordConfig = __webpack_require__(176);

var setCoordConfig = _interopRequireWildcard(_setCoordConfig);

var _setAxisConfig = __webpack_require__(178);

var setAxisConfig = _interopRequireWildcard(_setAxisConfig);

var _setSeriesConfig = __webpack_require__(189);

var setSeriesConfig = _interopRequireWildcard(_setSeriesConfig);

var _setLengendConfig = __webpack_require__(217);

var setLengendConfig = _interopRequireWildcard(_setLengendConfig);

var _setGuideConfig = __webpack_require__(218);

var setGuideConfig = _interopRequireWildcard(_setGuideConfig);

var _setTooltipConfig = __webpack_require__(219);

var setTooltipConfig = _interopRequireWildcard(_setTooltipConfig);

var _setScaleConfig = __webpack_require__(220);

var setScaleConfig = _interopRequireWildcard(_setScaleConfig);

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var G2 = __webpack_require__(47);
var CommonChart = function () {
    function CommonChart(config) {
        this.viewInstance = {};
        this.config = (0, _cloneDeep3.default)(config);
        this.checkChartConfig(this.config);
        var chart = this.chartInstance = new G2.Chart(this.config.chart);
        var dataSet = this.datasetInstance = new _CommonDataSet2.default();
    }
    CommonChart.prototype.getWidth = function () {
        return this.chartInstance.get('width');
    };
    CommonChart.prototype.getHeight = function () {
        return this.chartInstance.get('height');
    };
    CommonChart.prototype.render = function () {
        var config = this.config;
        var chart = this.chartInstance;
        (0, _loadShapes2.default)();
        this.setEvents(chart, config);
        if (!(0, _isEmpty3.default)(config.data)) {
            var data = config.data,
                dataPre = config.dataPre,
                dataView = config.dataView;
            var processedData = this.datasetInstance.getProcessedData(data, dataPre, 'main');
            if (!(0, _isEmpty3.default)(config.series) || !(0, _isEmpty3.default)(config.facet)) {
                var calData = this.datasetInstance.getDataView(processedData, dataView);
                this.setDataSource(chart, calData);
            }
        }
        this.setCoord(chart, config);
        this.setTooltip(chart, config);
        this.setAxis(chart, config);
        this.setContent(chart, config);
        this.setLegend(chart, config);
        this.setViews(chart, config);
        this.setFacet(chart, config);
        this.oriConfig = config;
        chart.render();
    };
    CommonChart.prototype.repaint = function (config) {
        var newConfig = (0, _cloneDeep3.default)(config);
        this.checkChartConfig(newConfig);
        this.renderDiffConfig(newConfig);
        this.oriConfig = newConfig;
    };
    CommonChart.prototype.destroy = function (chart) {
        chart && chart.destroy();
    };
    CommonChart.prototype.clear = function (chart) {
        chart && chart.clear();
    };
    CommonChart.prototype.checkChartConfig = function (config) {
        var chart = config.chart;
        if ((0, _isNil3.default)(chart.height)) {
            throw new Error('please set correct chart option');
        }
    };
    CommonChart.prototype.createView = function (chart, config) {
        var view = chart.view();
        if (!config.viewId) {
            throw new Error('you must set viewId');
        }
        this.viewInstance[config.viewId] = view;
        return view;
    };
    CommonChart.prototype.setEvents = function (chart, config) {
        EventUtils.setEvent(chart, null, config.chart);
    };
    CommonChart.prototype.setDataSource = function (chart, data) {
        chart.source(data);
    };
    CommonChart.prototype.setScale = function (chart, config) {
        return setScaleConfig.process(chart, config);
    };
    CommonChart.prototype.setCoord = function (chart, config) {
        return setCoordConfig.process(chart, config);
    };
    CommonChart.prototype.setSeries = function (chart, config) {
        return setSeriesConfig.process(chart, config);
    };
    CommonChart.prototype.setAxis = function (chart, config) {
        return setAxisConfig.process(chart, config);
    };
    CommonChart.prototype.setTooltip = function (chart, config) {
        return setTooltipConfig.process(chart, config);
    };
    CommonChart.prototype.setGuide = function (chart, config) {
        return setGuideConfig.process(chart, config);
    };
    CommonChart.prototype.setLegend = function (chart, config) {
        return setLengendConfig.process(chart, config);
    };
    CommonChart.prototype.setContent = function (chart, config) {
        this.setScale(chart, config);
        this.setSeries(chart, config);
        this.setGuide(chart, config);
    };
    CommonChart.prototype.setView = function (item, chart, config) {
        var view = this.createView(chart, item);
        var viewData = item.data;
        var processedData;
        if (item.data) {
            processedData = this.datasetInstance.getProcessedData(item.data, item.dataPre, item.viewId);
        } else if (!item.data && item.dataPre) {
            processedData = this.datasetInstance.getProcessedData(config.data, item.dataPre, item.viewId);
        } else if (!item.data && !item.dataPre) {
            processedData = this.datasetInstance.copyData('main', item.viewId);
        }
        var calData = this.datasetInstance.getDataView(processedData, item.dataView);
        this.setDataSource(view, calData);
        if (!(0, _isNil3.default)(item.coord)) {
            this.setCoord(view, item);
        }
        if (!(0, _isNil3.default)(item.tooltip)) {
            this.setTooltip(view, item);
        }
        if (!(0, _isNil3.default)(item.axis)) {
            this.setAxis(view, item);
        }
        this.setContent(view, item);
        return view;
    };
    CommonChart.prototype.setViews = function (chart, config) {
        var cViews = (0, _cloneDeep3.default)(config.views);
        var isArr = Array.isArray(cViews);
        if ((0, _isNil3.default)(cViews) || (0, _isEmpty3.default)(cViews)) {
            return;
        }
        var arrViews = isArr ? cViews : [cViews];
        for (var _i = 0, arrViews_1 = arrViews; _i < arrViews_1.length; _i++) {
            var item = arrViews_1[_i];
            this.setView(item, chart, config);
        }
    };
    CommonChart.prototype.setFacetViews = function (chart, facet, views) {
        var processedData = this.datasetInstance.getProcessedData(facet.data, views.dataPre);
        var calData = this.datasetInstance.getDataView(processedData, views.dataView);
        this.setDataSource(chart, calData);
        this.setContent(chart, views);
    };
    CommonChart.prototype.setFacet = function (chart, config) {
        var _this = this;
        var cFacet = (0, _cloneDeep3.default)(config.facet);
        if ((0, _isNil3.default)(cFacet) || (0, _isEmpty3.default)(cFacet)) {
            return;
        }
        var options = (0, _omit3.default)(cFacet, ['type', 'views']);
        if ((0, _isEmpty3.default)(cFacet.views) && !(0, _isFunction3.default)(cFacet.views)) {
            return chart.facet(cFacet.type, options);
        }
        if ((0, _isFunction3.default)(cFacet.views)) {
            options.eachView = function (v, f) {
                var options = cFacet.views(v, f);
                _this.setFacetViews(v, f, options);
            };
        } else {
            cFacet.views = Array.isArray(cFacet.views) ? cFacet.views : [cFacet.views];
            options.eachView = function (v, f) {
                _this.setFacetViews(v, f, cFacet.views[0]);
            };
        }
        return chart.facet(cFacet.type, options);
    };
    CommonChart.prototype.repaintWidthHeight = function (chart, config) {
        var oriConfig = this.oriConfig;
        var width = (0, _get3.default)(config, 'chart.width');
        var oWidth = (0, _get3.default)(oriConfig, 'chart.width');
        if ((!(0, _isNil3.default)(width) || !(0, _isNil3.default)(oWidth)) && !(0, _isEqual3.default)(oWidth, width)) {
            chart.changeWidth(width);
        }
        var height = (0, _get3.default)(config, 'chart.height');
        var oHeight = (0, _get3.default)(oriConfig, 'chart.height');
        if ((!(0, _isNil3.default)(height) || !(0, _isNil3.default)(oHeight)) && !(0, _isEqual3.default)(oHeight, height)) {
            chart.changeHeight(height);
        }
    };
    CommonChart.prototype.repaintData = function (chart, oriConfig, config) {
        if ((!(0, _isNil3.default)(oriConfig.data) || !(0, _isNil3.default)(config.data)) && !(0, _isEqual3.default)(oriConfig.data, config.data)) {
            var viewId = config.viewId || 'main';
            var processedData = this.datasetInstance.getProcessedData(config.data, config.dataPre, viewId);
            var calData = this.datasetInstance.getDataView(processedData, config.dataView);
            chart.changeData(calData);
        }
    };
    CommonChart.prototype.repaintContent = function (chart, oriConfig, config) {
        var hasChartChange = false;
        if ((!(0, _isNil3.default)(oriConfig.scale) || !(0, _isNil3.default)(config.scale)) && !(0, _isEqual3.default)(oriConfig.scale, config.scale)) {
            this.setScale(chart, config);
            hasChartChange = true;
        }
        if ((!(0, _isNil3.default)(oriConfig.coord) || !(0, _isNil3.default)(config.coord)) && !(0, _isEqual3.default)(oriConfig.coord, config.coord)) {
            this.setCoord(chart, config);
            hasChartChange = true;
        }
        if ((!(0, _isNil3.default)(oriConfig.axis) || !(0, _isNil3.default)(config.axis)) && !(0, _isEqual3.default)(oriConfig.axis, config.axis)) {
            this.setAxis(chart, config);
            hasChartChange = true;
        }
        if ((!(0, _isNil3.default)(oriConfig.series) || !(0, _isNil3.default)(config.series)) && !(0, _isEqual3.default)(oriConfig.series, config.series)) {
            this.setSeries(chart, config);
            hasChartChange = true;
        }
        if ((!(0, _isNil3.default)(oriConfig.tooltip) || !(0, _isNil3.default)(config.tooltip)) && !(0, _isEqual3.default)(oriConfig.tooltip, config.tooltip)) {
            this.setTooltip(chart, config);
            hasChartChange = true;
        }
        if ((!(0, _isNil3.default)(oriConfig.guide) || !(0, _isNil3.default)(config.guide)) && !(0, _isEqual3.default)(oriConfig.guide, config.guide)) {
            this.setGuide(chart, config);
            hasChartChange = true;
        }
        return hasChartChange;
    };
    CommonChart.prototype.repaintViews = function (chart, oriConfig, config) {
        var oViewsConfig = oriConfig.views;
        var cViews = (0, _cloneDeep3.default)(config.views);
        var isArr = Array.isArray(cViews);
        if ((!(0, _isNil3.default)(oriConfig.views) || !(0, _isNil3.default)(config.views)) && !(0, _isEqual3.default)(oriConfig.views, config.views)) {
            var arrViews = isArr ? cViews : [cViews];
            var _loop_1 = function _loop_1(item) {
                var oriView = oViewsConfig.filter(function (res) {
                    return res.viewId === item.viewId;
                });
                var view = void 0;
                if (oriView.length) {
                    view = this_1.viewInstance[item.viewId];
                    this_1.repaintData(view, oriView[0], item);
                    this_1.repaintContent(view, oriView[0], item);
                } else {
                    view = this_1.setView(item, chart, config);
                }
                view.repaint();
            };
            var this_1 = this;
            for (var _i = 0, arrViews_2 = arrViews; _i < arrViews_2.length; _i++) {
                var item = arrViews_2[_i];
                _loop_1(item);
            }
        }
    };
    CommonChart.prototype.renderDiffConfig = function (config) {
        var oriConfig = this.oriConfig;
        var chart = this.chartInstance;
        this.repaintWidthHeight(chart, config);
        this.repaintData(chart, oriConfig, config);
        var hasContentChange = this.repaintContent(chart, oriConfig, config);
        this.repaintViews(chart, oriConfig, config);
        var hasChartPartChange = false;
        if ((!(0, _isNil3.default)(oriConfig.legend) || !(0, _isNil3.default)(config.legend)) && !(0, _isEqual3.default)(oriConfig.legend, config.legend)) {
            this.setLegend(chart, config);
            hasChartPartChange = true;
        }
        if ((!(0, _isNil3.default)(oriConfig.facet) || !(0, _isNil3.default)(config.facet)) && !(0, _isEqual3.default)(oriConfig.facet, config.facet)) {
            this.setFacet(chart, config);
            hasChartPartChange = true;
        }
        if (hasContentChange || hasChartPartChange) {
            chart.repaint();
        }
    };
    return CommonChart;
}();
exports.default = CommonChart;
//# sourceMappingURL=CommonChart.js.map

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqual = __webpack_require__(35);

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

module.exports = isEqual;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(36),
    equalArrays = __webpack_require__(54),
    equalByTag = __webpack_require__(129),
    equalObjects = __webpack_require__(130),
    getTag = __webpack_require__(30),
    isArray = __webpack_require__(0),
    isBuffer = __webpack_require__(20),
    isTypedArray = __webpack_require__(34);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;


/***/ }),
/* 102 */
/***/ (function(module, exports) {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(22);

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(22);

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(22);

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(22);

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(21);

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;


/***/ }),
/* 108 */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;


/***/ }),
/* 109 */
/***/ (function(module, exports) {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;


/***/ }),
/* 110 */
/***/ (function(module, exports) {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(21),
    Map = __webpack_require__(31),
    MapCache = __webpack_require__(37);

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

var Hash = __webpack_require__(113),
    ListCache = __webpack_require__(21),
    Map = __webpack_require__(31);

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

var hashClear = __webpack_require__(114),
    hashDelete = __webpack_require__(115),
    hashGet = __webpack_require__(116),
    hashHas = __webpack_require__(117),
    hashSet = __webpack_require__(118);

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(24);

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;


/***/ }),
/* 115 */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(24);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(24);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(24);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(25);

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;


/***/ }),
/* 120 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(25);

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(25);

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(25);

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(37),
    setCacheAdd = __webpack_require__(125),
    setCacheHas = __webpack_require__(126);

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;


/***/ }),
/* 125 */
/***/ (function(module, exports) {

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;


/***/ }),
/* 126 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;


/***/ }),
/* 127 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;


/***/ }),
/* 128 */
/***/ (function(module, exports) {

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(9),
    Uint8Array = __webpack_require__(55),
    eq = __webpack_require__(23),
    equalArrays = __webpack_require__(54),
    mapToArray = __webpack_require__(56),
    setToArray = __webpack_require__(57);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

var getAllKeys = __webpack_require__(58);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;


/***/ }),
/* 131 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;


/***/ }),
/* 132 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

var memoizeCapped = __webpack_require__(134);

/** Used to match property names within property paths. */
var reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

var memoize = __webpack_require__(135);

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(37);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

var baseToString = __webpack_require__(137);

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(9),
    arrayMap = __webpack_require__(43),
    isArray = __webpack_require__(0),
    isSymbol = __webpack_require__(27);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;


/***/ }),
/* 138 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(16),
    keys = __webpack_require__(13);

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(16),
    keysIn = __webpack_require__(66);

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(7),
    isPrototype = __webpack_require__(17),
    nativeKeysIn = __webpack_require__(142);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeysIn;


/***/ }),
/* 142 */
/***/ (function(module, exports) {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(1);

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(33)(module)))

/***/ }),
/* 144 */
/***/ (function(module, exports) {

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(16),
    getSymbols = __webpack_require__(39);

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(16),
    getSymbolsIn = __webpack_require__(67);

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;


/***/ }),
/* 147 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

module.exports = initCloneArray;


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(45),
    cloneDataView = __webpack_require__(149),
    cloneMap = __webpack_require__(150),
    cloneRegExp = __webpack_require__(152),
    cloneSet = __webpack_require__(153),
    cloneSymbol = __webpack_require__(155),
    cloneTypedArray = __webpack_require__(156);

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, cloneFunc, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return cloneMap(object, isDeep, cloneFunc);

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return cloneSet(object, isDeep, cloneFunc);

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(45);

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

var addMapEntry = __webpack_require__(151),
    arrayReduce = __webpack_require__(69),
    mapToArray = __webpack_require__(56);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1;

/**
 * Creates a clone of `map`.
 *
 * @private
 * @param {Object} map The map to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned map.
 */
function cloneMap(map, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
  return arrayReduce(array, addMapEntry, new map.constructor);
}

module.exports = cloneMap;


/***/ }),
/* 151 */
/***/ (function(module, exports) {

/**
 * Adds the key-value `pair` to `map`.
 *
 * @private
 * @param {Object} map The map to modify.
 * @param {Array} pair The key-value pair to add.
 * @returns {Object} Returns `map`.
 */
function addMapEntry(map, pair) {
  // Don't return `map.set` because it's not chainable in IE 11.
  map.set(pair[0], pair[1]);
  return map;
}

module.exports = addMapEntry;


/***/ }),
/* 152 */
/***/ (function(module, exports) {

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

var addSetEntry = __webpack_require__(154),
    arrayReduce = __webpack_require__(69),
    setToArray = __webpack_require__(57);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1;

/**
 * Creates a clone of `set`.
 *
 * @private
 * @param {Object} set The set to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned set.
 */
function cloneSet(set, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
  return arrayReduce(array, addSetEntry, new set.constructor);
}

module.exports = cloneSet;


/***/ }),
/* 154 */
/***/ (function(module, exports) {

/**
 * Adds `value` to `set`.
 *
 * @private
 * @param {Object} set The set to modify.
 * @param {*} value The value to add.
 * @returns {Object} Returns `set`.
 */
function addSetEntry(set, value) {
  // Don't return `set.add` because it's not chainable in IE 11.
  set.add(value);
  return set;
}

module.exports = addSetEntry;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(9);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(45);

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

var baseCreate = __webpack_require__(158),
    getPrototype = __webpack_require__(44),
    isPrototype = __webpack_require__(17);

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

module.exports = initCloneObject;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(7);

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

module.exports = baseCreate;


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(26),
    last = __webpack_require__(160),
    parent = __webpack_require__(161),
    toKey = __webpack_require__(14);

/**
 * The base implementation of `_.unset`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The property path to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 */
function baseUnset(object, path) {
  path = castPath(path, object);
  object = parent(object, path);
  return object == null || delete object[toKey(last(path))];
}

module.exports = baseUnset;


/***/ }),
/* 160 */
/***/ (function(module, exports) {

/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : undefined;
}

module.exports = last;


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(41),
    baseSlice = __webpack_require__(162);

/**
 * Gets the parent value at `path` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path to get the parent value of.
 * @returns {*} Returns the parent value.
 */
function parent(object, path) {
  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
}

module.exports = parent;


/***/ }),
/* 162 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

module.exports = baseSlice;


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

var isPlainObject = __webpack_require__(70);

/**
 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
 * objects.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {string} key The key of the property to inspect.
 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
 */
function customOmitClone(value) {
  return isPlainObject(value) ? undefined : value;
}

module.exports = customOmitClone;


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

var flatten = __webpack_require__(165),
    overRest = __webpack_require__(72),
    setToString = __webpack_require__(73);

/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
function flatRest(func) {
  return setToString(overRest(func, undefined, flatten), func + '');
}

module.exports = flatRest;


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

var baseFlatten = __webpack_require__(71);

/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, 1) : [];
}

module.exports = flatten;


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(9),
    isArguments = __webpack_require__(19),
    isArray = __webpack_require__(0);

/** Built-in value references. */
var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

module.exports = isFlattenable;


/***/ }),
/* 167 */
/***/ (function(module, exports) {

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

var constant = __webpack_require__(169),
    defineProperty = __webpack_require__(65),
    identity = __webpack_require__(28);

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;


/***/ }),
/* 169 */
/***/ (function(module, exports) {

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;


/***/ }),
/* 170 */
/***/ (function(module, exports) {

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function () {
    Sankey.registerShape();
    ErrorBar.registerShape();
};

var _Sankey = __webpack_require__(172);

var Sankey = _interopRequireWildcard(_Sankey);

var _ErrorBar = __webpack_require__(173);

var ErrorBar = _interopRequireWildcard(_ErrorBar);

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.registerShape = undefined;

var _CustomizeUtils = __webpack_require__(46);

var CustomizeUtils = _interopRequireWildcard(_CustomizeUtils);

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var DEFAULT_SANKEY_SHAPE = 'sankey';
function interpolationGenerator(a, b) {
    var ka = +a;
    var kb = b - ka;
    return function (t) {
        return ka + kb * t;
    };
}
function getCurvePath(from, to, curvature) {
    var interpolationFunc = interpolationGenerator(from.x, to.x);
    var fromCtrlX = interpolationFunc(curvature);
    var toCtrlX = interpolationFunc(1 - curvature);
    var points = ['C', fromCtrlX, from.y, toCtrlX, to.y, to.x, to.y];
    return points;
}
function getEdgePath(points, curvature) {
    var path = [['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y]];
    var c1 = getCurvePath(points[1], points[3], curvature);
    path.push(c1);
    path.push(['L', points[3].x, points[3].y]);
    path.push(['L', points[2].x, points[2].y]);
    var c2 = getCurvePath(points[2], points[0], curvature);
    path.push(c2);
    path.push(['Z']);
    return path;
}
var registerShape = exports.registerShape = function registerShape() {
    CustomizeUtils.registerShape('edge', DEFAULT_SANKEY_SHAPE, {
        drawShape: function drawShape(cfg, group) {
            var points = cfg.points,
                style = cfg.style;
            var curvature = style.curvature || 0.5;
            var path = this.parsePath(getEdgePath(points, curvature));
            var shape = group.addShape('path', {
                attrs: {
                    stroke: 'none',
                    strokeOpacity: 0,
                    fill: cfg.color,
                    opacity: cfg.opacity,
                    path: path
                }
            });
            return shape;
        }
    });
};
//# sourceMappingURL=Sankey.js.map

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.registerShape = undefined;

var _CustomizeUtils = __webpack_require__(46);

var CustomizeUtils = _interopRequireWildcard(_CustomizeUtils);

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var __assign = undefined && undefined.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
    }
    return t;
};

var DEFAULT_ERRORBAR_SHAPE = 'errorbar';
function renderBarPath(points) {
    return [['M', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['Z'], ['M', (points[1].x + points[2].x) / 2, (points[1].y + points[2].y) / 2], ['L', (points[0].x + points[3].x) / 2, (points[0].y + points[3].y) / 2], ['Z'], ['M', points[0].x, points[0].y], ['L', points[3].x, points[3].y], ['Z']];
}
var registerShape = exports.registerShape = function registerShape() {
    var barWidth = 1;
    var hasPoint = false;
    CustomizeUtils.registerShape('schema', DEFAULT_ERRORBAR_SHAPE, {
        getPoints: function getPoints(_a) {
            var x = _a.x,
                y = _a.y,
                size = _a.size;
            return [{ x: x - size / 2 * barWidth, y: y[0] }, { x: x - size / 2 * barWidth, y: y[2] }, { x: x + size / 2 * barWidth, y: y[2] }, { x: x + size / 2 * barWidth, y: y[0] }, { x: x, y: y[1] }, { x: x - size / 2 * barWidth, y: y[1] }];
        },
        drawShape: function drawShape(cfg, group) {
            var newGroup = group;
            var points = cfg.points;
            newGroup.addShape('path', {
                attrs: __assign({ stroke: cfg.color, strokeOpacity: cfg.opacity || 1, lineWidth: cfg.style.lineWidth || 1, fill: cfg.color, opacity: cfg.opacity || 1, path: this.parsePath(renderBarPath(points)) }, cfg.style)
            });
            if (hasPoint) {
                newGroup.addShape('circle', {
                    attrs: __assign({ stroke: cfg.color, strokeOpacity: cfg.opacity || 1, lineWidth: cfg.style.lineWidth || 1, fill: cfg.color, opacity: cfg.opacity || 1, x: this.parsePoint(points[4]).x, y: this.parsePoint(points[4]).y, r: cfg.style.lineWidth + 0.5 || 1.5 }, cfg.style)
                });
            }
            return newGroup;
        }
    });
};
//# sourceMappingURL=ErrorBar.js.map

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _get2 = __webpack_require__(11);

var _get3 = _interopRequireDefault(_get2);

var _isArray2 = __webpack_require__(0);

var _isArray3 = _interopRequireDefault(_isArray2);

var _isEmpty2 = __webpack_require__(5);

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _isFunction2 = __webpack_require__(18);

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _cloneDeep2 = __webpack_require__(4);

var _cloneDeep3 = _interopRequireDefault(_cloneDeep2);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var DataSet = __webpack_require__(175);
var CommonDataSet = function () {
    function CommonDataSet() {
        this.dataSet = {};
        this.ds = new DataSet();
    }
    CommonDataSet.prototype.copyData = function (viewId, copyId) {
        this.setDataSet(this.dataSet[viewId], copyId);
        return this.dataSet[viewId];
    };
    CommonDataSet.prototype.getProcessedData = function (data, dataPre, viewId) {
        var cData = (0, _cloneDeep3.default)(data);
        var cDataPre = _isFunction3.default ? dataPre : (0, _cloneDeep3.default)(dataPre);
        var currData;
        if (viewId && this.dataSet[viewId]) {
            return;
        }
        if ((0, _isEmpty3.default)(cData)) {
            currData = [];
            this.setDataSet(currData, viewId);
            return currData;
        }
        if ((0, _isFunction3.default)(cDataPre)) {
            cDataPre = cDataPre(this.dataSet);
        }
        if ((0, _isEmpty3.default)(cDataPre) || (0, _isEmpty3.default)(cDataPre.transform)) {
            currData = this.createSource(cData, cDataPre);
            this.setDataSet(currData, viewId);
            return currData;
        }
        cDataPre.transform = Array.isArray(cDataPre.transform) ? cDataPre.transform : [cDataPre.transform];
        var transform = cDataPre.transform;
        if (transform && transform.length) {
            var exchangeType = transform[0].exchangeType;
            if (exchangeType === 'type-1') {
                cData = this.processExchangeColumnToRowOne(cData, transform[0]);
            } else if (exchangeType === 'type-2') {
                cData = this.processExchangeColumnToRowTwo(cData, transform[0]);
            } else if (exchangeType === 'type-3') {
                cData = this.processExchangeColumnToRowThree(cData, transform[0]);
            }
        }
        var dv = this.createSource(cData, cDataPre);
        var ds;
        for (var _i = 0, transform_1 = transform; _i < transform_1.length; _i++) {
            var item = transform_1[_i];
            if (item.exchangeType) {
                continue;
            }
            ds = this.processCommonTransform(dv, item);
        }
        currData = ds;
        this.setDataSet(currData, viewId);
        return currData;
    };
    CommonDataSet.prototype.getDataView = function (data, dataView) {
        if (dataView === void 0) {
            dataView = 'rows';
        }
        if ((0, _isArray3.default)(dataView) && dataView.length >= 2) {
            var type = dataView[0];
            if ((0, _isFunction3.default)(dataView[1])) {
                if (type === 'nodes') {
                    return dataView[1](data.getAllNodes());
                } else if (type === 'edges') {
                    return dataView[1](data.getAllLinks());
                }
            }
        }
        return data[dataView];
    };
    CommonDataSet.prototype.setDataSet = function (data, viewId) {
        if (viewId) {
            this.dataSet[viewId] = data;
        }
    };
    CommonDataSet.prototype.transformData = function (data, dataPre) {
        dataPre.transform = Array.isArray(dataPre.transform) ? dataPre.transform : [dataPre.transform];
        var transform = dataPre.transform;
        if (transform && transform.length) {
            var exchangeType = transform[0].exchangeType;
            if (exchangeType === 'type-1') {
                data = this.processExchangeColumnToRowOne(data, transform[0]);
            } else if (exchangeType === 'type-2') {
                data = this.processExchangeColumnToRowTwo(data, transform[0]);
            } else if (exchangeType === 'type-3') {
                data = this.processExchangeColumnToRowThree(data, transform[0]);
            }
        }
        var dv = this.createSource(data, dataPre);
        var ds;
        for (var _i = 0, transform_2 = transform; _i < transform_2.length; _i++) {
            var item = transform_2[_i];
            if (item.exchangeType) {
                continue;
            }
            ds = this.processCommonTransform(dv, item);
        }
    };
    CommonDataSet.prototype.handleToNumber = function (row, def) {
        var fields = Array.isArray(def.fields) ? def.fields : [def.fields];
        for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {
            var item = fields_1[_i];
            row[item] = parseFloat(row[item]);
        }
        return row;
    };
    CommonDataSet.prototype.handleMergeFields = function (row, item) {
        var fields = item.fields;
        if (!Array.isArray(fields) || fields.length === 0) {
            throw new Error("The merge fields of DataPre must be greater than 0.");
        }
        var newItem = [];
        for (var _i = 0, fields_2 = fields; _i < fields_2.length; _i++) {
            var field = fields_2[_i];
            newItem.push(row[field]);
        }
        row[item.as] = newItem;
        return row;
    };
    CommonDataSet.prototype.processExchangeColumnToRowOne = function (data, item) {
        var itemArr = Array.isArray(item.fields) ? item.fields : [item.fields];
        var finalData = [];
        for (var res in data) {
            if (data.hasOwnProperty(res) && itemArr.indexOf(res) >= 0) {
                for (var i = 0; i < data[res].length; i++) {
                    if (!finalData[i]) {
                        finalData[i] = {};
                    }
                    if (data[res][i]) {
                        finalData[i][res] = data[res][i];
                    }
                }
            }
        }
        return finalData;
    };
    CommonDataSet.prototype.processExchangeColumnToRowTwo = function (data, item) {
        var itemArr = Array.isArray(item.fields) ? item.fields : [item.fields];
        var finalData = [];
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var res = data_1[_i];
            var key = res[0];
            if (itemArr.indexOf(key) >= 0) {
                for (var i = 1; i < res.length; i++) {
                    if (!finalData[i - 1]) {
                        finalData[i - 1] = {};
                    }
                    if (res[i]) {
                        finalData[i - 1][key] = res[i];
                    }
                }
            }
        }
        return finalData;
    };
    CommonDataSet.prototype.processExchangeColumnToRowThree = function (data, item) {
        var itemArr = Array.isArray(item.fields) ? item.fields : [item.fields];
        var finalData = [];
        var i = 0;
        for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
            var res = data_2[_i];
            var key = itemArr[i];
            for (var i_1 = 0; i_1 < res.length; i_1++) {
                if (!finalData[i_1]) {
                    finalData[i_1] = {};
                }
                if (res[i_1]) {
                    finalData[i_1][key] = res[i_1];
                }
            }
            i++;
        }
        return finalData;
    };
    CommonDataSet.prototype.processCommonTransform = function (dv, item) {
        if (item.type === 'toNumber') {
            dv = dv.transform({
                type: 'map',
                callback: function callback(row) {
                    return this.handleToNumber(row, item);
                }
            });
        } else if (item.type === 'merge') {
            dv = dv.transform({
                type: 'map',
                callback: function callback(row) {
                    return this.handleMergeFields(row, item);
                }
            });
        } else {
            dv = dv.transform(item);
        }
        return dv;
    };
    CommonDataSet.prototype.createSource = function (data, dataPre) {
        var dv;
        if (!(0, _get3.default)(dataPre, 'connector')) {
            dv = this.ds.createView().source(data);
        } else {
            dv = this.ds.createView().source(data, dataPre.connector);
        }
        return dv;
    };
    return CommonDataSet;
}();
exports.default = CommonDataSet;
//# sourceMappingURL=CommonDataSet.js.map

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["DataSet"] = factory();
	else
		root["DataSet"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 268);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _area = __webpack_require__(144);

Object.defineProperty(exports, "geoArea", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_area).default;
  }
});

var _bounds = __webpack_require__(289);

Object.defineProperty(exports, "geoBounds", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_bounds).default;
  }
});

var _centroid = __webpack_require__(290);

Object.defineProperty(exports, "geoCentroid", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_centroid).default;
  }
});

var _circle = __webpack_require__(145);

Object.defineProperty(exports, "geoCircle", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_circle).default;
  }
});

var _extent = __webpack_require__(83);

Object.defineProperty(exports, "geoClipExtent", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_extent).default;
  }
});

var _contains = __webpack_require__(309);

Object.defineProperty(exports, "geoContains", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_contains).default;
  }
});

var _distance = __webpack_require__(163);

Object.defineProperty(exports, "geoDistance", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_distance).default;
  }
});

var _graticule = __webpack_require__(310);

Object.defineProperty(exports, "geoGraticule", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_graticule).default;
  }
});
Object.defineProperty(exports, "geoGraticule10", {
  enumerable: true,
  get: function get() {
    return _graticule.graticule10;
  }
});

var _interpolate = __webpack_require__(311);

Object.defineProperty(exports, "geoInterpolate", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_interpolate).default;
  }
});

var _length = __webpack_require__(164);

Object.defineProperty(exports, "geoLength", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_length).default;
  }
});

var _index = __webpack_require__(312);

Object.defineProperty(exports, "geoPath", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_index).default;
  }
});

var _albers = __webpack_require__(166);

Object.defineProperty(exports, "geoAlbers", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_albers).default;
  }
});

var _albersUsa = __webpack_require__(322);

Object.defineProperty(exports, "geoAlbersUsa", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_albersUsa).default;
  }
});

var _azimuthalEqualArea = __webpack_require__(323);

Object.defineProperty(exports, "geoAzimuthalEqualArea", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_azimuthalEqualArea).default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEqualAreaRaw", {
  enumerable: true,
  get: function get() {
    return _azimuthalEqualArea.azimuthalEqualAreaRaw;
  }
});

var _azimuthalEquidistant = __webpack_require__(324);

Object.defineProperty(exports, "geoAzimuthalEquidistant", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_azimuthalEquidistant).default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEquidistantRaw", {
  enumerable: true,
  get: function get() {
    return _azimuthalEquidistant.azimuthalEquidistantRaw;
  }
});

var _conicConformal = __webpack_require__(325);

Object.defineProperty(exports, "geoConicConformal", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_conicConformal).default;
  }
});
Object.defineProperty(exports, "geoConicConformalRaw", {
  enumerable: true,
  get: function get() {
    return _conicConformal.conicConformalRaw;
  }
});

var _conicEqualArea = __webpack_require__(86);

Object.defineProperty(exports, "geoConicEqualArea", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_conicEqualArea).default;
  }
});
Object.defineProperty(exports, "geoConicEqualAreaRaw", {
  enumerable: true,
  get: function get() {
    return _conicEqualArea.conicEqualAreaRaw;
  }
});

var _conicEquidistant = __webpack_require__(326);

Object.defineProperty(exports, "geoConicEquidistant", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_conicEquidistant).default;
  }
});
Object.defineProperty(exports, "geoConicEquidistantRaw", {
  enumerable: true,
  get: function get() {
    return _conicEquidistant.conicEquidistantRaw;
  }
});

var _equirectangular = __webpack_require__(168);

Object.defineProperty(exports, "geoEquirectangular", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_equirectangular).default;
  }
});
Object.defineProperty(exports, "geoEquirectangularRaw", {
  enumerable: true,
  get: function get() {
    return _equirectangular.equirectangularRaw;
  }
});

var _gnomonic = __webpack_require__(327);

Object.defineProperty(exports, "geoGnomonic", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_gnomonic).default;
  }
});
Object.defineProperty(exports, "geoGnomonicRaw", {
  enumerable: true,
  get: function get() {
    return _gnomonic.gnomonicRaw;
  }
});

var _identity = __webpack_require__(328);

Object.defineProperty(exports, "geoIdentity", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_identity).default;
  }
});

var _index2 = __webpack_require__(16);

Object.defineProperty(exports, "geoProjection", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_index2).default;
  }
});
Object.defineProperty(exports, "geoProjectionMutator", {
  enumerable: true,
  get: function get() {
    return _index2.projectionMutator;
  }
});

var _mercator = __webpack_require__(89);

Object.defineProperty(exports, "geoMercator", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_mercator).default;
  }
});
Object.defineProperty(exports, "geoMercatorRaw", {
  enumerable: true,
  get: function get() {
    return _mercator.mercatorRaw;
  }
});

var _orthographic = __webpack_require__(329);

Object.defineProperty(exports, "geoOrthographic", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_orthographic).default;
  }
});
Object.defineProperty(exports, "geoOrthographicRaw", {
  enumerable: true,
  get: function get() {
    return _orthographic.orthographicRaw;
  }
});

var _stereographic = __webpack_require__(330);

Object.defineProperty(exports, "geoStereographic", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_stereographic).default;
  }
});
Object.defineProperty(exports, "geoStereographicRaw", {
  enumerable: true,
  get: function get() {
    return _stereographic.stereographicRaw;
  }
});

var _transverseMercator = __webpack_require__(331);

Object.defineProperty(exports, "geoTransverseMercator", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_transverseMercator).default;
  }
});
Object.defineProperty(exports, "geoTransverseMercatorRaw", {
  enumerable: true,
  get: function get() {
    return _transverseMercator.transverseMercatorRaw;
  }
});

var _rotation = __webpack_require__(57);

Object.defineProperty(exports, "geoRotation", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_rotation).default;
  }
});

var _stream = __webpack_require__(25);

Object.defineProperty(exports, "geoStream", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_stream).default;
  }
});

var _transform = __webpack_require__(58);

Object.defineProperty(exports, "geoTransform", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_transform).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 1 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.sinci = sinci;
exports.asin = asin;
exports.acos = acos;
exports.sqrt = sqrt;
exports.tanh = tanh;
exports.sinh = sinh;
exports.cosh = cosh;
exports.arsinh = arsinh;
exports.arcosh = arcosh;
var abs = exports.abs = Math.abs;
var atan = exports.atan = Math.atan;
var atan2 = exports.atan2 = Math.atan2;
var ceil = exports.ceil = Math.ceil;
var cos = exports.cos = Math.cos;
var exp = exports.exp = Math.exp;
var floor = exports.floor = Math.floor;
var log = exports.log = Math.log;
var max = exports.max = Math.max;
var min = exports.min = Math.min;
var pow = exports.pow = Math.pow;
var round = exports.round = Math.round;
var sign = exports.sign = Math.sign || function (x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
};
var sin = exports.sin = Math.sin;
var tan = exports.tan = Math.tan;

var epsilon = exports.epsilon = 1e-6;
var epsilon2 = exports.epsilon2 = 1e-12;
var pi = exports.pi = Math.PI;
var halfPi = exports.halfPi = pi / 2;
var quarterPi = exports.quarterPi = pi / 4;
var sqrt1_2 = exports.sqrt1_2 = Math.SQRT1_2;
var sqrt2 = exports.sqrt2 = sqrt(2);
var sqrtPi = exports.sqrtPi = sqrt(pi);
var tau = exports.tau = pi * 2;
var degrees = exports.degrees = 180 / pi;
var radians = exports.radians = pi / 180;

function sinci(x) {
  return x ? x / Math.sin(x) : 1;
}

function asin(x) {
  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function sqrt(x) {
  return x > 0 ? Math.sqrt(x) : 0;
}

function tanh(x) {
  x = exp(2 * x);
  return (x - 1) / (x + 1);
}

function sinh(x) {
  return (exp(x) - exp(-x)) / 2;
}

function cosh(x) {
  return (exp(x) + exp(-x)) / 2;
}

function arsinh(x) {
  return log(x + sqrt(x * x + 1));
}

function arcosh(x) {
  return log(x + sqrt(x * x - 1));
}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var assign = __webpack_require__(5);
var isNil = __webpack_require__(236);
var isObject = __webpack_require__(12);
var uniqueId = __webpack_require__(579);
var EventEmitter = __webpack_require__(179);
var View = __webpack_require__(42);
var CONSTANTS = __webpack_require__(580);

var DataSet = function (_EventEmitter) {
  _inherits(DataSet, _EventEmitter);

  function DataSet() {
    var initialProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { state: {} };

    _classCallCheck(this, DataSet);

    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

    var me = _this;
    assign(me, {
      _onChangeTimer: null,
      DataSet: DataSet,
      isDataSet: true,
      views: {}
    }, initialProps);
    return _this;
  }

  DataSet.prototype._getUniqueViewName = function _getUniqueViewName() {
    var me = this;
    var name = uniqueId('view_');
    while (me.views[name]) {
      name = uniqueId('view_');
    }
    return name;
  };

  DataSet.prototype.createView = function createView(name) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var me = this;
    if (isNil(name)) {
      name = me._getUniqueViewName();
    }
    if (isObject(name)) {
      options = name;
      name = me._getUniqueViewName();
    }
    if (me.views[name]) {
      throw new Error('data view exists: ' + name);
    }
    var view = new View(me, options);
    me.views[name] = view;
    return view;
  };

  DataSet.prototype.getView = function getView(name) {
    return this.views[name];
  };

  DataSet.prototype.setView = function setView(name, view) {
    this.views[name] = view;
  };

  DataSet.prototype.setState = function setState(name, value) {
    var me = this;
    me.state[name] = value;
    if (me._onChangeTimer) {
      clearTimeout(me._onChangeTimer);
      me._onChangeTimer = null;
    }
    me._onChangeTimer = setTimeout(function () {
      me.emit('statechange', name, value);
    }, 16); // execute after one frame
  };

  return DataSet;
}(EventEmitter);

assign(DataSet, {
  CONSTANTS: CONSTANTS,
  DataSet: DataSet,
  DataView: View, // alias
  View: View,
  connectors: {},
  transforms: {},

  registerConnector: function registerConnector(name, connector) {
    DataSet.connectors[name] = connector;
  },
  getConnector: function getConnector(name) {
    return DataSet.connectors[name] || DataSet.connectors.default;
  },
  registerTransform: function registerTransform(name, transform) {
    DataSet.transforms[name] = transform;
  },
  getTransform: function getTransform(name) {
    return DataSet.transforms[name] || DataSet.transforms.default;
  }
}, CONSTANTS);

View.DataSet = DataSet;
assign(DataSet.prototype, {
  view: DataSet.prototype.createView // alias
});

module.exports = DataSet;

/***/ }),
/* 3 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.acos = acos;
exports.asin = asin;
exports.haversin = haversin;
var epsilon = exports.epsilon = 1e-6;
var epsilon2 = exports.epsilon2 = 1e-12;
var pi = exports.pi = Math.PI;
var halfPi = exports.halfPi = pi / 2;
var quarterPi = exports.quarterPi = pi / 4;
var tau = exports.tau = pi * 2;

var degrees = exports.degrees = 180 / pi;
var radians = exports.radians = pi / 180;

var abs = exports.abs = Math.abs;
var atan = exports.atan = Math.atan;
var atan2 = exports.atan2 = Math.atan2;
var cos = exports.cos = Math.cos;
var ceil = exports.ceil = Math.ceil;
var exp = exports.exp = Math.exp;
var floor = exports.floor = Math.floor;
var log = exports.log = Math.log;
var pow = exports.pow = Math.pow;
var sin = exports.sin = Math.sin;
var sign = exports.sign = Math.sign || function (x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
};
var sqrt = exports.sqrt = Math.sqrt;
var tan = exports.tan = Math.tan;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}

function haversin(x) {
  return (x = sin(x / 2)) * x;
}

/***/ }),
/* 4 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.acos = acos;
exports.asin = asin;
exports.haversin = haversin;
var epsilon = exports.epsilon = 1e-6;
var epsilon2 = exports.epsilon2 = 1e-12;
var pi = exports.pi = Math.PI;
var halfPi = exports.halfPi = pi / 2;
var quarterPi = exports.quarterPi = pi / 4;
var tau = exports.tau = pi * 2;

var degrees = exports.degrees = 180 / pi;
var radians = exports.radians = pi / 180;

var abs = exports.abs = Math.abs;
var atan = exports.atan = Math.atan;
var atan2 = exports.atan2 = Math.atan2;
var cos = exports.cos = Math.cos;
var ceil = exports.ceil = Math.ceil;
var exp = exports.exp = Math.exp;
var floor = exports.floor = Math.floor;
var log = exports.log = Math.log;
var pow = exports.pow = Math.pow;
var sin = exports.sin = Math.sin;
var sign = exports.sign = Math.sign || function (x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
};
var sqrt = exports.sqrt = Math.sqrt;
var tan = exports.tan = Math.tan;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}

function haversin(x) {
  return (x = sin(x / 2)) * x;
}

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(53),
    copyObject = __webpack_require__(36),
    createAssigner = __webpack_require__(277),
    isArrayLike = __webpack_require__(20),
    isPrototype = __webpack_require__(56),
    keys = __webpack_require__(9);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns own enumerable string keyed properties of source objects to the
 * destination object. Source objects are applied from left to right.
 * Subsequent sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object` and is loosely based on
 * [`Object.assign`](https://mdn.io/Object/assign).
 *
 * @static
 * @memberOf _
 * @since 0.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assignIn
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assign({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'c': 3 }
 */
var assign = createAssigner(function (object, source) {
  if (isPrototype(source) || isArrayLike(source)) {
    copyObject(source, keys(source), object);
    return;
  }
  for (var key in source) {
    if (hasOwnProperty.call(source, key)) {
      assignValue(object, key, source[key]);
    }
  }
});

module.exports = assign;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var isString = __webpack_require__(7);

var INVALID_FIELD_ERR_MSG = 'Invalid field: it must be a string!';
var INVALID_FIELDS_ERR_MSG = 'Invalid fields: it must be an array!';

module.exports = {
  getField: function getField(options, defaultField) {
    var field = options.field,
        fields = options.fields;

    if (isString(field)) {
      return field;
    }
    if (Array.isArray(field)) {
      console.warn(INVALID_FIELD_ERR_MSG);
      return field[0];
    }
    console.warn(INVALID_FIELD_ERR_MSG + ' will try to get fields instead.');
    if (isString(fields)) {
      return fields;
    }
    if (Array.isArray(fields) && fields.length) {
      return fields[0];
    }
    if (defaultField) {
      return defaultField;
    }
    throw new TypeError(INVALID_FIELD_ERR_MSG);
  },
  getFields: function getFields(options, defaultFields) {
    var field = options.field,
        fields = options.fields;

    if (Array.isArray(fields)) {
      return fields;
    }
    if (isString(fields)) {
      console.warn(INVALID_FIELDS_ERR_MSG);
      return [fields];
    }
    console.warn(INVALID_FIELDS_ERR_MSG + ' will try to get field instead.');
    if (isString(field)) {
      console.warn(INVALID_FIELDS_ERR_MSG);
      return [field];
    }
    if (Array.isArray(field) && field.length) {
      console.warn(INVALID_FIELDS_ERR_MSG);
      return field;
    }
    if (defaultFields) {
      return defaultFields;
    }
    throw new TypeError(INVALID_FIELDS_ERR_MSG);
  }
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(19),
    isArray = __webpack_require__(10),
    isObjectLike = __webpack_require__(15);

/** `Object#toString` result references. */
var stringTag = '[object String]';

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
    return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
}

module.exports = isString;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(19),
    isObject = __webpack_require__(12);

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
    if (!isObject(value)) {
        return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(141),
    baseKeys = __webpack_require__(287),
    isArrayLike = __webpack_require__(20);

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

/***/ }),
/* 10 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var baseFor = __webpack_require__(201),
    castFunction = __webpack_require__(485),
    keysIn = __webpack_require__(97);

/**
 * Iterates over own and inherited enumerable string keyed properties of an
 * object and invokes `iteratee` for each property. The iteratee is invoked
 * with three arguments: (value, key, object). Iteratee functions may exit
 * iteration early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 0.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forInRight
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forIn(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
 */
function forIn(object, iteratee) {
    return object == null ? object : baseFor(object, castFunction(iteratee), keysIn);
}

module.exports = forIn;

/***/ }),
/* 12 */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var freeGlobal = __webpack_require__(136);

/** Detect free variable `self`. */
var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _bisect = __webpack_require__(150);

Object.defineProperty(exports, "bisect", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_bisect).default;
  }
});
Object.defineProperty(exports, "bisectRight", {
  enumerable: true,
  get: function get() {
    return _bisect.bisectRight;
  }
});
Object.defineProperty(exports, "bisectLeft", {
  enumerable: true,
  get: function get() {
    return _bisect.bisectLeft;
  }
});

var _ascending = __webpack_require__(34);

Object.defineProperty(exports, "ascending", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ascending).default;
  }
});

var _bisector = __webpack_require__(151);

Object.defineProperty(exports, "bisector", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_bisector).default;
  }
});

var _cross = __webpack_require__(293);

Object.defineProperty(exports, "cross", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_cross).default;
  }
});

var _descending = __webpack_require__(294);

Object.defineProperty(exports, "descending", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_descending).default;
  }
});

var _deviation = __webpack_require__(153);

Object.defineProperty(exports, "deviation", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_deviation).default;
  }
});

var _extent = __webpack_require__(155);

Object.defineProperty(exports, "extent", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_extent).default;
  }
});

var _histogram = __webpack_require__(295);

Object.defineProperty(exports, "histogram", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_histogram).default;
  }
});

var _freedmanDiaconis = __webpack_require__(298);

Object.defineProperty(exports, "thresholdFreedmanDiaconis", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_freedmanDiaconis).default;
  }
});

var _scott = __webpack_require__(299);

Object.defineProperty(exports, "thresholdScott", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_scott).default;
  }
});

var _sturges = __webpack_require__(159);

Object.defineProperty(exports, "thresholdSturges", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sturges).default;
  }
});

var _max = __webpack_require__(300);

Object.defineProperty(exports, "max", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_max).default;
  }
});

var _mean = __webpack_require__(301);

Object.defineProperty(exports, "mean", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_mean).default;
  }
});

var _median = __webpack_require__(302);

Object.defineProperty(exports, "median", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_median).default;
  }
});

var _merge = __webpack_require__(303);

Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_merge).default;
  }
});

var _min = __webpack_require__(160);

Object.defineProperty(exports, "min", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_min).default;
  }
});

var _pairs = __webpack_require__(152);

Object.defineProperty(exports, "pairs", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_pairs).default;
  }
});

var _permute = __webpack_require__(304);

Object.defineProperty(exports, "permute", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_permute).default;
  }
});

var _quantile = __webpack_require__(84);

Object.defineProperty(exports, "quantile", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_quantile).default;
  }
});

var _range = __webpack_require__(157);

Object.defineProperty(exports, "range", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_range).default;
  }
});

var _scan = __webpack_require__(305);

Object.defineProperty(exports, "scan", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_scan).default;
  }
});

var _shuffle = __webpack_require__(306);

Object.defineProperty(exports, "shuffle", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_shuffle).default;
  }
});

var _sum = __webpack_require__(307);

Object.defineProperty(exports, "sum", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sum).default;
  }
});

var _ticks = __webpack_require__(158);

Object.defineProperty(exports, "ticks", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ticks).default;
  }
});
Object.defineProperty(exports, "tickIncrement", {
  enumerable: true,
  get: function get() {
    return _ticks.tickIncrement;
  }
});
Object.defineProperty(exports, "tickStep", {
  enumerable: true,
  get: function get() {
    return _ticks.tickStep;
  }
});

var _transpose = __webpack_require__(161);

Object.defineProperty(exports, "transpose", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_transpose).default;
  }
});

var _variance = __webpack_require__(154);

Object.defineProperty(exports, "variance", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_variance).default;
  }
});

var _zip = __webpack_require__(308);

Object.defineProperty(exports, "zip", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_zip).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 15 */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
}

module.exports = isObjectLike;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.default = projection;
exports.projectionMutator = projectionMutator;

var _antimeridian = __webpack_require__(318);

var _antimeridian2 = _interopRequireDefault(_antimeridian);

var _circle = __webpack_require__(319);

var _circle2 = _interopRequireDefault(_circle);

var _extent = __webpack_require__(83);

var _compose = __webpack_require__(146);

var _compose2 = _interopRequireDefault(_compose);

var _identity = __webpack_require__(85);

var _identity2 = _interopRequireDefault(_identity);

var _math = __webpack_require__(3);

var _rotation = __webpack_require__(57);

var _transform = __webpack_require__(58);

var _fit = __webpack_require__(88);

var _resample = __webpack_require__(320);

var _resample2 = _interopRequireDefault(_resample);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var transformRadians = (0, _transform.transformer)({
  point: function point(x, y) {
    this.stream.point(x * _math.radians, y * _math.radians);
  }
});

function projection(project) {
  return projectionMutator(function () {
    return project;
  })();
}

function projectionMutator(projectAt) {
  var project,
      k = 150,
      // scale
  x = 480,
      y = 250,
      // translate
  dx,
      dy,
      lambda = 0,
      phi = 0,
      // center
  deltaLambda = 0,
      deltaPhi = 0,
      deltaGamma = 0,
      rotate,
      projectRotate,
      // rotate
  theta = null,
      preclip = _antimeridian2.default,
      // clip angle
  x0 = null,
      y0,
      x1,
      y1,
      postclip = _identity2.default,
      // clip extent
  delta2 = 0.5,
      projectResample = (0, _resample2.default)(projectTransform, delta2),
      // precision
  cache,
      cacheStream;

  function projection(point) {
    point = projectRotate(point[0] * _math.radians, point[1] * _math.radians);
    return [point[0] * k + dx, dy - point[1] * k];
  }

  function invert(point) {
    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
    return point && [point[0] * _math.degrees, point[1] * _math.degrees];
  }

  function projectTransform(x, y) {
    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];
  }

  projection.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));
  };

  projection.clipAngle = function (_) {
    return arguments.length ? (preclip = +_ ? (0, _circle2.default)(theta = _ * _math.radians, 6 * _math.radians) : (theta = null, _antimeridian2.default), reset()) : theta * _math.degrees;
  };

  projection.clipExtent = function (_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identity2.default) : (0, _extent.clipExtent)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  projection.scale = function (_) {
    return arguments.length ? (k = +_, recenter()) : k;
  };

  projection.translate = function (_) {
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
  };

  projection.center = function (_) {
    return arguments.length ? (lambda = _[0] % 360 * _math.radians, phi = _[1] % 360 * _math.radians, recenter()) : [lambda * _math.degrees, phi * _math.degrees];
  };

  projection.rotate = function (_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * _math.radians, deltaPhi = _[1] % 360 * _math.radians, deltaGamma = _.length > 2 ? _[2] % 360 * _math.radians : 0, recenter()) : [deltaLambda * _math.degrees, deltaPhi * _math.degrees, deltaGamma * _math.degrees];
  };

  projection.precision = function (_) {
    return arguments.length ? (projectResample = (0, _resample2.default)(projectTransform, delta2 = _ * _), reset()) : (0, _math.sqrt)(delta2);
  };

  projection.fitExtent = function (extent, object) {
    return (0, _fit.fitExtent)(projection, extent, object);
  };

  projection.fitSize = function (size, object) {
    return (0, _fit.fitSize)(projection, size, object);
  };

  function recenter() {
    projectRotate = (0, _compose2.default)(rotate = (0, _rotation.rotateRadians)(deltaLambda, deltaPhi, deltaGamma), project);
    var center = project(lambda, phi);
    dx = x - center[0] * k;
    dy = y + center[1] * k;
    return reset();
  }

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return function () {
    project = projectAt.apply(this, arguments);
    projection.invert = project.invert && invert;
    return recenter();
  };
}

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.default = projection;
exports.projectionMutator = projectionMutator;

var _antimeridian = __webpack_require__(507);

var _antimeridian2 = _interopRequireDefault(_antimeridian);

var _circle = __webpack_require__(509);

var _circle2 = _interopRequireDefault(_circle);

var _extent = __webpack_require__(207);

var _compose = __webpack_require__(206);

var _compose2 = _interopRequireDefault(_compose);

var _identity = __webpack_require__(212);

var _identity2 = _interopRequireDefault(_identity);

var _math = __webpack_require__(4);

var _rotation = __webpack_require__(108);

var _transform = __webpack_require__(111);

var _fit = __webpack_require__(216);

var _resample = __webpack_require__(510);

var _resample2 = _interopRequireDefault(_resample);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var transformRadians = (0, _transform.transform)({
  point: function point(x, y) {
    this.stream.point(x * _math.radians, y * _math.radians);
  }
});

function projection(project) {
  return projectionMutator(function () {
    return project;
  })();
}

function projectionMutator(projectAt) {
  var project,
      k = 150,
      // scale
  x = 480,
      y = 250,
      // translate
  dx,
      dy,
      lambda = 0,
      phi = 0,
      // center
  deltaLambda = 0,
      deltaPhi = 0,
      deltaGamma = 0,
      rotate,
      projectRotate,
      // rotate
  theta = null,
      preclip = _antimeridian2.default,
      // clip angle
  x0 = null,
      y0,
      x1,
      y1,
      postclip = _identity2.default,
      // clip extent
  delta2 = 0.5,
      projectResample = (0, _resample2.default)(projectTransform, delta2),
      // precision
  cache,
      cacheStream;

  function projection(point) {
    point = projectRotate(point[0] * _math.radians, point[1] * _math.radians);
    return [point[0] * k + dx, dy - point[1] * k];
  }

  function invert(point) {
    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
    return point && [point[0] * _math.degrees, point[1] * _math.degrees];
  }

  function projectTransform(x, y) {
    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];
  }

  projection.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));
  };

  projection.clipAngle = function (_) {
    return arguments.length ? (preclip = +_ ? (0, _circle2.default)(theta = _ * _math.radians, 6 * _math.radians) : (theta = null, _antimeridian2.default), reset()) : theta * _math.degrees;
  };

  projection.clipExtent = function (_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identity2.default) : (0, _extent.clipExtent)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  projection.scale = function (_) {
    return arguments.length ? (k = +_, recenter()) : k;
  };

  projection.translate = function (_) {
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
  };

  projection.center = function (_) {
    return arguments.length ? (lambda = _[0] % 360 * _math.radians, phi = _[1] % 360 * _math.radians, recenter()) : [lambda * _math.degrees, phi * _math.degrees];
  };

  projection.rotate = function (_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * _math.radians, deltaPhi = _[1] % 360 * _math.radians, deltaGamma = _.length > 2 ? _[2] % 360 * _math.radians : 0, recenter()) : [deltaLambda * _math.degrees, deltaPhi * _math.degrees, deltaGamma * _math.degrees];
  };

  projection.precision = function (_) {
    return arguments.length ? (projectResample = (0, _resample2.default)(projectTransform, delta2 = _ * _), reset()) : (0, _math.sqrt)(delta2);
  };

  projection.fitExtent = (0, _fit.fitExtent)(projection);

  projection.fitSize = (0, _fit.fitSize)(projection);

  function recenter() {
    projectRotate = (0, _compose2.default)(rotate = (0, _rotation.rotateRadians)(deltaLambda, deltaPhi, deltaGamma), project);
    var center = project(lambda, phi);
    dx = x - center[0] * k;
    dy = y + center[1] * k;
    return reset();
  }

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return function () {
    project = projectAt.apply(this, arguments);
    projection.invert = project.invert && invert;
    return recenter();
  };
}

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(8);
var isString = __webpack_require__(7);
var groupBy = __webpack_require__(524);
var simpleSortBy = __webpack_require__(530);

module.exports = function (rows, group_by) {
  var order_by = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  var newRows = rows;
  if (order_by && order_by.length) {
    newRows = simpleSortBy(rows, order_by);
  }

  var groupingFn = void 0;
  if (isFunction(group_by)) {
    groupingFn = group_by;
  } else if (Array.isArray(group_by)) {
    groupingFn = function groupingFn(row) {
      return '_' + group_by.map(function (col) {
        return row[col];
      }).join('-');
    };
    // NOTE: Object.keys({'b': 'b', '2': '2', '1': '1', 'a': 'a'}) => [ '1', '2', 'b', 'a' ]
    // that is why we have to add a prefix
  } else if (isString(group_by)) {
    groupingFn = function groupingFn(row) {
      return '_' + row[group_by];
    };
  }
  var groups = groupBy(newRows, groupingFn);
  return groups;
};

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

var _Symbol = __webpack_require__(32),
    getRawTag = __webpack_require__(272),
    objectToString = __webpack_require__(273);

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
    if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}

module.exports = baseGetTag;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(8),
    isLength = __webpack_require__(78);

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

/***/ }),
/* 21 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.default = noop;
function noop() {}

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.mollweideRaw = undefined;
exports.mollweideBromleyTheta = mollweideBromleyTheta;
exports.mollweideBromleyRaw = mollweideBromleyRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(mollweideRaw).scale(169.529);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function mollweideBromleyTheta(cp, phi) {
  var cpsinPhi = cp * (0, _math.sin)(phi),
      i = 30,
      delta;
  do {
    phi -= delta = (phi + (0, _math.sin)(phi) - cpsinPhi) / (1 + (0, _math.cos)(phi));
  } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);
  return phi / 2;
}

function mollweideBromleyRaw(cx, cy, cp) {

  function forward(lambda, phi) {
    return [cx * lambda * (0, _math.cos)(phi = mollweideBromleyTheta(cp, phi)), cy * (0, _math.sin)(phi)];
  }

  forward.invert = function (x, y) {
    return y = (0, _math.asin)(y / cy), [x / (cx * (0, _math.cos)(y)), (0, _math.asin)((2 * y + (0, _math.sin)(2 * y)) / cp)];
  };

  return forward;
}

var mollweideRaw = exports.mollweideRaw = mollweideBromleyRaw(_math.sqrt2 / _math.halfPi, _math.sqrt2, _math.pi);

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var sum = __webpack_require__(221);

/**
 * The mean, _also known as average_,
 * is the sum of all values over the number of values.
 * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):
 * a method of finding a typical or central value of a set of numbers.
 *
 * This runs on `O(n)`, linear time in respect to the array
 *
 * @param {Array<number>} x sample of one or more data points
 * @throws {Error} if the the length of x is less than one
 * @returns {number} mean
 * @example
 * mean([0, 10]); // => 5
 */
function mean(x /*: Array<number> */) /*:number*/{
    // The mean of no numbers is null
    if (x.length === 0) {
        throw new Error('mean requires at least one data point');
    }

    return sum(x) / x.length;
}

module.exports = mean;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsNative = __webpack_require__(270),
    getValue = __webpack_require__(276);

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

/***/ }),
/* 25 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (object, stream) {
  if (object && streamObjectType.hasOwnProperty(object.type)) {
    streamObjectType[object.type](object, stream);
  } else {
    streamGeometry(object, stream);
  }
};

function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}

var streamObjectType = {
  Feature: function Feature(object, stream) {
    streamGeometry(object.geometry, stream);
  },
  FeatureCollection: function FeatureCollection(object, stream) {
    var features = object.features,
        i = -1,
        n = features.length;
    while (++i < n) {
      streamGeometry(features[i].geometry, stream);
    }
  }
};

var streamGeometryType = {
  Sphere: function Sphere(object, stream) {
    stream.sphere();
  },
  Point: function Point(object, stream) {
    object = object.coordinates;
    stream.point(object[0], object[1], object[2]);
  },
  MultiPoint: function MultiPoint(object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;
    while (++i < n) {
      object = coordinates[i], stream.point(object[0], object[1], object[2]);
    }
  },
  LineString: function LineString(object, stream) {
    streamLine(object.coordinates, stream, 0);
  },
  MultiLineString: function MultiLineString(object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;
    while (++i < n) {
      streamLine(coordinates[i], stream, 0);
    }
  },
  Polygon: function Polygon(object, stream) {
    streamPolygon(object.coordinates, stream);
  },
  MultiPolygon: function MultiPolygon(object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;
    while (++i < n) {
      streamPolygon(coordinates[i], stream);
    }
  },
  GeometryCollection: function GeometryCollection(object, stream) {
    var geometries = object.geometries,
        i = -1,
        n = geometries.length;
    while (++i < n) {
      streamGeometry(geometries[i], stream);
    }
  }
};

function streamLine(coordinates, stream, closed) {
  var i = -1,
      n = coordinates.length - closed,
      coordinate;
  stream.lineStart();
  while (++i < n) {
    coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
  }stream.lineEnd();
}

function streamPolygon(coordinates, stream) {
  var i = -1,
      n = coordinates.length;
  stream.polygonStart();
  while (++i < n) {
    streamLine(coordinates[i], stream, 1);
  }stream.polygonEnd();
}

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (project, lobes) {
  var sphere, bounds;

  function forward(lambda, phi) {
    var sign = phi < 0 ? -1 : +1,
        lobe = lobes[+(phi < 0)];
    for (var i = 0, n = lobe.length - 1; i < n && lambda > lobe[i][2][0]; ++i) {}
    var p = project(lambda - lobe[i][1][0], phi);
    p[0] += project(lobe[i][1][0], sign * phi > sign * lobe[i][0][1] ? lobe[i][0][1] : phi)[0];
    return p;
  }

  // Assumes mutually exclusive bounding boxes for lobes.
  if (project.invert) forward.invert = function (x, y) {
    var bound = bounds[+(y < 0)],
        lobe = lobes[+(y < 0)];
    for (var i = 0, n = bound.length; i < n; ++i) {
      var b = bound[i];
      if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {
        var p = project.invert(x - project(lobe[i][1][0], 0)[0], y);
        p[0] += lobe[i][1][0];
        return pointEqual(forward(p[0], p[1]), [x, y]) ? p : null;
      }
    }
  };

  var p = (0, _d3Geo.geoProjection)(forward),
      stream_ = p.stream;

  p.stream = function (stream) {
    var rotate = p.rotate(),
        rotateStream = stream_(stream),
        sphereStream = (p.rotate([0, 0]), stream_(stream));
    p.rotate(rotate);
    rotateStream.sphere = function () {
      (0, _d3Geo.geoStream)(sphere, sphereStream);
    };
    return rotateStream;
  };

  p.lobes = function (_) {
    if (!arguments.length) return lobes.map(function (lobe) {
      return lobe.map(function (l) {
        return [[l[0][0] * _math.degrees, l[0][1] * _math.degrees], [l[1][0] * _math.degrees, l[1][1] * _math.degrees], [l[2][0] * _math.degrees, l[2][1] * _math.degrees]];
      });
    });

    sphere = interpolateSphere(_);

    lobes = _.map(function (lobe) {
      return lobe.map(function (l) {
        return [[l[0][0] * _math.radians, l[0][1] * _math.radians], [l[1][0] * _math.radians, l[1][1] * _math.radians], [l[2][0] * _math.radians, l[2][1] * _math.radians]];
      });
    });

    bounds = lobes.map(function (lobe) {
      return lobe.map(function (l) {
        var x0 = project(l[0][0], l[0][1])[0],
            x1 = project(l[2][0], l[2][1])[0],
            y0 = project(l[1][0], l[0][1])[1],
            y1 = project(l[1][0], l[1][1])[1],
            t;
        if (y0 > y1) t = y0, y0 = y1, y1 = t;
        return [[x0, y0], [x1, y1]];
      });
    });

    return p;
  };

  if (lobes != null) p.lobes(lobes);

  return p;
};

var _d3Array = __webpack_require__(14);

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function pointEqual(a, b) {
  return (0, _math.abs)(a[0] - b[0]) < _math.epsilon && (0, _math.abs)(a[1] - b[1]) < _math.epsilon;
}

function interpolateLine(coordinates, m) {
  var i = -1,
      n = coordinates.length,
      p0 = coordinates[0],
      p1,
      dx,
      dy,
      resampled = [];
  while (++i < n) {
    p1 = coordinates[i];
    dx = (p1[0] - p0[0]) / m;
    dy = (p1[1] - p0[1]) / m;
    for (var j = 0; j < m; ++j) {
      resampled.push([p0[0] + j * dx, p0[1] + j * dy]);
    }p0 = p1;
  }
  resampled.push(p1);
  return resampled;
}

function interpolateSphere(lobes) {
  var coordinates = [],
      lobe,
      lambda0,
      phi0,
      phi1,
      lambda2,
      phi2,
      i,
      n = lobes[0].length;

  // Northern Hemisphere
  for (i = 0; i < n; ++i) {
    lobe = lobes[0][i];
    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];
    lambda2 = lobe[2][0], phi2 = lobe[2][1];
    coordinates.push(interpolateLine([[lambda0 + _math.epsilon, phi0 + _math.epsilon], [lambda0 + _math.epsilon, phi1 - _math.epsilon], [lambda2 - _math.epsilon, phi1 - _math.epsilon], [lambda2 - _math.epsilon, phi2 + _math.epsilon]], 30));
  }

  // Southern Hemisphere
  for (i = lobes[1].length - 1; i >= 0; --i) {
    lobe = lobes[1][i];
    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];
    lambda2 = lobe[2][0], phi2 = lobe[2][1];
    coordinates.push(interpolateLine([[lambda2 - _math.epsilon, phi2 - _math.epsilon], [lambda2 - _math.epsilon, phi1 + _math.epsilon], [lambda0 + _math.epsilon, phi1 + _math.epsilon], [lambda0 + _math.epsilon, phi0 - _math.epsilon]], 30));
  }

  return {
    type: "Polygon",
    coordinates: [(0, _d3Array.merge)(coordinates)]
  };
}

/***/ }),
/* 27 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.default = noop;
function noop() {}

/***/ }),
/* 28 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (object, stream) {
  if (object && streamObjectType.hasOwnProperty(object.type)) {
    streamObjectType[object.type](object, stream);
  } else {
    streamGeometry(object, stream);
  }
};

function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}

var streamObjectType = {
  Feature: function Feature(feature, stream) {
    streamGeometry(feature.geometry, stream);
  },
  FeatureCollection: function FeatureCollection(object, stream) {
    var features = object.features,
        i = -1,
        n = features.length;
    while (++i < n) {
      streamGeometry(features[i].geometry, stream);
    }
  }
};

var streamGeometryType = {
  Sphere: function Sphere(object, stream) {
    stream.sphere();
  },
  Point: function Point(object, stream) {
    object = object.coordinates;
    stream.point(object[0], object[1], object[2]);
  },
  MultiPoint: function MultiPoint(object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;
    while (++i < n) {
      object = coordinates[i], stream.point(object[0], object[1], object[2]);
    }
  },
  LineString: function LineString(object, stream) {
    streamLine(object.coordinates, stream, 0);
  },
  MultiLineString: function MultiLineString(object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;
    while (++i < n) {
      streamLine(coordinates[i], stream, 0);
    }
  },
  Polygon: function Polygon(object, stream) {
    streamPolygon(object.coordinates, stream);
  },
  MultiPolygon: function MultiPolygon(object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;
    while (++i < n) {
      streamPolygon(coordinates[i], stream);
    }
  },
  GeometryCollection: function GeometryCollection(object, stream) {
    var geometries = object.geometries,
        i = -1,
        n = geometries.length;
    while (++i < n) {
      streamGeometry(geometries[i], stream);
    }
  }
};

function streamLine(coordinates, stream, closed) {
  var i = -1,
      n = coordinates.length - closed,
      coordinate;
  stream.lineStart();
  while (++i < n) {
    coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
  }stream.lineEnd();
}

function streamPolygon(coordinates, stream) {
  var i = -1,
      n = coordinates.length;
  stream.polygonStart();
  while (++i < n) {
    streamLine(coordinates[i], stream, 1);
  }stream.polygonEnd();
}

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _path = __webpack_require__(520);

Object.defineProperty(exports, "path", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_path).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {



// # simple-statistics
//
// A simple, literate statistics system.

var ss = module.exports = {};

// Linear Regression
ss.linearRegression = __webpack_require__(532);
ss.linearRegressionLine = __webpack_require__(533);
ss.standardDeviation = __webpack_require__(219);
ss.rSquared = __webpack_require__(534);
ss.mode = __webpack_require__(535);
ss.modeFast = __webpack_require__(536);
ss.modeSorted = __webpack_require__(223);
ss.min = __webpack_require__(224);
ss.max = __webpack_require__(225);
ss.minSorted = __webpack_require__(537);
ss.maxSorted = __webpack_require__(538);
ss.sum = __webpack_require__(221);
ss.sumSimple = __webpack_require__(539);
ss.product = __webpack_require__(540);
ss.quantile = __webpack_require__(115);
ss.quantileSorted = __webpack_require__(116);
ss.iqr = ss.interquartileRange = __webpack_require__(542);
ss.medianAbsoluteDeviation = ss.mad = __webpack_require__(543);
ss.chunk = __webpack_require__(544);
ss.sampleWithReplacement = __webpack_require__(545);
ss.shuffle = __webpack_require__(227);
ss.shuffleInPlace = __webpack_require__(228);
ss.sample = __webpack_require__(546);
ss.ckmeans = __webpack_require__(547);
ss.uniqueCountSorted = __webpack_require__(229);
ss.sumNthPowerDeviations = __webpack_require__(114);
ss.equalIntervalBreaks = __webpack_require__(548);

// sample statistics
ss.sampleCovariance = __webpack_require__(230);
ss.sampleCorrelation = __webpack_require__(549);
ss.sampleVariance = __webpack_require__(117);
ss.sampleStandardDeviation = __webpack_require__(231);
ss.sampleSkewness = __webpack_require__(550);
ss.sampleKurtosis = __webpack_require__(551);

// combinatorics
ss.permutationsHeap = __webpack_require__(552);
ss.combinations = __webpack_require__(553);
ss.combinationsReplacement = __webpack_require__(554);

// measures of centrality
ss.addToMean = __webpack_require__(555);
ss.combineMeans = __webpack_require__(232);
ss.combineVariances = __webpack_require__(556);
ss.geometricMean = __webpack_require__(557);
ss.harmonicMean = __webpack_require__(558);
ss.mean = ss.average = __webpack_require__(23);
ss.median = __webpack_require__(226);
ss.medianSorted = __webpack_require__(559);
ss.subtractFromMean = __webpack_require__(560);

ss.rootMeanSquare = ss.rms = __webpack_require__(561);
ss.variance = __webpack_require__(220);
ss.tTest = __webpack_require__(562);
ss.tTestTwoSample = __webpack_require__(563);
// ss.jenks = require('./src/jenks');

// Classifiers
ss.bayesian = __webpack_require__(564);
ss.perceptron = __webpack_require__(565);

// Distribution-related methods
ss.epsilon = __webpack_require__(70); // We make ε available to the test suite.
ss.factorial = __webpack_require__(566);
ss.bernoulliDistribution = __webpack_require__(567);
ss.binomialDistribution = __webpack_require__(568);
ss.poissonDistribution = __webpack_require__(569);
ss.chiSquaredGoodnessOfFit = __webpack_require__(570);

// Normal distribution
ss.zScore = __webpack_require__(572);
ss.cumulativeStdNormalProbability = __webpack_require__(573);
ss.standardNormalTable = __webpack_require__(233);
ss.errorFunction = ss.erf = __webpack_require__(574);
ss.inverseErrorFunction = __webpack_require__(234);
ss.probit = __webpack_require__(575);

// Root-finding methods
ss.bisect = __webpack_require__(576);

/***/ }),
/* 31 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (x) {
  return function constant() {
    return x;
  };
};

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(13);

/** Built-in value references. */
var _Symbol = root.Symbol;

module.exports = _Symbol;

/***/ }),
/* 33 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function () {
  return new Adder();
};

function Adder() {
  this.reset();
} // Adds floating point numbers with twice the normal precision.
// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
// 305–363 (1997).
// Code adapted from GeographicLib by Charles F. F. Karney,
// http://geographiclib.sourceforge.net/

Adder.prototype = {
  constructor: Adder,
  reset: function reset() {
    this.s = // rounded value
    this.t = 0; // exact error
  },
  add: function add(y) {
    _add(temp, y, this.t);
    _add(this, temp.s, this.s);
    if (this.s) this.t += temp.t;else this.s = temp.t;
  },
  valueOf: function valueOf() {
    return this.s;
  }
};

var temp = new Adder();

function _add(adder, a, b) {
  var x = adder.s = a + b,
      bv = x - a,
      av = x - bv;
  adder.t = a - av + (b - bv);
}

/***/ }),
/* 34 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
};

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (projectAt) {
  var phi0 = 0,
      m = (0, _d3Geo.geoProjectionMutator)(projectAt),
      p = m(phi0);

  p.parallel = function (_) {
    return arguments.length ? m(phi0 = _ * _math.radians) : phi0 * _math.degrees;
  };

  return p;
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(53),
    baseAssignValue = __webpack_require__(76);

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;

/***/ }),
/* 37 */
/***/ (function(module, exports) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.spherical = spherical;
exports.cartesian = cartesian;
exports.cartesianDot = cartesianDot;
exports.cartesianCross = cartesianCross;
exports.cartesianAddInPlace = cartesianAddInPlace;
exports.cartesianScale = cartesianScale;
exports.cartesianNormalizeInPlace = cartesianNormalizeInPlace;

var _math = __webpack_require__(3);

function spherical(cartesian) {
  return [(0, _math.atan2)(cartesian[1], cartesian[0]), (0, _math.asin)(cartesian[2])];
}

function cartesian(spherical) {
  var lambda = spherical[0],
      phi = spherical[1],
      cosPhi = (0, _math.cos)(phi);
  return [cosPhi * (0, _math.cos)(lambda), cosPhi * (0, _math.sin)(lambda), (0, _math.sin)(phi)];
}

function cartesianDot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

function cartesianCross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
}

// TODO return a
function cartesianAddInPlace(a, b) {
  a[0] += b[0], a[1] += b[1], a[2] += b[2];
}

function cartesianScale(vector, k) {
  return [vector[0] * k, vector[1] * k, vector[2] * k];
}

// TODO return d
function cartesianNormalizeInPlace(d) {
  var l = (0, _math.sqrt)(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}

/***/ }),
/* 39 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (x) {
  return x === null ? NaN : +x;
};

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.azimuthalRaw = azimuthalRaw;
exports.azimuthalInvert = azimuthalInvert;

var _math = __webpack_require__(3);

function azimuthalRaw(scale) {
  return function (x, y) {
    var cx = (0, _math.cos)(x),
        cy = (0, _math.cos)(y),
        k = scale(cx * cy);
    return [k * cy * (0, _math.sin)(x), k * (0, _math.sin)(y)];
  };
}

function azimuthalInvert(angle) {
  return function (x, y) {
    var z = (0, _math.sqrt)(x * x + y * y),
        c = angle(z),
        sc = (0, _math.sin)(c),
        cc = (0, _math.cos)(c);
    return [(0, _math.atan2)(x * sc, z * cc), (0, _math.asin)(z && y * sc / z)];
  };
}

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.sinusoidalRaw = sinusoidalRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(sinusoidalRaw).scale(152.63);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function sinusoidalRaw(lambda, phi) {
  return [lambda * (0, _math.cos)(phi), phi];
}

sinusoidalRaw.invert = function (x, y) {
  return [x / (0, _math.cos)(y), y];
};

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = __webpack_require__(179);
var assign = __webpack_require__(5);
var clone = __webpack_require__(180);
var find = __webpack_require__(461);
var forIn = __webpack_require__(11);
var isMatch = __webpack_require__(486);
var isObject = __webpack_require__(12);
var isString = __webpack_require__(7);
var keys = __webpack_require__(9);
var pick = __webpack_require__(69);
var cloneItems = __webpack_require__(107);

var View = function (_EventEmitter) {
  _inherits(View, _EventEmitter);

  // constructor
  function View(dataSet, options) {
    _classCallCheck(this, View);

    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

    var me = _this;
    options = options || {};
    dataSet = dataSet || {};
    if (!dataSet.isDataSet) {
      options = dataSet;
      dataSet = null;
    }
    assign(me, {
      dataSet: dataSet,
      loose: !dataSet,
      dataType: 'table',
      isView: true,
      isDataView: true, // alias
      origin: [],
      rows: [],
      transforms: [],
      watchingStates: null
    }, options);
    if (!me.loose) {
      var watchingStates = me.watchingStates;

      dataSet.on('statechange', function (name) {
        if (Array.isArray(watchingStates)) {
          if (watchingStates.indexOf(name) > -1) {
            me._reExecute();
          }
        } else {
          me._reExecute();
        }
      });
    }
    return _this;
  }

  View.prototype._parseStateExpression = function _parseStateExpression(expr) {
    var dataSet = this.dataSet;
    var matched = /^\$state\.(\w+)/.exec(expr);
    if (matched) {
      return dataSet.state[matched[1]];
    }
    return expr;
  };

  View.prototype._preparseOptions = function _preparseOptions(options) {
    var me = this;
    var optionsCloned = clone(options);
    if (me.loose) {
      return optionsCloned;
    }
    forIn(optionsCloned, function (value, key) {
      if (isString(value) && /^\$state\./.test(value)) {
        optionsCloned[key] = me._parseStateExpression(value);
      }
    });
    return optionsCloned;
  };

  // connectors


  View.prototype.source = function source(_source, options) {
    var me = this;
    var DataSet = View.DataSet;
    // warning me.origin is protected
    me._source = {
      source: _source,
      options: options
    };
    if (!options) {
      if (_source instanceof View || isString(_source)) {
        me.origin = DataSet.getConnector('default')(_source, me.dataSet);
      } else if (Array.isArray(_source)) {
        // TODO branch: if source is like ['dataview1', 'dataview2']
        me.origin = _source;
      } else if (isObject(_source) && _source.type) {
        options = me._preparseOptions(_source); // connector without source
        me.origin = DataSet.getConnector(options.type)(options, me);
      } else {
        throw new TypeError('Invalid source');
      }
    } else {
      options = me._preparseOptions(options);
      me.origin = DataSet.getConnector(options.type)(_source, options, me);
    }
    if (!me.rows || me.rows.length !== me.origin.length) {
      // allow connectors to access 'rows'
      me.rows = cloneItems(me.origin);
    }
    return me;
  };

  // transforms


  View.prototype.transform = function transform() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var me = this;
    me.transforms.push(options);
    me._executeTransform(options);
    return me;
  };

  View.prototype._executeTransform = function _executeTransform(options) {
    var me = this;
    options = me._preparseOptions(options);
    var transform = View.DataSet.getTransform(options.type);
    transform(me, options);
  };

  View.prototype._reExecuteTransforms = function _reExecuteTransforms() {
    var me = this;
    me.transforms.forEach(function (options) {
      me._executeTransform(options);
    });
  };

  // rows


  View.prototype.addRow = function addRow(row) {
    this.rows.push(row);
  };

  View.prototype.removeRow = function removeRow(index) {
    this.rows.splice(index, 1);
  };

  View.prototype.updateRow = function updateRow(index, newRow) {
    assign(this.rows[index], newRow);
  };

  View.prototype.findRows = function findRows(query) {
    return this.rows.filter(function (row) {
      return isMatch(row, query);
    });
  };

  View.prototype.findRow = function findRow(query) {
    return find(this.rows, query);
  };

  // columns


  View.prototype.getColumnNames = function getColumnNames() {
    var firstRow = this.rows[0];
    if (firstRow) {
      return keys(firstRow);
    }
    return [];
  };

  View.prototype.getColumnName = function getColumnName(index) {
    return this.getColumnNames()[index];
  };

  View.prototype.getColumnIndex = function getColumnIndex(columnName) {
    var columnNames = this.getColumnNames();
    return columnNames.indexOf(columnName);
  };

  View.prototype.getColumn = function getColumn(columnName) {
    return this.rows.map(function (row) {
      return row[columnName];
    });
  };

  View.prototype.getColumnData = function getColumnData(columnName) {
    return this.getColumn(columnName);
  };

  // data process


  View.prototype.getSubset = function getSubset(startRowIndex, endRowIndex, columnNames) {
    var subset = [];
    for (var i = startRowIndex; i <= endRowIndex; i++) {
      subset.push(pick(this.rows[i], columnNames));
    }
    return subset;
  };

  View.prototype.toString = function toString(prettyPrint) {
    var me = this;
    if (prettyPrint) {
      return JSON.stringify(me.rows, null, 2);
    }
    return JSON.stringify(me.rows);
  };

  View.prototype._reExecute = function _reExecute() {
    var me = this;
    var _me$_source = me._source,
        source = _me$_source.source,
        options = _me$_source.options;

    me.source(source, options);
    me._reExecuteTransforms();
    me.trigger('change');
  };

  return View;
}(EventEmitter);

module.exports = View;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var baseGetTag = __webpack_require__(19),
    isObjectLike = __webpack_require__(15);

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
    return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
}

module.exports = isSymbol;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

var isSymbol = __webpack_require__(43);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

module.exports = toKey;

/***/ }),
/* 45 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function () {
  return new Adder();
};

function Adder() {
  this.reset();
} // Adds floating point numbers with twice the normal precision.
// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
// 305–363 (1997).
// Code adapted from GeographicLib by Charles F. F. Karney,
// http://geographiclib.sourceforge.net/

Adder.prototype = {
  constructor: Adder,
  reset: function reset() {
    this.s = // rounded value
    this.t = 0; // exact error
  },
  add: function add(y) {
    _add(temp, y, this.t);
    _add(this, temp.s, this.s);
    if (this.s) this.t += temp.t;else this.s = temp.t;
  },
  valueOf: function valueOf() {
    return this.s;
  }
};

var temp = new Adder();

function _add(adder, a, b) {
  var x = adder.s = a + b,
      bv = x - a,
      av = x - bv;
  adder.t = a - av + (b - bv);
}

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.spherical = spherical;
exports.cartesian = cartesian;
exports.cartesianDot = cartesianDot;
exports.cartesianCross = cartesianCross;
exports.cartesianAddInPlace = cartesianAddInPlace;
exports.cartesianScale = cartesianScale;
exports.cartesianNormalizeInPlace = cartesianNormalizeInPlace;

var _math = __webpack_require__(4);

function spherical(cartesian) {
  return [(0, _math.atan2)(cartesian[1], cartesian[0]), (0, _math.asin)(cartesian[2])];
}

function cartesian(spherical) {
  var lambda = spherical[0],
      phi = spherical[1],
      cosPhi = (0, _math.cos)(phi);
  return [cosPhi * (0, _math.cos)(lambda), cosPhi * (0, _math.sin)(lambda), (0, _math.sin)(phi)];
}

function cartesianDot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

function cartesianCross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
}

// TODO return a
function cartesianAddInPlace(a, b) {
  a[0] += b[0], a[1] += b[1], a[2] += b[2];
}

function cartesianScale(vector, k) {
  return [vector[0] * k, vector[1] * k, vector[2] * k];
}

// TODO return d
function cartesianNormalizeInPlace(d) {
  var l = (0, _math.sqrt)(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.azimuthalRaw = azimuthalRaw;
exports.azimuthalInvert = azimuthalInvert;

var _math = __webpack_require__(4);

function azimuthalRaw(scale) {
  return function (x, y) {
    var cx = (0, _math.cos)(x),
        cy = (0, _math.cos)(y),
        k = scale(cx * cy);
    return [k * cy * (0, _math.sin)(x), k * (0, _math.sin)(y)];
  };
}

function azimuthalInvert(angle) {
  return function (x, y) {
    var z = (0, _math.sqrt)(x * x + y * y),
        c = angle(z),
        sc = (0, _math.sin)(c),
        cc = (0, _math.cos)(c);
    return [(0, _math.atan2)(x * sc, z * cc), (0, _math.asin)(z && y * sc / z)];
  };
}

/***/ }),
/* 48 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (x1 - x0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.y0 = y0, node.y1 = y1;
    node.x0 = x0, node.x1 = x0 += node.value * k;
  }
};

/***/ }),
/* 49 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.acos = acos;
exports.asin = asin;
var abs = exports.abs = Math.abs;
var atan2 = exports.atan2 = Math.atan2;
var cos = exports.cos = Math.cos;
var max = exports.max = Math.max;
var min = exports.min = Math.min;
var sin = exports.sin = Math.sin;
var sqrt = exports.sqrt = Math.sqrt;

var epsilon = exports.epsilon = 1e-12;
var pi = exports.pi = Math.PI;
var halfPi = exports.halfPi = pi / 2;
var tau = exports.tau = 2 * pi;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
}

/***/ }),
/* 50 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (series, order) {
  if (!((n = series.length) > 1)) return;
  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];
    for (j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
};

/***/ }),
/* 51 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (series) {
  var n = series.length,
      o = new Array(n);
  while (--n >= 0) {
    o[n] = n;
  }return o;
};

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.edges = exports.circles = exports.cells = exports.beaches = exports.epsilon2 = exports.epsilon = undefined;
exports.default = Diagram;

var _Beach = __webpack_require__(707);

var _Cell = __webpack_require__(265);

var _Circle = __webpack_require__(266);

var _Edge = __webpack_require__(134);

var _RedBlackTree = __webpack_require__(133);

var _RedBlackTree2 = _interopRequireDefault(_RedBlackTree);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var epsilon = exports.epsilon = 1e-6;
var epsilon2 = exports.epsilon2 = 1e-12;
var beaches = exports.beaches = undefined;
var cells = exports.cells = undefined;
var circles = exports.circles = undefined;
var edges = exports.edges = undefined;

function triangleArea(a, b, c) {
  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
}

function lexicographic(a, b) {
  return b[1] - a[1] || b[0] - a[0];
}

function Diagram(sites, extent) {
  var site = sites.sort(lexicographic).pop(),
      x,
      y,
      circle;

  exports.edges = edges = [];
  exports.cells = cells = new Array(sites.length);
  exports.beaches = beaches = new _RedBlackTree2.default();
  exports.circles = circles = new _RedBlackTree2.default();

  while (true) {
    circle = _Circle.firstCircle;
    if (site && (!circle || site[1] < circle.y || site[1] === circle.y && site[0] < circle.x)) {
      if (site[0] !== x || site[1] !== y) {
        (0, _Beach.addBeach)(site);
        x = site[0], y = site[1];
      }
      site = sites.pop();
    } else if (circle) {
      (0, _Beach.removeBeach)(circle.arc);
    } else {
      break;
    }
  }

  (0, _Cell.sortCellHalfedges)();

  if (extent) {
    var x0 = +extent[0][0],
        y0 = +extent[0][1],
        x1 = +extent[1][0],
        y1 = +extent[1][1];
    (0, _Edge.clipEdges)(x0, y0, x1, y1);
    (0, _Cell.clipCells)(x0, y0, x1, y1);
  }

  this.edges = edges;
  this.cells = cells;

  exports.beaches = beaches = exports.circles = circles = exports.edges = edges = exports.cells = cells = null;
}

Diagram.prototype = {
  constructor: Diagram,

  polygons: function polygons() {
    var edges = this.edges;

    return this.cells.map(function (cell) {
      var polygon = cell.halfedges.map(function (i) {
        return (0, _Cell.cellHalfedgeStart)(cell, edges[i]);
      });
      polygon.data = cell.site.data;
      return polygon;
    });
  },

  triangles: function triangles() {
    var triangles = [],
        edges = this.edges;

    this.cells.forEach(function (cell, i) {
      if (!(m = (halfedges = cell.halfedges).length)) return;
      var site = cell.site,
          halfedges,
          j = -1,
          m,
          s0,
          e1 = edges[halfedges[m - 1]],
          s1 = e1.left === site ? e1.right : e1.left;

      while (++j < m) {
        s0 = s1;
        e1 = edges[halfedges[j]];
        s1 = e1.left === site ? e1.right : e1.left;
        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
          triangles.push([site.data, s0.data, s1.data]);
        }
      }
    });

    return triangles;
  },

  links: function links() {
    return this.edges.filter(function (edge) {
      return edge.right;
    }).map(function (edge) {
      return {
        source: edge.left.data,
        target: edge.right.data
      };
    });
  },

  find: function find(x, y, radius) {
    var that = this,
        i0,
        i1 = that._found || 0,
        n = that.cells.length,
        cell;

    // Use the previously-found cell, or start with an arbitrary one.
    while (!(cell = that.cells[i1])) {
      if (++i1 >= n) return null;
    }var dx = x - cell.site[0],
        dy = y - cell.site[1],
        d2 = dx * dx + dy * dy;

    // Traverse the half-edges to find a closer cell, if any.
    do {
      cell = that.cells[i0 = i1], i1 = null;
      cell.halfedges.forEach(function (e) {
        var edge = that.edges[e],
            v = edge.left;
        if ((v === cell.site || !v) && !(v = edge.right)) return;
        var vx = x - v[0],
            vy = y - v[1],
            v2 = vx * vx + vy * vy;
        if (v2 < d2) d2 = v2, i1 = v.index;
      });
    } while (i1 !== null);

    that._found = i0;

    return radius == null || d2 <= radius * radius ? cell.site : null;
  }
};

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(76),
    eq = __webpack_require__(54);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;

/***/ }),
/* 54 */
/***/ (function(module, exports) {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || value !== value && other !== other;
}

module.exports = eq;

/***/ }),
/* 55 */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}

module.exports = isIndex;

/***/ }),
/* 56 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

  return value === proto;
}

module.exports = isPrototype;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.rotateRadians = rotateRadians;

exports.default = function (rotate) {
  rotate = rotateRadians(rotate[0] * _math.radians, rotate[1] * _math.radians, rotate.length > 2 ? rotate[2] * _math.radians : 0);

  function forward(coordinates) {
    coordinates = rotate(coordinates[0] * _math.radians, coordinates[1] * _math.radians);
    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;
  }

  forward.invert = function (coordinates) {
    coordinates = rotate.invert(coordinates[0] * _math.radians, coordinates[1] * _math.radians);
    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;
  };

  return forward;
};

var _compose = __webpack_require__(146);

var _compose2 = _interopRequireDefault(_compose);

var _math = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function rotationIdentity(lambda, phi) {
  return [lambda > _math.pi ? lambda - _math.tau : lambda < -_math.pi ? lambda + _math.tau : lambda, phi];
}

rotationIdentity.invert = rotationIdentity;

function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= _math.tau) ? deltaPhi || deltaGamma ? (0, _compose2.default)(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}

function forwardRotationLambda(deltaLambda) {
  return function (lambda, phi) {
    return lambda += deltaLambda, [lambda > _math.pi ? lambda - _math.tau : lambda < -_math.pi ? lambda + _math.tau : lambda, phi];
  };
}

function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}

function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = (0, _math.cos)(deltaPhi),
      sinDeltaPhi = (0, _math.sin)(deltaPhi),
      cosDeltaGamma = (0, _math.cos)(deltaGamma),
      sinDeltaGamma = (0, _math.sin)(deltaGamma);

  function rotation(lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        x = (0, _math.cos)(lambda) * cosPhi,
        y = (0, _math.sin)(lambda) * cosPhi,
        z = (0, _math.sin)(phi),
        k = z * cosDeltaPhi + x * sinDeltaPhi;
    return [(0, _math.atan2)(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), (0, _math.asin)(k * cosDeltaGamma + y * sinDeltaGamma)];
  }

  rotation.invert = function (lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        x = (0, _math.cos)(lambda) * cosPhi,
        y = (0, _math.sin)(lambda) * cosPhi,
        z = (0, _math.sin)(phi),
        k = z * cosDeltaGamma - y * sinDeltaGamma;
    return [(0, _math.atan2)(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), (0, _math.asin)(k * cosDeltaPhi - x * sinDeltaPhi)];
  };

  return rotation;
}

/***/ }),
/* 58 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (methods) {
  return {
    stream: transformer(methods)
  };
};

exports.transformer = transformer;
function transformer(methods) {
  return function (stream) {
    var s = new TransformStream();
    for (var key in methods) {
      s[key] = methods[key];
    }s.stream = stream;
    return s;
  };
}

function TransformStream() {}

TransformStream.prototype = {
  constructor: TransformStream,
  point: function point(x, y) {
    this.stream.point(x, y);
  },
  sphere: function sphere() {
    this.stream.sphere();
  },
  lineStart: function lineStart() {
    this.stream.lineStart();
  },
  lineEnd: function lineEnd() {
    this.stream.lineEnd();
  },
  polygonStart: function polygonStart() {
    this.stream.polygonStart();
  },
  polygonEnd: function polygonEnd() {
    this.stream.polygonEnd();
  }
};

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (a, b, c, d, e, f, g, h) {
  if (arguments.length < 8) h = 0;

  function forward(lambda, phi) {
    if (!phi) return [a * lambda / _math.pi, 0];
    var phi2 = phi * phi,
        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),
        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),
        m = (xB * xB + yB * yB) / (2 * yB),
        alpha = lambda * (0, _math.asin)(xB / m) / _math.pi;
    return [m * (0, _math.sin)(alpha), phi * (1 + phi2 * h) + m * (1 - (0, _math.cos)(alpha))];
  }

  forward.invert = function (x, y) {
    var lambda = _math.pi * x / a,
        phi = y,
        deltaLambda,
        deltaPhi,
        i = 50;
    do {
      var phi2 = phi * phi,
          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),
          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),
          p = xB * xB + yB * yB,
          q = 2 * yB,
          m = p / q,
          m2 = m * m,
          dAlphadLambda = (0, _math.asin)(xB / m) / _math.pi,
          alpha = lambda * dAlphadLambda,
          xB2 = xB * xB,
          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,
          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),
          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),
          dqdPhi = 2 * (dyBdPhi - 1),
          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),
          cosAlpha = (0, _math.cos)(alpha),
          sinAlpha = (0, _math.sin)(alpha),
          mcosAlpha = m * cosAlpha,
          msinAlpha = m * sinAlpha,
          dAlphadPhi = lambda / _math.pi * (1 / (0, _math.sqrt)(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi) / m2,
          fx = msinAlpha - x,
          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,
          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,
          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,
          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),
          deltayDeltaLambda = msinAlpha * dAlphadLambda,
          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;
      if (!denominator) break;
      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;
      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;
    } while (((0, _math.abs)(deltaLambda) > _math.epsilon || (0, _math.abs)(deltaPhi) > _math.epsilon) && --i > 0);
    return [lambda, phi];
  };

  return forward;
};

var _math = __webpack_require__(1);

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (root, face, r) {

  r = r == null ? -_math.pi / 6 : r; // TODO automate

  recurse(root, { transform: [(0, _math.cos)(r), (0, _math.sin)(r), 0, -(0, _math.sin)(r), (0, _math.cos)(r), 0] });

  function recurse(node, parent) {
    node.edges = faceEdges(node.face);
    // Find shared edge.
    if (parent.face) {
      var shared = node.shared = sharedEdge(node.face, parent.face),
          m = (0, _matrix2.default)(shared.map(parent.project), shared.map(node.project));
      node.transform = parent.transform ? (0, _matrix.multiply)(parent.transform, m) : m;
      // Replace shared edge in parent edges array.
      var edges = parent.edges;
      for (var i = 0, n = edges.length; i < n; ++i) {
        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;
        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;
      }
      edges = node.edges;
      for (i = 0, n = edges.length; i < n; ++i) {
        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;
        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;
      }
    } else {
      node.transform = parent.transform;
    }
    if (node.children) {
      node.children.forEach(function (child) {
        recurse(child, node);
      });
    }
    return node;
  }

  function forward(lambda, phi) {
    var node = face(lambda, phi),
        point = node.project([lambda * _math.degrees, phi * _math.degrees]),
        t;
    if (t = node.transform) {
      return [t[0] * point[0] + t[1] * point[1] + t[2], -(t[3] * point[0] + t[4] * point[1] + t[5])];
    }
    point[1] = -point[1];
    return point;
  }

  // Naive inverse!  A faster solution would use bounding boxes, or even a
  // polygonal quadtree.
  if (hasInverse(root)) forward.invert = function (x, y) {
    var coordinates = faceInvert(root, [x, -y]);
    return coordinates && (coordinates[0] *= _math.radians, coordinates[1] *= _math.radians, coordinates);
  };

  function faceInvert(node, coordinates) {
    var invert = node.project.invert,
        t = node.transform,
        point = coordinates;
    if (t) {
      t = (0, _matrix.inverse)(t);
      point = [t[0] * point[0] + t[1] * point[1] + t[2], t[3] * point[0] + t[4] * point[1] + t[5]];
    }
    if (invert && node === faceDegrees(p = invert(point))) return p;
    var p,
        children = node.children;
    for (var i = 0, n = children && children.length; i < n; ++i) {
      if (p = faceInvert(children[i], coordinates)) return p;
    }
  }

  function faceDegrees(coordinates) {
    return face(coordinates[0] * _math.radians, coordinates[1] * _math.radians);
  }

  var proj = (0, _d3Geo.geoProjection)(forward),
      stream_ = proj.stream;

  proj.stream = function (stream) {
    var rotate = proj.rotate(),
        rotateStream = stream_(stream),
        sphereStream = (proj.rotate([0, 0]), stream_(stream));
    proj.rotate(rotate);
    rotateStream.sphere = function () {
      sphereStream.polygonStart();
      sphereStream.lineStart();
      outline(sphereStream, root);
      sphereStream.lineEnd();
      sphereStream.polygonEnd();
    };
    return rotateStream;
  };

  return proj;
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

var _matrix = __webpack_require__(386);

var _matrix2 = _interopRequireDefault(_matrix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function outline(stream, node, parent) {
  var point,
      edges = node.edges,
      n = edges.length,
      edge,
      multiPoint = { type: "MultiPoint", coordinates: node.face },
      notPoles = node.face.filter(function (d) {
    return (0, _math.abs)(d[1]) !== 90;
  }),
      b = (0, _d3Geo.geoBounds)({ type: "MultiPoint", coordinates: notPoles }),
      inside = false,
      j = -1,
      dx = b[1][0] - b[0][0];
  // TODO
  var c = dx === 180 || dx === 360 ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2] : (0, _d3Geo.geoCentroid)(multiPoint);
  // First find the shared edge…
  if (parent) while (++j < n) {
    if (edges[j] === parent) break;
  }
  ++j;
  for (var i = 0; i < n; ++i) {
    edge = edges[(i + j) % n];
    if (Array.isArray(edge)) {
      if (!inside) {
        stream.point((point = (0, _d3Geo.geoInterpolate)(edge[0], c)(_math.epsilon))[0], point[1]);
        inside = true;
      }
      stream.point((point = (0, _d3Geo.geoInterpolate)(edge[1], c)(_math.epsilon))[0], point[1]);
    } else {
      inside = false;
      if (edge !== parent) outline(stream, edge, node);
    }
  }
}

// Tests equality of two spherical points.


// Creates a polyhedral projection.
//  * root: a spanning tree of polygon faces.  Nodes are automatically
//    augmented with a transform matrix.
//  * face: a function that returns the appropriate node for a given {lambda, phi}
//    point (radians).
//  * r: rotation angle for final polyhedral net.  Defaults to -pi / 6 (for
//    butterflies).
function pointEqual(a, b) {
  return a && b && a[0] === b[0] && a[1] === b[1];
}

// Finds a shared edge given two clockwise polygons.
function sharedEdge(a, b) {
  var x,
      y,
      n = a.length,
      found = null;
  for (var i = 0; i < n; ++i) {
    x = a[i];
    for (var j = b.length; --j >= 0;) {
      y = b[j];
      if (x[0] === y[0] && x[1] === y[1]) {
        if (found) return [found, x];
        found = x;
      }
    }
  }
}

// Converts an array of n face vertices to an array of n + 1 edges.
function faceEdges(face) {
  var n = face.length,
      edges = [];
  for (var a = face[n - 1], i = 0; i < n; ++i) {
    edges.push([a, a = face[i]]);
  }return edges;
}

function hasInverse(node) {
  return node.project.invert || node.children && node.children.some(hasInverse);
}

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var listCacheClear = __webpack_require__(413),
    listCacheDelete = __webpack_require__(414),
    listCacheGet = __webpack_require__(415),
    listCacheHas = __webpack_require__(416),
    listCacheSet = __webpack_require__(417);

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__(54);

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(24);

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

var isKeyable = __webpack_require__(431);

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}

module.exports = getMapData;

/***/ }),
/* 65 */
/***/ (function(module, exports) {

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function (value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var baseMatches = __webpack_require__(463),
    baseMatchesProperty = __webpack_require__(470),
    identity = __webpack_require__(37),
    isArray = __webpack_require__(10),
    property = __webpack_require__(477);

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object') {
    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(10),
    isKey = __webpack_require__(105),
    stringToPath = __webpack_require__(472),
    toString = __webpack_require__(197);

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;

/***/ }),
/* 68 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var basePick = __webpack_require__(487),
    flatRest = __webpack_require__(490);

/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */
var pick = flatRest(function (object, paths) {
  return object == null ? {} : basePick(object, paths);
});

module.exports = pick;

/***/ }),
/* 70 */
/***/ (function(module, exports) {


/* @flow */

/**
 * We use `ε`, epsilon, as a stopping criterion when we want to iterate
 * until we're "close enough". Epsilon is a very small number: for
 * simple statistics, that number is **0.0001**
 *
 * This is used in calculations like the binomialDistribution, in which
 * the process of finding a value is [iterative](https://en.wikipedia.org/wiki/Iterative_method):
 * it progresses until it is close enough.
 *
 * Below is an example of using epsilon in [gradient descent](https://en.wikipedia.org/wiki/Gradient_descent),
 * where we're trying to find a local minimum of a function's derivative,
 * given by the `fDerivative` method.
 *
 * @example
 * // From calculation, we expect that the local minimum occurs at x=9/4
 * var x_old = 0;
 * // The algorithm starts at x=6
 * var x_new = 6;
 * var stepSize = 0.01;
 *
 * function fDerivative(x) {
 *   return 4 * Math.pow(x, 3) - 9 * Math.pow(x, 2);
 * }
 *
 * // The loop runs until the difference between the previous
 * // value and the current value is smaller than epsilon - a rough
 * // meaure of 'close enough'
 * while (Math.abs(x_new - x_old) > ss.epsilon) {
 *   x_old = x_new;
 *   x_new = x_old - stepSize * fDerivative(x_old);
 * }
 *
 * console.log('Local minimum occurs at', x_new);
 */
var epsilon = 0.0001;

module.exports = epsilon;

/***/ }),
/* 71 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (y1 - y0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.x0 = x0, node.x1 = x1;
    node.y0 = y0, node.y1 = y0 += node.value * k;
  }
};

/***/ }),
/* 72 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (context) {
  return new Linear(context);
};

function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function point(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0:
        this._point = 1;this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);break;
      case 1:
        this._point = 2; // proceed
      default:
        this._context.lineTo(x, y);break;
    }
  }
};

/***/ }),
/* 73 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function () {};

/***/ }),
/* 74 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.Basis = Basis;

exports.default = function (context) {
  return new Basis(context);
};

function _point(that, x, y) {
  that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
}

exports.point = _point;
function Basis(context) {
  this._context = context;
}

Basis.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    switch (this._point) {
      case 3:
        _point(this, this._x1, this._y1); // proceed
      case 2:
        this._context.lineTo(this._x1, this._y1);break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function point(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0:
        this._point = 1;this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);break;
      case 1:
        this._point = 2;break;
      case 2:
        this._point = 3;this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
      default:
        _point(this, x, y);break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

/***/ }),
/* 75 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.Cardinal = Cardinal;
function _point(that, x, y) {
  that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
}

exports.point = _point;
function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

Cardinal.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);break;
      case 3:
        _point(this, this._x1, this._y1);break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function point(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0:
        this._point = 1;this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);break;
      case 1:
        this._point = 2;this._x1 = x, this._y1 = y;break;
      case 2:
        this._point = 3; // proceed
      default:
        _point(this, x, y);break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

exports.default = function custom(tension) {

  function cardinal(context) {
    return new Cardinal(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__(135);

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__(37),
    overRest = __webpack_require__(138),
    setToString = __webpack_require__(139);

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;

/***/ }),
/* 78 */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsArguments = __webpack_require__(283),
    isObjectLike = __webpack_require__(15);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function () {
    return arguments;
}()) ? baseIsArguments : function (value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var root = __webpack_require__(13),
    stubFalse = __webpack_require__(284);

/** Detect free variable `exports`. */
var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)(module)))

/***/ }),
/* 81 */
/***/ (function(module, exports) {

module.exports = function (module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function () {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function get() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function get() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};

/***/ }),
/* 82 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function (value) {
    return func(value);
  };
}

module.exports = baseUnary;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.clipExtent = clipExtent;

exports.default = function () {
  var x0 = 0,
      y0 = 0,
      x1 = 960,
      y1 = 500,
      cache,
      cacheStream,
      clip;

  return clip = {
    stream: function stream(_stream) {
      return cache && cacheStream === _stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = _stream);
    },
    extent: function extent(_) {
      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
    }
  };
};

var _math = __webpack_require__(3);

var _buffer = __webpack_require__(147);

var _buffer2 = _interopRequireDefault(_buffer);

var _line = __webpack_require__(292);

var _line2 = _interopRequireDefault(_line);

var _polygon = __webpack_require__(148);

var _polygon2 = _interopRequireDefault(_polygon);

var _d3Array = __webpack_require__(14);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var clipMax = 1e9,
    clipMin = -clipMax;

// TODO Use d3-polygon’s polygonContains here for the ring check?
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

function clipExtent(x0, y0, x1, y1) {

  function visible(x, y) {
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
  }

  function interpolate(from, to, direction, stream) {
    var a = 0,
        a1 = 0;
    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
      do {
        stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
      } while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function corner(p, direction) {
    return (0, _math.abs)(p[0] - x0) < _math.epsilon ? direction > 0 ? 0 : 3 : (0, _math.abs)(p[0] - x1) < _math.epsilon ? direction > 0 ? 2 : 1 : (0, _math.abs)(p[1] - y0) < _math.epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
  }

  function compareIntersection(a, b) {
    return comparePoint(a.x, b.x);
  }

  function comparePoint(a, b) {
    var ca = corner(a, 1),
        cb = corner(b, 1);
    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
  }

  return function (stream) {
    var activeStream = stream,
        bufferStream = (0, _buffer2.default)(),
        segments,
        polygon,
        ring,
        x__,
        y__,
        v__,
        // first point
    x_,
        y_,
        v_,
        // previous point
    first,
        clean;

    var clipStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: polygonStart,
      polygonEnd: polygonEnd
    };

    function point(x, y) {
      if (visible(x, y)) activeStream.point(x, y);
    }

    function polygonInside() {
      var winding = 0;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
          if (a1 <= y1) {
            if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
          } else {
            if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
          }
        }
      }

      return winding;
    }

    // Buffer geometry within a polygon and then clip it en masse.
    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }

    function polygonEnd() {
      var startInside = polygonInside(),
          cleanInside = clean && startInside,
          visible = (segments = (0, _d3Array.merge)(segments)).length;
      if (cleanInside || visible) {
        stream.polygonStart();
        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }
        if (visible) {
          (0, _polygon2.default)(segments, compareIntersection, startInside, interpolate, stream);
        }
        stream.polygonEnd();
      }
      activeStream = stream, segments = polygon = ring = null;
    }

    function lineStart() {
      clipStream.point = linePoint;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    }

    // TODO rather than special-case polygons, simply handle them separately.
    // Ideally, coincident intersection points should be jittered to avoid
    // clipping issues.
    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }
      clipStream.point = point;
      if (v_) activeStream.lineEnd();
    }

    function linePoint(x, y) {
      var v = visible(x, y);
      if (polygon) ring.push([x, y]);
      if (first) {
        x__ = x, y__ = y, v__ = v;
        first = false;
        if (v) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v && v_) activeStream.point(x, y);else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
          if ((0, _line2.default)(a, b, x0, y0, x1, y1)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }
            activeStream.point(b[0], b[1]);
            if (!v) activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }
      x_ = x, y_ = y, v_ = v;
    }

    return clipStream;
  };
}

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (values, p, valueof) {
  if (valueof == null) valueof = _number2.default;
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
};

var _number = __webpack_require__(39);

var _number2 = _interopRequireDefault(_number);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 85 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (x) {
  return x;
};

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.conicEqualAreaRaw = conicEqualAreaRaw;

exports.default = function () {
  return (0, _conic.conicProjection)(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);
};

var _math = __webpack_require__(3);

var _conic = __webpack_require__(87);

var _cylindricalEqualArea = __webpack_require__(321);

function conicEqualAreaRaw(y0, y1) {
  var sy0 = (0, _math.sin)(y0),
      n = (sy0 + (0, _math.sin)(y1)) / 2;

  // Are the parallels symmetrical around the Equator?
  if ((0, _math.abs)(n) < _math.epsilon) return (0, _cylindricalEqualArea.cylindricalEqualAreaRaw)(y0);

  var c = 1 + sy0 * (2 * n - sy0),
      r0 = (0, _math.sqrt)(c) / n;

  function project(x, y) {
    var r = (0, _math.sqrt)(c - 2 * n * (0, _math.sin)(y)) / n;
    return [r * (0, _math.sin)(x *= n), r0 - r * (0, _math.cos)(x)];
  }

  project.invert = function (x, y) {
    var r0y = r0 - y;
    return [(0, _math.atan2)(x, (0, _math.abs)(r0y)) / n * (0, _math.sign)(r0y), (0, _math.asin)((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
  };

  return project;
}

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.conicProjection = conicProjection;

var _math = __webpack_require__(3);

var _index = __webpack_require__(16);

function conicProjection(projectAt) {
  var phi0 = 0,
      phi1 = _math.pi / 3,
      m = (0, _index.projectionMutator)(projectAt),
      p = m(phi0, phi1);

  p.parallels = function (_) {
    return arguments.length ? m(phi0 = _[0] * _math.radians, phi1 = _[1] * _math.radians) : [phi0 * _math.degrees, phi1 * _math.degrees];
  };

  return p;
}

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.fitExtent = fitExtent;
exports.fitSize = fitSize;

var _stream = __webpack_require__(25);

var _stream2 = _interopRequireDefault(_stream);

var _bounds = __webpack_require__(165);

var _bounds2 = _interopRequireDefault(_bounds);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function fitExtent(projection, extent, object) {
    var w = extent[1][0] - extent[0][0],
        h = extent[1][1] - extent[0][1],
        clip = projection.clipExtent && projection.clipExtent();

    projection.scale(150).translate([0, 0]);

    if (clip != null) projection.clipExtent(null);

    (0, _stream2.default)(object, projection.stream(_bounds2.default));

    var b = _bounds2.default.result(),
        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;

    if (clip != null) projection.clipExtent(clip);

    return projection.scale(k * 150).translate([x, y]);
}

function fitSize(projection, size, object) {
    return fitExtent(projection, [[0, 0], size], object);
}

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.mercatorRaw = mercatorRaw;

exports.default = function () {
  return mercatorProjection(mercatorRaw).scale(961 / _math.tau);
};

exports.mercatorProjection = mercatorProjection;

var _math = __webpack_require__(3);

var _rotation = __webpack_require__(57);

var _rotation2 = _interopRequireDefault(_rotation);

var _index = __webpack_require__(16);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mercatorRaw(lambda, phi) {
  return [lambda, (0, _math.log)((0, _math.tan)((_math.halfPi + phi) / 2))];
}

mercatorRaw.invert = function (x, y) {
  return [x, 2 * (0, _math.atan)((0, _math.exp)(y)) - _math.halfPi];
};

function mercatorProjection(project) {
  var m = (0, _index2.default)(project),
      center = m.center,
      scale = m.scale,
      translate = m.translate,
      clipExtent = m.clipExtent,
      x0 = null,
      y0,
      x1,
      y1; // clip extent

  m.scale = function (_) {
    return arguments.length ? (scale(_), reclip()) : scale();
  };

  m.translate = function (_) {
    return arguments.length ? (translate(_), reclip()) : translate();
  };

  m.center = function (_) {
    return arguments.length ? (center(_), reclip()) : center();
  };

  m.clipExtent = function (_) {
    return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  function reclip() {
    var k = _math.pi * scale(),
        t = m((0, _rotation2.default)(m.rotate()).invert([0, 0]));
    return clipExtent(x0 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]] : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
  }

  return reclip();
}

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.collignonRaw = collignonRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(collignonRaw).scale(95.6464).center([0, 30]);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function collignonRaw(lambda, phi) {
  var alpha = (0, _math.sqrt)(1 - (0, _math.sin)(phi));
  return [2 / _math.sqrtPi * lambda * alpha, _math.sqrtPi * (1 - alpha)];
}

collignonRaw.invert = function (x, y) {
  var lambda = (lambda = y / _math.sqrtPi - 1) * lambda;
  return [lambda > 0 ? x * (0, _math.sqrt)(_math.pi / lambda) / 2 : 0, (0, _math.asin)(1 - lambda)];
};

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.sinuMollweideY = exports.sinuMollweidePhi = undefined;
exports.sinuMollweideRaw = sinuMollweideRaw;

exports.default = function () {
    return (0, _d3Geo.geoProjection)(sinuMollweideRaw).rotate([-20, -55]).scale(164.263).center([0, -5.4036]);
};

var _d3Geo = __webpack_require__(0);

var _mollweide = __webpack_require__(22);

var _sinusoidal = __webpack_require__(41);

var sinuMollweidePhi = exports.sinuMollweidePhi = 0.7109889596207567;

var sinuMollweideY = exports.sinuMollweideY = 0.0528035274542;

function sinuMollweideRaw(lambda, phi) {
    return phi > -sinuMollweidePhi ? (lambda = (0, _mollweide.mollweideRaw)(lambda, phi), lambda[1] += sinuMollweideY, lambda) : (0, _sinusoidal.sinusoidalRaw)(lambda, phi);
}

sinuMollweideRaw.invert = function (x, y) {
    return y > -sinuMollweidePhi ? _mollweide.mollweideRaw.invert(x, y - sinuMollweideY) : _sinusoidal.sinusoidalRaw.invert(x, y);
};

/***/ }),
/* 92 */
/***/ (function(module, exports) {

exports.__esModule = true;
// TODO generate on-the-fly to avoid external modification.
var octahedron = [[0, 90], [-90, 0], [0, 0], [90, 0], [180, 0], [0, -90]];

exports.default = [[0, 2, 1], [0, 3, 2], [5, 1, 2], [5, 2, 3], [0, 1, 4], [0, 4, 3], [5, 4, 1], [5, 3, 4]].map(function (face) {
  return face.map(function (i) {
    return octahedron[i];
  });
});

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (project) {
    var dx = project(_math.halfPi, 0)[0] - project(-_math.halfPi, 0)[0];

    function projectQuincuncial(lambda, phi) {
        var t = (0, _math.abs)(lambda) < _math.halfPi,
            p = project(t ? lambda : lambda > 0 ? lambda - _math.pi : lambda + _math.pi, phi),
            x = (p[0] - p[1]) * _math.sqrt1_2,
            y = (p[0] + p[1]) * _math.sqrt1_2;
        if (t) return [x, y];
        var d = dx * _math.sqrt1_2,
            s = x > 0 ^ y > 0 ? -1 : 1;
        return [s * x - (0, _math.sign)(y) * d, s * y - (0, _math.sign)(x) * d];
    }

    if (project.invert) projectQuincuncial.invert = function (x0, y0) {
        var x = (x0 + y0) * _math.sqrt1_2,
            y = (y0 - x0) * _math.sqrt1_2,
            t = (0, _math.abs)(x) < 0.5 * dx && (0, _math.abs)(y) < 0.5 * dx;

        if (!t) {
            var d = dx * _math.sqrt1_2,
                s = x > 0 ^ y > 0 ? -1 : 1,
                x1 = -s * x0 + (y > 0 ? 1 : -1) * d,
                y1 = -s * y0 + (x > 0 ? 1 : -1) * d;
            x = (-x1 - y1) * _math.sqrt1_2;
            y = (x1 - y1) * _math.sqrt1_2;
        }

        var p = project.invert(x, y);
        if (!t) p[0] += x > 0 ? _math.pi : -_math.pi;
        return p;
    };

    return (0, _d3Geo.geoProjection)(projectQuincuncial).rotate([-90, -90, 45]).clipAngle(180 - 1e-3);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(61),
    stackClear = __webpack_require__(418),
    stackDelete = __webpack_require__(419),
    stackGet = __webpack_require__(420),
    stackHas = __webpack_require__(421),
    stackSet = __webpack_require__(422);

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(24),
    root = __webpack_require__(13);

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

var mapCacheClear = __webpack_require__(423),
    mapCacheDelete = __webpack_require__(430),
    mapCacheGet = __webpack_require__(432),
    mapCacheHas = __webpack_require__(433),
    mapCacheSet = __webpack_require__(434);

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(141),
    baseKeysIn = __webpack_require__(438),
    isArrayLike = __webpack_require__(20);

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

var arrayFilter = __webpack_require__(443),
    stubArray = __webpack_require__(182);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function (symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;

/***/ }),
/* 99 */
/***/ (function(module, exports) {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(143);

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

var Uint8Array = __webpack_require__(188);

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(96),
    setCacheAdd = __webpack_require__(465),
    setCacheHas = __webpack_require__(466);

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;

    this.__data__ = new MapCache();
    while (++index < length) {
        this.add(values[index]);
    }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;

/***/ }),
/* 103 */
/***/ (function(module, exports) {

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(67),
    toKey = __webpack_require__(44);

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return index && index == length ? object : undefined;
}

module.exports = baseGet;

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var isArray = __webpack_require__(10),
    isSymbol = __webpack_require__(43);

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}

module.exports = isKey;

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(99),
    isFlattenable = __webpack_require__(492);

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

module.exports = baseFlatten;

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

var clone = __webpack_require__(180);
var cloneDeep = __webpack_require__(493);

module.exports = function (data) {
  if (Array.isArray(data)) {
    return data.map(function (item) {
      return clone(item);
    });
  }
  if ({}.toString.call(data) === '[object Object]') {
    var result = {};
    for (var key in data) {
      result[key] = data[key];
    }
    return result;
  }
  return cloneDeep(data);
};

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.rotateRadians = rotateRadians;

exports.default = function (rotate) {
  rotate = rotateRadians(rotate[0] * _math.radians, rotate[1] * _math.radians, rotate.length > 2 ? rotate[2] * _math.radians : 0);

  function forward(coordinates) {
    coordinates = rotate(coordinates[0] * _math.radians, coordinates[1] * _math.radians);
    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;
  }

  forward.invert = function (coordinates) {
    coordinates = rotate.invert(coordinates[0] * _math.radians, coordinates[1] * _math.radians);
    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;
  };

  return forward;
};

var _compose = __webpack_require__(206);

var _compose2 = _interopRequireDefault(_compose);

var _math = __webpack_require__(4);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function rotationIdentity(lambda, phi) {
  return [lambda > _math.pi ? lambda - _math.tau : lambda < -_math.pi ? lambda + _math.tau : lambda, phi];
}

rotationIdentity.invert = rotationIdentity;

function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= _math.tau) ? deltaPhi || deltaGamma ? (0, _compose2.default)(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}

function forwardRotationLambda(deltaLambda) {
  return function (lambda, phi) {
    return lambda += deltaLambda, [lambda > _math.pi ? lambda - _math.tau : lambda < -_math.pi ? lambda + _math.tau : lambda, phi];
  };
}

function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}

function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = (0, _math.cos)(deltaPhi),
      sinDeltaPhi = (0, _math.sin)(deltaPhi),
      cosDeltaGamma = (0, _math.cos)(deltaGamma),
      sinDeltaGamma = (0, _math.sin)(deltaGamma);

  function rotation(lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        x = (0, _math.cos)(lambda) * cosPhi,
        y = (0, _math.sin)(lambda) * cosPhi,
        z = (0, _math.sin)(phi),
        k = z * cosDeltaPhi + x * sinDeltaPhi;
    return [(0, _math.atan2)(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), (0, _math.asin)(k * cosDeltaGamma + y * sinDeltaGamma)];
  }

  rotation.invert = function (lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        x = (0, _math.cos)(lambda) * cosPhi,
        y = (0, _math.sin)(lambda) * cosPhi,
        z = (0, _math.sin)(phi),
        k = z * cosDeltaGamma - y * sinDeltaGamma;
    return [(0, _math.atan2)(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), (0, _math.asin)(k * cosDeltaPhi - x * sinDeltaPhi)];
  };

  return rotation;
}

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.conicEqualAreaRaw = conicEqualAreaRaw;

exports.default = function () {
  return (0, _conic.conicProjection)(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);
};

var _math = __webpack_require__(4);

var _conic = __webpack_require__(110);

function conicEqualAreaRaw(y0, y1) {
  var sy0 = (0, _math.sin)(y0),
      n = (sy0 + (0, _math.sin)(y1)) / 2,
      c = 1 + sy0 * (2 * n - sy0),
      r0 = (0, _math.sqrt)(c) / n;

  function project(x, y) {
    var r = (0, _math.sqrt)(c - 2 * n * (0, _math.sin)(y)) / n;
    return [r * (0, _math.sin)(x *= n), r0 - r * (0, _math.cos)(x)];
  }

  project.invert = function (x, y) {
    var r0y = r0 - y;
    return [(0, _math.atan2)(x, r0y) / n, (0, _math.asin)((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
  };

  return project;
}

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.conicProjection = conicProjection;

var _math = __webpack_require__(4);

var _index = __webpack_require__(17);

function conicProjection(projectAt) {
  var phi0 = 0,
      phi1 = _math.pi / 3,
      m = (0, _index.projectionMutator)(projectAt),
      p = m(phi0, phi1);

  p.parallels = function (_) {
    return arguments.length ? m(phi0 = _[0] * _math.radians, phi1 = _[1] * _math.radians) : [phi0 * _math.degrees, phi1 * _math.degrees];
  };

  return p;
}

/***/ }),
/* 111 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (prototype) {
  return {
    stream: transform(prototype)
  };
};

exports.transform = transform;
function transform(prototype) {
  function T() {}
  var p = T.prototype = Object.create(Transform.prototype);
  for (var k in prototype) {
    p[k] = prototype[k];
  }return function (stream) {
    var t = new T();
    t.stream = stream;
    return t;
  };
}

function Transform() {}

Transform.prototype = {
  point: function point(x, y) {
    this.stream.point(x, y);
  },
  sphere: function sphere() {
    this.stream.sphere();
  },
  lineStart: function lineStart() {
    this.stream.lineStart();
  },
  lineEnd: function lineEnd() {
    this.stream.lineEnd();
  },
  polygonStart: function polygonStart() {
    this.stream.polygonStart();
  },
  polygonEnd: function polygonEnd() {
    this.stream.polygonEnd();
  }
};

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.mercatorRaw = mercatorRaw;

exports.default = function () {
  return mercatorProjection(mercatorRaw).scale(961 / _math.tau);
};

exports.mercatorProjection = mercatorProjection;

var _index = __webpack_require__(17);

var _index2 = _interopRequireDefault(_index);

var _math = __webpack_require__(4);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mercatorRaw(lambda, phi) {
  return [lambda, (0, _math.log)((0, _math.tan)((_math.halfPi + phi) / 2))];
}

mercatorRaw.invert = function (x, y) {
  return [x, 2 * (0, _math.atan)((0, _math.exp)(y)) - _math.halfPi];
};

function mercatorProjection(project) {
  var m = (0, _index2.default)(project),
      scale = m.scale,
      translate = m.translate,
      clipExtent = m.clipExtent,
      clipAuto;

  m.scale = function (_) {
    return arguments.length ? (scale(_), clipAuto && m.clipExtent(null), m) : scale();
  };

  m.translate = function (_) {
    return arguments.length ? (translate(_), clipAuto && m.clipExtent(null), m) : translate();
  };

  m.clipExtent = function (_) {
    if (!arguments.length) return clipAuto ? null : clipExtent();
    if (clipAuto = _ == null) {
      var k = _math.pi * scale(),
          t = translate();
      _ = [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]];
    }
    clipExtent(_);
    return m;
  };

  return m.clipExtent(null);
}

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

var baseValues = __webpack_require__(523),
    keys = __webpack_require__(9);

/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */
function values(object) {
  return object == null ? [] : baseValues(object, keys(object));
}

module.exports = values;

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var mean = __webpack_require__(23);

/**
 * The sum of deviations to the Nth power.
 * When n=2 it's the sum of squared deviations.
 * When n=3 it's the sum of cubed deviations.
 *
 * @param {Array<number>} x
 * @param {number} n power
 * @returns {number} sum of nth power deviations
 * @example
 * var input = [1, 2, 3];
 * // since the variance of a set is the mean squared
 * // deviations, we can calculate that with sumNthPowerDeviations:
 * var variance = sumNthPowerDeviations(input) / input.length;
 */
function sumNthPowerDeviations(x /*: Array<number> */, n /*: number */) /*:number*/{
    var meanValue = mean(x),
        sum = 0,
        tempValue,
        i;

    // This is an optimization: when n is 2 (we're computing a number squared),
    // multiplying the number by itself is significantly faster than using
    // the Math.pow method.
    if (n === 2) {
        for (i = 0; i < x.length; i++) {
            tempValue = x[i] - meanValue;
            sum += tempValue * tempValue;
        }
    } else {
        for (i = 0; i < x.length; i++) {
            sum += Math.pow(x[i] - meanValue, n);
        }
    }

    return sum;
}

module.exports = sumNthPowerDeviations;

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var quantileSorted = __webpack_require__(116);
var quickselect = __webpack_require__(541);

/**
 * The [quantile](https://en.wikipedia.org/wiki/Quantile):
 * this is a population quantile, since we assume to know the entire
 * dataset in this library. This is an implementation of the
 * [Quantiles of a Population](http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population)
 * algorithm from wikipedia.
 *
 * Sample is a one-dimensional array of numbers,
 * and p is either a decimal number from 0 to 1 or an array of decimal
 * numbers from 0 to 1.
 * In terms of a k/q quantile, p = k/q - it's just dealing with fractions or dealing
 * with decimal values.
 * When p is an array, the result of the function is also an array containing the appropriate
 * quantiles in input order
 *
 * @param {Array<number>} x sample of one or more numbers
 * @param {number} p the desired quantile, as a number between 0 and 1
 * @returns {number} quantile
 * @example
 * quantile([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9
 */
function quantile(x /*: Array<number> */, p /*: Array<number> | number */) {
    var copy = x.slice();

    if (Array.isArray(p)) {
        // rearrange elements so that each element corresponding to a requested
        // quantile is on a place it would be if the array was fully sorted
        multiQuantileSelect(copy, p);
        // Initialize the result array
        var results = [];
        // For each requested quantile
        for (var i = 0; i < p.length; i++) {
            results[i] = quantileSorted(copy, p[i]);
        }
        return results;
    } else {
        var idx = quantileIndex(copy.length, p);
        quantileSelect(copy, idx, 0, copy.length - 1);
        return quantileSorted(copy, p);
    }
}

function quantileSelect(arr, k, left, right) {
    if (k % 1 === 0) {
        quickselect(arr, k, left, right);
    } else {
        k = Math.floor(k);
        quickselect(arr, k, left, right);
        quickselect(arr, k + 1, k + 1, right);
    }
}

function multiQuantileSelect(arr, p) {
    var indices = [0];
    for (var i = 0; i < p.length; i++) {
        indices.push(quantileIndex(arr.length, p[i]));
    }
    indices.push(arr.length - 1);
    indices.sort(compare);

    var stack = [0, indices.length - 1];

    while (stack.length) {
        var r = Math.ceil(stack.pop());
        var l = Math.floor(stack.pop());
        if (r - l <= 1) continue;

        var m = Math.floor((l + r) / 2);
        quantileSelect(arr, indices[m], indices[l], indices[r]);

        stack.push(l, m, m, r);
    }
}

function compare(a, b) {
    return a - b;
}

function quantileIndex(len /*: number */, p /*: number */) /*:number*/{
    var idx = len * p;
    if (p === 1) {
        // If p is 1, directly return the last index
        return len - 1;
    } else if (p === 0) {
        // If p is 0, directly return the first index
        return 0;
    } else if (idx % 1 !== 0) {
        // If index is not integer, return the next index in array
        return Math.ceil(idx) - 1;
    } else if (len % 2 === 0) {
        // If the list has even-length, we'll return the middle of two indices
        // around quantile to indicate that we need an average value of the two
        return idx - 0.5;
    } else {
        // Finally, in the simple case of an integer index
        // with an odd-length list, return the index
        return idx;
    }
}

module.exports = quantile;

/***/ }),
/* 116 */
/***/ (function(module, exports) {


/* @flow */

/**
 * This is the internal implementation of quantiles: when you know
 * that the order is sorted, you don't need to re-sort it, and the computations
 * are faster.
 *
 * @param {Array<number>} x sample of one or more data points
 * @param {number} p desired quantile: a number between 0 to 1, inclusive
 * @returns {number} quantile value
 * @throws {Error} if p ix outside of the range from 0 to 1
 * @throws {Error} if x is empty
 * @example
 * quantileSorted([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9
 */
function quantileSorted(x /*: Array<number> */, p /*: number */) /*:number*/{
    var idx = x.length * p;
    if (x.length === 0) {
        throw new Error('quantile requires at least one data point.');
    } else if (p < 0 || p > 1) {
        throw new Error('quantiles must be between 0 and 1');
    } else if (p === 1) {
        // If p is 1, directly return the last element
        return x[x.length - 1];
    } else if (p === 0) {
        // If p is 0, directly return the first element
        return x[0];
    } else if (idx % 1 !== 0) {
        // If p is not integer, return the next element in array
        return x[Math.ceil(idx) - 1];
    } else if (x.length % 2 === 0) {
        // If the list has even-length, we'll take the average of this number
        // and the next value, if there is one
        return (x[idx - 1] + x[idx]) / 2;
    } else {
        // Finally, in the simple case of an integer value
        // with an odd-length list, return the x value at the index.
        return x[idx];
    }
}

module.exports = quantileSorted;

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var sumNthPowerDeviations = __webpack_require__(114);

/**
 * The [sample variance](https://en.wikipedia.org/wiki/Variance#Sample_variance)
 * is the sum of squared deviations from the mean. The sample variance
 * is distinguished from the variance by the usage of [Bessel's Correction](https://en.wikipedia.org/wiki/Bessel's_correction):
 * instead of dividing the sum of squared deviations by the length of the input,
 * it is divided by the length minus one. This corrects the bias in estimating
 * a value from a set that you don't know if full.
 *
 * References:
 * * [Wolfram MathWorld on Sample Variance](http://mathworld.wolfram.com/SampleVariance.html)
 *
 * @param {Array<number>} x a sample of two or more data points
 * @throws {Error} if the length of x is less than 2
 * @return {number} sample variance
 * @example
 * sampleVariance([1, 2, 3, 4, 5]); // => 2.5
 */
function sampleVariance(x /*: Array<number> */) /*:number*/{
    // The variance of no numbers is null
    if (x.length < 2) {
        throw new Error('sampleVariance requires at least two data points');
    }

    var sumSquaredDeviationsValue = sumNthPowerDeviations(x, 2);

    // this is Bessels' Correction: an adjustment made to sample statistics
    // that allows for the reduced degree of freedom entailed in calculating
    // values from samples rather than complete populations.
    var besselsCorrection = x.length - 1;

    // Find the mean value of that list
    return sumSquaredDeviationsValue / besselsCorrection;
}

module.exports = sampleVariance;

/***/ }),
/* 118 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (delimiter) {
  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
      delimiterCode = delimiter.charCodeAt(0);

  function parse(text, f) {
    var convert,
        columns,
        rows = parseRows(text, function (row, i) {
      if (convert) return convert(row, i - 1);
      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
    });
    rows.columns = columns;
    return rows;
  }

  function parseRows(text, f) {
    var EOL = {},
        // sentinel value for end-of-line
    EOF = {},
        // sentinel value for end-of-file
    rows = [],
        // output rows
    N = text.length,
        I = 0,
        // current character index
    n = 0,
        // the current line number
    t,
        // the current token
    eol; // is the current token followed by EOL?

    function token() {
      if (I >= N) return EOF; // special case: end of file
      if (eol) return eol = false, EOL; // special case: end of line

      // special case: quotes
      var j = I,
          c;
      if (text.charCodeAt(j) === 34) {
        var i = j;
        while (i++ < N) {
          if (text.charCodeAt(i) === 34) {
            if (text.charCodeAt(i + 1) !== 34) break;
            ++i;
          }
        }
        I = i + 2;
        c = text.charCodeAt(i + 1);
        if (c === 13) {
          eol = true;
          if (text.charCodeAt(i + 2) === 10) ++I;
        } else if (c === 10) {
          eol = true;
        }
        return text.slice(j + 1, i).replace(/""/g, "\"");
      }

      // common case: find next delimiter or newline
      while (I < N) {
        var k = 1;
        c = text.charCodeAt(I++);
        if (c === 10) eol = true; // \n
        else if (c === 13) {
            eol = true;if (text.charCodeAt(I) === 10) ++I, ++k;
          } // \r|\r\n
          else if (c !== delimiterCode) continue;
        return text.slice(j, I - k);
      }

      // special case: last token before EOF
      return text.slice(j);
    }

    while ((t = token()) !== EOF) {
      var a = [];
      while (t !== EOL && t !== EOF) {
        a.push(t);
        t = token();
      }
      if (f && (a = f(a, n++)) == null) continue;
      rows.push(a);
    }

    return rows;
  }

  function format(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function (row) {
      return columns.map(function (column) {
        return formatValue(row[column]);
      }).join(delimiter);
    })).join("\n");
  }

  function formatRows(rows) {
    return rows.map(formatRow).join("\n");
  }

  function formatRow(row) {
    return row.map(formatValue).join(delimiter);
  }

  function formatValue(text) {
    return text == null ? "" : reFormat.test(text += "") ? "\"" + text.replace(/\"/g, "\"\"") + "\"" : text;
  }

  return {
    parse: parse,
    parseRows: parseRows,
    format: format,
    formatRows: formatRows
  };
};

function objectConverter(columns) {
  return new Function("d", "return {" + columns.map(function (name, i) {
    return JSON.stringify(name) + ": d[" + i + "]";
  }).join(",") + "}");
}

function customConverter(columns, f) {
  var object = objectConverter(columns);
  return function (row, i) {
    return f(object(row), i, columns);
  };
}

// Compute unique columns in order of discovery.
function inferColumns(rows) {
  var columnSet = Object.create(null),
      columns = [];

  rows.forEach(function (row) {
    for (var column in row) {
      if (!(column in columnSet)) {
        columns.push(columnSet[column] = column);
      }
    }
  });

  return columns;
}

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _cluster = __webpack_require__(591);

Object.defineProperty(exports, "cluster", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_cluster).default;
  }
});

var _index = __webpack_require__(120);

Object.defineProperty(exports, "hierarchy", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_index).default;
  }
});

var _index2 = __webpack_require__(603);

Object.defineProperty(exports, "pack", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_index2).default;
  }
});

var _siblings = __webpack_require__(239);

Object.defineProperty(exports, "packSiblings", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_siblings).default;
  }
});

var _enclose = __webpack_require__(240);

Object.defineProperty(exports, "packEnclose", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_enclose).default;
  }
});

var _partition = __webpack_require__(605);

Object.defineProperty(exports, "partition", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_partition).default;
  }
});

var _stratify = __webpack_require__(606);

Object.defineProperty(exports, "stratify", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_stratify).default;
  }
});

var _tree = __webpack_require__(607);

Object.defineProperty(exports, "tree", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_tree).default;
  }
});

var _index3 = __webpack_require__(608);

Object.defineProperty(exports, "treemap", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_index3).default;
  }
});

var _binary = __webpack_require__(609);

Object.defineProperty(exports, "treemapBinary", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_binary).default;
  }
});

var _dice = __webpack_require__(48);

Object.defineProperty(exports, "treemapDice", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_dice).default;
  }
});

var _slice = __webpack_require__(71);

Object.defineProperty(exports, "treemapSlice", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_slice).default;
  }
});

var _sliceDice = __webpack_require__(610);

Object.defineProperty(exports, "treemapSliceDice", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sliceDice).default;
  }
});

var _squarify = __webpack_require__(122);

Object.defineProperty(exports, "treemapSquarify", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_squarify).default;
  }
});

var _resquarify = __webpack_require__(611);

Object.defineProperty(exports, "treemapResquarify", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_resquarify).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.default = hierarchy;
exports.computeHeight = computeHeight;
exports.Node = Node;

var _count = __webpack_require__(592);

var _count2 = _interopRequireDefault(_count);

var _each = __webpack_require__(593);

var _each2 = _interopRequireDefault(_each);

var _eachBefore = __webpack_require__(594);

var _eachBefore2 = _interopRequireDefault(_eachBefore);

var _eachAfter = __webpack_require__(595);

var _eachAfter2 = _interopRequireDefault(_eachAfter);

var _sum = __webpack_require__(596);

var _sum2 = _interopRequireDefault(_sum);

var _sort = __webpack_require__(597);

var _sort2 = _interopRequireDefault(_sort);

var _path = __webpack_require__(598);

var _path2 = _interopRequireDefault(_path);

var _ancestors = __webpack_require__(599);

var _ancestors2 = _interopRequireDefault(_ancestors);

var _descendants = __webpack_require__(600);

var _descendants2 = _interopRequireDefault(_descendants);

var _leaves = __webpack_require__(601);

var _leaves2 = _interopRequireDefault(_leaves);

var _links = __webpack_require__(602);

var _links2 = _interopRequireDefault(_links);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function hierarchy(data, children) {
  var root = new Node(data),
      valued = +data.value && (root.value = data.value),
      node,
      nodes = [root],
      child,
      childs,
      i,
      n;

  if (children == null) children = defaultChildren;

  while (node = nodes.pop()) {
    if (valued) node.value = +node.data.value;
    if ((childs = children(node.data)) && (n = childs.length)) {
      node.children = new Array(n);
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new Node(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }

  return root.eachBefore(computeHeight);
}

function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}

function defaultChildren(d) {
  return d.children;
}

function copyData(node) {
  node.data = node.data.data;
}

function computeHeight(node) {
  var height = 0;
  do {
    node.height = height;
  } while ((node = node.parent) && node.height < ++height);
}

function Node(data) {
  this.data = data;
  this.depth = this.height = 0;
  this.parent = null;
}

Node.prototype = hierarchy.prototype = {
  constructor: Node,
  count: _count2.default,
  each: _each2.default,
  eachAfter: _eachAfter2.default,
  eachBefore: _eachBefore2.default,
  sum: _sum2.default,
  sort: _sort2.default,
  path: _path2.default,
  ancestors: _ancestors2.default,
  descendants: _descendants2.default,
  leaves: _leaves2.default,
  links: _links2.default,
  copy: node_copy
};

/***/ }),
/* 121 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.optional = optional;
exports.required = required;
function optional(f) {
  return f == null ? null : required(f);
}

function required(f) {
  if (typeof f !== "function") throw new Error();
  return f;
}

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.phi = undefined;
exports.squarifyRatio = squarifyRatio;

var _dice = __webpack_require__(48);

var _dice2 = _interopRequireDefault(_dice);

var _slice = __webpack_require__(71);

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var phi = exports.phi = (1 + Math.sqrt(5)) / 2;

function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
  var rows = [],
      nodes = parent.children,
      row,
      nodeValue,
      i0 = 0,
      i1 = 0,
      n = nodes.length,
      dx,
      dy,
      value = parent.value,
      sumValue,
      minValue,
      maxValue,
      newRatio,
      minRatio,
      alpha,
      beta;

  while (i0 < n) {
    dx = x1 - x0, dy = y1 - y0;

    // Find the next non-empty node.
    do {
      sumValue = nodes[i1++].value;
    } while (!sumValue && i1 < n);
    minValue = maxValue = sumValue;
    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue);

    // Keep adding nodes while the aspect ratio maintains or improves.
    for (; i1 < n; ++i1) {
      sumValue += nodeValue = nodes[i1].value;
      if (nodeValue < minValue) minValue = nodeValue;
      if (nodeValue > maxValue) maxValue = nodeValue;
      beta = sumValue * sumValue * alpha;
      newRatio = Math.max(maxValue / beta, beta / minValue);
      if (newRatio > minRatio) {
        sumValue -= nodeValue;break;
      }
      minRatio = newRatio;
    }

    // Position and record the row orientation.
    rows.push(row = { value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1) });
    if (row.dice) (0, _dice2.default)(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);else (0, _slice2.default)(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
    value -= sumValue, i0 = i1;
  }

  return rows;
}

exports.default = function custom(ratio) {

  function squarify(parent, x0, y0, x1, y1) {
    squarifyRatio(ratio, parent, x0, y0, x1, y1);
  }

  squarify.ratio = function (x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return squarify;
}(phi);

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (transform) {
  if (transform == null) return _identity2.default;
  var x0,
      y0,
      kx = transform.scale[0],
      ky = transform.scale[1],
      dx = transform.translate[0],
      dy = transform.translate[1];
  return function (input, i) {
    if (!i) x0 = y0 = 0;
    var j = 2,
        n = input.length,
        output = new Array(n);
    output[0] = (x0 += input[0]) * kx + dx;
    output[1] = (y0 += input[1]) * ky + dy;
    while (j < n) {
      output[j] = input[j], ++j;
    }return output;
  };
};

var _identity = __webpack_require__(244);

var _identity2 = _interopRequireDefault(_identity);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (topology, o) {
  return o.type === "GeometryCollection" ? { type: "FeatureCollection", features: o.geometries.map(function (o) {
      return feature(topology, o);
    }) } : feature(topology, o);
};

exports.feature = feature;
exports.object = object;

var _reverse = __webpack_require__(614);

var _reverse2 = _interopRequireDefault(_reverse);

var _transform = __webpack_require__(123);

var _transform2 = _interopRequireDefault(_transform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function feature(topology, o) {
  var id = o.id,
      bbox = o.bbox,
      properties = o.properties == null ? {} : o.properties,
      geometry = object(topology, o);
  return id == null && bbox == null ? { type: "Feature", properties: properties, geometry: geometry } : bbox == null ? { type: "Feature", id: id, properties: properties, geometry: geometry } : { type: "Feature", id: id, bbox: bbox, properties: properties, geometry: geometry };
}

function object(topology, o) {
  var transformPoint = (0, _transform2.default)(topology.transform),
      arcs = topology.arcs;

  function arc(i, points) {
    if (points.length) points.pop();
    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
      points.push(transformPoint(a[k], k));
    }
    if (i < 0) (0, _reverse2.default)(points, n);
  }

  function point(p) {
    return transformPoint(p);
  }

  function line(arcs) {
    var points = [];
    for (var i = 0, n = arcs.length; i < n; ++i) {
      arc(arcs[i], points);
    }if (points.length < 2) points.push(points[0]); // This should never happen per the specification.
    return points;
  }

  function ring(arcs) {
    var points = line(arcs);
    while (points.length < 4) {
      points.push(points[0]);
    } // This may happen if an arc has only two points.
    return points;
  }

  function polygon(arcs) {
    return arcs.map(ring);
  }

  function geometry(o) {
    var type = o.type,
        coordinates;
    switch (type) {
      case "GeometryCollection":
        return { type: type, geometries: o.geometries.map(geometry) };
      case "Point":
        coordinates = point(o.coordinates);break;
      case "MultiPoint":
        coordinates = o.coordinates.map(point);break;
      case "LineString":
        coordinates = line(o.arcs);break;
      case "MultiLineString":
        coordinates = o.arcs.map(line);break;
      case "Polygon":
        coordinates = polygon(o.arcs);break;
      case "MultiPolygon":
        coordinates = o.arcs.map(polygon);break;
      default:
        return null;
    }
    return { type: type, coordinates: coordinates };
  }

  return geometry(o);
}

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(19),
    isObjectLike = __webpack_require__(15);

/** `Object#toString` result references. */
var numberTag = '[object Number]';

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */
function isNumber(value) {
    return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
}

module.exports = isNumber;

/***/ }),
/* 126 */
/***/ (function(module, exports) {


module.exports = function (extent) {
  var bandwidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var min = extent[0],
      max = extent[1];

  var values = [];
  var tmp = min;
  while (tmp < max) {
    values.push(tmp);
    tmp += bandwidth;
  }
  values.push(max);
  return values;
};

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(30),
    standardDeviation = _require.standardDeviation;

module.exports = {
  silverman: function silverman(arr) {
    var stdev = standardDeviation(arr);
    var num = 4 * Math.pow(stdev, 5);
    var denom = 3 * arr.length;
    return Math.pow(num / denom, 0.2);
  }
};

/***/ }),
/* 128 */
/***/ (function(module, exports) {

exports.__esModule = true;
var prefix = exports.prefix = "$";

function Map() {}

Map.prototype = map.prototype = {
  constructor: Map,
  has: function has(key) {
    return prefix + key in this;
  },
  get: function get(key) {
    return this[prefix + key];
  },
  set: function set(key, value) {
    this[prefix + key] = value;
    return this;
  },
  remove: function remove(key) {
    var property = prefix + key;
    return property in this && delete this[property];
  },
  clear: function clear() {
    for (var property in this) {
      if (property[0] === prefix) delete this[property];
    }
  },
  keys: function keys() {
    var keys = [];
    for (var property in this) {
      if (property[0] === prefix) keys.push(property.slice(1));
    }return keys;
  },
  values: function values() {
    var values = [];
    for (var property in this) {
      if (property[0] === prefix) values.push(this[property]);
    }return values;
  },
  entries: function entries() {
    var entries = [];
    for (var property in this) {
      if (property[0] === prefix) entries.push({ key: property.slice(1), value: this[property] });
    }return entries;
  },
  size: function size() {
    var size = 0;
    for (var property in this) {
      if (property[0] === prefix) ++size;
    }return size;
  },
  empty: function empty() {
    for (var property in this) {
      if (property[0] === prefix) return false;
    }return true;
  },
  each: function each(f) {
    for (var property in this) {
      if (property[0] === prefix) f(this[property], property.slice(1), this);
    }
  }
};

function map(object, f) {
  var map = new Map();

  // Copy constructor.
  if (object instanceof Map) object.each(function (value, key) {
    map.set(key, value);
  });

  // Index array by numeric index or specified key function.
  else if (Array.isArray(object)) {
      var i = -1,
          n = object.length,
          o;

      if (f == null) while (++i < n) {
        map.set(i, object[i]);
      } else while (++i < n) {
        map.set(f(o = object[i], i, object), o);
      }
    }

    // Convert object to map.
    else if (object) for (var key in object) {
        map.set(key, object[key]);
      }return map;
}

exports.default = map;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var x = _point.x,
      y = _point.y,
      defined = (0, _constant2.default)(true),
      context = null,
      curve = _linear2.default,
      output = null;

  function line(data) {
    var i,
        n = data.length,
        d,
        defined0 = false,
        buffer;

    if (context == null) output = curve(buffer = (0, _d3Path.path)());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();else output.lineEnd();
      }
      if (defined0) output.point(+x(d, i, data), +y(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant2.default)(+_), line) : x;
  };

  line.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant2.default)(+_), line) : y;
  };

  line.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constant2.default)(!!_), line) : defined;
  };

  line.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
};

var _d3Path = __webpack_require__(29);

var _constant = __webpack_require__(31);

var _constant2 = _interopRequireDefault(_constant);

var _linear = __webpack_require__(72);

var _linear2 = _interopRequireDefault(_linear);

var _point = __webpack_require__(130);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 130 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.x = x;
exports.y = y;
function x(p) {
  return p[0];
}

function y(p) {
  return p[1];
}

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.point = undefined;

var _math = __webpack_require__(49);

var _cardinal = __webpack_require__(75);

function _point(that, x, y) {
  var x1 = that._x1,
      y1 = that._y1,
      x2 = that._x2,
      y2 = that._y2;

  if (that._l01_a > _math.epsilon) {
    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }

  if (that._l23_a > _math.epsilon) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
  }

  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}

exports.point = _point;
function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRom.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function lineEnd() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);break;
      case 3:
        this.point(this._x2, this._y2);break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function point(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);break;
      case 1:
        this._point = 2;break;
      case 2:
        this._point = 3; // proceed
      default:
        _point(this, x, y);break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

exports.default = function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new _cardinal.Cardinal(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (series) {
  var sums = series.map(sum);
  return (0, _none2.default)(series).sort(function (a, b) {
    return sums[a] - sums[b];
  });
};

exports.sum = sum;

var _none = __webpack_require__(51);

var _none2 = _interopRequireDefault(_none);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function sum(series) {
  var s = 0,
      i = -1,
      n = series.length,
      v;
  while (++i < n) {
    if (v = +series[i][1]) s += v;
  }return s;
}

/***/ }),
/* 133 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.RedBlackNode = RedBlackNode;
function RedBlackTree() {
  this._ = null; // root node
}

function RedBlackNode(node) {
  node.U = // parent node
  node.C = // color - true for red, false for black
  node.L = // left node
  node.R = // right node
  node.P = // previous node
  node.N = null; // next node
}

RedBlackTree.prototype = {
  constructor: RedBlackTree,

  insert: function insert(after, node) {
    var parent, grandpa, uncle;

    if (after) {
      node.P = after;
      node.N = after.N;
      if (after.N) after.N.P = node;
      after.N = node;
      if (after.R) {
        after = after.R;
        while (after.L) {
          after = after.L;
        }after.L = node;
      } else {
        after.R = node;
      }
      parent = after;
    } else if (this._) {
      after = RedBlackFirst(this._);
      node.P = null;
      node.N = after;
      after.P = after.L = node;
      parent = after;
    } else {
      node.P = node.N = null;
      this._ = node;
      parent = null;
    }
    node.L = node.R = null;
    node.U = parent;
    node.C = true;

    after = node;
    while (parent && parent.C) {
      grandpa = parent.U;
      if (parent === grandpa.L) {
        uncle = grandpa.R;
        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.R) {
            RedBlackRotateLeft(this, parent);
            after = parent;
            parent = after.U;
          }
          parent.C = false;
          grandpa.C = true;
          RedBlackRotateRight(this, grandpa);
        }
      } else {
        uncle = grandpa.L;
        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.L) {
            RedBlackRotateRight(this, parent);
            after = parent;
            parent = after.U;
          }
          parent.C = false;
          grandpa.C = true;
          RedBlackRotateLeft(this, grandpa);
        }
      }
      parent = after.U;
    }
    this._.C = false;
  },

  remove: function remove(node) {
    if (node.N) node.N.P = node.P;
    if (node.P) node.P.N = node.N;
    node.N = node.P = null;

    var parent = node.U,
        sibling,
        left = node.L,
        right = node.R,
        next,
        red;

    if (!left) next = right;else if (!right) next = left;else next = RedBlackFirst(right);

    if (parent) {
      if (parent.L === node) parent.L = next;else parent.R = next;
    } else {
      this._ = next;
    }

    if (left && right) {
      red = next.C;
      next.C = node.C;
      next.L = left;
      left.U = next;
      if (next !== right) {
        parent = next.U;
        next.U = node.U;
        node = next.R;
        parent.L = node;
        next.R = right;
        right.U = next;
      } else {
        next.U = parent;
        parent = next;
        node = next.R;
      }
    } else {
      red = node.C;
      node = next;
    }

    if (node) node.U = parent;
    if (red) return;
    if (node && node.C) {
      node.C = false;return;
    }

    do {
      if (node === this._) break;
      if (node === parent.L) {
        sibling = parent.R;
        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateLeft(this, parent);
          sibling = parent.R;
        }
        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
          if (!sibling.R || !sibling.R.C) {
            sibling.L.C = false;
            sibling.C = true;
            RedBlackRotateRight(this, sibling);
            sibling = parent.R;
          }
          sibling.C = parent.C;
          parent.C = sibling.R.C = false;
          RedBlackRotateLeft(this, parent);
          node = this._;
          break;
        }
      } else {
        sibling = parent.L;
        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateRight(this, parent);
          sibling = parent.L;
        }
        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
          if (!sibling.L || !sibling.L.C) {
            sibling.R.C = false;
            sibling.C = true;
            RedBlackRotateLeft(this, sibling);
            sibling = parent.L;
          }
          sibling.C = parent.C;
          parent.C = sibling.L.C = false;
          RedBlackRotateRight(this, parent);
          node = this._;
          break;
        }
      }
      sibling.C = true;
      node = parent;
      parent = parent.U;
    } while (!node.C);

    if (node) node.C = false;
  }
};

function RedBlackRotateLeft(tree, node) {
  var p = node,
      q = node.R,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.R = q.L;
  if (p.R) p.R.U = p;
  q.L = p;
}

function RedBlackRotateRight(tree, node) {
  var p = node,
      q = node.L,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.L = q.R;
  if (p.L) p.L.U = p;
  q.R = p;
}

function RedBlackFirst(node) {
  while (node.L) {
    node = node.L;
  }return node;
}

exports.default = RedBlackTree;

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.createEdge = createEdge;
exports.createBorderEdge = createBorderEdge;
exports.setEdgeEnd = setEdgeEnd;
exports.clipEdges = clipEdges;

var _Diagram = __webpack_require__(52);

function createEdge(left, right, v0, v1) {
  var edge = [null, null],
      index = _Diagram.edges.push(edge) - 1;
  edge.left = left;
  edge.right = right;
  if (v0) setEdgeEnd(edge, left, right, v0);
  if (v1) setEdgeEnd(edge, right, left, v1);
  _Diagram.cells[left.index].halfedges.push(index);
  _Diagram.cells[right.index].halfedges.push(index);
  return edge;
}

function createBorderEdge(left, v0, v1) {
  var edge = [v0, v1];
  edge.left = left;
  return edge;
}

function setEdgeEnd(edge, left, right, vertex) {
  if (!edge[0] && !edge[1]) {
    edge[0] = vertex;
    edge.left = left;
    edge.right = right;
  } else if (edge.left === right) {
    edge[1] = vertex;
  } else {
    edge[0] = vertex;
  }
}

// Liang–Barsky line clipping.
function clipEdge(edge, x0, y0, x1, y1) {
  var a = edge[0],
      b = edge[1],
      ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;

  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;
  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;
  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;
  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;
  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?

  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
  return true;
}

function connectEdge(edge, x0, y0, x1, y1) {
  var v1 = edge[1];
  if (v1) return true;

  var v0 = edge[0],
      left = edge.left,
      right = edge.right,
      lx = left[0],
      ly = left[1],
      rx = right[0],
      ry = right[1],
      fx = (lx + rx) / 2,
      fy = (ly + ry) / 2,
      fm,
      fb;

  if (ry === ly) {
    if (fx < x0 || fx >= x1) return;
    if (lx > rx) {
      if (!v0) v0 = [fx, y0];else if (v0[1] >= y1) return;
      v1 = [fx, y1];
    } else {
      if (!v0) v0 = [fx, y1];else if (v0[1] < y0) return;
      v1 = [fx, y0];
    }
  } else {
    fm = (lx - rx) / (ry - ly);
    fb = fy - fm * fx;
    if (fm < -1 || fm > 1) {
      if (lx > rx) {
        if (!v0) v0 = [(y0 - fb) / fm, y0];else if (v0[1] >= y1) return;
        v1 = [(y1 - fb) / fm, y1];
      } else {
        if (!v0) v0 = [(y1 - fb) / fm, y1];else if (v0[1] < y0) return;
        v1 = [(y0 - fb) / fm, y0];
      }
    } else {
      if (ly < ry) {
        if (!v0) v0 = [x0, fm * x0 + fb];else if (v0[0] >= x1) return;
        v1 = [x1, fm * x1 + fb];
      } else {
        if (!v0) v0 = [x1, fm * x1 + fb];else if (v0[0] < x0) return;
        v1 = [x0, fm * x0 + fb];
      }
    }
  }

  edge[0] = v0;
  edge[1] = v1;
  return true;
}

function clipEdges(x0, y0, x1, y1) {
  var i = _Diagram.edges.length,
      edge;

  while (i--) {
    if (!connectEdge(edge = _Diagram.edges[i], x0, y0, x1, y1) || !clipEdge(edge, x0, y0, x1, y1) || !(Math.abs(edge[0][0] - edge[1][0]) > _Diagram.epsilon || Math.abs(edge[0][1] - edge[1][1]) > _Diagram.epsilon)) {
      delete _Diagram.edges[i];
    }
  }
}

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(24);

var defineProperty = function () {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}();

module.exports = defineProperty;

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/** Detect free variable `global` from Node.js. */
var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(271)))

/***/ }),
/* 137 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return func + '';
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

var apply = __webpack_require__(278);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? func.length - 1 : start, 0);
  return function () {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

var baseSetToString = __webpack_require__(279),
    shortOut = __webpack_require__(281);

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var eq = __webpack_require__(54),
    isArrayLike = __webpack_require__(20),
    isIndex = __webpack_require__(55),
    isObject = __webpack_require__(12);

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index === 'undefined' ? 'undefined' : _typeof(index);
  if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

var baseTimes = __webpack_require__(282),
    isArguments = __webpack_require__(79),
    isArray = __webpack_require__(10),
    isBuffer = __webpack_require__(80),
    isIndex = __webpack_require__(55),
    isTypedArray = __webpack_require__(142);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (
    // Safari 9 has enumerable `arguments.length` in strict mode.
    key == 'length' ||
    // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == 'offset' || key == 'parent') ||
    // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
    // Skip index properties.
    isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsTypedArray = __webpack_require__(285),
    baseUnary = __webpack_require__(82),
    nodeUtil = __webpack_require__(286);

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;

/***/ }),
/* 143 */
/***/ (function(module, exports) {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.areaStream = exports.areaRingSum = undefined;

exports.default = function (object) {
  areaSum.reset();
  (0, _stream2.default)(object, areaStream);
  return areaSum * 2;
};

var _adder = __webpack_require__(33);

var _adder2 = _interopRequireDefault(_adder);

var _math = __webpack_require__(3);

var _noop = __webpack_require__(21);

var _noop2 = _interopRequireDefault(_noop);

var _stream = __webpack_require__(25);

var _stream2 = _interopRequireDefault(_stream);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var areaRingSum = exports.areaRingSum = (0, _adder2.default)();

var areaSum = (0, _adder2.default)(),
    lambda00,
    phi00,
    lambda0,
    cosPhi0,
    sinPhi0;

var areaStream = exports.areaStream = {
  point: _noop2.default,
  lineStart: _noop2.default,
  lineEnd: _noop2.default,
  polygonStart: function polygonStart() {
    areaRingSum.reset();
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function polygonEnd() {
    var areaRing = +areaRingSum;
    areaSum.add(areaRing < 0 ? _math.tau + areaRing : areaRing);
    this.lineStart = this.lineEnd = this.point = _noop2.default;
  },
  sphere: function sphere() {
    areaSum.add(_math.tau);
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaRingEnd() {
  areaPoint(lambda00, phi00);
}

function areaPointFirst(lambda, phi) {
  areaStream.point = areaPoint;
  lambda00 = lambda, phi00 = phi;
  lambda *= _math.radians, phi *= _math.radians;
  lambda0 = lambda, cosPhi0 = (0, _math.cos)(phi = phi / 2 + _math.quarterPi), sinPhi0 = (0, _math.sin)(phi);
}

function areaPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  phi = phi / 2 + _math.quarterPi; // half the angular distance from south pole

  // Spherical excess E for a spherical triangle with vertices: south pole,
  // previous point, current point.  Uses a formula derived from Cagnoli’s
  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
  var dLambda = lambda - lambda0,
      sdLambda = dLambda >= 0 ? 1 : -1,
      adLambda = sdLambda * dLambda,
      cosPhi = (0, _math.cos)(phi),
      sinPhi = (0, _math.sin)(phi),
      k = sinPhi0 * sinPhi,
      u = cosPhi0 * cosPhi + k * (0, _math.cos)(adLambda),
      v = k * sdLambda * (0, _math.sin)(adLambda);
  areaRingSum.add((0, _math.atan2)(v, u));

  // Advance the previous points.
  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.circleStream = circleStream;

exports.default = function () {
  var center = (0, _constant2.default)([0, 0]),
      radius = (0, _constant2.default)(90),
      precision = (0, _constant2.default)(6),
      ring,
      rotate,
      stream = { point: point };

  function point(x, y) {
    ring.push(x = rotate(x, y));
    x[0] *= _math.degrees, x[1] *= _math.degrees;
  }

  function circle() {
    var c = center.apply(this, arguments),
        r = radius.apply(this, arguments) * _math.radians,
        p = precision.apply(this, arguments) * _math.radians;
    ring = [];
    rotate = (0, _rotation.rotateRadians)(-c[0] * _math.radians, -c[1] * _math.radians, 0).invert;
    circleStream(stream, r, p, 1);
    c = { type: "Polygon", coordinates: [ring] };
    ring = rotate = null;
    return c;
  }

  circle.center = function (_) {
    return arguments.length ? (center = typeof _ === "function" ? _ : (0, _constant2.default)([+_[0], +_[1]]), circle) : center;
  };

  circle.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant2.default)(+_), circle) : radius;
  };

  circle.precision = function (_) {
    return arguments.length ? (precision = typeof _ === "function" ? _ : (0, _constant2.default)(+_), circle) : precision;
  };

  return circle;
};

var _cartesian = __webpack_require__(38);

var _constant = __webpack_require__(291);

var _constant2 = _interopRequireDefault(_constant);

var _math = __webpack_require__(3);

var _rotation = __webpack_require__(57);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generates a circle centered at [0°, 0°], with a given radius and precision.
function circleStream(stream, radius, delta, direction, t0, t1) {
  if (!delta) return;
  var cosRadius = (0, _math.cos)(radius),
      sinRadius = (0, _math.sin)(radius),
      step = direction * delta;
  if (t0 == null) {
    t0 = radius + direction * _math.tau;
    t1 = radius - step / 2;
  } else {
    t0 = circleRadius(cosRadius, t0);
    t1 = circleRadius(cosRadius, t1);
    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * _math.tau;
  }
  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
    point = (0, _cartesian.spherical)([cosRadius, -sinRadius * (0, _math.cos)(t), -sinRadius * (0, _math.sin)(t)]);
    stream.point(point[0], point[1]);
  }
}

// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
function circleRadius(cosRadius, point) {
  point = (0, _cartesian.cartesian)(point), point[0] -= cosRadius;
  (0, _cartesian.cartesianNormalizeInPlace)(point);
  var radius = (0, _math.acos)(-point[1]);
  return ((-point[2] < 0 ? -radius : radius) + _math.tau - _math.epsilon) % _math.tau;
}

/***/ }),
/* 146 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (a, b) {

  function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
  }

  if (a.invert && b.invert) compose.invert = function (x, y) {
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
  };

  return compose;
};

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var lines = [],
      line;
  return {
    point: function point(x, y) {
      line.push([x, y]);
    },
    lineStart: function lineStart() {
      lines.push(line = []);
    },
    lineEnd: _noop2.default,
    rejoin: function rejoin() {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function result() {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
};

var _noop = __webpack_require__(21);

var _noop2 = _interopRequireDefault(_noop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (segments, compareIntersection, startInside, interpolate, stream) {
  var subject = [],
      clip = [],
      i,
      n;

  segments.forEach(function (segment) {
    if ((n = segment.length - 1) <= 0) return;
    var n,
        p0 = segment[0],
        p1 = segment[n],
        x;

    // If the first and last points of a segment are coincident, then treat as a
    // closed ring. TODO if all rings are closed, then the winding order of the
    // exterior ring should be checked.
    if ((0, _pointEqual2.default)(p0, p1)) {
      stream.lineStart();
      for (i = 0; i < n; ++i) {
        stream.point((p0 = segment[i])[0], p0[1]);
      }stream.lineEnd();
      return;
    }

    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });

  if (!subject.length) return;

  clip.sort(compareIntersection);
  link(subject);
  link(clip);

  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }

  var start = subject[0],
      points,
      point;

  while (1) {
    // Find first unvisited intersection.
    var current = start,
        isSubject = true;
    while (current.v) {
      if ((current = current.n) === start) return;
    }points = current.z;
    stream.lineStart();
    do {
      current.v = current.o.v = true;
      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i) {
            stream.point((point = points[i])[0], point[1]);
          }
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }
        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;
          for (i = points.length - 1; i >= 0; --i) {
            stream.point((point = points[i])[0], point[1]);
          }
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }
        current = current.p;
      }
      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);
    stream.lineEnd();
  }
};

var _pointEqual = __webpack_require__(149);

var _pointEqual2 = _interopRequireDefault(_pointEqual);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other; // another intersection
  this.e = entry; // is an entry?
  this.v = false; // visited
  this.n = this.p = null; // next & previous
}

// A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.


function link(array) {
  if (!(n = array.length)) return;
  var n,
      i = 0,
      a = array[0],
      b;
  while (++i < n) {
    a.n = b = array[i];
    b.p = a;
    a = b;
  }
  a.n = b = array[0];
  b.p = a;
}

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (a, b) {
  return (0, _math.abs)(a[0] - b[0]) < _math.epsilon && (0, _math.abs)(a[1] - b[1]) < _math.epsilon;
};

var _math = __webpack_require__(3);

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.bisectLeft = exports.bisectRight = undefined;

var _ascending = __webpack_require__(34);

var _ascending2 = _interopRequireDefault(_ascending);

var _bisector = __webpack_require__(151);

var _bisector2 = _interopRequireDefault(_bisector);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ascendingBisect = (0, _bisector2.default)(_ascending2.default);
var bisectRight = exports.bisectRight = ascendingBisect.right;
var bisectLeft = exports.bisectLeft = ascendingBisect.left;
exports.default = bisectRight;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function left(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
      }
      return lo;
    },
    right: function right(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
      }
      return lo;
    }
  };
};

var _ascending = __webpack_require__(34);

var _ascending2 = _interopRequireDefault(_ascending);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ascendingComparator(f) {
  return function (d, x) {
    return (0, _ascending2.default)(f(d), x);
  };
}

/***/ }),
/* 152 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (array, f) {
  if (f == null) f = pair;
  var i = 0,
      n = array.length - 1,
      p = array[0],
      pairs = new Array(n < 0 ? 0 : n);
  while (i < n) {
    pairs[i] = f(p, p = array[++i]);
  }return pairs;
};

exports.pair = pair;
function pair(a, b) {
  return [a, b];
}

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (array, f) {
  var v = (0, _variance2.default)(array, f);
  return v ? Math.sqrt(v) : v;
};

var _variance = __webpack_require__(154);

var _variance2 = _interopRequireDefault(_variance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (values, valueof) {
  var n = values.length,
      m = 0,
      i = -1,
      mean = 0,
      value,
      delta,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number2.default)(values[i]))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number2.default)(valueof(values[i], i, values)))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  if (m > 1) return sum / (m - 1);
};

var _number = __webpack_require__(39);

var _number2 = _interopRequireDefault(_number);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 155 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min,
      max;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = max = value;
        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = max = value;
        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  return [min, max];
};

/***/ }),
/* 156 */
/***/ (function(module, exports) {

exports.__esModule = true;
var array = Array.prototype;

var slice = exports.slice = array.slice;
var map = exports.map = array.map;

/***/ }),
/* 157 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
};

/***/ }),
/* 158 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (start, stop, count) {
    var reverse = stop < start,
        i = -1,
        n,
        ticks,
        step;

    if (reverse) n = start, start = stop, stop = n;

    if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

    if (step > 0) {
        start = Math.ceil(start / step);
        stop = Math.floor(stop / step);
        ticks = new Array(n = Math.ceil(stop - start + 1));
        while (++i < n) {
            ticks[i] = (start + i) * step;
        }
    } else {
        start = Math.floor(start * step);
        stop = Math.ceil(stop * step);
        ticks = new Array(n = Math.ceil(start - stop + 1));
        while (++i < n) {
            ticks[i] = (start - i) / step;
        }
    }

    if (reverse) ticks.reverse();

    return ticks;
};

exports.tickIncrement = tickIncrement;
exports.tickStep = tickStep;
var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function tickIncrement(start, stop, count) {
    var step = (stop - start) / Math.max(0, count),
        power = Math.floor(Math.log(step) / Math.LN10),
        error = step / Math.pow(10, power);
    return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

function tickStep(start, stop, count) {
    var step0 = Math.abs(stop - start) / Math.max(0, count),
        step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
        error = step0 / step1;
    if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
    return stop < start ? -step1 : step1;
}

/***/ }),
/* 159 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
};

/***/ }),
/* 160 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = value;
        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null && min > value) {
            min = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = value;
        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  return min;
};

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (matrix) {
  if (!(n = matrix.length)) return [];
  for (var i = -1, m = (0, _min2.default)(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }
  return transpose;
};

var _min = __webpack_require__(160);

var _min2 = _interopRequireDefault(_min);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function length(d) {
  return d.length;
}

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (polygon, point) {
  var lambda = point[0],
      phi = point[1],
      normal = [(0, _math.sin)(lambda), -(0, _math.cos)(lambda), 0],
      angle = 0,
      winding = 0;

  sum.reset();

  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length)) continue;
    var ring,
        m,
        point0 = ring[m - 1],
        lambda0 = point0[0],
        phi0 = point0[1] / 2 + _math.quarterPi,
        sinPhi0 = (0, _math.sin)(phi0),
        cosPhi0 = (0, _math.cos)(phi0);

    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
      var point1 = ring[j],
          lambda1 = point1[0],
          phi1 = point1[1] / 2 + _math.quarterPi,
          sinPhi1 = (0, _math.sin)(phi1),
          cosPhi1 = (0, _math.cos)(phi1),
          delta = lambda1 - lambda0,
          sign = delta >= 0 ? 1 : -1,
          absDelta = sign * delta,
          antimeridian = absDelta > _math.pi,
          k = sinPhi0 * sinPhi1;

      sum.add((0, _math.atan2)(k * sign * (0, _math.sin)(absDelta), cosPhi0 * cosPhi1 + k * (0, _math.cos)(absDelta)));
      angle += antimeridian ? delta + sign * _math.tau : delta;

      // Are the longitudes either side of the point’s meridian (lambda),
      // and are the latitudes smaller than the parallel (phi)?
      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
        var arc = (0, _cartesian.cartesianCross)((0, _cartesian.cartesian)(point0), (0, _cartesian.cartesian)(point1));
        (0, _cartesian.cartesianNormalizeInPlace)(arc);
        var intersection = (0, _cartesian.cartesianCross)(normal, arc);
        (0, _cartesian.cartesianNormalizeInPlace)(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * (0, _math.asin)(intersection[2]);
        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  }

  // First, determine whether the South pole is inside or outside:
  //
  // It is inside if:
  // * the polygon winds around it in a clockwise direction.
  // * the polygon does not (cumulatively) wind around it, but has a negative
  //   (counter-clockwise) area.
  //
  // Second, count the (signed) number of times a segment crosses a lambda
  // from the point to the South pole.  If it is zero, then the point is the
  // same side as the South pole.

  return (angle < -_math.epsilon || angle < _math.epsilon && sum < -_math.epsilon) ^ winding & 1;
};

var _adder = __webpack_require__(33);

var _adder2 = _interopRequireDefault(_adder);

var _cartesian = __webpack_require__(38);

var _math = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var sum = (0, _adder2.default)();

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (a, b) {
  coordinates[0] = a;
  coordinates[1] = b;
  return (0, _length2.default)(object);
};

var _length = __webpack_require__(164);

var _length2 = _interopRequireDefault(_length);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var coordinates = [null, null],
    object = { type: "LineString", coordinates: coordinates };

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (object) {
  lengthSum.reset();
  (0, _stream2.default)(object, lengthStream);
  return +lengthSum;
};

var _adder = __webpack_require__(33);

var _adder2 = _interopRequireDefault(_adder);

var _math = __webpack_require__(3);

var _noop = __webpack_require__(21);

var _noop2 = _interopRequireDefault(_noop);

var _stream = __webpack_require__(25);

var _stream2 = _interopRequireDefault(_stream);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lengthSum = (0, _adder2.default)(),
    lambda0,
    sinPhi0,
    cosPhi0;

var lengthStream = {
  sphere: _noop2.default,
  point: _noop2.default,
  lineStart: lengthLineStart,
  lineEnd: _noop2.default,
  polygonStart: _noop2.default,
  polygonEnd: _noop2.default
};

function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}

function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = _noop2.default;
}

function lengthPointFirst(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  lambda0 = lambda, sinPhi0 = (0, _math.sin)(phi), cosPhi0 = (0, _math.cos)(phi);
  lengthStream.point = lengthPoint;
}

function lengthPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var sinPhi = (0, _math.sin)(phi),
      cosPhi = (0, _math.cos)(phi),
      delta = (0, _math.abs)(lambda - lambda0),
      cosDelta = (0, _math.cos)(delta),
      sinDelta = (0, _math.sin)(delta),
      x = cosPhi * sinDelta,
      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,
      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;
  lengthSum.add((0, _math.atan2)((0, _math.sqrt)(x * x + y * y), z));
  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;
}

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _noop = __webpack_require__(21);

var _noop2 = _interopRequireDefault(_noop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var x0 = Infinity,
    y0 = x0,
    x1 = -x0,
    y1 = x1;

var boundsStream = {
  point: boundsPoint,
  lineStart: _noop2.default,
  lineEnd: _noop2.default,
  polygonStart: _noop2.default,
  polygonEnd: _noop2.default,
  result: function result() {
    var bounds = [[x0, y0], [x1, y1]];
    x1 = y1 = -(y0 = x0 = Infinity);
    return bounds;
  }
};

function boundsPoint(x, y) {
  if (x < x0) x0 = x;
  if (x > x1) x1 = x;
  if (y < y0) y0 = y;
  if (y > y1) y1 = y;
}

exports.default = boundsStream;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
    return (0, _conicEqualArea2.default)().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
};

var _conicEqualArea = __webpack_require__(86);

var _conicEqualArea2 = _interopRequireDefault(_conicEqualArea);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (pointVisible, clipLine, interpolate, start) {
  return function (rotate, sink) {
    var line = clipLine(sink),
        rotatedStart = rotate.invert(start[0], start[1]),
        ringBuffer = (0, _buffer2.default)(),
        ringSink = clipLine(ringBuffer),
        polygonStarted = false,
        polygon,
        segments,
        ring;

    var clip = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function polygonStart() {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function polygonEnd() {
        clip.point = point;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = (0, _d3Array.merge)(segments);
        var startInside = (0, _polygonContains2.default)(polygon, rotatedStart);
        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          (0, _polygon2.default)(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }
        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function sphere() {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };

    function point(lambda, phi) {
      var point = rotate(lambda, phi);
      if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);
    }

    function pointLine(lambda, phi) {
      var point = rotate(lambda, phi);
      line.point(point[0], point[1]);
    }

    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }

    function lineEnd() {
      clip.point = point;
      line.lineEnd();
    }

    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      var point = rotate(lambda, phi);
      ringSink.point(point[0], point[1]);
    }

    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }

    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();

      var clean = ringSink.clean(),
          ringSegments = ringBuffer.result(),
          i,
          n = ringSegments.length,
          m,
          segment,
          point;

      ring.pop();
      polygon.push(ring);
      ring = null;

      if (!n) return;

      // No intersections.
      if (clean & 1) {
        segment = ringSegments[0];
        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          for (i = 0; i < m; ++i) {
            sink.point((point = segment[i])[0], point[1]);
          }sink.lineEnd();
        }
        return;
      }

      // Rejoin connected segments.
      // TODO reuse ringBuffer.rejoin()?
      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

      segments.push(ringSegments.filter(validSegment));
    }

    return clip;
  };
};

var _buffer = __webpack_require__(147);

var _buffer2 = _interopRequireDefault(_buffer);

var _polygon = __webpack_require__(148);

var _polygon2 = _interopRequireDefault(_polygon);

var _math = __webpack_require__(3);

var _polygonContains = __webpack_require__(162);

var _polygonContains2 = _interopRequireDefault(_polygonContains);

var _d3Array = __webpack_require__(14);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validSegment(segment) {
  return segment.length > 1;
}

// Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.
function compareIntersection(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - _math.halfPi - _math.epsilon : _math.halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - _math.halfPi - _math.epsilon : _math.halfPi - b[1]);
}

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.equirectangularRaw = equirectangularRaw;

exports.default = function () {
  return (0, _index2.default)(equirectangularRaw).scale(152.63);
};

var _index = __webpack_require__(16);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}

equirectangularRaw.invert = equirectangularRaw;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _airy = __webpack_require__(332);

Object.defineProperty(exports, "geoAiry", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_airy).default;
  }
});
Object.defineProperty(exports, "geoAiryRaw", {
  enumerable: true,
  get: function get() {
    return _airy.airyRaw;
  }
});

var _aitoff = __webpack_require__(170);

Object.defineProperty(exports, "geoAitoff", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_aitoff).default;
  }
});
Object.defineProperty(exports, "geoAitoffRaw", {
  enumerable: true,
  get: function get() {
    return _aitoff.aitoffRaw;
  }
});

var _armadillo = __webpack_require__(333);

Object.defineProperty(exports, "geoArmadillo", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_armadillo).default;
  }
});
Object.defineProperty(exports, "geoArmadilloRaw", {
  enumerable: true,
  get: function get() {
    return _armadillo.armadilloRaw;
  }
});

var _august = __webpack_require__(171);

Object.defineProperty(exports, "geoAugust", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_august).default;
  }
});
Object.defineProperty(exports, "geoAugustRaw", {
  enumerable: true,
  get: function get() {
    return _august.augustRaw;
  }
});

var _baker = __webpack_require__(334);

Object.defineProperty(exports, "geoBaker", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_baker).default;
  }
});
Object.defineProperty(exports, "geoBakerRaw", {
  enumerable: true,
  get: function get() {
    return _baker.bakerRaw;
  }
});

var _berghaus = __webpack_require__(335);

Object.defineProperty(exports, "geoBerghaus", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_berghaus).default;
  }
});
Object.defineProperty(exports, "geoBerghausRaw", {
  enumerable: true,
  get: function get() {
    return _berghaus.berghausRaw;
  }
});

var _boggs = __webpack_require__(172);

Object.defineProperty(exports, "geoBoggs", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_boggs).default;
  }
});
Object.defineProperty(exports, "geoBoggsRaw", {
  enumerable: true,
  get: function get() {
    return _boggs.boggsRaw;
  }
});

var _bonne = __webpack_require__(336);

Object.defineProperty(exports, "geoBonne", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_bonne).default;
  }
});
Object.defineProperty(exports, "geoBonneRaw", {
  enumerable: true,
  get: function get() {
    return _bonne.bonneRaw;
  }
});

var _bottomley = __webpack_require__(337);

Object.defineProperty(exports, "geoBottomley", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_bottomley).default;
  }
});
Object.defineProperty(exports, "geoBottomleyRaw", {
  enumerable: true,
  get: function get() {
    return _bottomley.bottomleyRaw;
  }
});

var _bromley = __webpack_require__(338);

Object.defineProperty(exports, "geoBromley", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_bromley).default;
  }
});
Object.defineProperty(exports, "geoBromleyRaw", {
  enumerable: true,
  get: function get() {
    return _bromley.bromleyRaw;
  }
});

var _chamberlin = __webpack_require__(339);

Object.defineProperty(exports, "geoChamberlin", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_chamberlin).default;
  }
});
Object.defineProperty(exports, "geoChamberlinRaw", {
  enumerable: true,
  get: function get() {
    return _chamberlin.chamberlinRaw;
  }
});
Object.defineProperty(exports, "geoChamberlinAfrica", {
  enumerable: true,
  get: function get() {
    return _chamberlin.chamberlinAfrica;
  }
});

var _collignon = __webpack_require__(90);

Object.defineProperty(exports, "geoCollignon", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_collignon).default;
  }
});
Object.defineProperty(exports, "geoCollignonRaw", {
  enumerable: true,
  get: function get() {
    return _collignon.collignonRaw;
  }
});

var _craig = __webpack_require__(340);

Object.defineProperty(exports, "geoCraig", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_craig).default;
  }
});
Object.defineProperty(exports, "geoCraigRaw", {
  enumerable: true,
  get: function get() {
    return _craig.craigRaw;
  }
});

var _craster = __webpack_require__(341);

Object.defineProperty(exports, "geoCraster", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_craster).default;
  }
});
Object.defineProperty(exports, "geoCrasterRaw", {
  enumerable: true,
  get: function get() {
    return _craster.crasterRaw;
  }
});

var _cylindricalEqualArea = __webpack_require__(173);

Object.defineProperty(exports, "geoCylindricalEqualArea", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_cylindricalEqualArea).default;
  }
});
Object.defineProperty(exports, "geoCylindricalEqualAreaRaw", {
  enumerable: true,
  get: function get() {
    return _cylindricalEqualArea.cylindricalEqualAreaRaw;
  }
});

var _cylindricalStereographic = __webpack_require__(342);

Object.defineProperty(exports, "geoCylindricalStereographic", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_cylindricalStereographic).default;
  }
});
Object.defineProperty(exports, "geoCylindricalStereographicRaw", {
  enumerable: true,
  get: function get() {
    return _cylindricalStereographic.cylindricalStereographicRaw;
  }
});

var _eckert = __webpack_require__(343);

Object.defineProperty(exports, "geoEckert1", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_eckert).default;
  }
});
Object.defineProperty(exports, "geoEckert1Raw", {
  enumerable: true,
  get: function get() {
    return _eckert.eckert1Raw;
  }
});

var _eckert2 = __webpack_require__(344);

Object.defineProperty(exports, "geoEckert2", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_eckert2).default;
  }
});
Object.defineProperty(exports, "geoEckert2Raw", {
  enumerable: true,
  get: function get() {
    return _eckert2.eckert2Raw;
  }
});

var _eckert3 = __webpack_require__(345);

Object.defineProperty(exports, "geoEckert3", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_eckert3).default;
  }
});
Object.defineProperty(exports, "geoEckert3Raw", {
  enumerable: true,
  get: function get() {
    return _eckert3.eckert3Raw;
  }
});

var _eckert4 = __webpack_require__(346);

Object.defineProperty(exports, "geoEckert4", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_eckert4).default;
  }
});
Object.defineProperty(exports, "geoEckert4Raw", {
  enumerable: true,
  get: function get() {
    return _eckert4.eckert4Raw;
  }
});

var _eckert5 = __webpack_require__(347);

Object.defineProperty(exports, "geoEckert5", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_eckert5).default;
  }
});
Object.defineProperty(exports, "geoEckert5Raw", {
  enumerable: true,
  get: function get() {
    return _eckert5.eckert5Raw;
  }
});

var _eckert6 = __webpack_require__(348);

Object.defineProperty(exports, "geoEckert6", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_eckert6).default;
  }
});
Object.defineProperty(exports, "geoEckert6Raw", {
  enumerable: true,
  get: function get() {
    return _eckert6.eckert6Raw;
  }
});

var _eisenlohr = __webpack_require__(349);

Object.defineProperty(exports, "geoEisenlohr", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_eisenlohr).default;
  }
});
Object.defineProperty(exports, "geoEisenlohrRaw", {
  enumerable: true,
  get: function get() {
    return _eisenlohr.eisenlohrRaw;
  }
});

var _fahey = __webpack_require__(350);

Object.defineProperty(exports, "geoFahey", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_fahey).default;
  }
});
Object.defineProperty(exports, "geoFaheyRaw", {
  enumerable: true,
  get: function get() {
    return _fahey.faheyRaw;
  }
});

var _foucaut = __webpack_require__(351);

Object.defineProperty(exports, "geoFoucaut", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_foucaut).default;
  }
});
Object.defineProperty(exports, "geoFoucautRaw", {
  enumerable: true,
  get: function get() {
    return _foucaut.foucautRaw;
  }
});

var _gilbert = __webpack_require__(352);

Object.defineProperty(exports, "geoGilbert", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_gilbert).default;
  }
});

var _gingery = __webpack_require__(353);

Object.defineProperty(exports, "geoGingery", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_gingery).default;
  }
});
Object.defineProperty(exports, "geoGingeryRaw", {
  enumerable: true,
  get: function get() {
    return _gingery.gingeryRaw;
  }
});

var _ginzburg = __webpack_require__(354);

Object.defineProperty(exports, "geoGinzburg4", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ginzburg).default;
  }
});
Object.defineProperty(exports, "geoGinzburg4Raw", {
  enumerable: true,
  get: function get() {
    return _ginzburg.ginzburg4Raw;
  }
});

var _ginzburg2 = __webpack_require__(355);

Object.defineProperty(exports, "geoGinzburg5", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ginzburg2).default;
  }
});
Object.defineProperty(exports, "geoGinzburg5Raw", {
  enumerable: true,
  get: function get() {
    return _ginzburg2.ginzburg5Raw;
  }
});

var _ginzburg3 = __webpack_require__(356);

Object.defineProperty(exports, "geoGinzburg6", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ginzburg3).default;
  }
});
Object.defineProperty(exports, "geoGinzburg6Raw", {
  enumerable: true,
  get: function get() {
    return _ginzburg3.ginzburg6Raw;
  }
});

var _ginzburg4 = __webpack_require__(357);

Object.defineProperty(exports, "geoGinzburg8", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ginzburg4).default;
  }
});
Object.defineProperty(exports, "geoGinzburg8Raw", {
  enumerable: true,
  get: function get() {
    return _ginzburg4.ginzburg8Raw;
  }
});

var _ginzburg5 = __webpack_require__(358);

Object.defineProperty(exports, "geoGinzburg9", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ginzburg5).default;
  }
});
Object.defineProperty(exports, "geoGinzburg9Raw", {
  enumerable: true,
  get: function get() {
    return _ginzburg5.ginzburg9Raw;
  }
});

var _gringorten = __webpack_require__(174);

Object.defineProperty(exports, "geoGringorten", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_gringorten).default;
  }
});
Object.defineProperty(exports, "geoGringortenRaw", {
  enumerable: true,
  get: function get() {
    return _gringorten.gringortenRaw;
  }
});

var _guyou = __webpack_require__(176);

Object.defineProperty(exports, "geoGuyou", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_guyou).default;
  }
});
Object.defineProperty(exports, "geoGuyouRaw", {
  enumerable: true,
  get: function get() {
    return _guyou.guyouRaw;
  }
});

var _hammer = __webpack_require__(360);

Object.defineProperty(exports, "geoHammer", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_hammer).default;
  }
});
Object.defineProperty(exports, "geoHammerRaw", {
  enumerable: true,
  get: function get() {
    return _hammer.hammerRaw;
  }
});

var _hammerRetroazimuthal = __webpack_require__(361);

Object.defineProperty(exports, "geoHammerRetroazimuthal", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_hammerRetroazimuthal).default;
  }
});
Object.defineProperty(exports, "geoHammerRetroazimuthalRaw", {
  enumerable: true,
  get: function get() {
    return _hammerRetroazimuthal.hammerRetroazimuthalRaw;
  }
});

var _healpix = __webpack_require__(362);

Object.defineProperty(exports, "geoHealpix", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_healpix).default;
  }
});
Object.defineProperty(exports, "geoHealpixRaw", {
  enumerable: true,
  get: function get() {
    return _healpix.healpixRaw;
  }
});

var _hill = __webpack_require__(363);

Object.defineProperty(exports, "geoHill", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_hill).default;
  }
});
Object.defineProperty(exports, "geoHillRaw", {
  enumerable: true,
  get: function get() {
    return _hill.hillRaw;
  }
});

var _homolosine = __webpack_require__(177);

Object.defineProperty(exports, "geoHomolosine", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_homolosine).default;
  }
});
Object.defineProperty(exports, "geoHomolosineRaw", {
  enumerable: true,
  get: function get() {
    return _homolosine.homolosineRaw;
  }
});

var _index = __webpack_require__(26);

Object.defineProperty(exports, "geoInterrupt", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_index).default;
  }
});

var _boggs2 = __webpack_require__(364);

Object.defineProperty(exports, "geoInterruptedBoggs", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_boggs2).default;
  }
});

var _homolosine2 = __webpack_require__(365);

Object.defineProperty(exports, "geoInterruptedHomolosine", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_homolosine2).default;
  }
});

var _mollweide = __webpack_require__(366);

Object.defineProperty(exports, "geoInterruptedMollweide", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_mollweide).default;
  }
});

var _mollweideHemispheres = __webpack_require__(367);

Object.defineProperty(exports, "geoInterruptedMollweideHemispheres", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_mollweideHemispheres).default;
  }
});

var _sinuMollweide = __webpack_require__(368);

Object.defineProperty(exports, "geoInterruptedSinuMollweide", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sinuMollweide).default;
  }
});

var _sinusoidal = __webpack_require__(369);

Object.defineProperty(exports, "geoInterruptedSinusoidal", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sinusoidal).default;
  }
});

var _kavrayskiy = __webpack_require__(370);

Object.defineProperty(exports, "geoKavrayskiy7", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_kavrayskiy).default;
  }
});
Object.defineProperty(exports, "geoKavrayskiy7Raw", {
  enumerable: true,
  get: function get() {
    return _kavrayskiy.kavrayskiy7Raw;
  }
});

var _lagrange = __webpack_require__(371);

Object.defineProperty(exports, "geoLagrange", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_lagrange).default;
  }
});
Object.defineProperty(exports, "geoLagrangeRaw", {
  enumerable: true,
  get: function get() {
    return _lagrange.lagrangeRaw;
  }
});

var _larrivee = __webpack_require__(372);

Object.defineProperty(exports, "geoLarrivee", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_larrivee).default;
  }
});
Object.defineProperty(exports, "geoLarriveeRaw", {
  enumerable: true,
  get: function get() {
    return _larrivee.larriveeRaw;
  }
});

var _laskowski = __webpack_require__(373);

Object.defineProperty(exports, "geoLaskowski", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_laskowski).default;
  }
});
Object.defineProperty(exports, "geoLaskowskiRaw", {
  enumerable: true,
  get: function get() {
    return _laskowski.laskowskiRaw;
  }
});

var _littrow = __webpack_require__(374);

Object.defineProperty(exports, "geoLittrow", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_littrow).default;
  }
});
Object.defineProperty(exports, "geoLittrowRaw", {
  enumerable: true,
  get: function get() {
    return _littrow.littrowRaw;
  }
});

var _loximuthal = __webpack_require__(375);

Object.defineProperty(exports, "geoLoximuthal", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_loximuthal).default;
  }
});
Object.defineProperty(exports, "geoLoximuthalRaw", {
  enumerable: true,
  get: function get() {
    return _loximuthal.loximuthalRaw;
  }
});

var _miller = __webpack_require__(376);

Object.defineProperty(exports, "geoMiller", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_miller).default;
  }
});
Object.defineProperty(exports, "geoMillerRaw", {
  enumerable: true,
  get: function get() {
    return _miller.millerRaw;
  }
});

var _modifiedStereographic = __webpack_require__(377);

Object.defineProperty(exports, "geoModifiedStereographic", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_modifiedStereographic).default;
  }
});
Object.defineProperty(exports, "geoModifiedStereographicRaw", {
  enumerable: true,
  get: function get() {
    return _modifiedStereographic.modifiedStereographicRaw;
  }
});
Object.defineProperty(exports, "geoModifiedStereographicAlaska", {
  enumerable: true,
  get: function get() {
    return _modifiedStereographic.modifiedStereographicAlaska;
  }
});
Object.defineProperty(exports, "geoModifiedStereographicGs48", {
  enumerable: true,
  get: function get() {
    return _modifiedStereographic.modifiedStereographicGs48;
  }
});
Object.defineProperty(exports, "geoModifiedStereographicGs50", {
  enumerable: true,
  get: function get() {
    return _modifiedStereographic.modifiedStereographicGs50;
  }
});
Object.defineProperty(exports, "geoModifiedStereographicMiller", {
  enumerable: true,
  get: function get() {
    return _modifiedStereographic.modifiedStereographicMiller;
  }
});
Object.defineProperty(exports, "geoModifiedStereographicLee", {
  enumerable: true,
  get: function get() {
    return _modifiedStereographic.modifiedStereographicLee;
  }
});

var _mollweide2 = __webpack_require__(22);

Object.defineProperty(exports, "geoMollweide", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_mollweide2).default;
  }
});
Object.defineProperty(exports, "geoMollweideRaw", {
  enumerable: true,
  get: function get() {
    return _mollweide2.mollweideRaw;
  }
});

var _mtFlatPolarParabolic = __webpack_require__(378);

Object.defineProperty(exports, "geoMtFlatPolarParabolic", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_mtFlatPolarParabolic).default;
  }
});
Object.defineProperty(exports, "geoMtFlatPolarParabolicRaw", {
  enumerable: true,
  get: function get() {
    return _mtFlatPolarParabolic.mtFlatPolarParabolicRaw;
  }
});

var _mtFlatPolarQuartic = __webpack_require__(379);

Object.defineProperty(exports, "geoMtFlatPolarQuartic", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_mtFlatPolarQuartic).default;
  }
});
Object.defineProperty(exports, "geoMtFlatPolarQuarticRaw", {
  enumerable: true,
  get: function get() {
    return _mtFlatPolarQuartic.mtFlatPolarQuarticRaw;
  }
});

var _mtFlatPolarSinusoidal = __webpack_require__(380);

Object.defineProperty(exports, "geoMtFlatPolarSinusoidal", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_mtFlatPolarSinusoidal).default;
  }
});
Object.defineProperty(exports, "geoMtFlatPolarSinusoidalRaw", {
  enumerable: true,
  get: function get() {
    return _mtFlatPolarSinusoidal.mtFlatPolarSinusoidalRaw;
  }
});

var _naturalEarth = __webpack_require__(381);

Object.defineProperty(exports, "geoNaturalEarth", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_naturalEarth).default;
  }
});
Object.defineProperty(exports, "geoNaturalEarthRaw", {
  enumerable: true,
  get: function get() {
    return _naturalEarth.naturalEarthRaw;
  }
});

var _naturalEarth2 = __webpack_require__(382);

Object.defineProperty(exports, "geoNaturalEarth2", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_naturalEarth2).default;
  }
});
Object.defineProperty(exports, "geoNaturalEarth2Raw", {
  enumerable: true,
  get: function get() {
    return _naturalEarth2.naturalEarth2Raw;
  }
});

var _nellHammer = __webpack_require__(383);

Object.defineProperty(exports, "geoNellHammer", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_nellHammer).default;
  }
});
Object.defineProperty(exports, "geoNellHammerRaw", {
  enumerable: true,
  get: function get() {
    return _nellHammer.nellHammerRaw;
  }
});

var _patterson = __webpack_require__(384);

Object.defineProperty(exports, "geoPatterson", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_patterson).default;
  }
});
Object.defineProperty(exports, "geoPattersonRaw", {
  enumerable: true,
  get: function get() {
    return _patterson.pattersonRaw;
  }
});

var _polyconic = __webpack_require__(385);

Object.defineProperty(exports, "geoPolyconic", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_polyconic).default;
  }
});
Object.defineProperty(exports, "geoPolyconicRaw", {
  enumerable: true,
  get: function get() {
    return _polyconic.polyconicRaw;
  }
});

var _index2 = __webpack_require__(60);

Object.defineProperty(exports, "geoPolyhedral", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_index2).default;
  }
});

var _butterfly = __webpack_require__(387);

Object.defineProperty(exports, "geoPolyhedralButterfly", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_butterfly).default;
  }
});

var _collignon2 = __webpack_require__(388);

Object.defineProperty(exports, "geoPolyhedralCollignon", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_collignon2).default;
  }
});

var _waterman = __webpack_require__(389);

Object.defineProperty(exports, "geoPolyhedralWaterman", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_waterman).default;
  }
});

var _index3 = __webpack_require__(390);

Object.defineProperty(exports, "geoProject", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_index3).default;
  }
});

var _gringorten2 = __webpack_require__(394);

Object.defineProperty(exports, "geoGringortenQuincuncial", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_gringorten2).default;
  }
});

var _peirce = __webpack_require__(395);

Object.defineProperty(exports, "geoPeirceQuincuncial", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_peirce).default;
  }
});
Object.defineProperty(exports, "geoPierceQuincuncial", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_peirce).default;
  }
});

var _quantize = __webpack_require__(396);

Object.defineProperty(exports, "geoQuantize", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_quantize).default;
  }
});

var _index4 = __webpack_require__(93);

Object.defineProperty(exports, "geoQuincuncial", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_index4).default;
  }
});

var _rectangularPolyconic = __webpack_require__(397);

Object.defineProperty(exports, "geoRectangularPolyconic", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_rectangularPolyconic).default;
  }
});
Object.defineProperty(exports, "geoRectangularPolyconicRaw", {
  enumerable: true,
  get: function get() {
    return _rectangularPolyconic.rectangularPolyconicRaw;
  }
});

var _robinson = __webpack_require__(398);

Object.defineProperty(exports, "geoRobinson", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_robinson).default;
  }
});
Object.defineProperty(exports, "geoRobinsonRaw", {
  enumerable: true,
  get: function get() {
    return _robinson.robinsonRaw;
  }
});

var _satellite = __webpack_require__(399);

Object.defineProperty(exports, "geoSatellite", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_satellite).default;
  }
});
Object.defineProperty(exports, "geoSatelliteRaw", {
  enumerable: true,
  get: function get() {
    return _satellite.satelliteRaw;
  }
});

var _sinuMollweide2 = __webpack_require__(91);

Object.defineProperty(exports, "geoSinuMollweide", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sinuMollweide2).default;
  }
});
Object.defineProperty(exports, "geoSinuMollweideRaw", {
  enumerable: true,
  get: function get() {
    return _sinuMollweide2.sinuMollweideRaw;
  }
});

var _sinusoidal2 = __webpack_require__(41);

Object.defineProperty(exports, "geoSinusoidal", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sinusoidal2).default;
  }
});
Object.defineProperty(exports, "geoSinusoidalRaw", {
  enumerable: true,
  get: function get() {
    return _sinusoidal2.sinusoidalRaw;
  }
});

var _stitch = __webpack_require__(400);

Object.defineProperty(exports, "geoStitch", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_stitch).default;
  }
});

var _times = __webpack_require__(401);

Object.defineProperty(exports, "geoTimes", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_times).default;
  }
});
Object.defineProperty(exports, "geoTimesRaw", {
  enumerable: true,
  get: function get() {
    return _times.timesRaw;
  }
});

var _twoPointAzimuthal = __webpack_require__(402);

Object.defineProperty(exports, "geoTwoPointAzimuthal", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_twoPointAzimuthal).default;
  }
});
Object.defineProperty(exports, "geoTwoPointAzimuthalRaw", {
  enumerable: true,
  get: function get() {
    return _twoPointAzimuthal.twoPointAzimuthalRaw;
  }
});
Object.defineProperty(exports, "geoTwoPointAzimuthalUsa", {
  enumerable: true,
  get: function get() {
    return _twoPointAzimuthal.twoPointAzimuthalUsa;
  }
});

var _twoPointEquidistant = __webpack_require__(403);

Object.defineProperty(exports, "geoTwoPointEquidistant", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_twoPointEquidistant).default;
  }
});
Object.defineProperty(exports, "geoTwoPointEquidistantRaw", {
  enumerable: true,
  get: function get() {
    return _twoPointEquidistant.twoPointEquidistantRaw;
  }
});
Object.defineProperty(exports, "geoTwoPointEquidistantUsa", {
  enumerable: true,
  get: function get() {
    return _twoPointEquidistant.twoPointEquidistantUsa;
  }
});

var _vanDerGrinten = __webpack_require__(404);

Object.defineProperty(exports, "geoVanDerGrinten", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_vanDerGrinten).default;
  }
});
Object.defineProperty(exports, "geoVanDerGrintenRaw", {
  enumerable: true,
  get: function get() {
    return _vanDerGrinten.vanDerGrintenRaw;
  }
});

var _vanDerGrinten2 = __webpack_require__(405);

Object.defineProperty(exports, "geoVanDerGrinten2", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_vanDerGrinten2).default;
  }
});
Object.defineProperty(exports, "geoVanDerGrinten2Raw", {
  enumerable: true,
  get: function get() {
    return _vanDerGrinten2.vanDerGrinten2Raw;
  }
});

var _vanDerGrinten3 = __webpack_require__(406);

Object.defineProperty(exports, "geoVanDerGrinten3", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_vanDerGrinten3).default;
  }
});
Object.defineProperty(exports, "geoVanDerGrinten3Raw", {
  enumerable: true,
  get: function get() {
    return _vanDerGrinten3.vanDerGrinten3Raw;
  }
});

var _vanDerGrinten4 = __webpack_require__(407);

Object.defineProperty(exports, "geoVanDerGrinten4", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_vanDerGrinten4).default;
  }
});
Object.defineProperty(exports, "geoVanDerGrinten4Raw", {
  enumerable: true,
  get: function get() {
    return _vanDerGrinten4.vanDerGrinten4Raw;
  }
});

var _wagner = __webpack_require__(408);

Object.defineProperty(exports, "geoWagner4", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_wagner).default;
  }
});
Object.defineProperty(exports, "geoWagner4Raw", {
  enumerable: true,
  get: function get() {
    return _wagner.wagner4Raw;
  }
});

var _wagner2 = __webpack_require__(409);

Object.defineProperty(exports, "geoWagner6", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_wagner2).default;
  }
});
Object.defineProperty(exports, "geoWagner6Raw", {
  enumerable: true,
  get: function get() {
    return _wagner2.wagner6Raw;
  }
});

var _wagner3 = __webpack_require__(410);

Object.defineProperty(exports, "geoWagner7", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_wagner3).default;
  }
});
Object.defineProperty(exports, "geoWagner7Raw", {
  enumerable: true,
  get: function get() {
    return _wagner3.wagner7Raw;
  }
});

var _wiechel = __webpack_require__(411);

Object.defineProperty(exports, "geoWiechel", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_wiechel).default;
  }
});
Object.defineProperty(exports, "geoWiechelRaw", {
  enumerable: true,
  get: function get() {
    return _wiechel.wiechelRaw;
  }
});

var _winkel = __webpack_require__(412);

Object.defineProperty(exports, "geoWinkel3", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_winkel).default;
  }
});
Object.defineProperty(exports, "geoWinkel3Raw", {
  enumerable: true,
  get: function get() {
    return _winkel.winkel3Raw;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.aitoffRaw = aitoffRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(aitoffRaw).scale(152.63);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function aitoffRaw(x, y) {
  var cosy = (0, _math.cos)(y),
      sincia = (0, _math.sinci)((0, _math.acos)(cosy * (0, _math.cos)(x /= 2)));
  return [2 * cosy * (0, _math.sin)(x) * sincia, (0, _math.sin)(y) * sincia];
}

// Abort if [x, y] is not within an ellipse centered at [0, 0] with
// semi-major axis pi and semi-minor axis pi/2.
aitoffRaw.invert = function (x, y) {
  if (x * x + 4 * y * y > _math.pi * _math.pi + _math.epsilon) return;
  var x1 = x,
      y1 = y,
      i = 25;
  do {
    var sinx = (0, _math.sin)(x1),
        sinx_2 = (0, _math.sin)(x1 / 2),
        cosx_2 = (0, _math.cos)(x1 / 2),
        siny = (0, _math.sin)(y1),
        cosy = (0, _math.cos)(y1),
        sin_2y = (0, _math.sin)(2 * y1),
        sin2y = siny * siny,
        cos2y = cosy * cosy,
        sin2x_2 = sinx_2 * sinx_2,
        c = 1 - cos2y * cosx_2 * cosx_2,
        e = c ? (0, _math.acos)(cosy * cosx_2) * (0, _math.sqrt)(f = 1 / c) : f = 0,
        f,
        fx = 2 * e * cosy * sinx_2 - x,
        fy = e * siny - y,
        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),
        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),
        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),
        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),
        z = dxdy * dydx - dydy * dxdx;
    if (!z) break;
    var dx = (fy * dxdy - fx * dydy) / z,
        dy = (fx * dydx - fy * dxdx) / z;
    x1 -= dx, y1 -= dy;
  } while (((0, _math.abs)(dx) > _math.epsilon || (0, _math.abs)(dy) > _math.epsilon) && --i > 0);
  return [x1, y1];
};

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.augustRaw = augustRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(augustRaw).scale(66.1603);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function augustRaw(lambda, phi) {
  var tanPhi = (0, _math.tan)(phi / 2),
      k = (0, _math.sqrt)(1 - tanPhi * tanPhi),
      c = 1 + k * (0, _math.cos)(lambda /= 2),
      x = (0, _math.sin)(lambda) * k / c,
      y = tanPhi / c,
      x2 = x * x,
      y2 = y * y;
  return [4 / 3 * x * (3 + x2 - 3 * y2), 4 / 3 * y * (3 + 3 * x2 - y2)];
}

augustRaw.invert = function (x, y) {
  x *= 3 / 8, y *= 3 / 8;
  if (!x && (0, _math.abs)(y) > 1) return null;
  var x2 = x * x,
      y2 = y * y,
      s = 1 + x2 + y2,
      sin3Eta = (0, _math.sqrt)((s - (0, _math.sqrt)(s * s - 4 * y * y)) / 2),
      eta = (0, _math.asin)(sin3Eta) / 3,
      xi = sin3Eta ? (0, _math.arcosh)((0, _math.abs)(y / sin3Eta)) / 3 : (0, _math.arsinh)((0, _math.abs)(x)) / 3,
      cosEta = (0, _math.cos)(eta),
      coshXi = (0, _math.cosh)(xi),
      d = coshXi * coshXi - cosEta * cosEta;
  return [(0, _math.sign)(x) * 2 * (0, _math.atan2)((0, _math.sinh)(xi) * cosEta, 0.25 - d), (0, _math.sign)(y) * 2 * (0, _math.atan2)(coshXi * (0, _math.sin)(eta), 0.25 + d)];
};

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.boggsRaw = boggsRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(boggsRaw).scale(160.857);
};

var _d3Geo = __webpack_require__(0);

var _mollweide = __webpack_require__(22);

var _math = __webpack_require__(1);

var k = 2.00276,
    w = 1.11072;

function boggsRaw(lambda, phi) {
  var theta = (0, _mollweide.mollweideBromleyTheta)(_math.pi, phi);
  return [k * lambda / (1 / (0, _math.cos)(phi) + w / (0, _math.cos)(theta)), (phi + _math.sqrt2 * (0, _math.sin)(theta)) / k];
}

boggsRaw.invert = function (x, y) {
  var ky = k * y,
      theta = y < 0 ? -_math.quarterPi : _math.quarterPi,
      i = 25,
      delta,
      phi;
  do {
    phi = ky - _math.sqrt2 * (0, _math.sin)(theta);
    theta -= delta = ((0, _math.sin)(2 * theta) + 2 * theta - _math.pi * (0, _math.sin)(phi)) / (2 * (0, _math.cos)(2 * theta) + 2 + _math.pi * (0, _math.cos)(phi) * _math.sqrt2 * (0, _math.cos)(theta));
  } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);
  phi = ky - _math.sqrt2 * (0, _math.sin)(theta);
  return [x * (1 / (0, _math.cos)(phi) + w / (0, _math.cos)(theta)) / k, phi];
};

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.cylindricalEqualAreaRaw = cylindricalEqualAreaRaw;

exports.default = function () {
  return (0, _parallel2.default)(cylindricalEqualAreaRaw).parallel(38.58) // acos(sqrt(width / height / pi)) * radians
  .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)
};

var _math = __webpack_require__(1);

var _parallel = __webpack_require__(35);

var _parallel2 = _interopRequireDefault(_parallel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function cylindricalEqualAreaRaw(phi0) {
  var cosPhi0 = (0, _math.cos)(phi0);

  function forward(lambda, phi) {
    return [lambda * cosPhi0, (0, _math.sin)(phi) / cosPhi0];
  }

  forward.invert = function (x, y) {
    return [x / cosPhi0, (0, _math.asin)(y * cosPhi0)];
  };

  return forward;
}

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.gringortenRaw = gringortenRaw;

exports.default = function () {
    return (0, _d3Geo.geoProjection)((0, _square2.default)(gringortenRaw)).scale(239.75);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

var _square = __webpack_require__(175);

var _square2 = _interopRequireDefault(_square);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function gringortenRaw(lambda, phi) {
    var sLambda = (0, _math.sign)(lambda),
        sPhi = (0, _math.sign)(phi),
        cosPhi = (0, _math.cos)(phi),
        x = (0, _math.cos)(lambda) * cosPhi,
        y = (0, _math.sin)(lambda) * cosPhi,
        z = (0, _math.sin)(sPhi * phi);
    lambda = (0, _math.abs)((0, _math.atan2)(y, z));
    phi = (0, _math.asin)(x);
    if ((0, _math.abs)(lambda - _math.halfPi) > _math.epsilon) lambda %= _math.halfPi;
    var point = gringortenHexadecant(lambda > _math.pi / 4 ? _math.halfPi - lambda : lambda, phi);
    if (lambda > _math.pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;
    return point[0] *= sLambda, point[1] *= -sPhi, point;
}

gringortenRaw.invert = function (x, y) {
    if ((0, _math.abs)(x) > 1) x = (0, _math.sign)(x) * 2 - x;
    if ((0, _math.abs)(y) > 1) y = (0, _math.sign)(y) * 2 - y;
    var sx = (0, _math.sign)(x),
        sy = (0, _math.sign)(y),
        x0 = -sx * x,
        y0 = -sy * y,
        t = y0 / x0 < 1,
        p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),
        lambda = p[0],
        phi = p[1],
        cosPhi = (0, _math.cos)(phi);
    if (t) lambda = -_math.halfPi - lambda;
    return [sx * ((0, _math.atan2)((0, _math.sin)(lambda) * cosPhi, -(0, _math.sin)(phi)) + _math.pi), sy * (0, _math.asin)((0, _math.cos)(lambda) * cosPhi)];
};

function gringortenHexadecant(lambda, phi) {
    if (phi === _math.halfPi) return [0, 0];

    var sinPhi = (0, _math.sin)(phi),
        r = sinPhi * sinPhi,
        r2 = r * r,
        j = 1 + r2,
        k = 1 + 3 * r2,
        q = 1 - r2,
        z = (0, _math.asin)(1 / (0, _math.sqrt)(j)),
        v = q + r * j * z,
        p2 = (1 - sinPhi) / v,
        p = (0, _math.sqrt)(p2),
        a2 = p2 * j,
        a = (0, _math.sqrt)(a2),
        h = p * q,
        x,
        i;

    if (lambda === 0) return [0, -(h + r * a)];

    var cosPhi = (0, _math.cos)(phi),
        secPhi = 1 / cosPhi,
        drdPhi = 2 * sinPhi * cosPhi,
        dvdPhi = (-3 * r + z * k) * drdPhi,
        dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),
        dpdPhi = 0.5 * dp2dPhi / p,
        dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,
        dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,
        mu = -secPhi * drdPhi,
        nu = -secPhi * dra2dPhi,
        zeta = -2 * secPhi * dhdPhi,
        lambda1 = 4 * lambda / _math.pi,
        delta;

    // Slower but accurate bisection method.
    if (lambda > 0.222 * _math.pi || phi < _math.pi / 4 && lambda > 0.175 * _math.pi) {
        x = (h + r * (0, _math.sqrt)(a2 * (1 + r2) - h * h)) / (1 + r2);
        if (lambda > _math.pi / 4) return [x, x];
        var x1 = x,
            x0 = 0.5 * x;
        x = 0.5 * (x0 + x1), i = 50;
        do {
            var g = (0, _math.sqrt)(a2 - x * x),
                f = x * (zeta + mu * g) + nu * (0, _math.asin)(x / a) - lambda1;
            if (!f) break;
            if (f < 0) x0 = x;else x1 = x;
            x = 0.5 * (x0 + x1);
        } while ((0, _math.abs)(x1 - x0) > _math.epsilon && --i > 0);
    }

    // Newton-Raphson.
    else {
            x = _math.epsilon, i = 25;
            do {
                var x2 = x * x,
                    g2 = (0, _math.sqrt)(a2 - x2),
                    zetaMug = zeta + mu * g2,
                    f2 = x * zetaMug + nu * (0, _math.asin)(x / a) - lambda1,
                    df = zetaMug + (nu - mu * x2) / g2;
                x -= delta = g2 ? f2 / df : 0;
            } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);
        }

    return [x, -h - r * (0, _math.sqrt)(a2 - x * x)];
}

function gringortenHexadecantInvert(x, y) {
    var x0 = 0,
        x1 = 1,
        r = 0.5,
        i = 50;

    while (true) {
        var r2 = r * r,
            sinPhi = (0, _math.sqrt)(r),
            z = (0, _math.asin)(1 / (0, _math.sqrt)(1 + r2)),
            v = 1 - r2 + r * (1 + r2) * z,
            p2 = (1 - sinPhi) / v,
            p = (0, _math.sqrt)(p2),
            a2 = p2 * (1 + r2),
            h = p * (1 - r2),
            g2 = a2 - x * x,
            g = (0, _math.sqrt)(g2),
            y0 = y + h + r * g;
        if ((0, _math.abs)(x1 - x0) < _math.epsilon2 || --i === 0 || y0 === 0) break;
        if (y0 > 0) x0 = r;else x1 = r;
        r = 0.5 * (x0 + x1);
    }

    if (!i) return null;

    var phi = (0, _math.asin)(sinPhi),
        cosPhi = (0, _math.cos)(phi),
        secPhi = 1 / cosPhi,
        drdPhi = 2 * sinPhi * cosPhi,
        dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,
        dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),
        dpdPhi = 0.5 * dp2dPhi / p,
        dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,
        zeta = -2 * secPhi * dhdPhi,
        mu = -secPhi * drdPhi,
        nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);

    return [_math.pi / 4 * (x * (zeta + mu * g) + nu * (0, _math.asin)(x / (0, _math.sqrt)(a2))), phi];
}

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (project) {
  var dx = project(_math.halfPi, 0)[0] - project(-_math.halfPi, 0)[0];

  function projectSquare(lambda, phi) {
    var s = lambda > 0 ? -0.5 : 0.5,
        point = project(lambda + s * _math.pi, phi);
    point[0] -= s * dx;
    return point;
  }

  if (project.invert) projectSquare.invert = function (x, y) {
    var s = x > 0 ? -0.5 : 0.5,
        location = project.invert(x + s * dx, y),
        lambda = location[0] - s * _math.pi;
    if (lambda < -_math.pi) lambda += 2 * _math.pi;else if (lambda > _math.pi) lambda -= 2 * _math.pi;
    location[0] = lambda;
    return location;
  };

  return projectSquare;
};

var _math = __webpack_require__(1);

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.guyouRaw = guyouRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)((0, _square2.default)(guyouRaw)).scale(151.496);
};

var _d3Geo = __webpack_require__(0);

var _elliptic = __webpack_require__(359);

var _math = __webpack_require__(1);

var _square = __webpack_require__(175);

var _square2 = _interopRequireDefault(_square);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function guyouRaw(lambda, phi) {
  var k_ = (_math.sqrt2 - 1) / (_math.sqrt2 + 1),
      k = (0, _math.sqrt)(1 - k_ * k_),
      K = (0, _elliptic.ellipticF)(_math.halfPi, k * k),
      f = -1,
      psi = (0, _math.log)((0, _math.tan)(_math.pi / 4 + (0, _math.abs)(phi) / 2)),
      r = (0, _math.exp)(f * psi) / (0, _math.sqrt)(k_),
      at = guyouComplexAtan(r * (0, _math.cos)(f * lambda), r * (0, _math.sin)(f * lambda)),
      t = (0, _elliptic.ellipticFi)(at[0], at[1], k * k);
  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];
}

function guyouComplexAtan(x, y) {
  var x2 = x * x,
      y_1 = y + 1,
      t = 1 - x2 - y * y;
  return [0.5 * ((x >= 0 ? _math.halfPi : -_math.halfPi) - (0, _math.atan2)(t, 2 * x)), -0.25 * (0, _math.log)(t * t + 4 * x2) + 0.5 * (0, _math.log)(y_1 * y_1 + x2)];
}

function guyouComplexDivide(a, b) {
  var denominator = b[0] * b[0] + b[1] * b[1];
  return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];
}

guyouRaw.invert = function (x, y) {
  var k_ = (_math.sqrt2 - 1) / (_math.sqrt2 + 1),
      k = (0, _math.sqrt)(1 - k_ * k_),
      K = (0, _elliptic.ellipticF)(_math.halfPi, k * k),
      f = -1,
      j = (0, _elliptic.ellipticJi)(0.5 * K - y, -x, k * k),
      tn = guyouComplexDivide(j[0], j[1]),
      lambda = (0, _math.atan2)(tn[1], tn[0]) / f;
  return [lambda, 2 * (0, _math.atan)((0, _math.exp)(0.5 / f * (0, _math.log)(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - _math.halfPi];
};

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.homolosineRaw = homolosineRaw;

exports.default = function () {
    return (0, _d3Geo.geoProjection)(homolosineRaw).scale(152.63);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

var _mollweide = __webpack_require__(22);

var _sinusoidal = __webpack_require__(41);

var _sinuMollweide = __webpack_require__(91);

function homolosineRaw(lambda, phi) {
    return (0, _math.abs)(phi) > _sinuMollweide.sinuMollweidePhi ? (lambda = (0, _mollweide.mollweideRaw)(lambda, phi), lambda[1] -= phi > 0 ? _sinuMollweide.sinuMollweideY : -_sinuMollweide.sinuMollweideY, lambda) : (0, _sinusoidal.sinusoidalRaw)(lambda, phi);
}

homolosineRaw.invert = function (x, y) {
    return (0, _math.abs)(y) > _sinuMollweide.sinuMollweidePhi ? _mollweide.mollweideRaw.invert(x, y + (y > 0 ? _sinuMollweide.sinuMollweideY : -_sinuMollweide.sinuMollweideY)) : _sinusoidal.sinusoidalRaw.invert(x, y);
};

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (raw, p0, p1) {
    var i = (0, _d3Geo.geoInterpolate)(p0, p1),
        o = i(0.5),
        a = (0, _d3Geo.geoRotation)([-o[0], -o[1]])(p0),
        b = i.distance / 2,
        y = -(0, _math.asin)((0, _math.sin)(a[1] * _math.radians) / (0, _math.sin)(b)),
        R = [-o[0], -o[1], -(a[0] > 0 ? _math.pi - y : y) * _math.degrees],
        p = (0, _d3Geo.geoProjection)(raw(b)).rotate(R),
        r = (0, _d3Geo.geoRotation)(R),
        center = p.center;

    delete p.rotate;

    p.center = function (_) {
        return arguments.length ? center(r(_)) : r.invert(center());
    };

    return p.clipAngle(90);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * EventEmitter v5.2.2 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - http://oli.me.uk/
 * @preserve
 */

;(function (exports) {
    'use strict';

    /**
     * Class for managing events.
     * Can be extended to provide event functionality in other classes.
     *
     * @class EventEmitter Manages event registering and emitting.
     */

    function EventEmitter() {}

    // Shortcuts to improve speed and size
    var proto = EventEmitter.prototype;
    var originalGlobalValue = exports.EventEmitter;

    /**
     * Finds the index of the listener for the event in its storage array.
     *
     * @param {Function[]} listeners Array of listeners to search through.
     * @param {Function} listener Method to look for.
     * @return {Number} Index of the specified listener, -1 if not found
     * @api private
     */
    function indexOfListener(listeners, listener) {
        var i = listeners.length;
        while (i--) {
            if (listeners[i].listener === listener) {
                return i;
            }
        }

        return -1;
    }

    /**
     * Alias a method while keeping the context correct, to allow for overwriting of target method.
     *
     * @param {String} name The name of the target method.
     * @return {Function} The aliased method
     * @api private
     */
    function alias(name) {
        return function aliasClosure() {
            return this[name].apply(this, arguments);
        };
    }

    /**
     * Returns the listener array for the specified event.
     * Will initialise the event object and listener arrays if required.
     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
     * Each property in the object response is an array of listener functions.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Function[]|Object} All listener functions for the event.
     */
    proto.getListeners = function getListeners(evt) {
        var events = this._getEvents();
        var response;
        var key;

        // Return a concatenated array of all matching events if
        // the selector is a regular expression.
        if (evt instanceof RegExp) {
            response = {};
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    response[key] = events[key];
                }
            }
        } else {
            response = events[evt] || (events[evt] = []);
        }

        return response;
    };

    /**
     * Takes a list of listener objects and flattens it into a list of listener functions.
     *
     * @param {Object[]} listeners Raw listener objects.
     * @return {Function[]} Just the listener functions.
     */
    proto.flattenListeners = function flattenListeners(listeners) {
        var flatListeners = [];
        var i;

        for (i = 0; i < listeners.length; i += 1) {
            flatListeners.push(listeners[i].listener);
        }

        return flatListeners;
    };

    /**
     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Object} All listener functions for an event in an object.
     */
    proto.getListenersAsObject = function getListenersAsObject(evt) {
        var listeners = this.getListeners(evt);
        var response;

        if (listeners instanceof Array) {
            response = {};
            response[evt] = listeners;
        }

        return response || listeners;
    };

    function isValidListener(listener) {
        if (typeof listener === 'function' || listener instanceof RegExp) {
            return true;
        } else if (listener && (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) === 'object') {
            return isValidListener(listener.listener);
        } else {
            return false;
        }
    }

    /**
     * Adds a listener function to the specified event.
     * The listener will not be added if it is a duplicate.
     * If the listener returns true then it will be removed after it is called.
     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListener = function addListener(evt, listener) {
        if (!isValidListener(listener)) {
            throw new TypeError('listener must be a function');
        }

        var listeners = this.getListenersAsObject(evt);
        var listenerIsWrapped = (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) === 'object';
        var key;

        for (key in listeners) {
            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
                listeners[key].push(listenerIsWrapped ? listener : {
                    listener: listener,
                    once: false
                });
            }
        }

        return this;
    };

    /**
     * Alias of addListener
     */
    proto.on = alias('addListener');

    /**
     * Semi-alias of addListener. It will add a listener that will be
     * automatically removed after its first execution.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addOnceListener = function addOnceListener(evt, listener) {
        return this.addListener(evt, {
            listener: listener,
            once: true
        });
    };

    /**
     * Alias of addOnceListener.
     */
    proto.once = alias('addOnceListener');

    /**
     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
     * You need to tell it what event names should be matched by a regex.
     *
     * @param {String} evt Name of the event to create.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvent = function defineEvent(evt) {
        this.getListeners(evt);
        return this;
    };

    /**
     * Uses defineEvent to define multiple events.
     *
     * @param {String[]} evts An array of event names to define.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvents = function defineEvents(evts) {
        for (var i = 0; i < evts.length; i += 1) {
            this.defineEvent(evts[i]);
        }
        return this;
    };

    /**
     * Removes a listener function from the specified event.
     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to remove the listener from.
     * @param {Function} listener Method to remove from the event.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListener = function removeListener(evt, listener) {
        var listeners = this.getListenersAsObject(evt);
        var index;
        var key;

        for (key in listeners) {
            if (listeners.hasOwnProperty(key)) {
                index = indexOfListener(listeners[key], listener);

                if (index !== -1) {
                    listeners[key].splice(index, 1);
                }
            }
        }

        return this;
    };

    /**
     * Alias of removeListener
     */
    proto.off = alias('removeListener');

    /**
     * Adds listeners in bulk using the manipulateListeners method.
     * If you pass an object as the first argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
     * You can also pass it a regular expression to add the array of listeners to all events that match it.
     * Yeah, this function does quite a bit. That's probably a bad thing.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListeners = function addListeners(evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(false, evt, listeners);
    };

    /**
     * Removes listeners in bulk using the manipulateListeners method.
     * If you pass an object as the first argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be removed.
     * You can also pass it a regular expression to remove the listeners from all events that match it.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListeners = function removeListeners(evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(true, evt, listeners);
    };

    /**
     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
     * The first argument will determine if the listeners are removed (true) or added (false).
     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be added/removed.
     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
     *
     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
        var i;
        var value;
        var single = remove ? this.removeListener : this.addListener;
        var multiple = remove ? this.removeListeners : this.addListeners;

        // If evt is an object then pass each of its properties to this method
        if ((typeof evt === 'undefined' ? 'undefined' : _typeof(evt)) === 'object' && !(evt instanceof RegExp)) {
            for (i in evt) {
                if (evt.hasOwnProperty(i) && (value = evt[i])) {
                    // Pass the single listener straight through to the singular method
                    if (typeof value === 'function') {
                        single.call(this, i, value);
                    } else {
                        // Otherwise pass back to the multiple function
                        multiple.call(this, i, value);
                    }
                }
            }
        } else {
            // So evt must be a string
            // And listeners must be an array of listeners
            // Loop over it and pass each one to the multiple method
            i = listeners.length;
            while (i--) {
                single.call(this, evt, listeners[i]);
            }
        }

        return this;
    };

    /**
     * Removes all listeners from a specified event.
     * If you do not specify an event then all listeners will be removed.
     * That means every event will be emptied.
     * You can also pass a regex to remove all events that match it.
     *
     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeEvent = function removeEvent(evt) {
        var type = typeof evt === 'undefined' ? 'undefined' : _typeof(evt);
        var events = this._getEvents();
        var key;

        // Remove different things depending on the state of evt
        if (type === 'string') {
            // Remove all listeners for the specified event
            delete events[evt];
        } else if (evt instanceof RegExp) {
            // Remove all events matching the regex.
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    delete events[key];
                }
            }
        } else {
            // Remove all listeners in all events
            delete this._events;
        }

        return this;
    };

    /**
     * Alias of removeEvent.
     *
     * Added to mirror the node API.
     */
    proto.removeAllListeners = alias('removeEvent');

    /**
     * Emits an event of your choice.
     * When emitted, every listener attached to that event will be executed.
     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
     * So they will not arrive within the array on the other side, they will be separate.
     * You can also pass a regular expression to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {Array} [args] Optional array of arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emitEvent = function emitEvent(evt, args) {
        var listenersMap = this.getListenersAsObject(evt);
        var listeners;
        var listener;
        var i;
        var key;
        var response;

        for (key in listenersMap) {
            if (listenersMap.hasOwnProperty(key)) {
                listeners = listenersMap[key].slice(0);

                for (i = 0; i < listeners.length; i++) {
                    // If the listener returns true then it shall be removed from the event
                    // The function is executed either with a basic call or an apply if there is an args array
                    listener = listeners[i];

                    if (listener.once === true) {
                        this.removeListener(evt, listener.listener);
                    }

                    response = listener.listener.apply(this, args || []);

                    if (response === this._getOnceReturnValue()) {
                        this.removeListener(evt, listener.listener);
                    }
                }
            }
        }

        return this;
    };

    /**
     * Alias of emitEvent
     */
    proto.trigger = alias('emitEvent');

    /**
     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {...*} Optional additional arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emit = function emit(evt) {
        var args = Array.prototype.slice.call(arguments, 1);
        return this.emitEvent(evt, args);
    };

    /**
     * Sets the current value to check against when executing listeners. If a
     * listeners return value matches the one set here then it will be removed
     * after execution. This value defaults to true.
     *
     * @param {*} value The new value to check for when executing listeners.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.setOnceReturnValue = function setOnceReturnValue(value) {
        this._onceReturnValue = value;
        return this;
    };

    /**
     * Fetches the current value to check against when executing listeners. If
     * the listeners return value matches this one then it should be removed
     * automatically. It will return true by default.
     *
     * @return {*|Boolean} The current value to check for or the default, true.
     * @api private
     */
    proto._getOnceReturnValue = function _getOnceReturnValue() {
        if (this.hasOwnProperty('_onceReturnValue')) {
            return this._onceReturnValue;
        } else {
            return true;
        }
    };

    /**
     * Fetches the events object and creates one if required.
     *
     * @return {Object} The events storage object.
     * @api private
     */
    proto._getEvents = function _getEvents() {
        return this._events || (this._events = {});
    };

    /**
     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
     *
     * @return {Function} Non conflicting EventEmitter class.
     */
    EventEmitter.noConflict = function noConflict() {
        exports.EventEmitter = originalGlobalValue;
        return EventEmitter;
    };

    // Expose the class either via AMD, CommonJS or the global object
    if (true) {
        !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
            return EventEmitter;
        }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
        module.exports = EventEmitter;
    } else {
        exports.EventEmitter = EventEmitter;
    }
})(undefined || {});

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

var baseClone = __webpack_require__(181);

/** Used to compose bitmasks for cloning. */
var CLONE_SYMBOLS_FLAG = 4;

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone(value) {
  return baseClone(value, CLONE_SYMBOLS_FLAG);
}

module.exports = clone;

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(94),
    arrayEach = __webpack_require__(435),
    assignValue = __webpack_require__(53),
    baseAssign = __webpack_require__(436),
    baseAssignIn = __webpack_require__(437),
    cloneBuffer = __webpack_require__(440),
    copyArray = __webpack_require__(441),
    copySymbols = __webpack_require__(442),
    copySymbolsIn = __webpack_require__(444),
    getAllKeys = __webpack_require__(184),
    getAllKeysIn = __webpack_require__(445),
    getTag = __webpack_require__(186),
    initCloneArray = __webpack_require__(449),
    initCloneByTag = __webpack_require__(450),
    initCloneObject = __webpack_require__(459),
    isArray = __webpack_require__(10),
    isBuffer = __webpack_require__(80),
    isObject = __webpack_require__(12),
    keys = __webpack_require__(9);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || isFunc && !object) {
      result = isFlat || isFunc ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, baseClone, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack());
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function (subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;

/***/ }),
/* 182 */
/***/ (function(module, exports) {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(99),
    getPrototype = __webpack_require__(100),
    getSymbols = __webpack_require__(98),
    stubArray = __webpack_require__(182);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

module.exports = getSymbolsIn;

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(185),
    getSymbols = __webpack_require__(98),
    keys = __webpack_require__(9);

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(99),
    isArray = __webpack_require__(10);

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

var DataView = __webpack_require__(446),
    Map = __webpack_require__(95),
    Promise = __webpack_require__(447),
    Set = __webpack_require__(187),
    WeakMap = __webpack_require__(448),
    baseGetTag = __webpack_require__(19),
    toSource = __webpack_require__(137);

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    getTag = function getTag(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
            switch (ctorString) {
                case dataViewCtorString:
                    return dataViewTag;
                case mapCtorString:
                    return mapTag;
                case promiseCtorString:
                    return promiseTag;
                case setCtorString:
                    return setTag;
                case weakMapCtorString:
                    return weakMapTag;
            }
        }
        return result;
    };
}

module.exports = getTag;

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(24),
    root = __webpack_require__(13);

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(13);

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;

/***/ }),
/* 189 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

module.exports = arrayReduce;

/***/ }),
/* 190 */
/***/ (function(module, exports) {

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function (value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(94),
    baseIsEqual = __webpack_require__(192);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack();
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqualDeep = __webpack_require__(464),
    isObjectLike = __webpack_require__(15);

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

var SetCache = __webpack_require__(102),
    arraySome = __webpack_require__(467),
    cacheHas = __webpack_require__(103);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function (othValue, othIndex) {
        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

var isStrictComparable = __webpack_require__(195),
    keys = __webpack_require__(9);

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
    var result = keys(object),
        length = result.length;

    while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
    }
    return result;
}

module.exports = getMatchData;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(12);

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;

/***/ }),
/* 196 */
/***/ (function(module, exports) {

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function (object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
  };
}

module.exports = matchesStrictComparable;

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

var baseToString = __webpack_require__(475);

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

var baseHasIn = __webpack_require__(476),
    hasPath = __webpack_require__(199);

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(67),
    isArguments = __webpack_require__(79),
    isArray = __webpack_require__(10),
    isIndex = __webpack_require__(55),
    isLength = __webpack_require__(78),
    toKey = __webpack_require__(44);

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
}

module.exports = hasPath;

/***/ }),
/* 200 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while (fromRight ? index-- : ++index < length) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseFindIndex;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

var createBaseFor = __webpack_require__(484);

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(8);
var isString = __webpack_require__(7);
var d3Geo = __webpack_require__(0);
var d3GeoProjection = __webpack_require__(169);
var d3CompositeProjection = __webpack_require__(494);

module.exports = function (projection) {
  if (isFunction(projection)) {
    return projection();
  }
  if (isString(projection)) {
    if (d3Geo[projection]) {
      return d3Geo[projection]();
    }
    if (d3GeoProjection[projection]) {
      return d3GeoProjection[projection]();
    }
    if (d3CompositeProjection[projection]) {
      return d3CompositeProjection[projection]();
    }
  }
  return null;
};

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _area = __webpack_require__(204);

Object.defineProperty(exports, "geoArea", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_area).default;
  }
});

var _bounds = __webpack_require__(495);

Object.defineProperty(exports, "geoBounds", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_bounds).default;
  }
});

var _centroid = __webpack_require__(496);

Object.defineProperty(exports, "geoCentroid", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_centroid).default;
  }
});

var _circle = __webpack_require__(205);

Object.defineProperty(exports, "geoCircle", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_circle).default;
  }
});

var _extent = __webpack_require__(207);

Object.defineProperty(exports, "geoClipExtent", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_extent).default;
  }
});

var _distance = __webpack_require__(499);

Object.defineProperty(exports, "geoDistance", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_distance).default;
  }
});

var _graticule = __webpack_require__(500);

Object.defineProperty(exports, "geoGraticule", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_graticule).default;
  }
});

var _interpolate = __webpack_require__(501);

Object.defineProperty(exports, "geoInterpolate", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_interpolate).default;
  }
});

var _length = __webpack_require__(211);

Object.defineProperty(exports, "geoLength", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_length).default;
  }
});

var _index = __webpack_require__(502);

Object.defineProperty(exports, "geoPath", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_index).default;
  }
});

var _albers = __webpack_require__(214);

Object.defineProperty(exports, "geoAlbers", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_albers).default;
  }
});

var _albersUsa = __webpack_require__(511);

Object.defineProperty(exports, "geoAlbersUsa", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_albersUsa).default;
  }
});

var _azimuthalEqualArea = __webpack_require__(512);

Object.defineProperty(exports, "geoAzimuthalEqualArea", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_azimuthalEqualArea).default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEqualAreaRaw", {
  enumerable: true,
  get: function get() {
    return _azimuthalEqualArea.azimuthalEqualAreaRaw;
  }
});

var _azimuthalEquidistant = __webpack_require__(513);

Object.defineProperty(exports, "geoAzimuthalEquidistant", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_azimuthalEquidistant).default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEquidistantRaw", {
  enumerable: true,
  get: function get() {
    return _azimuthalEquidistant.azimuthalEquidistantRaw;
  }
});

var _conicConformal = __webpack_require__(514);

Object.defineProperty(exports, "geoConicConformal", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_conicConformal).default;
  }
});
Object.defineProperty(exports, "geoConicConformalRaw", {
  enumerable: true,
  get: function get() {
    return _conicConformal.conicConformalRaw;
  }
});

var _conicEqualArea = __webpack_require__(109);

Object.defineProperty(exports, "geoConicEqualArea", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_conicEqualArea).default;
  }
});
Object.defineProperty(exports, "geoConicEqualAreaRaw", {
  enumerable: true,
  get: function get() {
    return _conicEqualArea.conicEqualAreaRaw;
  }
});

var _conicEquidistant = __webpack_require__(515);

Object.defineProperty(exports, "geoConicEquidistant", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_conicEquidistant).default;
  }
});
Object.defineProperty(exports, "geoConicEquidistantRaw", {
  enumerable: true,
  get: function get() {
    return _conicEquidistant.conicEquidistantRaw;
  }
});

var _equirectangular = __webpack_require__(217);

Object.defineProperty(exports, "geoEquirectangular", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_equirectangular).default;
  }
});
Object.defineProperty(exports, "geoEquirectangularRaw", {
  enumerable: true,
  get: function get() {
    return _equirectangular.equirectangularRaw;
  }
});

var _gnomonic = __webpack_require__(516);

Object.defineProperty(exports, "geoGnomonic", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_gnomonic).default;
  }
});
Object.defineProperty(exports, "geoGnomonicRaw", {
  enumerable: true,
  get: function get() {
    return _gnomonic.gnomonicRaw;
  }
});

var _index2 = __webpack_require__(17);

Object.defineProperty(exports, "geoProjection", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_index2).default;
  }
});
Object.defineProperty(exports, "geoProjectionMutator", {
  enumerable: true,
  get: function get() {
    return _index2.projectionMutator;
  }
});

var _mercator = __webpack_require__(112);

Object.defineProperty(exports, "geoMercator", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_mercator).default;
  }
});
Object.defineProperty(exports, "geoMercatorRaw", {
  enumerable: true,
  get: function get() {
    return _mercator.mercatorRaw;
  }
});

var _orthographic = __webpack_require__(517);

Object.defineProperty(exports, "geoOrthographic", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_orthographic).default;
  }
});
Object.defineProperty(exports, "geoOrthographicRaw", {
  enumerable: true,
  get: function get() {
    return _orthographic.orthographicRaw;
  }
});

var _stereographic = __webpack_require__(518);

Object.defineProperty(exports, "geoStereographic", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_stereographic).default;
  }
});
Object.defineProperty(exports, "geoStereographicRaw", {
  enumerable: true,
  get: function get() {
    return _stereographic.stereographicRaw;
  }
});

var _transverseMercator = __webpack_require__(519);

Object.defineProperty(exports, "geoTransverseMercator", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_transverseMercator).default;
  }
});
Object.defineProperty(exports, "geoTransverseMercatorRaw", {
  enumerable: true,
  get: function get() {
    return _transverseMercator.transverseMercatorRaw;
  }
});

var _rotation = __webpack_require__(108);

Object.defineProperty(exports, "geoRotation", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_rotation).default;
  }
});

var _stream = __webpack_require__(28);

Object.defineProperty(exports, "geoStream", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_stream).default;
  }
});

var _transform = __webpack_require__(111);

Object.defineProperty(exports, "geoTransform", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_transform).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.areaStream = exports.areaRingSum = undefined;

exports.default = function (object) {
  areaSum.reset();
  (0, _stream2.default)(object, areaStream);
  return areaSum * 2;
};

var _adder = __webpack_require__(45);

var _adder2 = _interopRequireDefault(_adder);

var _math = __webpack_require__(4);

var _noop = __webpack_require__(27);

var _noop2 = _interopRequireDefault(_noop);

var _stream = __webpack_require__(28);

var _stream2 = _interopRequireDefault(_stream);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var areaRingSum = exports.areaRingSum = (0, _adder2.default)();

var areaSum = (0, _adder2.default)(),
    lambda00,
    phi00,
    lambda0,
    cosPhi0,
    sinPhi0;

var areaStream = exports.areaStream = {
  point: _noop2.default,
  lineStart: _noop2.default,
  lineEnd: _noop2.default,
  polygonStart: function polygonStart() {
    areaRingSum.reset();
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function polygonEnd() {
    var areaRing = +areaRingSum;
    areaSum.add(areaRing < 0 ? _math.tau + areaRing : areaRing);
    this.lineStart = this.lineEnd = this.point = _noop2.default;
  },
  sphere: function sphere() {
    areaSum.add(_math.tau);
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaRingEnd() {
  areaPoint(lambda00, phi00);
}

function areaPointFirst(lambda, phi) {
  areaStream.point = areaPoint;
  lambda00 = lambda, phi00 = phi;
  lambda *= _math.radians, phi *= _math.radians;
  lambda0 = lambda, cosPhi0 = (0, _math.cos)(phi = phi / 2 + _math.quarterPi), sinPhi0 = (0, _math.sin)(phi);
}

function areaPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  phi = phi / 2 + _math.quarterPi; // half the angular distance from south pole

  // Spherical excess E for a spherical triangle with vertices: south pole,
  // previous point, current point.  Uses a formula derived from Cagnoli’s
  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
  var dLambda = lambda - lambda0,
      sdLambda = dLambda >= 0 ? 1 : -1,
      adLambda = sdLambda * dLambda,
      cosPhi = (0, _math.cos)(phi),
      sinPhi = (0, _math.sin)(phi),
      k = sinPhi0 * sinPhi,
      u = cosPhi0 * cosPhi + k * (0, _math.cos)(adLambda),
      v = k * sdLambda * (0, _math.sin)(adLambda);
  areaRingSum.add((0, _math.atan2)(v, u));

  // Advance the previous points.
  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.circleStream = circleStream;

exports.default = function () {
  var center = (0, _constant2.default)([0, 0]),
      radius = (0, _constant2.default)(90),
      precision = (0, _constant2.default)(6),
      ring,
      rotate,
      stream = { point: point };

  function point(x, y) {
    ring.push(x = rotate(x, y));
    x[0] *= _math.degrees, x[1] *= _math.degrees;
  }

  function circle() {
    var c = center.apply(this, arguments),
        r = radius.apply(this, arguments) * _math.radians,
        p = precision.apply(this, arguments) * _math.radians;
    ring = [];
    rotate = (0, _rotation.rotateRadians)(-c[0] * _math.radians, -c[1] * _math.radians, 0).invert;
    circleStream(stream, r, p, 1);
    c = { type: "Polygon", coordinates: [ring] };
    ring = rotate = null;
    return c;
  }

  circle.center = function (_) {
    return arguments.length ? (center = typeof _ === "function" ? _ : (0, _constant2.default)([+_[0], +_[1]]), circle) : center;
  };

  circle.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant2.default)(+_), circle) : radius;
  };

  circle.precision = function (_) {
    return arguments.length ? (precision = typeof _ === "function" ? _ : (0, _constant2.default)(+_), circle) : precision;
  };

  return circle;
};

var _cartesian = __webpack_require__(46);

var _constant = __webpack_require__(497);

var _constant2 = _interopRequireDefault(_constant);

var _math = __webpack_require__(4);

var _rotation = __webpack_require__(108);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generates a circle centered at [0°, 0°], with a given radius and precision.
function circleStream(stream, radius, delta, direction, t0, t1) {
  if (!delta) return;
  var cosRadius = (0, _math.cos)(radius),
      sinRadius = (0, _math.sin)(radius),
      step = direction * delta;
  if (t0 == null) {
    t0 = radius + direction * _math.tau;
    t1 = radius - step / 2;
  } else {
    t0 = circleRadius(cosRadius, t0);
    t1 = circleRadius(cosRadius, t1);
    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * _math.tau;
  }
  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
    point = (0, _cartesian.spherical)([cosRadius, -sinRadius * (0, _math.cos)(t), -sinRadius * (0, _math.sin)(t)]);
    stream.point(point[0], point[1]);
  }
}

// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
function circleRadius(cosRadius, point) {
  point = (0, _cartesian.cartesian)(point), point[0] -= cosRadius;
  (0, _cartesian.cartesianNormalizeInPlace)(point);
  var radius = (0, _math.acos)(-point[1]);
  return ((-point[2] < 0 ? -radius : radius) + _math.tau - _math.epsilon) % _math.tau;
}

/***/ }),
/* 206 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (a, b) {

  function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
  }

  if (a.invert && b.invert) compose.invert = function (x, y) {
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
  };

  return compose;
};

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.clipExtent = clipExtent;

exports.default = function () {
  var x0 = 0,
      y0 = 0,
      x1 = 960,
      y1 = 500,
      cache,
      cacheStream,
      clip;

  return clip = {
    stream: function stream(_stream) {
      return cache && cacheStream === _stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = _stream);
    },
    extent: function extent(_) {
      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
    }
  };
};

var _math = __webpack_require__(4);

var _buffer = __webpack_require__(208);

var _buffer2 = _interopRequireDefault(_buffer);

var _line = __webpack_require__(498);

var _line2 = _interopRequireDefault(_line);

var _polygon = __webpack_require__(209);

var _polygon2 = _interopRequireDefault(_polygon);

var _d3Array = __webpack_require__(14);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var clipMax = 1e9,
    clipMin = -clipMax;

// TODO Use d3-polygon’s polygonContains here for the ring check?
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

function clipExtent(x0, y0, x1, y1) {

  function visible(x, y) {
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
  }

  function interpolate(from, to, direction, stream) {
    var a = 0,
        a1 = 0;
    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
      do {
        stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
      } while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function corner(p, direction) {
    return (0, _math.abs)(p[0] - x0) < _math.epsilon ? direction > 0 ? 0 : 3 : (0, _math.abs)(p[0] - x1) < _math.epsilon ? direction > 0 ? 2 : 1 : (0, _math.abs)(p[1] - y0) < _math.epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
  }

  function compareIntersection(a, b) {
    return comparePoint(a.x, b.x);
  }

  function comparePoint(a, b) {
    var ca = corner(a, 1),
        cb = corner(b, 1);
    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
  }

  return function (stream) {
    var activeStream = stream,
        bufferStream = (0, _buffer2.default)(),
        segments,
        polygon,
        ring,
        x__,
        y__,
        v__,
        // first point
    x_,
        y_,
        v_,
        // previous point
    first,
        clean;

    var clipStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: polygonStart,
      polygonEnd: polygonEnd
    };

    function point(x, y) {
      if (visible(x, y)) activeStream.point(x, y);
    }

    function polygonInside() {
      var winding = 0;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
          if (a1 <= y1) {
            if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
          } else {
            if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
          }
        }
      }

      return winding;
    }

    // Buffer geometry within a polygon and then clip it en masse.
    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }

    function polygonEnd() {
      var startInside = polygonInside(),
          cleanInside = clean && startInside,
          visible = (segments = (0, _d3Array.merge)(segments)).length;
      if (cleanInside || visible) {
        stream.polygonStart();
        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }
        if (visible) {
          (0, _polygon2.default)(segments, compareIntersection, startInside, interpolate, stream);
        }
        stream.polygonEnd();
      }
      activeStream = stream, segments = polygon = ring = null;
    }

    function lineStart() {
      clipStream.point = linePoint;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    }

    // TODO rather than special-case polygons, simply handle them separately.
    // Ideally, coincident intersection points should be jittered to avoid
    // clipping issues.
    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }
      clipStream.point = point;
      if (v_) activeStream.lineEnd();
    }

    function linePoint(x, y) {
      var v = visible(x, y);
      if (polygon) ring.push([x, y]);
      if (first) {
        x__ = x, y__ = y, v__ = v;
        first = false;
        if (v) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v && v_) activeStream.point(x, y);else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
          if ((0, _line2.default)(a, b, x0, y0, x1, y1)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }
            activeStream.point(b[0], b[1]);
            if (!v) activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }
      x_ = x, y_ = y, v_ = v;
    }

    return clipStream;
  };
}

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var lines = [],
      line;
  return {
    point: function point(x, y) {
      line.push([x, y]);
    },
    lineStart: function lineStart() {
      lines.push(line = []);
    },
    lineEnd: _noop2.default,
    rejoin: function rejoin() {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function result() {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
};

var _noop = __webpack_require__(27);

var _noop2 = _interopRequireDefault(_noop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (segments, compareIntersection, startInside, interpolate, stream) {
  var subject = [],
      clip = [],
      i,
      n;

  segments.forEach(function (segment) {
    if ((n = segment.length - 1) <= 0) return;
    var n,
        p0 = segment[0],
        p1 = segment[n],
        x;

    // If the first and last points of a segment are coincident, then treat as a
    // closed ring. TODO if all rings are closed, then the winding order of the
    // exterior ring should be checked.
    if ((0, _pointEqual2.default)(p0, p1)) {
      stream.lineStart();
      for (i = 0; i < n; ++i) {
        stream.point((p0 = segment[i])[0], p0[1]);
      }stream.lineEnd();
      return;
    }

    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });

  if (!subject.length) return;

  clip.sort(compareIntersection);
  link(subject);
  link(clip);

  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }

  var start = subject[0],
      points,
      point;

  while (1) {
    // Find first unvisited intersection.
    var current = start,
        isSubject = true;
    while (current.v) {
      if ((current = current.n) === start) return;
    }points = current.z;
    stream.lineStart();
    do {
      current.v = current.o.v = true;
      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i) {
            stream.point((point = points[i])[0], point[1]);
          }
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }
        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;
          for (i = points.length - 1; i >= 0; --i) {
            stream.point((point = points[i])[0], point[1]);
          }
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }
        current = current.p;
      }
      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);
    stream.lineEnd();
  }
};

var _pointEqual = __webpack_require__(210);

var _pointEqual2 = _interopRequireDefault(_pointEqual);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other; // another intersection
  this.e = entry; // is an entry?
  this.v = false; // visited
  this.n = this.p = null; // next & previous
}

// A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.


function link(array) {
  if (!(n = array.length)) return;
  var n,
      i = 0,
      a = array[0],
      b;
  while (++i < n) {
    a.n = b = array[i];
    b.p = a;
    a = b;
  }
  a.n = b = array[0];
  b.p = a;
}

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (a, b) {
  return (0, _math.abs)(a[0] - b[0]) < _math.epsilon && (0, _math.abs)(a[1] - b[1]) < _math.epsilon;
};

var _math = __webpack_require__(4);

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (object) {
  lengthSum.reset();
  (0, _stream2.default)(object, lengthStream);
  return +lengthSum;
};

var _adder = __webpack_require__(45);

var _adder2 = _interopRequireDefault(_adder);

var _math = __webpack_require__(4);

var _noop = __webpack_require__(27);

var _noop2 = _interopRequireDefault(_noop);

var _stream = __webpack_require__(28);

var _stream2 = _interopRequireDefault(_stream);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lengthSum = (0, _adder2.default)(),
    lambda0,
    sinPhi0,
    cosPhi0;

var lengthStream = {
  sphere: _noop2.default,
  point: _noop2.default,
  lineStart: lengthLineStart,
  lineEnd: _noop2.default,
  polygonStart: _noop2.default,
  polygonEnd: _noop2.default
};

function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}

function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = _noop2.default;
}

function lengthPointFirst(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  lambda0 = lambda, sinPhi0 = (0, _math.sin)(phi), cosPhi0 = (0, _math.cos)(phi);
  lengthStream.point = lengthPoint;
}

function lengthPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var sinPhi = (0, _math.sin)(phi),
      cosPhi = (0, _math.cos)(phi),
      delta = (0, _math.abs)(lambda - lambda0),
      cosDelta = (0, _math.cos)(delta),
      sinDelta = (0, _math.sin)(delta),
      x = cosPhi * sinDelta,
      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,
      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;
  lengthSum.add((0, _math.atan2)((0, _math.sqrt)(x * x + y * y), z));
  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;
}

/***/ }),
/* 212 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (x) {
  return x;
};

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _noop = __webpack_require__(27);

var _noop2 = _interopRequireDefault(_noop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var x0 = Infinity,
    y0 = x0,
    x1 = -x0,
    y1 = x1;

var boundsStream = {
  point: boundsPoint,
  lineStart: _noop2.default,
  lineEnd: _noop2.default,
  polygonStart: _noop2.default,
  polygonEnd: _noop2.default,
  result: function result() {
    var bounds = [[x0, y0], [x1, y1]];
    x1 = y1 = -(y0 = x0 = Infinity);
    return bounds;
  }
};

function boundsPoint(x, y) {
  if (x < x0) x0 = x;
  if (x > x1) x1 = x;
  if (y < y0) y0 = y;
  if (y > y1) y1 = y;
}

exports.default = boundsStream;

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
    return (0, _conicEqualArea2.default)().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
};

var _conicEqualArea = __webpack_require__(109);

var _conicEqualArea2 = _interopRequireDefault(_conicEqualArea);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (pointVisible, clipLine, interpolate, start) {
  return function (rotate, sink) {
    var line = clipLine(sink),
        rotatedStart = rotate.invert(start[0], start[1]),
        ringBuffer = (0, _buffer2.default)(),
        ringSink = clipLine(ringBuffer),
        polygonStarted = false,
        polygon,
        segments,
        ring;

    var clip = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function polygonStart() {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function polygonEnd() {
        clip.point = point;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = (0, _d3Array.merge)(segments);
        var startInside = (0, _polygonContains2.default)(polygon, rotatedStart);
        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          (0, _polygon2.default)(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }
        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function sphere() {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };

    function point(lambda, phi) {
      var point = rotate(lambda, phi);
      if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);
    }

    function pointLine(lambda, phi) {
      var point = rotate(lambda, phi);
      line.point(point[0], point[1]);
    }

    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }

    function lineEnd() {
      clip.point = point;
      line.lineEnd();
    }

    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      var point = rotate(lambda, phi);
      ringSink.point(point[0], point[1]);
    }

    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }

    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();

      var clean = ringSink.clean(),
          ringSegments = ringBuffer.result(),
          i,
          n = ringSegments.length,
          m,
          segment,
          point;

      ring.pop();
      polygon.push(ring);
      ring = null;

      if (!n) return;

      // No intersections.
      if (clean & 1) {
        segment = ringSegments[0];
        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          for (i = 0; i < m; ++i) {
            sink.point((point = segment[i])[0], point[1]);
          }sink.lineEnd();
        }
        return;
      }

      // Rejoin connected segments.
      // TODO reuse ringBuffer.rejoin()?
      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

      segments.push(ringSegments.filter(validSegment));
    }

    return clip;
  };
};

var _buffer = __webpack_require__(208);

var _buffer2 = _interopRequireDefault(_buffer);

var _polygon = __webpack_require__(209);

var _polygon2 = _interopRequireDefault(_polygon);

var _math = __webpack_require__(4);

var _polygonContains = __webpack_require__(508);

var _polygonContains2 = _interopRequireDefault(_polygonContains);

var _d3Array = __webpack_require__(14);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validSegment(segment) {
  return segment.length > 1;
}

// Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.
function compareIntersection(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - _math.halfPi - _math.epsilon : _math.halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - _math.halfPi - _math.epsilon : _math.halfPi - b[1]);
}

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.fitSize = fitSize;
exports.fitExtent = fitExtent;

var _stream = __webpack_require__(28);

var _stream2 = _interopRequireDefault(_stream);

var _bounds = __webpack_require__(213);

var _bounds2 = _interopRequireDefault(_bounds);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function fit(project, extent, object) {
  var w = extent[1][0] - extent[0][0],
      h = extent[1][1] - extent[0][1],
      clip = project.clipExtent && project.clipExtent();

  project.scale(150).translate([0, 0]);

  if (clip != null) project.clipExtent(null);

  (0, _stream2.default)(object, project.stream(_bounds2.default));

  var b = _bounds2.default.result(),
      k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
      x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
      y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;

  if (clip != null) project.clipExtent(clip);

  return project.scale(k * 150).translate([x, y]);
}

function fitSize(project) {
  return function (size, object) {
    return fit(project, [[0, 0], size], object);
  };
}

function fitExtent(project) {
  return function (extent, object) {
    return fit(project, extent, object);
  };
}

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.equirectangularRaw = equirectangularRaw;

exports.default = function () {
  return (0, _index2.default)(equirectangularRaw).scale(152.63);
};

var _index = __webpack_require__(17);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}

equirectangularRaw.invert = equirectangularRaw;

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

var baseForOwn = __webpack_require__(528),
    createBaseEach = __webpack_require__(529);

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var variance = __webpack_require__(220);

/**
 * The [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation)
 * is the square root of the variance. This is also known as the population
 * standard deviation. It's useful for measuring the amount
 * of variation or dispersion in a set of values.
 *
 * Standard deviation is only appropriate for full-population knowledge: for
 * samples of a population, {@link sampleStandardDeviation} is
 * more appropriate.
 *
 * @param {Array<number>} x input
 * @returns {number} standard deviation
 * @example
 * variance([2, 4, 4, 4, 5, 5, 7, 9]); // => 4
 * standardDeviation([2, 4, 4, 4, 5, 5, 7, 9]); // => 2
 */
function standardDeviation(x /*: Array<number> */) /*:number*/{
    if (x.length === 1) {
        return 0;
    }
    var v = variance(x);
    return Math.sqrt(v);
}

module.exports = standardDeviation;

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var sumNthPowerDeviations = __webpack_require__(114);

/**
 * The [variance](http://en.wikipedia.org/wiki/Variance)
 * is the sum of squared deviations from the mean.
 *
 * This is an implementation of variance, not sample variance:
 * see the `sampleVariance` method if you want a sample measure.
 *
 * @param {Array<number>} x a population of one or more data points
 * @returns {number} variance: a value greater than or equal to zero.
 * zero indicates that all values are identical.
 * @throws {Error} if x's length is 0
 * @example
 * variance([1, 2, 3, 4, 5, 6]); // => 2.9166666666666665
 */
function variance(x /*: Array<number> */) /*:number*/{
    // The variance of no numbers is null
    if (x.length === 0) {
        throw new Error('variance requires at least one data point');
    }

    // Find the mean of squared deviations between the
    // mean value and each value.
    return sumNthPowerDeviations(x, 2) / x.length;
}

module.exports = variance;

/***/ }),
/* 221 */
/***/ (function(module, exports) {


/* @flow */

/**
 * Our default sum is the [Kahan-Babuska algorithm](https://pdfs.semanticscholar.org/1760/7d467cda1d0277ad272deb2113533131dc09.pdf).
 * This method is an improvement over the classical
 * [Kahan summation algorithm](https://en.wikipedia.org/wiki/Kahan_summation_algorithm).
 * It aims at computing the sum of a list of numbers while correcting for
 * floating-point errors. Traditionally, sums are calculated as many
 * successive additions, each one with its own floating-point roundoff. These
 * losses in precision add up as the number of numbers increases. This alternative
 * algorithm is more accurate than the simple way of calculating sums by simple
 * addition.
 *
 * This runs on `O(n)`, linear time in respect to the array.
 *
 * @param {Array<number>} x input
 * @return {number} sum of all input numbers
 * @example
 * sum([1, 2, 3]); // => 6
 */
function sum(x /*: Array<number> */) /*: number */{

    // If the array is empty, we needn't bother computing its sum
    if (x.length === 0) {
        return 0;
    }

    // Initializing the sum as the first number in the array
    var sum = x[0];

    // Keeping track of the floating-point error correction
    var correction = 0;

    var transition;

    for (var i = 1; i < x.length; i++) {
        transition = sum + x[i];

        // Here we need to update the correction in a different fashion
        // if the new absolute value is greater than the absolute sum
        if (Math.abs(sum) >= Math.abs(x[i])) {
            correction += sum - transition + x[i];
        } else {
            correction += x[i] - transition + sum;
        }

        sum = transition;
    }

    // Returning the corrected sum
    return sum + correction;
}

module.exports = sum;

/***/ }),
/* 222 */
/***/ (function(module, exports) {


/* @flow */

/**
 * Sort an array of numbers by their numeric value, ensuring that the
 * array is not changed in place.
 *
 * This is necessary because the default behavior of .sort
 * in JavaScript is to sort arrays as string values
 *
 *     [1, 10, 12, 102, 20].sort()
 *     // output
 *     [1, 10, 102, 12, 20]
 *
 * @param {Array<number>} x input array
 * @return {Array<number>} sorted array
 * @private
 * @example
 * numericSort([3, 2, 1]) // => [1, 2, 3]
 */
function numericSort(x /*: Array<number> */) /*: Array<number> */{
    return x
    // ensure the array is not changed in-place
    .slice()
    // comparator function that treats input as numeric
    .sort(function (a, b) {
        return a - b;
    });
}

module.exports = numericSort;

/***/ }),
/* 223 */
/***/ (function(module, exports) {


/* @flow */

/**
 * The [mode](http://bit.ly/W5K4Yt) is the number that appears in a list the highest number of times.
 * There can be multiple modes in a list: in the event of a tie, this
 * algorithm will return the most recently seen mode.
 *
 * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):
 * a method of finding a typical or central value of a set of numbers.
 *
 * This runs in `O(n)` because the input is sorted.
 *
 * @param {Array<number>} sorted a sample of one or more data points
 * @returns {number} mode
 * @throws {Error} if sorted is empty
 * @example
 * modeSorted([0, 0, 1]); // => 0
 */
function modeSorted(sorted /*: Array<number> */) /*:number*/{

    // Handle edge cases:
    // The mode of an empty list is undefined
    if (sorted.length === 0) {
        throw new Error('mode requires at least one data point');
    } else if (sorted.length === 1) {
        return sorted[0];
    }

    // This assumes it is dealing with an array of size > 1, since size
    // 0 and 1 are handled immediately. Hence it starts at index 1 in the
    // array.
    var last = sorted[0],

    // store the mode as we find new modes
    value = NaN,

    // store how many times we've seen the mode
    maxSeen = 0,

    // how many times the current candidate for the mode
    // has been seen
    seenThis = 1;

    // end at sorted.length + 1 to fix the case in which the mode is
    // the highest number that occurs in the sequence. the last iteration
    // compares sorted[i], which is undefined, to the highest number
    // in the series
    for (var i = 1; i < sorted.length + 1; i++) {
        // we're seeing a new number pass by
        if (sorted[i] !== last) {
            // the last number is the new mode since we saw it more
            // often than the old one
            if (seenThis > maxSeen) {
                maxSeen = seenThis;
                value = last;
            }
            seenThis = 1;
            last = sorted[i];
            // if this isn't a new number, it's one more occurrence of
            // the potential mode
        } else {
            seenThis++;
        }
    }
    return value;
}

module.exports = modeSorted;

/***/ }),
/* 224 */
/***/ (function(module, exports) {


/* @flow */

/**
 * The min is the lowest number in the array. This runs on `O(n)`, linear time in respect to the array
 *
 * @param {Array<number>} x sample of one or more data points
 * @throws {Error} if the the length of x is less than one
 * @returns {number} minimum value
 * @example
 * min([1, 5, -10, 100, 2]); // => -10
 */
function min(x /*: Array<number> */) /*:number*/{

    if (x.length === 0) {
        throw new Error('min requires at least one data point');
    }

    var value = x[0];
    for (var i = 1; i < x.length; i++) {
        // On the first iteration of this loop, min is
        // undefined and is thus made the minimum element in the array
        if (x[i] < value) {
            value = x[i];
        }
    }
    return value;
}

module.exports = min;

/***/ }),
/* 225 */
/***/ (function(module, exports) {


/* @flow */

/**
 * This computes the maximum number in an array.
 *
 * This runs on `O(n)`, linear time in respect to the array
 *
 * @param {Array<number>} x sample of one or more data points
 * @returns {number} maximum value
 * @throws {Error} if the the length of x is less than one
 * @example
 * max([1, 2, 3, 4]);
 * // => 4
 */
function max(x /*: Array<number> */) /*:number*/{

    if (x.length === 0) {
        throw new Error('max requires at least one data point');
    }

    var value = x[0];
    for (var i = 1; i < x.length; i++) {
        // On the first iteration of this loop, max is
        // undefined and is thus made the maximum element in the array
        if (x[i] > value) {
            value = x[i];
        }
    }
    return value;
}

module.exports = max;

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var quantile = __webpack_require__(115);

/**
 * The [median](http://en.wikipedia.org/wiki/Median) is
 * the middle number of a list. This is often a good indicator of 'the middle'
 * when there are outliers that skew the `mean()` value.
 * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):
 * a method of finding a typical or central value of a set of numbers.
 *
 * The median isn't necessarily one of the elements in the list: the value
 * can be the average of two elements if the list has an even length
 * and the two central values are different.
 *
 * @param {Array<number>} x input
 * @returns {number} median value
 * @example
 * median([10, 2, 5, 100, 2, 1]); // => 3.5
 */
function median(x /*: Array<number> */) /*:number*/{
  return +quantile(x, 0.5);
}

module.exports = median;

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var shuffleInPlace = __webpack_require__(228);

/**
 * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)
 * is a fast way to create a random permutation of a finite set. This is
 * a function around `shuffle_in_place` that adds the guarantee that
 * it will not modify its input.
 *
 * @param {Array} x sample of 0 or more numbers
 * @param {Function} [randomSource=Math.random] an optional entropy source that
 * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)
 * @return {Array} shuffled version of input
 * @example
 * var shuffled = shuffle([1, 2, 3, 4]);
 * shuffled; // = [2, 3, 1, 4] or any other random permutation
 */
function shuffle /*::<T>*/(x /*:Array<T>*/, randomSource /*:Function*/) {
  // slice the original array so that it is not modified
  var sample = x.slice();

  // and then shuffle that shallow-copied array, in place
  return shuffleInPlace(sample.slice(), randomSource);
}

module.exports = shuffle;

/***/ }),
/* 228 */
/***/ (function(module, exports) {


/* @flow */

/**
 * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)
 * in-place - which means that it **will change the order of the original
 * array by reference**.
 *
 * This is an algorithm that generates a random [permutation](https://en.wikipedia.org/wiki/Permutation)
 * of a set.
 *
 * @param {Array} x sample of one or more numbers
 * @param {Function} [randomSource=Math.random] an optional entropy source that
 * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)
 * @returns {Array} x
 * @example
 * var x = [1, 2, 3, 4];
 * shuffleInPlace(x);
 * // x is shuffled to a value like [2, 1, 4, 3]
 */
function shuffleInPlace(x /*:Array<any>*/, randomSource /*:Function*/) /*:Array<any>*/{

    // a custom random number source can be provided if you want to use
    // a fixed seed or another random number generator, like
    // [random-js](https://www.npmjs.org/package/random-js)
    randomSource = randomSource || Math.random;

    // store the current length of the x to determine
    // when no elements remain to shuffle.
    var length = x.length;

    // temporary is used to hold an item when it is being
    // swapped between indices.
    var temporary;

    // The index to swap at each stage.
    var index;

    // While there are still items to shuffle
    while (length > 0) {
        // chose a random index within the subset of the array
        // that is not yet shuffled
        index = Math.floor(randomSource() * length--);

        // store the value that we'll move temporarily
        temporary = x[length];

        // swap the value at `x[length]` with `x[index]`
        x[length] = x[index];
        x[index] = temporary;
    }

    return x;
}

module.exports = shuffleInPlace;

/***/ }),
/* 229 */
/***/ (function(module, exports) {


/* @flow */

/**
 * For a sorted input, counting the number of unique values
 * is possible in constant time and constant memory. This is
 * a simple implementation of the algorithm.
 *
 * Values are compared with `===`, so objects and non-primitive objects
 * are not handled in any special way.
 *
 * @param {Array<*>} x an array of any kind of value
 * @returns {number} count of unique values
 * @example
 * uniqueCountSorted([1, 2, 3]); // => 3
 * uniqueCountSorted([1, 1, 1]); // => 1
 */
function uniqueCountSorted(x /*: Array<any>*/) /*: number */{
    var uniqueValueCount = 0,
        lastSeenValue;
    for (var i = 0; i < x.length; i++) {
        if (i === 0 || x[i] !== lastSeenValue) {
            lastSeenValue = x[i];
            uniqueValueCount++;
        }
    }
    return uniqueValueCount;
}

module.exports = uniqueCountSorted;

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var mean = __webpack_require__(23);

/**
 * [Sample covariance](https://en.wikipedia.org/wiki/Sample_mean_and_sampleCovariance) of two datasets:
 * how much do the two datasets move together?
 * x and y are two datasets, represented as arrays of numbers.
 *
 * @param {Array<number>} x a sample of two or more data points
 * @param {Array<number>} y a sample of two or more data points
 * @throws {Error} if x and y do not have equal lengths
 * @throws {Error} if x or y have length of one or less
 * @returns {number} sample covariance
 * @example
 * sampleCovariance([1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]); // => -3.5
 */
function sampleCovariance(x /*:Array<number>*/, y /*:Array<number>*/) /*:number*/{

    // The two datasets must have the same length which must be more than 1
    if (x.length !== y.length) {
        throw new Error('sampleCovariance requires samples with equal lengths');
    }

    if (x.length < 2) {
        throw new Error('sampleCovariance requires at least two data points in each sample');
    }

    // determine the mean of each dataset so that we can judge each
    // value of the dataset fairly as the difference from the mean. this
    // way, if one dataset is [1, 2, 3] and [2, 3, 4], their covariance
    // does not suffer because of the difference in absolute values
    var xmean = mean(x),
        ymean = mean(y),
        sum = 0;

    // for each pair of values, the covariance increases when their
    // difference from the mean is associated - if both are well above
    // or if both are well below
    // the mean, the covariance increases significantly.
    for (var i = 0; i < x.length; i++) {
        sum += (x[i] - xmean) * (y[i] - ymean);
    }

    // this is Bessels' Correction: an adjustment made to sample statistics
    // that allows for the reduced degree of freedom entailed in calculating
    // values from samples rather than complete populations.
    var besselsCorrection = x.length - 1;

    // the covariance is weighted by the length of the datasets.
    return sum / besselsCorrection;
}

module.exports = sampleCovariance;

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var sampleVariance = __webpack_require__(117);

/**
 * The [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation)
 * is the square root of the variance.
 *
 * @param {Array<number>} x input array
 * @returns {number} sample standard deviation
 * @example
 * sampleStandardDeviation([2, 4, 4, 4, 5, 5, 7, 9]).toFixed(2);
 * // => '2.14'
 */
function sampleStandardDeviation(x /*:Array<number>*/) /*:number*/{
  // The standard deviation of no numbers is null
  var sampleVarianceX = sampleVariance(x);
  return Math.sqrt(sampleVarianceX);
}

module.exports = sampleStandardDeviation;

/***/ }),
/* 232 */
/***/ (function(module, exports) {


/* @flow */

/**
 * When combining two lists of values for which one already knows the means,
 * one does not have to necessary recompute the mean of the combined lists in
 * linear time. They can instead use this function to compute the combined
 * mean by providing the mean & number of values of the first list and the mean
 * & number of values of the second list.
 *
 * @since 3.0.0
 * @param {number} mean1 mean of the first list
 * @param {number} n1 number of items in the first list
 * @param {number} mean2 mean of the second list
 * @param {number} n2 number of items in the second list
 * @returns {number} the combined mean
 *
 * @example
 * combineMeans(5, 3, 4, 3); // => 4.5
 */
function combineMeans(mean1 /*: number*/, n1 /*: number */, mean2 /*: number*/, n2 /*: number */) /*: number */{
  return (mean1 * n1 + mean2 * n2) / (n1 + n2);
}

module.exports = combineMeans;

/***/ }),
/* 233 */
/***/ (function(module, exports) {


/* @flow */

var SQRT_2PI = Math.sqrt(2 * Math.PI);

function cumulativeDistribution(z) {
    var sum = z,
        tmp = z;

    // 15 iterations are enough for 4-digit precision
    for (var i = 1; i < 15; i++) {
        tmp *= z * z / (2 * i + 1);
        sum += tmp;
    }
    return Math.round((0.5 + sum / SQRT_2PI * Math.exp(-z * z / 2)) * 1e4) / 1e4;
}

/**
 * A standard normal table, also called the unit normal table or Z table,
 * is a mathematical table for the values of Φ (phi), which are the values of
 * the cumulative distribution function of the normal distribution.
 * It is used to find the probability that a statistic is observed below,
 * above, or between values on the standard normal distribution, and by
 * extension, any normal distribution.
 *
 * The probabilities are calculated using the
 * [Cumulative distribution function](https://en.wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function).
 * The table used is the cumulative, and not cumulative from 0 to mean
 * (even though the latter has 5 digits precision, instead of 4).
 */
var standardNormalTable /*: Array<number> */ = [];

for (var z = 0; z <= 3.09; z += 0.01) {
    standardNormalTable.push(cumulativeDistribution(z));
}

module.exports = standardNormalTable;

/***/ }),
/* 234 */
/***/ (function(module, exports) {


/* @flow */

/**
 * The Inverse [Gaussian error function](http://en.wikipedia.org/wiki/Error_function)
 * returns a numerical approximation to the value that would have caused
 * `errorFunction()` to return x.
 *
 * @param {number} x value of error function
 * @returns {number} estimated inverted value
 */
function inverseErrorFunction(x /*: number */) /*: number */{
    var a = 8 * (Math.PI - 3) / (3 * Math.PI * (4 - Math.PI));

    var inv = Math.sqrt(Math.sqrt(Math.pow(2 / (Math.PI * a) + Math.log(1 - x * x) / 2, 2) - Math.log(1 - x * x) / a) - (2 / (Math.PI * a) + Math.log(1 - x * x) / 2));

    if (x >= 0) {
        return inv;
    } else {
        return -inv;
    }
}

module.exports = inverseErrorFunction;

/***/ }),
/* 235 */
/***/ (function(module, exports) {

module.exports = function (fraction) {
  var step = 1 / fraction;
  var pArr = [];
  for (var i = 0; i <= 1; i = i + step) {
    pArr.push(i);
  }
  return pArr;
};

/***/ }),
/* 236 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is `null` or `undefined`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
 * @example
 *
 * _.isNil(null);
 * // => true
 *
 * _.isNil(void 0);
 * // => true
 *
 * _.isNil(NaN);
 * // => false
 */
function isNil(value) {
  return value == null;
}

module.exports = isNil;

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

var getPointAtLength = __webpack_require__(238);

var _require = __webpack_require__(0),
    geoPath = _require.geoPath;

var cloneItems = __webpack_require__(107);

var _require2 = __webpack_require__(2),
    GEO = _require2.GEO,
    registerConnector = _require2.registerConnector;

var geoPathGenerator = geoPath();

function GeoJSONConnector(data, options, dataView) {
  dataView.dataType = GEO;
  var features = cloneItems(data.features);

  // pre-process
  features.forEach(function (feature) {
    feature.name = feature.properties.name;
    feature.longitude = [];
    feature.latitude = [];
    var pathData = feature.pathData = geoPathGenerator(feature);
    var points = getPointAtLength(pathData);
    points._path.forEach(function (point) {
      feature.longitude.push(point[1]);
      feature.latitude.push(point[2]);
    });
    var centroid = geoPathGenerator.centroid(feature);
    feature.centroidX = centroid[0];
    feature.centroidY = centroid[1];
  });

  dataView.rows = features;
  return data.features;
}

registerConnector('geo', GeoJSONConnector);
registerConnector('geojson', GeoJSONConnector);
registerConnector('GeoJSON', GeoJSONConnector);

module.exports = GeoJSONConnector;

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(586);
var isarray = __webpack_require__(587);
var abs = __webpack_require__(588);

module.exports = Points;

function Points(path) {
    if (!(this instanceof Points)) return new Points(path);
    this._path = isarray(path) ? path : parse(path);
    this._path = abs(this._path);
    this._path = zToL(this._path);
}

Points.prototype.at = function (pos, opts) {
    return this._walk(pos, opts).pos;
};

Points.prototype.length = function () {
    return this._walk(null).length;
};

Points.prototype._walk = function (pos, opts) {
    var cur = [0, 0];
    var prev = [0, 0, 0];
    var len = 0;
    var fudge = 1.045;
    if (typeof pos === 'number') pos *= fudge;

    for (var i = 0; i < this._path.length; i++) {
        var p = this._path[i];
        if (p[0] === 'M') {
            cur[0] = p[1];
            cur[1] = p[2];
            if (pos === 0) {
                return { length: len, pos: cur };
            }
        } else if (p[0] === 'C') {
            prev[0] = cur[0];
            prev[1] = cur[1];
            prev[2] = len;

            var n = 100;
            for (var j = 0; j <= n; j++) {
                var t = j / n;
                var x = xof_C(p, t);
                var y = yof_C(p, t);
                len += dist(cur[0], cur[1], x, y);

                cur[0] = x;
                cur[1] = y;

                if (typeof pos === 'number' && len >= pos) {
                    var dv = (len - pos) / (len - prev[2]);

                    var npos = [cur[0] * (1 - dv) + prev[0] * dv, cur[1] * (1 - dv) + prev[1] * dv];
                    return { length: len, pos: npos };
                }
                prev[0] = cur[0];
                prev[1] = cur[1];
                prev[2] = len;
            }
        } else if (p[0] === 'Q') {
            prev[0] = cur[0];
            prev[1] = cur[1];
            prev[2] = len;

            var n = 100;
            for (var j = 0; j <= n; j++) {
                var t = j / n;
                var x = xof_Q(p, t);
                var y = yof_Q(p, t);
                len += dist(cur[0], cur[1], x, y);

                cur[0] = x;
                cur[1] = y;

                if (typeof pos === 'number' && len >= pos) {
                    var dv = (len - pos) / (len - prev[2]);

                    var npos = [cur[0] * (1 - dv) + prev[0] * dv, cur[1] * (1 - dv) + prev[1] * dv];
                    return { length: len, pos: npos };
                }
                prev[0] = cur[0];
                prev[1] = cur[1];
                prev[2] = len;
            }
        } else if (p[0] === 'L') {
            prev[0] = cur[0];
            prev[1] = cur[1];
            prev[2] = len;

            len += dist(cur[0], cur[1], p[1], p[2]);
            cur[0] = p[1];
            cur[1] = p[2];

            if (typeof pos === 'number' && len >= pos) {
                var dv = (len - pos) / (len - prev[2]);
                var npos = [cur[0] * (1 - dv) + prev[0] * dv, cur[1] * (1 - dv) + prev[1] * dv];
                return { length: len, pos: npos };
            }
            prev[0] = cur[0];
            prev[1] = cur[1];
            prev[2] = len;
        }
    }
    return { length: len / fudge, pos: cur };

    function xof_C(p, t) {
        return Math.pow(1 - t, 3) * cur[0] + 3 * Math.pow(1 - t, 2) * t * p[1] + 3 * (1 - t) * Math.pow(t, 2) * p[3] + Math.pow(t, 3) * p[5];
    }
    function yof_C(p, t) {
        return Math.pow(1 - t, 3) * cur[1] + 3 * Math.pow(1 - t, 2) * t * p[2] + 3 * (1 - t) * Math.pow(t, 2) * p[4] + Math.pow(t, 3) * p[6];
    }

    function xof_Q(p, t) {
        return Math.pow(1 - t, 2) * cur[0] + 2 * (1 - t) * t * p[1] + Math.pow(t, 2) * p[3];
    }
    function yof_Q(p, t) {
        return Math.pow(1 - t, 2) * cur[1] + 2 * (1 - t) * t * p[2] + Math.pow(t, 2) * p[4];
    }
};

function dist(ax, ay, bx, by) {
    var x = ax - bx;
    var y = ay - by;
    return Math.sqrt(x * x + y * y);
}

// Convert 'Z' segments to 'L' segments
function zToL(path) {
    var ret = [];
    var startPoint = ['L', 0, 0];

    for (var i = 0, len = path.length; i < len; i++) {
        var pt = path[i];
        switch (pt[0]) {
            case 'M':
                startPoint = ['L', pt[1], pt[2]];
                ret.push(pt);
                break;
            case 'Z':
                ret.push(startPoint);
                break;
            default:
                ret.push(pt);
        }
    }
    return ret;
}

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.packEnclose = packEnclose;

exports.default = function (circles) {
  packEnclose(circles);
  return circles;
};

var _enclose = __webpack_require__(240);

var _enclose2 = _interopRequireDefault(_enclose);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function place(a, b, c) {
  var ax = a.x,
      ay = a.y,
      da = b.r + c.r,
      db = a.r + c.r,
      dx = b.x - ax,
      dy = b.y - ay,
      dc = dx * dx + dy * dy;
  if (dc) {
    var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),
        y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
    c.x = ax + x * dx + y * dy;
    c.y = ay + x * dy - y * dx;
  } else {
    c.x = ax + db;
    c.y = ay;
  }
}

function intersects(a, b) {
  var dx = b.x - a.x,
      dy = b.y - a.y,
      dr = a.r + b.r;
  return dr * dr - 1e-6 > dx * dx + dy * dy;
}

function score(node) {
  var a = node._,
      b = node.next._,
      ab = a.r + b.r,
      dx = (a.x * b.r + b.x * a.r) / ab,
      dy = (a.y * b.r + b.y * a.r) / ab;
  return dx * dx + dy * dy;
}

function Node(circle) {
  this._ = circle;
  this.next = null;
  this.previous = null;
}

function packEnclose(circles) {
  if (!(n = circles.length)) return 0;

  var a, b, c, n, aa, ca, i, j, k, sj, sk;

  // Place the first circle.
  a = circles[0], a.x = 0, a.y = 0;
  if (!(n > 1)) return a.r;

  // Place the second circle.
  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
  if (!(n > 2)) return a.r + b.r;

  // Place the third circle.
  place(b, a, c = circles[2]);

  // Initialize the front-chain using the first three circles a, b and c.
  a = new Node(a), b = new Node(b), c = new Node(c);
  a.next = c.previous = b;
  b.next = a.previous = c;
  c.next = b.previous = a;

  // Attempt to place each remaining circle…
  pack: for (i = 3; i < n; ++i) {
    place(a._, b._, c = circles[i]), c = new Node(c);

    // Find the closest intersecting circle on the front-chain, if any.
    // “Closeness” is determined by linear distance along the front-chain.
    // “Ahead” or “behind” is likewise determined by linear distance.
    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
    do {
      if (sj <= sk) {
        if (intersects(j._, c._)) {
          b = j, a.next = b, b.previous = a, --i;
          continue pack;
        }
        sj += j._.r, j = j.next;
      } else {
        if (intersects(k._, c._)) {
          a = k, a.next = b, b.previous = a, --i;
          continue pack;
        }
        sk += k._.r, k = k.previous;
      }
    } while (j !== k.next);

    // Success! Insert the new circle c between a and b.
    c.previous = a, c.next = b, a.next = b.previous = b = c;

    // Compute the new closest circle pair to the centroid.
    aa = score(a);
    while ((c = c.next) !== b) {
      if ((ca = score(c)) < aa) {
        a = c, aa = ca;
      }
    }
    b = a.next;
  }

  // Compute the enclosing circle of the front chain.
  a = [b._], c = b;while ((c = c.next) !== b) {
    a.push(c._);
  }c = (0, _enclose2.default)(a);

  // Translate the circles to put the enclosing circle around the origin.
  for (i = 0; i < n; ++i) {
    a = circles[i], a.x -= c.x, a.y -= c.y;
  }return c.r;
}

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (circles) {
  var i = 0,
      n = (circles = (0, _array.shuffle)(_array.slice.call(circles))).length,
      B = [],
      p,
      e;

  while (i < n) {
    p = circles[i];
    if (e && enclosesWeak(e, p)) ++i;else e = encloseBasis(B = extendBasis(B, p)), i = 0;
  }

  return e;
};

var _array = __webpack_require__(604);

function extendBasis(B, p) {
  var i, j;

  if (enclosesWeakAll(p, B)) return [p];

  // If we get here then B must have at least one element.
  for (i = 0; i < B.length; ++i) {
    if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
      return [B[i], p];
    }
  }

  // If we get here then B must have at least two elements.
  for (i = 0; i < B.length - 1; ++i) {
    for (j = i + 1; j < B.length; ++j) {
      if (enclosesNot(encloseBasis2(B[i], B[j]), p) && enclosesNot(encloseBasis2(B[i], p), B[j]) && enclosesNot(encloseBasis2(B[j], p), B[i]) && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
        return [B[i], B[j], p];
      }
    }
  }

  // If we get here then something is very wrong.
  throw new Error();
}

function enclosesNot(a, b) {
  var dr = a.r - b.r,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr < 0 || dr * dr < dx * dx + dy * dy;
}

function enclosesWeak(a, b) {
  var dr = a.r - b.r + 1e-6,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}

function enclosesWeakAll(a, B) {
  for (var i = 0; i < B.length; ++i) {
    if (!enclosesWeak(a, B[i])) {
      return false;
    }
  }
  return true;
}

function encloseBasis(B) {
  switch (B.length) {
    case 1:
      return encloseBasis1(B[0]);
    case 2:
      return encloseBasis2(B[0], B[1]);
    case 3:
      return encloseBasis3(B[0], B[1], B[2]);
  }
}

function encloseBasis1(a) {
  return {
    x: a.x,
    y: a.y,
    r: a.r
  };
}

function encloseBasis2(a, b) {
  var x1 = a.x,
      y1 = a.y,
      r1 = a.r,
      x2 = b.x,
      y2 = b.y,
      r2 = b.r,
      x21 = x2 - x1,
      y21 = y2 - y1,
      r21 = r2 - r1,
      l = Math.sqrt(x21 * x21 + y21 * y21);
  return {
    x: (x1 + x2 + x21 / l * r21) / 2,
    y: (y1 + y2 + y21 / l * r21) / 2,
    r: (l + r1 + r2) / 2
  };
}

function encloseBasis3(a, b, c) {
  var x1 = a.x,
      y1 = a.y,
      r1 = a.r,
      x2 = b.x,
      y2 = b.y,
      r2 = b.r,
      x3 = c.x,
      y3 = c.y,
      r3 = c.r,
      a2 = x1 - x2,
      a3 = x1 - x3,
      b2 = y1 - y2,
      b3 = y1 - y3,
      c2 = r2 - r1,
      c3 = r3 - r1,
      d1 = x1 * x1 + y1 * y1 - r1 * r1,
      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
      ab = a3 * b2 - a2 * b3,
      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
      xb = (b3 * c2 - b2 * c3) / ab,
      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
      yb = (a2 * c3 - a3 * c2) / ab,
      A = xb * xb + yb * yb - 1,
      B = 2 * (r1 + xa * xb + ya * yb),
      C = xa * xa + ya * ya - r1 * r1,
      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
  return {
    x: x1 + xa + xb * r,
    y: y1 + ya + yb * r,
    r: r
  };
}

/***/ }),
/* 241 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.constantZero = constantZero;

exports.default = function (x) {
  return function () {
    return x;
  };
};

function constantZero() {
  return 0;
}

/***/ }),
/* 242 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (node) {
  node.x0 = Math.round(node.x0);
  node.y0 = Math.round(node.y0);
  node.x1 = Math.round(node.x1);
  node.y1 = Math.round(node.y1);
};

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (topology) {
  var t = (0, _transform2.default)(topology.transform),
      key,
      x0 = Infinity,
      y0 = x0,
      x1 = -x0,
      y1 = -x0;

  function bboxPoint(p) {
    p = t(p);
    if (p[0] < x0) x0 = p[0];
    if (p[0] > x1) x1 = p[0];
    if (p[1] < y0) y0 = p[1];
    if (p[1] > y1) y1 = p[1];
  }

  function bboxGeometry(o) {
    switch (o.type) {
      case "GeometryCollection":
        o.geometries.forEach(bboxGeometry);break;
      case "Point":
        bboxPoint(o.coordinates);break;
      case "MultiPoint":
        o.coordinates.forEach(bboxPoint);break;
    }
  }

  topology.arcs.forEach(function (arc) {
    var i = -1,
        n = arc.length,
        p;
    while (++i < n) {
      p = t(arc[i], i);
      if (p[0] < x0) x0 = p[0];
      if (p[0] > x1) x1 = p[0];
      if (p[1] < y0) y0 = p[1];
      if (p[1] > y1) y1 = p[1];
    }
  });

  for (key in topology.objects) {
    bboxGeometry(topology.objects[key]);
  }

  return [x0, y0, x1, y1];
};

var _transform = __webpack_require__(123);

var _transform2 = _interopRequireDefault(_transform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 244 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (x) {
  return x;
};

/***/ }),
/* 245 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (topology, arcs) {
  var stitchedArcs = {},
      fragmentByStart = {},
      fragmentByEnd = {},
      fragments = [],
      emptyIndex = -1;

  // Stitch empty arcs first, since they may be subsumed by other arcs.
  arcs.forEach(function (i, j) {
    var arc = topology.arcs[i < 0 ? ~i : i],
        t;
    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
    }
  });

  arcs.forEach(function (i) {
    var e = ends(i),
        start = e[0],
        end = e[1],
        f,
        g;

    if (f = fragmentByEnd[start]) {
      delete fragmentByEnd[f.end];
      f.push(i);
      f.end = end;
      if (g = fragmentByStart[end]) {
        delete fragmentByStart[g.start];
        var fg = g === f ? f : f.concat(g);
        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else if (f = fragmentByStart[end]) {
      delete fragmentByStart[f.start];
      f.unshift(i);
      f.start = start;
      if (g = fragmentByEnd[start]) {
        delete fragmentByEnd[g.end];
        var gf = g === f ? f : g.concat(f);
        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else {
      f = [i];
      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
    }
  });

  function ends(i) {
    var arc = topology.arcs[i < 0 ? ~i : i],
        p0 = arc[0],
        p1;
    if (topology.transform) p1 = [0, 0], arc.forEach(function (dp) {
      p1[0] += dp[0], p1[1] += dp[1];
    });else p1 = arc[arc.length - 1];
    return i < 0 ? [p1, p0] : [p0, p1];
  }

  function flush(fragmentByEnd, fragmentByStart) {
    for (var k in fragmentByEnd) {
      var f = fragmentByEnd[k];
      delete fragmentByStart[f.start];
      delete f.start;
      delete f.end;
      f.forEach(function (i) {
        stitchedArcs[i < 0 ? ~i : i] = 1;
      });
      fragments.push(f);
    }
  }

  flush(fragmentByEnd, fragmentByStart);
  flush(fragmentByStart, fragmentByEnd);
  arcs.forEach(function (i) {
    if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]);
  });

  return fragments;
};

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (transform) {
    if (transform == null) return _identity2.default;
    var x0,
        y0,
        kx = transform.scale[0],
        ky = transform.scale[1],
        dx = transform.translate[0],
        dy = transform.translate[1];
    return function (input, i) {
        if (!i) x0 = y0 = 0;
        var j = 2,
            n = input.length,
            output = new Array(n),
            x1 = Math.round((input[0] - dx) / kx),
            y1 = Math.round((input[1] - dy) / ky);
        output[0] = x1 - x0, x0 = x1;
        output[1] = y1 - y0, y0 = y1;
        while (j < n) {
            output[j] = input[j], ++j;
        }return output;
    };
};

var _identity = __webpack_require__(244);

var _identity2 = _interopRequireDefault(_identity);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

var baseIndexOf = __webpack_require__(625);

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

module.exports = arrayIncludes;

/***/ }),
/* 248 */
/***/ (function(module, exports) {

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

module.exports = arrayIncludesWith;

/***/ }),
/* 249 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeReverse = arrayProto.reverse;

/**
 * Reverses `array` so that the first element becomes the last, the second
 * element becomes the second to last, and so on.
 *
 * **Note:** This method mutates `array` and is based on
 * [`Array#reverse`](https://mdn.io/Array/reverse).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @returns {Array} Returns `array`.
 * @example
 *
 * var array = [1, 2, 3];
 *
 * _.reverse(array);
 * // => [3, 2, 1]
 *
 * console.log(array);
 * // => [3, 2, 1]
 */
function reverse(array) {
  return array == null ? array : nativeReverse.call(array);
}

module.exports = reverse;

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.left = left;
exports.right = right;
exports.justify = justify;
exports.center = center;

var _d3Array = __webpack_require__(14);

function targetDepth(d) {
  return d.target.depth;
}

function left(node) {
  return node.depth;
}

function right(node, n) {
  return n - 1 - node.height;
}

function justify(node, n) {
  return node.sourceLinks.length ? node.depth : n - 1;
}

function center(node) {
  return node.targetLinks.length ? node.depth : node.sourceLinks.length ? (0, _d3Array.min)(node.sourceLinks, targetDepth) - 1 : 0;
}

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var x0 = _point.x,
      x1 = null,
      y0 = (0, _constant2.default)(0),
      y1 = _point.y,
      defined = (0, _constant2.default)(true),
      context = null,
      curve = _linear2.default,
      output = null;

  function area(data) {
    var i,
        j,
        k,
        n = data.length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);

    if (context == null) output = curve(buffer = (0, _d3Path.path)());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return (0, _line2.default)().defined(defined).curve(curve).context(context);
  }

  area.x = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constant2.default)(+_), x1 = null, area) : x0;
  };

  area.x0 = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constant2.default)(+_), area) : x0;
  };

  area.x1 = function (_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constant2.default)(+_), area) : x1;
  };

  area.y = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constant2.default)(+_), y1 = null, area) : y0;
  };

  area.y0 = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constant2.default)(+_), area) : y0;
  };

  area.y1 = function (_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constant2.default)(+_), area) : y1;
  };

  area.lineX0 = area.lineY0 = function () {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function () {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function () {
    return arealine().x(x1).y(y0);
  };

  area.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constant2.default)(!!_), area) : defined;
  };

  area.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
};

var _d3Path = __webpack_require__(29);

var _constant = __webpack_require__(31);

var _constant2 = _interopRequireDefault(_constant);

var _linear = __webpack_require__(72);

var _linear2 = _interopRequireDefault(_linear);

var _line = __webpack_require__(129);

var _line2 = _interopRequireDefault(_line);

var _point = __webpack_require__(130);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.curveRadialLinear = undefined;
exports.default = curveRadial;

var _linear = __webpack_require__(72);

var _linear2 = _interopRequireDefault(_linear);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var curveRadialLinear = exports.curveRadialLinear = curveRadial(_linear2.default);

function Radial(curve) {
  this._curve = curve;
}

Radial.prototype = {
  areaStart: function areaStart() {
    this._curve.areaStart();
  },
  areaEnd: function areaEnd() {
    this._curve.areaEnd();
  },
  lineStart: function lineStart() {
    this._curve.lineStart();
  },
  lineEnd: function lineEnd() {
    this._curve.lineEnd();
  },
  point: function point(a, r) {
    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
  }
};

function curveRadial(curve) {

  function radial(context) {
    return new Radial(curve(context));
  }

  radial._curve = curve;

  return radial;
}

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.lineRadial = lineRadial;

exports.default = function () {
  return lineRadial((0, _line2.default)().curve(_radial.curveRadialLinear));
};

var _radial = __webpack_require__(252);

var _radial2 = _interopRequireDefault(_radial);

var _line = __webpack_require__(129);

var _line2 = _interopRequireDefault(_line);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function lineRadial(l) {
  var c = l.curve;

  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;

  l.curve = function (_) {
    return arguments.length ? c((0, _radial2.default)(_)) : c()._curve;
  };

  return l;
}

/***/ }),
/* 254 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (x, y) {
  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
};

/***/ }),
/* 255 */
/***/ (function(module, exports) {

exports.__esModule = true;
var slice = exports.slice = Array.prototype.slice;

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _math = __webpack_require__(49);

exports.default = {
  draw: function draw(context, size) {
    var r = Math.sqrt(size / _math.pi);
    context.moveTo(r, 0);
    context.arc(0, 0, r, 0, _math.tau);
  }
};

/***/ }),
/* 257 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.default = {
  draw: function draw(context, size) {
    var r = Math.sqrt(size / 5) / 2;
    context.moveTo(-3 * r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, -3 * r);
    context.lineTo(r, -3 * r);
    context.lineTo(r, -r);
    context.lineTo(3 * r, -r);
    context.lineTo(3 * r, r);
    context.lineTo(r, r);
    context.lineTo(r, 3 * r);
    context.lineTo(-r, 3 * r);
    context.lineTo(-r, r);
    context.lineTo(-3 * r, r);
    context.closePath();
  }
};

/***/ }),
/* 258 */
/***/ (function(module, exports) {

exports.__esModule = true;
var tan30 = Math.sqrt(1 / 3),
    tan30_2 = tan30 * 2;

exports.default = {
  draw: function draw(context, size) {
    var y = Math.sqrt(size / tan30_2),
        x = y * tan30;
    context.moveTo(0, -y);
    context.lineTo(x, 0);
    context.lineTo(0, y);
    context.lineTo(-x, 0);
    context.closePath();
  }
};

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _math = __webpack_require__(49);

var ka = 0.89081309152928522810,
    kr = Math.sin(_math.pi / 10) / Math.sin(7 * _math.pi / 10),
    kx = Math.sin(_math.tau / 10) * kr,
    ky = -Math.cos(_math.tau / 10) * kr;

exports.default = {
    draw: function draw(context, size) {
        var r = Math.sqrt(size * ka),
            x = kx * r,
            y = ky * r;
        context.moveTo(0, -r);
        context.lineTo(x, y);
        for (var i = 1; i < 5; ++i) {
            var a = _math.tau * i / 5,
                c = Math.cos(a),
                s = Math.sin(a);
            context.lineTo(s * r, -c * r);
            context.lineTo(c * x - s * y, s * x + c * y);
        }
        context.closePath();
    }
};

/***/ }),
/* 260 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.default = {
  draw: function draw(context, size) {
    var w = Math.sqrt(size),
        x = -w / 2;
    context.rect(x, x, w, w);
  }
};

/***/ }),
/* 261 */
/***/ (function(module, exports) {

exports.__esModule = true;
var sqrt3 = Math.sqrt(3);

exports.default = {
  draw: function draw(context, size) {
    var y = -Math.sqrt(size / (sqrt3 * 3));
    context.moveTo(0, y * 2);
    context.lineTo(-sqrt3 * y, -y);
    context.lineTo(sqrt3 * y, -y);
    context.closePath();
  }
};

/***/ }),
/* 262 */
/***/ (function(module, exports) {

exports.__esModule = true;
var c = -0.5,
    s = Math.sqrt(3) / 2,
    k = 1 / Math.sqrt(12),
    a = (k / 2 + 1) * 3;

exports.default = {
    draw: function draw(context, size) {
        var r = Math.sqrt(size / a),
            x0 = r / 2,
            y0 = r * k,
            x1 = x0,
            y1 = r * k + r,
            x2 = -x1,
            y2 = y1;
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
        context.lineTo(x2, y2);
        context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
        context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
        context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
        context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
        context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
        context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
        context.closePath();
    }
};

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.CardinalClosed = CardinalClosed;

var _noop = __webpack_require__(73);

var _noop2 = _interopRequireDefault(_noop);

var _cardinal = __webpack_require__(75);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalClosed.prototype = {
  areaStart: _noop2.default,
  areaEnd: _noop2.default,
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
      case 2:
        {
          this._context.lineTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
      case 3:
        {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
    }
  },
  point: function point(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0:
        this._point = 1;this._x3 = x, this._y3 = y;break;
      case 1:
        this._point = 2;this._context.moveTo(this._x4 = x, this._y4 = y);break;
      case 2:
        this._point = 3;this._x5 = x, this._y5 = y;break;
      default:
        (0, _cardinal.point)(this, x, y);break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

exports.default = function custom(tension) {

  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.CardinalOpen = CardinalOpen;

var _cardinal = __webpack_require__(75);

function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalOpen.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function point(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0:
        this._point = 1;break;
      case 1:
        this._point = 2;break;
      case 2:
        this._point = 3;this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);break;
      case 3:
        this._point = 4; // proceed
      default:
        (0, _cardinal.point)(this, x, y);break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

exports.default = function custom(tension) {

  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.createCell = createCell;
exports.cellHalfedgeStart = cellHalfedgeStart;
exports.cellHalfedgeEnd = cellHalfedgeEnd;
exports.sortCellHalfedges = sortCellHalfedges;
exports.clipCells = clipCells;

var _Edge = __webpack_require__(134);

var _Diagram = __webpack_require__(52);

function createCell(site) {
  return _Diagram.cells[site.index] = {
    site: site,
    halfedges: []
  };
}

function cellHalfedgeAngle(cell, edge) {
  var site = cell.site,
      va = edge.left,
      vb = edge.right;
  if (site === vb) vb = va, va = site;
  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
  if (site === va) va = edge[1], vb = edge[0];else va = edge[0], vb = edge[1];
  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
}

function cellHalfedgeStart(cell, edge) {
  return edge[+(edge.left !== cell.site)];
}

function cellHalfedgeEnd(cell, edge) {
  return edge[+(edge.left === cell.site)];
}

function sortCellHalfedges() {
  for (var i = 0, n = _Diagram.cells.length, cell, halfedges, j, m; i < n; ++i) {
    if ((cell = _Diagram.cells[i]) && (m = (halfedges = cell.halfedges).length)) {
      var index = new Array(m),
          array = new Array(m);
      for (j = 0; j < m; ++j) {
        index[j] = j, array[j] = cellHalfedgeAngle(cell, _Diagram.edges[halfedges[j]]);
      }index.sort(function (i, j) {
        return array[j] - array[i];
      });
      for (j = 0; j < m; ++j) {
        array[j] = halfedges[index[j]];
      }for (j = 0; j < m; ++j) {
        halfedges[j] = array[j];
      }
    }
  }
}

function clipCells(x0, y0, x1, y1) {
  var nCells = _Diagram.cells.length,
      iCell,
      cell,
      site,
      iHalfedge,
      halfedges,
      nHalfedges,
      start,
      startX,
      startY,
      end,
      endX,
      endY,
      cover = true;

  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = _Diagram.cells[iCell]) {
      site = cell.site;
      halfedges = cell.halfedges;
      iHalfedge = halfedges.length;

      // Remove any dangling clipped edges.
      while (iHalfedge--) {
        if (!_Diagram.edges[halfedges[iHalfedge]]) {
          halfedges.splice(iHalfedge, 1);
        }
      }

      // Insert any border edges as necessary.
      iHalfedge = 0, nHalfedges = halfedges.length;
      while (iHalfedge < nHalfedges) {
        end = cellHalfedgeEnd(cell, _Diagram.edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
        start = cellHalfedgeStart(cell, _Diagram.edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
        if (Math.abs(endX - startX) > _Diagram.epsilon || Math.abs(endY - startY) > _Diagram.epsilon) {
          halfedges.splice(iHalfedge, 0, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, end, Math.abs(endX - x0) < _Diagram.epsilon && y1 - endY > _Diagram.epsilon ? [x0, Math.abs(startX - x0) < _Diagram.epsilon ? startY : y1] : Math.abs(endY - y1) < _Diagram.epsilon && x1 - endX > _Diagram.epsilon ? [Math.abs(startY - y1) < _Diagram.epsilon ? startX : x1, y1] : Math.abs(endX - x1) < _Diagram.epsilon && endY - y0 > _Diagram.epsilon ? [x1, Math.abs(startX - x1) < _Diagram.epsilon ? startY : y0] : Math.abs(endY - y0) < _Diagram.epsilon && endX - x0 > _Diagram.epsilon ? [Math.abs(startY - y0) < _Diagram.epsilon ? startX : x0, y0] : null)) - 1);
          ++nHalfedges;
        }
      }

      if (nHalfedges) cover = false;
    }
  }

  // If there weren’t any edges, have the closest site cover the extent.
  // It doesn’t matter which corner of the extent we measure!
  if (cover) {
    var dx,
        dy,
        d2,
        dc = Infinity;

    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
      if (cell = _Diagram.cells[iCell]) {
        site = cell.site;
        dx = site[0] - x0;
        dy = site[1] - y0;
        d2 = dx * dx + dy * dy;
        if (d2 < dc) dc = d2, cover = cell;
      }
    }

    if (cover) {
      var v00 = [x0, y0],
          v01 = [x0, y1],
          v11 = [x1, y1],
          v10 = [x1, y0];
      cover.halfedges.push(_Diagram.edges.push((0, _Edge.createBorderEdge)(site = cover.site, v00, v01)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v01, v11)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v11, v10)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v10, v00)) - 1);
    }
  }

  // Lastly delete any cells with no edges; these were entirely clipped.
  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = _Diagram.cells[iCell]) {
      if (!cell.halfedges.length) {
        delete _Diagram.cells[iCell];
      }
    }
  }
}

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.firstCircle = undefined;
exports.attachCircle = attachCircle;
exports.detachCircle = detachCircle;

var _RedBlackTree = __webpack_require__(133);

var _Diagram = __webpack_require__(52);

var circlePool = [];

var firstCircle = exports.firstCircle = undefined;

function Circle() {
  (0, _RedBlackTree.RedBlackNode)(this);
  this.x = this.y = this.arc = this.site = this.cy = null;
}

function attachCircle(arc) {
  var lArc = arc.P,
      rArc = arc.N;

  if (!lArc || !rArc) return;

  var lSite = lArc.site,
      cSite = arc.site,
      rSite = rArc.site;

  if (lSite === rSite) return;

  var bx = cSite[0],
      by = cSite[1],
      ax = lSite[0] - bx,
      ay = lSite[1] - by,
      cx = rSite[0] - bx,
      cy = rSite[1] - by;

  var d = 2 * (ax * cy - ay * cx);
  if (d >= -_Diagram.epsilon2) return;

  var ha = ax * ax + ay * ay,
      hc = cx * cx + cy * cy,
      x = (cy * ha - ay * hc) / d,
      y = (ax * hc - cx * ha) / d;

  var circle = circlePool.pop() || new Circle();
  circle.arc = arc;
  circle.site = cSite;
  circle.x = x + bx;
  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom

  arc.circle = circle;

  var before = null,
      node = _Diagram.circles._;

  while (node) {
    if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
      if (node.L) node = node.L;else {
        before = node.P;break;
      }
    } else {
      if (node.R) node = node.R;else {
        before = node;break;
      }
    }
  }

  _Diagram.circles.insert(before, circle);
  if (!before) exports.firstCircle = firstCircle = circle;
}

function detachCircle(arc) {
  var circle = arc.circle;
  if (circle) {
    if (!circle.P) exports.firstCircle = firstCircle = circle.N;
    _Diagram.circles.remove(circle);
    circlePool.push(circle);
    (0, _RedBlackTree.RedBlackNode)(circle);
    arc.circle = null;
  }
}

/***/ }),
/* 267 */
/***/ (function(module, exports) {

/*
 * @reference: https://github.com/jasondavies/science.js/blob/master/src/stats/kernel.js
 * @reference: https://github.com/Planeshifter/kernel-smooth/blob/master/lib/index.js#L16
 */
function uniform(u) {
  return Math.abs(u) <= 1 ? 0.5 : 0;
}
function tricubed(u) {
  var abs = 1 - Math.pow(Math.abs(u), 3);
  return Math.pow(abs, 3);
}
module.exports = {
  boxcar: uniform,
  cosine: function cosine(u) {
    if (Math.abs(u) <= 1) {
      return Math.PI / 4 * Math.cos(Math.PI / 2 * u);
    }
    return 0;
  },
  epanechnikov: function epanechnikov(u) {
    return Math.abs(u) < 1 ? 0.75 * (1 - u * u) : 0;
  },
  gaussian: function gaussian(u) {
    // return 1 / Math.sqrt(2 * Math.PI) * Math.exp(-0.5 * u * u);
    return 0.3989422804 * Math.exp(-0.5 * u * u);
  },
  quartic: function quartic(u) {
    if (Math.abs(u) < 1) {
      var tmp = 1 - u * u;
      return 15 / 16 * tmp * tmp;
    }
    return 0;
  },
  triangular: function triangular(u) {
    var abs = Math.abs(u);
    return abs < 1 ? 1 - abs : 0;
  },
  tricube: function tricube(u) {
    return Math.abs(u) < 1 ? 70 / 81 * tricubed(u) : 0;
  },
  triweight: function triweight(u) {
    if (Math.abs(u) < 1) {
      var tmp = 1 - u * u;
      return 35 / 32 * tmp * tmp * tmp;
    }
    return 0;
  },

  uniform: uniform
};

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

// extra APIs
__webpack_require__(269);
__webpack_require__(521);
__webpack_require__(522);
__webpack_require__(531);

// connectors
__webpack_require__(578);
__webpack_require__(581);
__webpack_require__(585);
__webpack_require__(237);
__webpack_require__(589);
__webpack_require__(590);
__webpack_require__(612);

// transforms
// static
__webpack_require__(620);
__webpack_require__(621);
__webpack_require__(622);
__webpack_require__(629);
__webpack_require__(630);
__webpack_require__(631);
__webpack_require__(632);
__webpack_require__(633);
__webpack_require__(634);
__webpack_require__(636);
__webpack_require__(637);
__webpack_require__(638);
__webpack_require__(645);
// imputation
__webpack_require__(646);
__webpack_require__(647);
// statistics
__webpack_require__(651);
// regression
__webpack_require__(656);
// binning
__webpack_require__(658);
__webpack_require__(659);
__webpack_require__(660);
__webpack_require__(661);
// geo
__webpack_require__(662);
__webpack_require__(663);
__webpack_require__(664);
// diagram
__webpack_require__(665);
__webpack_require__(666);
__webpack_require__(702);
// hierarchy
__webpack_require__(708);
__webpack_require__(709);
// tag cloud
__webpack_require__(710);
// kernel smoothing
__webpack_require__(712);
__webpack_require__(713);

module.exports = __webpack_require__(2);

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);

var _require = __webpack_require__(0),
    _geoArea = _require.geoArea,
    _geoCentroid = _require.geoCentroid,
    _geoContains = _require.geoContains,
    _geoDistance = _require.geoDistance,
    _geoLength = _require.geoLength;

var _require2 = __webpack_require__(169),
    _geoProject = _require2.geoProject;

var View = __webpack_require__(42);
var getGeoProjection = __webpack_require__(202);

assign(View.prototype, {
  // geo maintain
  geoArea: function geoArea(feature) {
    return _geoArea(feature);
  },
  geoAreaByName: function geoAreaByName(name) {
    return _geoArea(this.geoFeatureByName(name));
  },
  geoCentroid: function geoCentroid(feature) {
    return _geoCentroid(feature);
  },
  geoCentroidByName: function geoCentroidByName(name) {
    return _geoCentroid(this.geoFeatureByName(name));
  },
  geoDistance: function geoDistance(p1, p2) {
    return _geoDistance(p1, p2);
  },
  geoLength: function geoLength(feature) {
    return _geoLength(feature);
  },
  geoLengthByName: function geoLengthByName(name) {
    return _geoLength(this.geoFeatureByName(name));
  },
  geoContains: function geoContains(feature, position /* [longitude, latitude] */) {
    return _geoContains(feature, position);
  },
  geoFeatureByName: function geoFeatureByName(name) {
    var rows = this.rows;
    var result = void 0;
    rows.some(function (feature) {
      if (feature.name === name) {
        result = feature;
        return true;
      }
      return false;
    });
    return result;
  },
  geoFeatureByPosition: function geoFeatureByPosition(position) {
    var rows = this.rows;
    var result = void 0;
    rows.some(function (feature) {
      if (_geoContains(feature, position)) {
        result = feature;
        return true;
      }
      return false;
    });
    return result;
  },
  geoNameByPosition: function geoNameByPosition(position) {
    var feature = this.geoFeatureByPosition(position);
    if (feature) {
      return feature.name;
    }
  },

  // projection
  geoProject: function geoProject(feature, projection) {
    projection = getGeoProjection(projection);
    return _geoProject(feature, projection);
  },
  geoProjectByName: function geoProjectByName(name, projection) {
    projection = getGeoProjection(projection);
    return _geoProject(this.geoFeatureByName(name), projection);
  },
  geoProjectPosition: function geoProjectPosition(position, projection) {
    projection = getGeoProjection(projection);
    return projection(position);
  },
  geoProjectInvert: function geoProjectInvert(point /* [x, y] */, projection) {
    projection = getGeoProjection(projection);
    return projection.invert(point);
  }
});

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(8),
    isMasked = __webpack_require__(274),
    isObject = __webpack_require__(12),
    toSource = __webpack_require__(137);

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

/***/ }),
/* 271 */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

var _Symbol = __webpack_require__(32);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

/***/ }),
/* 273 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

var coreJsData = __webpack_require__(275);

/** Used to detect methods masquerading as native. */
var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}

module.exports = isMasked;

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(13);

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;

/***/ }),
/* 276 */
/***/ (function(module, exports) {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

var baseRest = __webpack_require__(77),
    isIterateeCall = __webpack_require__(140);

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function (object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;

/***/ }),
/* 278 */
/***/ (function(module, exports) {

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);
    case 1:
      return func.call(thisArg, args[0]);
    case 2:
      return func.call(thisArg, args[0], args[1]);
    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

var constant = __webpack_require__(280),
    defineProperty = __webpack_require__(135),
    identity = __webpack_require__(37);

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function (func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;

/***/ }),
/* 280 */
/***/ (function(module, exports) {

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function () {
    return value;
  };
}

module.exports = constant;

/***/ }),
/* 281 */
/***/ (function(module, exports) {

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function () {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;

/***/ }),
/* 282 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(19),
    isObjectLike = __webpack_require__(15);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

/***/ }),
/* 284 */
/***/ (function(module, exports) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(19),
    isLength = __webpack_require__(78),
    isObjectLike = __webpack_require__(15);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var freeGlobal = __webpack_require__(136);

/** Detect free variable `exports`. */
var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = function () {
  try {
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}();

module.exports = nodeUtil;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)(module)))

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

var isPrototype = __webpack_require__(56),
    nativeKeys = __webpack_require__(288);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(143);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (feature) {
  var i, n, a, b, merged, deltaMax, delta;

  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);
  ranges = [];
  (0, _stream2.default)(feature, boundsStream);

  // First, sort ranges by their minimum longitudes.
  if (n = ranges.length) {
    ranges.sort(rangeCompare);

    // Then, merge any ranges that overlap.
    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
      b = ranges[i];
      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
      } else {
        merged.push(a = b);
      }
    }

    // Finally, find the largest gap between the merged ranges.
    // The final bounding box will be the inverse of this gap.
    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
      b = merged[i];
      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];
    }
  }

  ranges = range = null;

  return lambda0 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda0, phi0], [lambda1, phi1]];
};

var _adder = __webpack_require__(33);

var _adder2 = _interopRequireDefault(_adder);

var _area = __webpack_require__(144);

var _cartesian = __webpack_require__(38);

var _math = __webpack_require__(3);

var _stream = __webpack_require__(25);

var _stream2 = _interopRequireDefault(_stream);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lambda0,
    phi0,
    lambda1,
    phi1,
    // bounds
lambda2,
    // previous lambda-coordinate
lambda00,
    phi00,
    // first point
p0,
    // previous 3D point
deltaSum = (0, _adder2.default)(),
    ranges,
    range;

var boundsStream = {
  point: boundsPoint,
  lineStart: boundsLineStart,
  lineEnd: boundsLineEnd,
  polygonStart: function polygonStart() {
    boundsStream.point = boundsRingPoint;
    boundsStream.lineStart = boundsRingStart;
    boundsStream.lineEnd = boundsRingEnd;
    deltaSum.reset();
    _area.areaStream.polygonStart();
  },
  polygonEnd: function polygonEnd() {
    _area.areaStream.polygonEnd();
    boundsStream.point = boundsPoint;
    boundsStream.lineStart = boundsLineStart;
    boundsStream.lineEnd = boundsLineEnd;
    if (_area.areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);else if (deltaSum > _math.epsilon) phi1 = 90;else if (deltaSum < -_math.epsilon) phi0 = -90;
    range[0] = lambda0, range[1] = lambda1;
  }
};

function boundsPoint(lambda, phi) {
  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
}

function linePoint(lambda, phi) {
  var p = (0, _cartesian.cartesian)([lambda * _math.radians, phi * _math.radians]);
  if (p0) {
    var normal = (0, _cartesian.cartesianCross)(p0, p),
        equatorial = [normal[1], -normal[0], 0],
        inflection = (0, _cartesian.cartesianCross)(equatorial, normal);
    (0, _cartesian.cartesianNormalizeInPlace)(inflection);
    inflection = (0, _cartesian.spherical)(inflection);
    var delta = lambda - lambda2,
        sign = delta > 0 ? 1 : -1,
        lambdai = inflection[0] * _math.degrees * sign,
        phii,
        antimeridian = (0, _math.abs)(delta) > 180;
    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = inflection[1] * _math.degrees;
      if (phii > phi1) phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = -inflection[1] * _math.degrees;
      if (phii < phi0) phi0 = phii;
    } else {
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }
    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
      }
    } else {
      if (lambda1 >= lambda0) {
        if (lambda < lambda0) lambda0 = lambda;
        if (lambda > lambda1) lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
        }
      }
    }
  } else {
    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);
  }
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
  p0 = p, lambda2 = lambda;
}

function boundsLineStart() {
  boundsStream.point = linePoint;
}

function boundsLineEnd() {
  range[0] = lambda0, range[1] = lambda1;
  boundsStream.point = boundsPoint;
  p0 = null;
}

function boundsRingPoint(lambda, phi) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add((0, _math.abs)(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    lambda00 = lambda, phi00 = phi;
  }
  _area.areaStream.point(lambda, phi);
  linePoint(lambda, phi);
}

function boundsRingStart() {
  _area.areaStream.lineStart();
}

function boundsRingEnd() {
  boundsRingPoint(lambda00, phi00);
  _area.areaStream.lineEnd();
  if ((0, _math.abs)(deltaSum) > _math.epsilon) lambda0 = -(lambda1 = 180);
  range[0] = lambda0, range[1] = lambda1;
  p0 = null;
}

// Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.
function angle(lambda0, lambda1) {
  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
}

function rangeCompare(a, b) {
  return a[0] - b[0];
}

function rangeContains(range, x) {
  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
}

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (object) {
  W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
  (0, _stream2.default)(object, centroidStream);

  var x = X2,
      y = Y2,
      z = Z2,
      m = x * x + y * y + z * z;

  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
  if (m < _math.epsilon2) {
    x = X1, y = Y1, z = Z1;
    // If the feature has zero length, fall back to arithmetic mean of point vectors.
    if (W1 < _math.epsilon) x = X0, y = Y0, z = Z0;
    m = x * x + y * y + z * z;
    // If the feature still has an undefined ccentroid, then return.
    if (m < _math.epsilon2) return [NaN, NaN];
  }

  return [(0, _math.atan2)(y, x) * _math.degrees, (0, _math.asin)(z / (0, _math.sqrt)(m)) * _math.degrees];
};

var _math = __webpack_require__(3);

var _noop = __webpack_require__(21);

var _noop2 = _interopRequireDefault(_noop);

var _stream = __webpack_require__(25);

var _stream2 = _interopRequireDefault(_stream);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00, phi00, // first point
x0, y0, z0; // previous point

var centroidStream = {
  sphere: _noop2.default,
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function polygonStart() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function polygonEnd() {
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  }
};

// Arithmetic mean of Cartesian vectors.
function centroidPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi);
  centroidPointCartesian(cosPhi * (0, _math.cos)(lambda), cosPhi * (0, _math.sin)(lambda), (0, _math.sin)(phi));
}

function centroidPointCartesian(x, y, z) {
  ++W0;
  X0 += (x - X0) / W0;
  Y0 += (y - Y0) / W0;
  Z0 += (z - Z0) / W0;
}

function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}

function centroidLinePointFirst(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi);
  x0 = cosPhi * (0, _math.cos)(lambda);
  y0 = cosPhi * (0, _math.sin)(lambda);
  z0 = (0, _math.sin)(phi);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x0, y0, z0);
}

function centroidLinePoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi),
      x = cosPhi * (0, _math.cos)(lambda),
      y = cosPhi * (0, _math.sin)(lambda),
      z = (0, _math.sin)(phi),
      w = (0, _math.atan2)((0, _math.sqrt)((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).
function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}

function centroidRingEnd() {
  centroidRingPoint(lambda00, phi00);
  centroidStream.point = centroidPoint;
}

function centroidRingPointFirst(lambda, phi) {
  lambda00 = lambda, phi00 = phi;
  lambda *= _math.radians, phi *= _math.radians;
  centroidStream.point = centroidRingPoint;
  var cosPhi = (0, _math.cos)(phi);
  x0 = cosPhi * (0, _math.cos)(lambda);
  y0 = cosPhi * (0, _math.sin)(lambda);
  z0 = (0, _math.sin)(phi);
  centroidPointCartesian(x0, y0, z0);
}

function centroidRingPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi),
      x = cosPhi * (0, _math.cos)(lambda),
      y = cosPhi * (0, _math.sin)(lambda),
      z = (0, _math.sin)(phi),
      cx = y0 * z - z0 * y,
      cy = z0 * x - x0 * z,
      cz = x0 * y - y0 * x,
      m = (0, _math.sqrt)(cx * cx + cy * cy + cz * cz),
      w = (0, _math.asin)(m),
      // line weight = angle
  v = m && -w / m; // area weight multiplier
  X2 += v * cx;
  Y2 += v * cy;
  Z2 += v * cz;
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

/***/ }),
/* 291 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (x) {
  return function () {
    return x;
  };
};

/***/ }),
/* 292 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (a, b, x0, y0, x1, y1) {
  var ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;

  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;
  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;
  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;
  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;
  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
  return true;
};

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (values0, values1, reduce) {
  var n0 = values0.length,
      n1 = values1.length,
      values = new Array(n0 * n1),
      i0,
      i1,
      i,
      value0;

  if (reduce == null) reduce = _pairs.pair;

  for (i0 = i = 0; i0 < n0; ++i0) {
    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
      values[i] = reduce(value0, values1[i1]);
    }
  }

  return values;
};

var _pairs = __webpack_require__(152);

/***/ }),
/* 294 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
};

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var value = _identity2.default,
      domain = _extent2.default,
      threshold = _sturges2.default;

  function histogram(data) {
    var i,
        n = data.length,
        x,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1);

    // Convert number of thresholds into uniform thresholds.
    if (!Array.isArray(tz)) {
      tz = (0, _ticks.tickStep)(x0, x1, tz);
      tz = (0, _range2.default)(Math.ceil(x0 / tz) * tz, Math.floor(x1 / tz) * tz, tz); // exclusive
    }

    // Remove any thresholds outside the domain.
    var m = tz.length;
    while (tz[0] <= x0) {
      tz.shift(), --m;
    }while (tz[m - 1] > x1) {
      tz.pop(), --m;
    }var bins = new Array(m + 1),
        bin;

    // Initialize bins.
    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    }

    // Assign data to bins by value, ignoring any outside the domain.
    for (i = 0; i < n; ++i) {
      x = values[i];
      if (x0 <= x && x <= x1) {
        bins[(0, _bisect2.default)(tz, x, 0, m)].push(data[i]);
      }
    }

    return bins;
  }

  histogram.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant2.default)(_), histogram) : value;
  };

  histogram.domain = function (_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : (0, _constant2.default)([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant2.default)(_array.slice.call(_)) : (0, _constant2.default)(_), histogram) : threshold;
  };

  return histogram;
};

var _array = __webpack_require__(156);

var _bisect = __webpack_require__(150);

var _bisect2 = _interopRequireDefault(_bisect);

var _constant = __webpack_require__(296);

var _constant2 = _interopRequireDefault(_constant);

var _extent = __webpack_require__(155);

var _extent2 = _interopRequireDefault(_extent);

var _identity = __webpack_require__(297);

var _identity2 = _interopRequireDefault(_identity);

var _range = __webpack_require__(157);

var _range2 = _interopRequireDefault(_range);

var _ticks = __webpack_require__(158);

var _sturges = __webpack_require__(159);

var _sturges2 = _interopRequireDefault(_sturges);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 296 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (x) {
  return function () {
    return x;
  };
};

/***/ }),
/* 297 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (x) {
  return x;
};

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (values, min, max) {
  values = _array.map.call(values, _number2.default).sort(_ascending2.default);
  return Math.ceil((max - min) / (2 * ((0, _quantile2.default)(values, 0.75) - (0, _quantile2.default)(values, 0.25)) * Math.pow(values.length, -1 / 3)));
};

var _array = __webpack_require__(156);

var _ascending = __webpack_require__(34);

var _ascending2 = _interopRequireDefault(_ascending);

var _number = __webpack_require__(39);

var _number2 = _interopRequireDefault(_number);

var _quantile = __webpack_require__(84);

var _quantile2 = _interopRequireDefault(_quantile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (values, min, max) {
  return Math.ceil((max - min) / (3.5 * (0, _deviation2.default)(values) * Math.pow(values.length, -1 / 3)));
};

var _deviation = __webpack_require__(153);

var _deviation2 = _interopRequireDefault(_deviation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 300 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (values, valueof) {
  var n = values.length,
      i = -1,
      value,
      max;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        max = value;
        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null && value > max) {
            max = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        max = value;
        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  return max;
};

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (values, valueof) {
  var n = values.length,
      m = n,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number2.default)(values[i]))) sum += value;else --m;
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number2.default)(valueof(values[i], i, values)))) sum += value;else --m;
    }
  }

  if (m) return sum / m;
};

var _number = __webpack_require__(39);

var _number2 = _interopRequireDefault(_number);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (values, valueof) {
  var n = values.length,
      i = -1,
      value,
      numbers = [];

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number2.default)(values[i]))) {
        numbers.push(value);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number2.default)(valueof(values[i], i, values)))) {
        numbers.push(value);
      }
    }
  }

  return (0, _quantile2.default)(numbers.sort(_ascending2.default), 0.5);
};

var _ascending = __webpack_require__(34);

var _ascending2 = _interopRequireDefault(_ascending);

var _number = __webpack_require__(39);

var _number2 = _interopRequireDefault(_number);

var _quantile = __webpack_require__(84);

var _quantile2 = _interopRequireDefault(_quantile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 303 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (arrays) {
  var n = arrays.length,
      m,
      i = -1,
      j = 0,
      merged,
      array;

  while (++i < n) {
    j += arrays[i].length;
  }merged = new Array(j);

  while (--n >= 0) {
    array = arrays[n];
    m = array.length;
    while (--m >= 0) {
      merged[--j] = array[m];
    }
  }

  return merged;
};

/***/ }),
/* 304 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (array, indexes) {
  var i = indexes.length,
      permutes = new Array(i);
  while (i--) {
    permutes[i] = array[indexes[i]];
  }return permutes;
};

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (values, compare) {
  if (!(n = values.length)) return;
  var n,
      i = 0,
      j = 0,
      xi,
      xj = values[j];

  if (compare == null) compare = _ascending2.default;

  while (++i < n) {
    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
      xj = xi, j = i;
    }
  }

  if (compare(xj, xj) === 0) return j;
};

var _ascending = __webpack_require__(34);

var _ascending2 = _interopRequireDefault(_ascending);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 306 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (array, i0, i1) {
  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
  }

  return array;
};

/***/ }),
/* 307 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (values, valueof) {
  var n = values.length,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
    }
  } else {
    while (++i < n) {
      if (value = +valueof(values[i], i, values)) sum += value;
    }
  }

  return sum;
};

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  return (0, _transpose2.default)(arguments);
};

var _transpose = __webpack_require__(161);

var _transpose2 = _interopRequireDefault(_transpose);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (object, point) {
  return (object && containsObjectType.hasOwnProperty(object.type) ? containsObjectType[object.type] : containsGeometry)(object, point);
};

var _polygonContains = __webpack_require__(162);

var _polygonContains2 = _interopRequireDefault(_polygonContains);

var _distance = __webpack_require__(163);

var _distance2 = _interopRequireDefault(_distance);

var _math = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var containsObjectType = {
  Feature: function Feature(object, point) {
    return containsGeometry(object.geometry, point);
  },
  FeatureCollection: function FeatureCollection(object, point) {
    var features = object.features,
        i = -1,
        n = features.length;
    while (++i < n) {
      if (containsGeometry(features[i].geometry, point)) return true;
    }return false;
  }
};

var containsGeometryType = {
  Sphere: function Sphere() {
    return true;
  },
  Point: function Point(object, point) {
    return containsPoint(object.coordinates, point);
  },
  MultiPoint: function MultiPoint(object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;
    while (++i < n) {
      if (containsPoint(coordinates[i], point)) return true;
    }return false;
  },
  LineString: function LineString(object, point) {
    return containsLine(object.coordinates, point);
  },
  MultiLineString: function MultiLineString(object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;
    while (++i < n) {
      if (containsLine(coordinates[i], point)) return true;
    }return false;
  },
  Polygon: function Polygon(object, point) {
    return containsPolygon(object.coordinates, point);
  },
  MultiPolygon: function MultiPolygon(object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;
    while (++i < n) {
      if (containsPolygon(coordinates[i], point)) return true;
    }return false;
  },
  GeometryCollection: function GeometryCollection(object, point) {
    var geometries = object.geometries,
        i = -1,
        n = geometries.length;
    while (++i < n) {
      if (containsGeometry(geometries[i], point)) return true;
    }return false;
  }
};

function containsGeometry(geometry, point) {
  return geometry && containsGeometryType.hasOwnProperty(geometry.type) ? containsGeometryType[geometry.type](geometry, point) : false;
}

function containsPoint(coordinates, point) {
  return (0, _distance2.default)(coordinates, point) === 0;
}

function containsLine(coordinates, point) {
  var ab = (0, _distance2.default)(coordinates[0], coordinates[1]),
      ao = (0, _distance2.default)(coordinates[0], point),
      ob = (0, _distance2.default)(point, coordinates[1]);
  return ao + ob <= ab + _math.epsilon;
}

function containsPolygon(coordinates, point) {
  return !!(0, _polygonContains2.default)(coordinates.map(ringRadians), pointRadians(point));
}

function ringRadians(ring) {
  return ring = ring.map(pointRadians), ring.pop(), ring;
}

function pointRadians(point) {
  return [point[0] * _math.radians, point[1] * _math.radians];
}

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.default = graticule;
exports.graticule10 = graticule10;

var _d3Array = __webpack_require__(14);

var _math = __webpack_require__(3);

function graticuleX(y0, y1, dy) {
  var y = (0, _d3Array.range)(y0, y1 - _math.epsilon, dy).concat(y1);
  return function (x) {
    return y.map(function (y) {
      return [x, y];
    });
  };
}

function graticuleY(x0, x1, dx) {
  var x = (0, _d3Array.range)(x0, x1 - _math.epsilon, dx).concat(x1);
  return function (y) {
    return x.map(function (x) {
      return [x, y];
    });
  };
}

function graticule() {
  var x1,
      x0,
      X1,
      X0,
      y1,
      y0,
      Y1,
      Y0,
      dx = 10,
      dy = dx,
      DX = 90,
      DY = 360,
      x,
      y,
      X,
      Y,
      precision = 2.5;

  function graticule() {
    return { type: "MultiLineString", coordinates: lines() };
  }

  function lines() {
    return (0, _d3Array.range)((0, _math.ceil)(X0 / DX) * DX, X1, DX).map(X).concat((0, _d3Array.range)((0, _math.ceil)(Y0 / DY) * DY, Y1, DY).map(Y)).concat((0, _d3Array.range)((0, _math.ceil)(x0 / dx) * dx, x1, dx).filter(function (x) {
      return (0, _math.abs)(x % DX) > _math.epsilon;
    }).map(x)).concat((0, _d3Array.range)((0, _math.ceil)(y0 / dy) * dy, y1, dy).filter(function (y) {
      return (0, _math.abs)(y % DY) > _math.epsilon;
    }).map(y));
  }

  graticule.lines = function () {
    return lines().map(function (coordinates) {
      return { type: "LineString", coordinates: coordinates };
    });
  };

  graticule.outline = function () {
    return {
      type: "Polygon",
      coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
    };
  };

  graticule.extent = function (_) {
    if (!arguments.length) return graticule.extentMinor();
    return graticule.extentMajor(_).extentMinor(_);
  };

  graticule.extentMajor = function (_) {
    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
    X0 = +_[0][0], X1 = +_[1][0];
    Y0 = +_[0][1], Y1 = +_[1][1];
    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
    return graticule.precision(precision);
  };

  graticule.extentMinor = function (_) {
    if (!arguments.length) return [[x0, y0], [x1, y1]];
    x0 = +_[0][0], x1 = +_[1][0];
    y0 = +_[0][1], y1 = +_[1][1];
    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
    return graticule.precision(precision);
  };

  graticule.step = function (_) {
    if (!arguments.length) return graticule.stepMinor();
    return graticule.stepMajor(_).stepMinor(_);
  };

  graticule.stepMajor = function (_) {
    if (!arguments.length) return [DX, DY];
    DX = +_[0], DY = +_[1];
    return graticule;
  };

  graticule.stepMinor = function (_) {
    if (!arguments.length) return [dx, dy];
    dx = +_[0], dy = +_[1];
    return graticule;
  };

  graticule.precision = function (_) {
    if (!arguments.length) return precision;
    precision = +_;
    x = graticuleX(y0, y1, 90);
    y = graticuleY(x0, x1, precision);
    X = graticuleX(Y0, Y1, 90);
    Y = graticuleY(X0, X1, precision);
    return graticule;
  };

  return graticule.extentMajor([[-180, -90 + _math.epsilon], [180, 90 - _math.epsilon]]).extentMinor([[-180, -80 - _math.epsilon], [180, 80 + _math.epsilon]]);
}

function graticule10() {
  return graticule()();
}

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (a, b) {
  var x0 = a[0] * _math.radians,
      y0 = a[1] * _math.radians,
      x1 = b[0] * _math.radians,
      y1 = b[1] * _math.radians,
      cy0 = (0, _math.cos)(y0),
      sy0 = (0, _math.sin)(y0),
      cy1 = (0, _math.cos)(y1),
      sy1 = (0, _math.sin)(y1),
      kx0 = cy0 * (0, _math.cos)(x0),
      ky0 = cy0 * (0, _math.sin)(x0),
      kx1 = cy1 * (0, _math.cos)(x1),
      ky1 = cy1 * (0, _math.sin)(x1),
      d = 2 * (0, _math.asin)((0, _math.sqrt)((0, _math.haversin)(y1 - y0) + cy0 * cy1 * (0, _math.haversin)(x1 - x0))),
      k = (0, _math.sin)(d);

  var interpolate = d ? function (t) {
    var B = (0, _math.sin)(t *= d) / k,
        A = (0, _math.sin)(d - t) / k,
        x = A * kx0 + B * kx1,
        y = A * ky0 + B * ky1,
        z = A * sy0 + B * sy1;
    return [(0, _math.atan2)(y, x) * _math.degrees, (0, _math.atan2)(z, (0, _math.sqrt)(x * x + y * y)) * _math.degrees];
  } : function () {
    return [x0 * _math.degrees, y0 * _math.degrees];
  };

  interpolate.distance = d;

  return interpolate;
};

var _math = __webpack_require__(3);

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (projection, context) {
  var pointRadius = 4.5,
      projectionStream,
      contextStream;

  function path(object) {
    if (object) {
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
      (0, _stream2.default)(object, projectionStream(contextStream));
    }
    return contextStream.result();
  }

  path.area = function (object) {
    (0, _stream2.default)(object, projectionStream(_area2.default));
    return _area2.default.result();
  };

  path.measure = function (object) {
    (0, _stream2.default)(object, projectionStream(_measure2.default));
    return _measure2.default.result();
  };

  path.bounds = function (object) {
    (0, _stream2.default)(object, projectionStream(_bounds2.default));
    return _bounds2.default.result();
  };

  path.centroid = function (object) {
    (0, _stream2.default)(object, projectionStream(_centroid2.default));
    return _centroid2.default.result();
  };

  path.projection = function (_) {
    return arguments.length ? (projectionStream = _ == null ? (projection = null, _identity2.default) : (projection = _).stream, path) : projection;
  };

  path.context = function (_) {
    if (!arguments.length) return context;
    contextStream = _ == null ? (context = null, new _string2.default()) : new _context2.default(context = _);
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
    return path;
  };

  path.pointRadius = function (_) {
    if (!arguments.length) return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path;
  };

  return path.projection(projection).context(context);
};

var _identity = __webpack_require__(85);

var _identity2 = _interopRequireDefault(_identity);

var _stream = __webpack_require__(25);

var _stream2 = _interopRequireDefault(_stream);

var _area = __webpack_require__(313);

var _area2 = _interopRequireDefault(_area);

var _bounds = __webpack_require__(165);

var _bounds2 = _interopRequireDefault(_bounds);

var _centroid = __webpack_require__(314);

var _centroid2 = _interopRequireDefault(_centroid);

var _context = __webpack_require__(315);

var _context2 = _interopRequireDefault(_context);

var _measure = __webpack_require__(316);

var _measure2 = _interopRequireDefault(_measure);

var _string = __webpack_require__(317);

var _string2 = _interopRequireDefault(_string);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _adder = __webpack_require__(33);

var _adder2 = _interopRequireDefault(_adder);

var _math = __webpack_require__(3);

var _noop = __webpack_require__(21);

var _noop2 = _interopRequireDefault(_noop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var areaSum = (0, _adder2.default)(),
    areaRingSum = (0, _adder2.default)(),
    x00,
    y00,
    x0,
    y0;

var areaStream = {
  point: _noop2.default,
  lineStart: _noop2.default,
  lineEnd: _noop2.default,
  polygonStart: function polygonStart() {
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function polygonEnd() {
    areaStream.lineStart = areaStream.lineEnd = areaStream.point = _noop2.default;
    areaSum.add((0, _math.abs)(areaRingSum));
    areaRingSum.reset();
  },
  result: function result() {
    var area = areaSum / 2;
    areaSum.reset();
    return area;
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaPointFirst(x, y) {
  areaStream.point = areaPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function areaPoint(x, y) {
  areaRingSum.add(y0 * x - x0 * y);
  x0 = x, y0 = y;
}

function areaRingEnd() {
  areaPoint(x00, y00);
}

exports.default = areaStream;

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _math = __webpack_require__(3);

// TODO Enforce positive area for exterior, negative area for interior?

var X0 = 0,
    Y0 = 0,
    Z0 = 0,
    X1 = 0,
    Y1 = 0,
    Z1 = 0,
    X2 = 0,
    Y2 = 0,
    Z2 = 0,
    x00,
    y00,
    x0,
    y0;

var centroidStream = {
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function polygonStart() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function polygonEnd() {
    centroidStream.point = centroidPoint;
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  },
  result: function result() {
    var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];
    X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
    return centroid;
  }
};

function centroidPoint(x, y) {
  X0 += x;
  Y0 += y;
  ++Z0;
}

function centroidLineStart() {
  centroidStream.point = centroidPointFirstLine;
}

function centroidPointFirstLine(x, y) {
  centroidStream.point = centroidPointLine;
  centroidPoint(x0 = x, y0 = y);
}

function centroidPointLine(x, y) {
  var dx = x - x0,
      dy = y - y0,
      z = (0, _math.sqrt)(dx * dx + dy * dy);
  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;
  centroidPoint(x0 = x, y0 = y);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

function centroidRingStart() {
  centroidStream.point = centroidPointFirstRing;
}

function centroidRingEnd() {
  centroidPointRing(x00, y00);
}

function centroidPointFirstRing(x, y) {
  centroidStream.point = centroidPointRing;
  centroidPoint(x00 = x0 = x, y00 = y0 = y);
}

function centroidPointRing(x, y) {
  var dx = x - x0,
      dy = y - y0,
      z = (0, _math.sqrt)(dx * dx + dy * dy);

  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;

  z = y0 * x - x0 * y;
  X2 += z * (x0 + x);
  Y2 += z * (y0 + y);
  Z2 += z * 3;
  centroidPoint(x0 = x, y0 = y);
}

exports.default = centroidStream;

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.default = PathContext;

var _math = __webpack_require__(3);

var _noop = __webpack_require__(21);

var _noop2 = _interopRequireDefault(_noop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function PathContext(context) {
  this._context = context;
}

PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function pointRadius(_) {
    return this._radius = _, this;
  },
  polygonStart: function polygonStart() {
    this._line = 0;
  },
  polygonEnd: function polygonEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function point(x, y) {
    switch (this._point) {
      case 0:
        {
          this._context.moveTo(x, y);
          this._point = 1;
          break;
        }
      case 1:
        {
          this._context.lineTo(x, y);
          break;
        }
      default:
        {
          this._context.moveTo(x + this._radius, y);
          this._context.arc(x, y, this._radius, 0, _math.tau);
          break;
        }
    }
  },
  result: _noop2.default
};

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _adder = __webpack_require__(33);

var _adder2 = _interopRequireDefault(_adder);

var _math = __webpack_require__(3);

var _noop = __webpack_require__(21);

var _noop2 = _interopRequireDefault(_noop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lengthSum = (0, _adder2.default)(),
    lengthRing,
    x00,
    y00,
    x0,
    y0;

var lengthStream = {
  point: _noop2.default,
  lineStart: function lineStart() {
    lengthStream.point = lengthPointFirst;
  },
  lineEnd: function lineEnd() {
    if (lengthRing) lengthPoint(x00, y00);
    lengthStream.point = _noop2.default;
  },
  polygonStart: function polygonStart() {
    lengthRing = true;
  },
  polygonEnd: function polygonEnd() {
    lengthRing = null;
  },
  result: function result() {
    var length = +lengthSum;
    lengthSum.reset();
    return length;
  }
};

function lengthPointFirst(x, y) {
  lengthStream.point = lengthPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function lengthPoint(x, y) {
  x0 -= x, y0 -= y;
  lengthSum.add((0, _math.sqrt)(x0 * x0 + y0 * y0));
  x0 = x, y0 = y;
}

exports.default = lengthStream;

/***/ }),
/* 317 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.default = PathString;
function PathString() {
  this._string = [];
}

PathString.prototype = {
  _radius: 4.5,
  _circle: circle(4.5),
  pointRadius: function pointRadius(_) {
    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
    return this;
  },
  polygonStart: function polygonStart() {
    this._line = 0;
  },
  polygonEnd: function polygonEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    if (this._line === 0) this._string.push("Z");
    this._point = NaN;
  },
  point: function point(x, y) {
    switch (this._point) {
      case 0:
        {
          this._string.push("M", x, ",", y);
          this._point = 1;
          break;
        }
      case 1:
        {
          this._string.push("L", x, ",", y);
          break;
        }
      default:
        {
          if (this._circle == null) this._circle = circle(this._radius);
          this._string.push("M", x, ",", y, this._circle);
          break;
        }
    }
  },
  result: function result() {
    if (this._string.length) {
      var result = this._string.join("");
      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};

function circle(radius) {
  return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
}

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _index = __webpack_require__(167);

var _index2 = _interopRequireDefault(_index);

var _math = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _index2.default)(function () {
  return true;
}, clipAntimeridianLine, clipAntimeridianInterpolate, [-_math.pi, -_math.halfPi]);

// Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.

function clipAntimeridianLine(stream) {
  var lambda0 = NaN,
      phi0 = NaN,
      sign0 = NaN,
      _clean; // no intersections

  return {
    lineStart: function lineStart() {
      stream.lineStart();
      _clean = 1;
    },
    point: function point(lambda1, phi1) {
      var sign1 = lambda1 > 0 ? _math.pi : -_math.pi,
          delta = (0, _math.abs)(lambda1 - lambda0);
      if ((0, _math.abs)(delta - _math.pi) < _math.epsilon) {
        // line crosses a pole
        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? _math.halfPi : -_math.halfPi);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        _clean = 0;
      } else if (sign0 !== sign1 && delta >= _math.pi) {
        // line crosses antimeridian
        if ((0, _math.abs)(lambda0 - sign0) < _math.epsilon) lambda0 -= sign0 * _math.epsilon; // handle degeneracies
        if ((0, _math.abs)(lambda1 - sign1) < _math.epsilon) lambda1 -= sign1 * _math.epsilon;
        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        _clean = 0;
      }
      stream.point(lambda0 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function lineEnd() {
      stream.lineEnd();
      lambda0 = phi0 = NaN;
    },
    clean: function clean() {
      return 2 - _clean; // if intersections, rejoin first and last segments
    }
  };
}

function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
  var cosPhi0,
      cosPhi1,
      sinLambda0Lambda1 = (0, _math.sin)(lambda0 - lambda1);
  return (0, _math.abs)(sinLambda0Lambda1) > _math.epsilon ? (0, _math.atan)(((0, _math.sin)(phi0) * (cosPhi1 = (0, _math.cos)(phi1)) * (0, _math.sin)(lambda1) - (0, _math.sin)(phi1) * (cosPhi0 = (0, _math.cos)(phi0)) * (0, _math.sin)(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
}

function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi;
  if (from == null) {
    phi = direction * _math.halfPi;
    stream.point(-_math.pi, phi);
    stream.point(0, phi);
    stream.point(_math.pi, phi);
    stream.point(_math.pi, 0);
    stream.point(_math.pi, -phi);
    stream.point(0, -phi);
    stream.point(-_math.pi, -phi);
    stream.point(-_math.pi, 0);
    stream.point(-_math.pi, phi);
  } else if ((0, _math.abs)(from[0] - to[0]) > _math.epsilon) {
    var lambda = from[0] < to[0] ? _math.pi : -_math.pi;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (radius, delta) {
  var cr = (0, _math.cos)(radius),
      smallRadius = cr > 0,
      notHemisphere = (0, _math.abs)(cr) > _math.epsilon; // TODO optimise for this common case

  function interpolate(from, to, direction, stream) {
    (0, _circle.circleStream)(stream, radius, delta, direction, from, to);
  }

  function visible(lambda, phi) {
    return (0, _math.cos)(lambda) * (0, _math.cos)(phi) > cr;
  }

  // Takes a line and cuts into visible segments. Return values used for polygon
  // clipping: 0 - there were intersections or the line was empty; 1 - no
  // intersections 2 - there were intersections, and the first and last segments
  // should be rejoined.
  function clipLine(stream) {
    var point0, // previous point
    c0, // code for previous point
    v0, // visibility of previous point
    v00, // visibility of first point
    _clean; // no intersections
    return {
      lineStart: function lineStart() {
        v00 = v0 = false;
        _clean = 1;
      },
      point: function point(lambda, phi) {
        var point1 = [lambda, phi],
            point2,
            v = visible(lambda, phi),
            c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? _math.pi : -_math.pi), phi) : 0;
        if (!point0 && (v00 = v0 = v)) stream.lineStart();
        // Handle degeneracies.
        // TODO ignore if not clipping polygons.
        if (v !== v0) {
          point2 = intersect(point0, point1);
          if (!point2 || (0, _pointEqual2.default)(point0, point2) || (0, _pointEqual2.default)(point1, point2)) {
            point1[0] += _math.epsilon;
            point1[1] += _math.epsilon;
            v = visible(point1[0], point1[1]);
          }
        }
        if (v !== v0) {
          _clean = 0;
          if (v) {
            // outside going in
            stream.lineStart();
            point2 = intersect(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            // inside going out
            point2 = intersect(point0, point1);
            stream.point(point2[0], point2[1]);
            stream.lineEnd();
          }
          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v) {
          var t;
          // If the codes for two points are different, or are both zero,
          // and there this segment intersects with the small circle.
          if (!(c & c0) && (t = intersect(point1, point0, true))) {
            _clean = 0;
            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
            }
          }
        }
        if (v && (!point0 || !(0, _pointEqual2.default)(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }
        point0 = point1, v0 = v, c0 = c;
      },
      lineEnd: function lineEnd() {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function clean() {
        return _clean | (v00 && v0) << 1;
      }
    };
  }

  // Intersects the great circle between a and b with the clip circle.
  function intersect(a, b, two) {
    var pa = (0, _cartesian.cartesian)(a),
        pb = (0, _cartesian.cartesian)(b);

    // We have two planes, n1.p = d1 and n2.p = d2.
    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
    var n1 = [1, 0, 0],
        // normal
    n2 = (0, _cartesian.cartesianCross)(pa, pb),
        n2n2 = (0, _cartesian.cartesianDot)(n2, n2),
        n1n2 = n2[0],
        // cartesianDot(n1, n2),
    determinant = n2n2 - n1n2 * n1n2;

    // Two polar points.
    if (!determinant) return !two && a;

    var c1 = cr * n2n2 / determinant,
        c2 = -cr * n1n2 / determinant,
        n1xn2 = (0, _cartesian.cartesianCross)(n1, n2),
        A = (0, _cartesian.cartesianScale)(n1, c1),
        B = (0, _cartesian.cartesianScale)(n2, c2);
    (0, _cartesian.cartesianAddInPlace)(A, B);

    // Solve |p(t)|^2 = 1.
    var u = n1xn2,
        w = (0, _cartesian.cartesianDot)(A, u),
        uu = (0, _cartesian.cartesianDot)(u, u),
        t2 = w * w - uu * ((0, _cartesian.cartesianDot)(A, A) - 1);

    if (t2 < 0) return;

    var t = (0, _math.sqrt)(t2),
        q = (0, _cartesian.cartesianScale)(u, (-w - t) / uu);
    (0, _cartesian.cartesianAddInPlace)(q, A);
    q = (0, _cartesian.spherical)(q);

    if (!two) return q;

    // Two intersection points.
    var lambda0 = a[0],
        lambda1 = b[0],
        phi0 = a[1],
        phi1 = b[1],
        z;

    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

    var delta = lambda1 - lambda0,
        polar = (0, _math.abs)(delta - _math.pi) < _math.epsilon,
        meridian = polar || delta < _math.epsilon;

    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

    // Check that the first point is between a and b.
    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < ((0, _math.abs)(q[0] - lambda0) < _math.epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > _math.pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
      var q1 = (0, _cartesian.cartesianScale)(u, (-w + t) / uu);
      (0, _cartesian.cartesianAddInPlace)(q1, A);
      return [q, (0, _cartesian.spherical)(q1)];
    }
  }

  // Generates a 4-bit vector representing the location of a point relative to
  // the small circle's bounding box.
  function code(lambda, phi) {
    var r = smallRadius ? radius : _math.pi - radius,
        code = 0;
    if (lambda < -r) code |= 1; // left
    else if (lambda > r) code |= 2; // right
    if (phi < -r) code |= 4; // below
    else if (phi > r) code |= 8; // above
    return code;
  }

  return (0, _index2.default)(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-_math.pi, radius - _math.pi]);
};

var _cartesian = __webpack_require__(38);

var _circle = __webpack_require__(145);

var _math = __webpack_require__(3);

var _pointEqual = __webpack_require__(149);

var _pointEqual2 = _interopRequireDefault(_pointEqual);

var _index = __webpack_require__(167);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (project, delta2) {
  return +delta2 ? resample(project, delta2) : resampleNone(project);
};

var _cartesian = __webpack_require__(38);

var _math = __webpack_require__(3);

var _transform = __webpack_require__(58);

var maxDepth = 16,
    // maximum depth of subdivision
cosMinDistance = (0, _math.cos)(30 * _math.radians); // cos(minimum angular distance)

function resampleNone(project) {
  return (0, _transform.transformer)({
    point: function point(x, y) {
      x = project(x, y);
      this.stream.point(x[0], x[1]);
    }
  });
}

function resample(project, delta2) {

  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
    var dx = x1 - x0,
        dy = y1 - y0,
        d2 = dx * dx + dy * dy;
    if (d2 > 4 * delta2 && depth--) {
      var a = a0 + a1,
          b = b0 + b1,
          c = c0 + c1,
          m = (0, _math.sqrt)(a * a + b * b + c * c),
          phi2 = (0, _math.asin)(c /= m),
          lambda2 = (0, _math.abs)((0, _math.abs)(c) - 1) < _math.epsilon || (0, _math.abs)(lambda0 - lambda1) < _math.epsilon ? (lambda0 + lambda1) / 2 : (0, _math.atan2)(b, a),
          p = project(lambda2, phi2),
          x2 = p[0],
          y2 = p[1],
          dx2 = x2 - x0,
          dy2 = y2 - y0,
          dz = dy * dx2 - dx * dy2;
      if (dz * dz / d2 > delta2 // perpendicular projected distance
      || (0, _math.abs)((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
      || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
        // angular distance
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }
  return function (stream) {
    var lambda00, x00, y00, a00, b00, c00, // first point
    lambda0, x0, y0, a0, b0, c0; // previous point

    var resampleStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function polygonStart() {
        stream.polygonStart();resampleStream.lineStart = ringStart;
      },
      polygonEnd: function polygonEnd() {
        stream.polygonEnd();resampleStream.lineStart = lineStart;
      }
    };

    function point(x, y) {
      x = project(x, y);
      stream.point(x[0], x[1]);
    }

    function lineStart() {
      x0 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }

    function linePoint(lambda, phi) {
      var c = (0, _cartesian.cartesian)([lambda, phi]),
          p = project(lambda, phi);
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
      stream.point(x0, y0);
    }

    function lineEnd() {
      resampleStream.point = point;
      stream.lineEnd();
    }

    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }

    function ringPoint(lambda, phi) {
      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }

    function ringEnd() {
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }

    return resampleStream;
  };
}

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.cylindricalEqualAreaRaw = cylindricalEqualAreaRaw;

var _math = __webpack_require__(3);

function cylindricalEqualAreaRaw(phi0) {
  var cosPhi0 = (0, _math.cos)(phi0);

  function forward(lambda, phi) {
    return [lambda * cosPhi0, (0, _math.sin)(phi) / cosPhi0];
  }

  forward.invert = function (x, y) {
    return [x / cosPhi0, (0, _math.asin)(y * cosPhi0)];
  };

  return forward;
}

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var cache,
      cacheStream,
      lower48 = (0, _albers2.default)(),
      lower48Point,
      alaska = (0, _conicEqualArea2.default)().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
      alaskaPoint,
      // EPSG:3338
  hawaii = (0, _conicEqualArea2.default)().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
      hawaiiPoint,
      // ESRI:102007
  _point,
      pointStream = { point: function point(x, y) {
      _point = [x, y];
    } };

  function albersUsa(coordinates) {
    var x = coordinates[0],
        y = coordinates[1];
    return _point = null, (lower48Point.point(x, y), _point) || (alaskaPoint.point(x, y), _point) || (hawaiiPoint.point(x, y), _point);
  }

  albersUsa.invert = function (coordinates) {
    var k = lower48.scale(),
        t = lower48.translate(),
        x = (coordinates[0] - t[0]) / k,
        y = (coordinates[1] - t[1]) / k;
    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
  };

  albersUsa.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
  };

  albersUsa.precision = function (_) {
    if (!arguments.length) return lower48.precision();
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
    return reset();
  };

  albersUsa.scale = function (_) {
    if (!arguments.length) return lower48.scale();
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
    return albersUsa.translate(lower48.translate());
  };

  albersUsa.translate = function (_) {
    if (!arguments.length) return lower48.translate();
    var k = lower48.scale(),
        x = +_[0],
        y = +_[1];

    lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);

    alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + _math.epsilon, y + 0.120 * k + _math.epsilon], [x - 0.214 * k - _math.epsilon, y + 0.234 * k - _math.epsilon]]).stream(pointStream);

    hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + _math.epsilon, y + 0.166 * k + _math.epsilon], [x - 0.115 * k - _math.epsilon, y + 0.234 * k - _math.epsilon]]).stream(pointStream);

    return reset();
  };

  albersUsa.fitExtent = function (extent, object) {
    return (0, _fit.fitExtent)(albersUsa, extent, object);
  };

  albersUsa.fitSize = function (size, object) {
    return (0, _fit.fitSize)(albersUsa, size, object);
  };

  function reset() {
    cache = cacheStream = null;
    return albersUsa;
  }

  return albersUsa.scale(1070);
};

var _math = __webpack_require__(3);

var _albers = __webpack_require__(166);

var _albers2 = _interopRequireDefault(_albers);

var _conicEqualArea = __webpack_require__(86);

var _conicEqualArea2 = _interopRequireDefault(_conicEqualArea);

var _fit = __webpack_require__(88);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
function multiplex(streams) {
  var n = streams.length;
  return {
    point: function point(x, y) {
      var i = -1;while (++i < n) {
        streams[i].point(x, y);
      }
    },
    sphere: function sphere() {
      var i = -1;while (++i < n) {
        streams[i].sphere();
      }
    },
    lineStart: function lineStart() {
      var i = -1;while (++i < n) {
        streams[i].lineStart();
      }
    },
    lineEnd: function lineEnd() {
      var i = -1;while (++i < n) {
        streams[i].lineEnd();
      }
    },
    polygonStart: function polygonStart() {
      var i = -1;while (++i < n) {
        streams[i].polygonStart();
      }
    },
    polygonEnd: function polygonEnd() {
      var i = -1;while (++i < n) {
        streams[i].polygonEnd();
      }
    }
  };
}

// A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.azimuthalEqualAreaRaw = undefined;

exports.default = function () {
  return (0, _index2.default)(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
};

var _math = __webpack_require__(3);

var _azimuthal = __webpack_require__(40);

var _index = __webpack_require__(16);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var azimuthalEqualAreaRaw = exports.azimuthalEqualAreaRaw = (0, _azimuthal.azimuthalRaw)(function (cxcy) {
  return (0, _math.sqrt)(2 / (1 + cxcy));
});

azimuthalEqualAreaRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return 2 * (0, _math.asin)(z / 2);
});

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.azimuthalEquidistantRaw = undefined;

exports.default = function () {
  return (0, _index2.default)(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
};

var _math = __webpack_require__(3);

var _azimuthal = __webpack_require__(40);

var _index = __webpack_require__(16);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var azimuthalEquidistantRaw = exports.azimuthalEquidistantRaw = (0, _azimuthal.azimuthalRaw)(function (c) {
  return (c = (0, _math.acos)(c)) && c / (0, _math.sin)(c);
});

azimuthalEquidistantRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return z;
});

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.conicConformalRaw = conicConformalRaw;

exports.default = function () {
  return (0, _conic.conicProjection)(conicConformalRaw).scale(109.5).parallels([30, 30]);
};

var _math = __webpack_require__(3);

var _conic = __webpack_require__(87);

var _mercator = __webpack_require__(89);

function tany(y) {
  return (0, _math.tan)((_math.halfPi + y) / 2);
}

function conicConformalRaw(y0, y1) {
  var cy0 = (0, _math.cos)(y0),
      n = y0 === y1 ? (0, _math.sin)(y0) : (0, _math.log)(cy0 / (0, _math.cos)(y1)) / (0, _math.log)(tany(y1) / tany(y0)),
      f = cy0 * (0, _math.pow)(tany(y0), n) / n;

  if (!n) return _mercator.mercatorRaw;

  function project(x, y) {
    if (f > 0) {
      if (y < -_math.halfPi + _math.epsilon) y = -_math.halfPi + _math.epsilon;
    } else {
      if (y > _math.halfPi - _math.epsilon) y = _math.halfPi - _math.epsilon;
    }
    var r = f / (0, _math.pow)(tany(y), n);
    return [r * (0, _math.sin)(n * x), f - r * (0, _math.cos)(n * x)];
  }

  project.invert = function (x, y) {
    var fy = f - y,
        r = (0, _math.sign)(n) * (0, _math.sqrt)(x * x + fy * fy);
    return [(0, _math.atan2)(x, (0, _math.abs)(fy)) / n * (0, _math.sign)(fy), 2 * (0, _math.atan)((0, _math.pow)(f / r, 1 / n)) - _math.halfPi];
  };

  return project;
}

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.conicEquidistantRaw = conicEquidistantRaw;

exports.default = function () {
  return (0, _conic.conicProjection)(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);
};

var _math = __webpack_require__(3);

var _conic = __webpack_require__(87);

var _equirectangular = __webpack_require__(168);

function conicEquidistantRaw(y0, y1) {
  var cy0 = (0, _math.cos)(y0),
      n = y0 === y1 ? (0, _math.sin)(y0) : (cy0 - (0, _math.cos)(y1)) / (y1 - y0),
      g = cy0 / n + y0;

  if ((0, _math.abs)(n) < _math.epsilon) return _equirectangular.equirectangularRaw;

  function project(x, y) {
    var gy = g - y,
        nx = n * x;
    return [gy * (0, _math.sin)(nx), g - gy * (0, _math.cos)(nx)];
  }

  project.invert = function (x, y) {
    var gy = g - y;
    return [(0, _math.atan2)(x, (0, _math.abs)(gy)) / n * (0, _math.sign)(gy), g - (0, _math.sign)(n) * (0, _math.sqrt)(x * x + gy * gy)];
  };

  return project;
}

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.gnomonicRaw = gnomonicRaw;

exports.default = function () {
  return (0, _index2.default)(gnomonicRaw).scale(144.049).clipAngle(60);
};

var _math = __webpack_require__(3);

var _azimuthal = __webpack_require__(40);

var _index = __webpack_require__(16);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function gnomonicRaw(x, y) {
  var cy = (0, _math.cos)(y),
      k = (0, _math.cos)(x) * cy;
  return [cy * (0, _math.sin)(x) / k, (0, _math.sin)(y) / k];
}

gnomonicRaw.invert = (0, _azimuthal.azimuthalInvert)(_math.atan);

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var k = 1,
      tx = 0,
      ty = 0,
      sx = 1,
      sy = 1,
      transform = _identity2.default,
      // scale, translate and reflect
  x0 = null,
      y0,
      x1,
      y1,
      clip = _identity2.default,
      // clip extent
  cache,
      cacheStream,
      projection;

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return projection = {
    stream: function stream(_stream) {
      return cache && cacheStream === _stream ? cache : cache = transform(clip(cacheStream = _stream));
    },
    clipExtent: function clipExtent(_) {
      return arguments.length ? (clip = _ == null ? (x0 = y0 = x1 = y1 = null, _identity2.default) : (0, _extent.clipExtent)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    },
    scale: function scale(_) {
      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;
    },
    translate: function translate(_) {
      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
    },
    reflectX: function reflectX(_) {
      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
    },
    reflectY: function reflectY(_) {
      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
    },
    fitExtent: function fitExtent(extent, object) {
      return (0, _fit.fitExtent)(projection, extent, object);
    },
    fitSize: function fitSize(size, object) {
      return (0, _fit.fitSize)(projection, size, object);
    }
  };
};

var _extent = __webpack_require__(83);

var _identity = __webpack_require__(85);

var _identity2 = _interopRequireDefault(_identity);

var _transform = __webpack_require__(58);

var _fit = __webpack_require__(88);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function scaleTranslate(kx, ky, tx, ty) {
  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? _identity2.default : (0, _transform.transformer)({
    point: function point(x, y) {
      this.stream.point(x * kx + tx, y * ky + ty);
    }
  });
}

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.orthographicRaw = orthographicRaw;

exports.default = function () {
  return (0, _index2.default)(orthographicRaw).scale(249.5).clipAngle(90 + _math.epsilon);
};

var _math = __webpack_require__(3);

var _azimuthal = __webpack_require__(40);

var _index = __webpack_require__(16);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function orthographicRaw(x, y) {
  return [(0, _math.cos)(y) * (0, _math.sin)(x), (0, _math.sin)(y)];
}

orthographicRaw.invert = (0, _azimuthal.azimuthalInvert)(_math.asin);

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.stereographicRaw = stereographicRaw;

exports.default = function () {
  return (0, _index2.default)(stereographicRaw).scale(250).clipAngle(142);
};

var _math = __webpack_require__(3);

var _azimuthal = __webpack_require__(40);

var _index = __webpack_require__(16);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stereographicRaw(x, y) {
  var cy = (0, _math.cos)(y),
      k = 1 + (0, _math.cos)(x) * cy;
  return [cy * (0, _math.sin)(x) / k, (0, _math.sin)(y) / k];
}

stereographicRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return 2 * (0, _math.atan)(z);
});

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.transverseMercatorRaw = transverseMercatorRaw;

exports.default = function () {
  var m = (0, _mercator.mercatorProjection)(transverseMercatorRaw),
      center = m.center,
      rotate = m.rotate;

  m.center = function (_) {
    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
  };

  m.rotate = function (_) {
    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
  };

  return rotate([0, 0, 90]).scale(159.155);
};

var _math = __webpack_require__(3);

var _mercator = __webpack_require__(89);

function transverseMercatorRaw(lambda, phi) {
  return [(0, _math.log)((0, _math.tan)((_math.halfPi + phi) / 2)), -lambda];
}

transverseMercatorRaw.invert = function (x, y) {
  return [-y, 2 * (0, _math.atan)((0, _math.exp)(x)) - _math.halfPi];
};

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.airyRaw = airyRaw;

exports.default = function () {
    var beta = _math.halfPi,
        m = (0, _d3Geo.geoProjectionMutator)(airyRaw),
        p = m(beta);

    p.radius = function (_) {
        return arguments.length ? m(beta = _ * _math.radians) : beta * _math.degrees;
    };

    return p.scale(179.976).clipAngle(147);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function airyRaw(beta) {
    var tanBeta_2 = (0, _math.tan)(beta / 2),
        b = 2 * (0, _math.log)((0, _math.cos)(beta / 2)) / (tanBeta_2 * tanBeta_2);

    function forward(x, y) {
        var cosx = (0, _math.cos)(x),
            cosy = (0, _math.cos)(y),
            siny = (0, _math.sin)(y),
            cosz = cosy * cosx,
            k = -((1 - cosz ? (0, _math.log)((1 + cosz) / 2) / (1 - cosz) : -0.5) + b / (1 + cosz));
        return [k * cosy * (0, _math.sin)(x), k * siny];
    }

    forward.invert = function (x, y) {
        var r = (0, _math.sqrt)(x * x + y * y),
            z = -beta / 2,
            i = 50,
            delta;
        if (!r) return [0, 0];
        do {
            var z_2 = z / 2,
                cosz_2 = (0, _math.cos)(z_2),
                sinz_2 = (0, _math.sin)(z_2),
                tanz_2 = (0, _math.tan)(z_2),
                lnsecz_2 = (0, _math.log)(1 / cosz_2);
            z -= delta = (2 / tanz_2 * lnsecz_2 - b * tanz_2 - r) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - b / (2 * cosz_2 * cosz_2));
        } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);
        var sinz = (0, _math.sin)(z);
        return [(0, _math.atan2)(x * sinz, r * (0, _math.cos)(z)), (0, _math.asin)(y * sinz / r)];
    };

    return forward;
}

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.armadilloRaw = armadilloRaw;

exports.default = function () {
  var phi0 = 20 * _math.radians,
      sPhi0 = phi0 >= 0 ? 1 : -1,
      tanPhi0 = (0, _math.tan)(sPhi0 * phi0),
      m = (0, _d3Geo.geoProjectionMutator)(armadilloRaw),
      p = m(phi0),
      stream_ = p.stream;

  p.parallel = function (_) {
    if (!arguments.length) return phi0 * _math.degrees;
    tanPhi0 = (0, _math.tan)((sPhi0 = (phi0 = _ * _math.radians) >= 0 ? 1 : -1) * phi0);
    return m(phi0);
  };

  p.stream = function (stream) {
    var rotate = p.rotate(),
        rotateStream = stream_(stream),
        sphereStream = (p.rotate([0, 0]), stream_(stream));
    p.rotate(rotate);
    rotateStream.sphere = function () {
      sphereStream.polygonStart(), sphereStream.lineStart();
      for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90) {
        sphereStream.point(lambda, sPhi0 * 90);
      }while (sPhi0 * (lambda -= phi0) >= -180) {
        // TODO precision?
        sphereStream.point(lambda, sPhi0 * -(0, _math.atan2)((0, _math.cos)(lambda * _math.radians / 2), tanPhi0) * _math.degrees);
      }
      sphereStream.lineEnd(), sphereStream.polygonEnd();
    };
    return rotateStream;
  };

  return p.scale(218.695).center([0, 28.0974]);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function armadilloRaw(phi0) {
  var sinPhi0 = (0, _math.sin)(phi0),
      cosPhi0 = (0, _math.cos)(phi0),
      sPhi0 = phi0 >= 0 ? 1 : -1,
      tanPhi0 = (0, _math.tan)(sPhi0 * phi0),
      k = (1 + sinPhi0 - cosPhi0) / 2;

  function forward(lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        cosLambda = (0, _math.cos)(lambda /= 2);
    return [(1 + cosPhi) * (0, _math.sin)(lambda), (sPhi0 * phi > -(0, _math.atan2)(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + (0, _math.sin)(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda // TODO D3 core should allow null or [NaN, NaN] to be returned.
    ];
  }

  forward.invert = function (x, y) {
    var lambda = 0,
        phi = 0,
        i = 50;
    do {
      var cosLambda = (0, _math.cos)(lambda),
          sinLambda = (0, _math.sin)(lambda),
          cosPhi = (0, _math.cos)(phi),
          sinPhi = (0, _math.sin)(phi),
          A = 1 + cosPhi,
          fx = A * sinLambda - x,
          fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y,
          dxdLambda = A * cosLambda / 2,
          dxdPhi = -sinLambda * sinPhi,
          dydLambda = sinPhi0 * A * sinLambda / 2,
          dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi,
          denominator = dxdPhi * dydLambda - dydPhi * dxdLambda,
          dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2,
          dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;
      lambda -= dLambda, phi -= dPhi;
    } while (((0, _math.abs)(dLambda) > _math.epsilon || (0, _math.abs)(dPhi) > _math.epsilon) && --i > 0);
    return sPhi0 * phi > -(0, _math.atan2)((0, _math.cos)(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;
  };

  return forward;
}

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.bakerRaw = bakerRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(bakerRaw).scale(112.314);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

var sqrt8 = (0, _math.sqrt)(8),
    phi0 = (0, _math.log)(1 + _math.sqrt2);

function bakerRaw(lambda, phi) {
  var phi0 = (0, _math.abs)(phi);
  return phi0 < _math.quarterPi ? [lambda, (0, _math.log)((0, _math.tan)(_math.quarterPi + phi / 2))] : [lambda * (0, _math.cos)(phi0) * (2 * _math.sqrt2 - 1 / (0, _math.sin)(phi0)), (0, _math.sign)(phi) * (2 * _math.sqrt2 * (phi0 - _math.quarterPi) - (0, _math.log)((0, _math.tan)(phi0 / 2)))];
}

bakerRaw.invert = function (x, y) {
  if ((y0 = (0, _math.abs)(y)) < phi0) return [x, 2 * (0, _math.atan)((0, _math.exp)(y)) - _math.halfPi];
  var phi = _math.quarterPi,
      i = 25,
      delta,
      y0;
  do {
    var cosPhi_2 = (0, _math.cos)(phi / 2),
        tanPhi_2 = (0, _math.tan)(phi / 2);
    phi -= delta = (sqrt8 * (phi - _math.quarterPi) - (0, _math.log)(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));
  } while ((0, _math.abs)(delta) > _math.epsilon2 && --i > 0);
  return [x / ((0, _math.cos)(phi) * (sqrt8 - 1 / (0, _math.sin)(phi))), (0, _math.sign)(y) * phi];
};

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.berghausRaw = berghausRaw;

exports.default = function () {
  var lobes = 5,
      m = (0, _d3Geo.geoProjectionMutator)(berghausRaw),
      p = m(lobes),
      projectionStream = p.stream,
      epsilon = 1e-2,
      cr = -(0, _math.cos)(epsilon * _math.radians),
      sr = (0, _math.sin)(epsilon * _math.radians);

  p.lobes = function (_) {
    return arguments.length ? m(lobes = +_) : lobes;
  };

  p.stream = function (stream) {
    var rotate = p.rotate(),
        rotateStream = projectionStream(stream),
        sphereStream = (p.rotate([0, 0]), projectionStream(stream));
    p.rotate(rotate);
    rotateStream.sphere = function () {
      sphereStream.polygonStart(), sphereStream.lineStart();
      for (var i = 0, delta = 360 / lobes, delta0 = 2 * _math.pi / lobes, phi = 90 - 180 / lobes, phi0 = _math.halfPi; i < lobes; ++i, phi -= delta, phi0 -= delta0) {
        sphereStream.point((0, _math.atan2)(sr * (0, _math.cos)(phi0), cr) * _math.degrees, (0, _math.asin)(sr * (0, _math.sin)(phi0)) * _math.degrees);
        if (phi < -90) {
          sphereStream.point(-90, -180 - phi - epsilon);
          sphereStream.point(-90, -180 - phi + epsilon);
        } else {
          sphereStream.point(90, phi + epsilon);
          sphereStream.point(90, phi - epsilon);
        }
      }
      sphereStream.lineEnd(), sphereStream.polygonEnd();
    };
    return rotateStream;
  };

  return p.scale(87.8076).center([0, 17.1875]).clipAngle(180 - 1e-3);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function berghausRaw(lobes) {
  var k = 2 * _math.pi / lobes;

  function forward(lambda, phi) {
    var p = (0, _d3Geo.geoAzimuthalEquidistantRaw)(lambda, phi);
    if ((0, _math.abs)(lambda) > _math.halfPi) {
      // back hemisphere
      var theta = (0, _math.atan2)(p[1], p[0]),
          r = (0, _math.sqrt)(p[0] * p[0] + p[1] * p[1]),
          theta0 = k * (0, _math.round)((theta - _math.halfPi) / k) + _math.halfPi,
          alpha = (0, _math.atan2)((0, _math.sin)(theta -= theta0), 2 - (0, _math.cos)(theta)); // angle relative to lobe end
      theta = theta0 + (0, _math.asin)(_math.pi / r * (0, _math.sin)(alpha)) - alpha;
      p[0] = r * (0, _math.cos)(theta);
      p[1] = r * (0, _math.sin)(theta);
    }
    return p;
  }

  forward.invert = function (x, y) {
    var r = (0, _math.sqrt)(x * x + y * y);
    if (r > _math.halfPi) {
      var theta = (0, _math.atan2)(y, x),
          theta0 = k * (0, _math.round)((theta - _math.halfPi) / k) + _math.halfPi,
          s = theta > theta0 ? -1 : 1,
          A = r * (0, _math.cos)(theta0 - theta),
          cotAlpha = 1 / (0, _math.tan)(s * (0, _math.acos)((A - _math.pi) / (0, _math.sqrt)(_math.pi * (_math.pi - 2 * A) + r * r)));
      theta = theta0 + 2 * (0, _math.atan)((cotAlpha + s * (0, _math.sqrt)(cotAlpha * cotAlpha - 3)) / 3);
      x = r * (0, _math.cos)(theta), y = r * (0, _math.sin)(theta);
    }
    return _d3Geo.geoAzimuthalEquidistantRaw.invert(x, y);
  };

  return forward;
}

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.bonneRaw = bonneRaw;

exports.default = function () {
  return (0, _parallel2.default)(bonneRaw).scale(123.082).center([0, 26.1441]).parallel(45);
};

var _parallel = __webpack_require__(35);

var _parallel2 = _interopRequireDefault(_parallel);

var _math = __webpack_require__(1);

var _sinusoidal = __webpack_require__(41);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function bonneRaw(phi0) {
  if (!phi0) return _sinusoidal.sinusoidalRaw;
  var cotPhi0 = 1 / (0, _math.tan)(phi0);

  function forward(lambda, phi) {
    var rho = cotPhi0 + phi0 - phi,
        e = rho ? lambda * (0, _math.cos)(phi) / rho : rho;
    return [rho * (0, _math.sin)(e), cotPhi0 - rho * (0, _math.cos)(e)];
  }

  forward.invert = function (x, y) {
    var rho = (0, _math.sqrt)(x * x + (y = cotPhi0 - y) * y),
        phi = cotPhi0 + phi0 - rho;
    return [rho / (0, _math.cos)(phi) * (0, _math.atan2)(x, y), phi];
  };

  return forward;
}

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.bottomleyRaw = bottomleyRaw;

exports.default = function () {
  var sinPsi = 0.5,
      m = (0, _d3Geo.geoProjectionMutator)(bottomleyRaw),
      p = m(sinPsi);

  p.fraction = function (_) {
    return arguments.length ? m(sinPsi = +_) : sinPsi;
  };

  return p.scale(158.837);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function bottomleyRaw(sinPsi) {

  function forward(lambda, phi) {
    var rho = _math.halfPi - phi,
        eta = rho ? lambda * sinPsi * (0, _math.sin)(rho) / rho : rho;
    return [rho * (0, _math.sin)(eta) / sinPsi, _math.halfPi - rho * (0, _math.cos)(eta)];
  }

  forward.invert = function (x, y) {
    var x1 = x * sinPsi,
        y1 = _math.halfPi - y,
        rho = (0, _math.sqrt)(x1 * x1 + y1 * y1),
        eta = (0, _math.atan2)(x1, y1);
    return [(rho ? rho / (0, _math.sin)(rho) : 1) * eta / sinPsi, _math.halfPi - rho];
  };

  return forward;
}

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.bromleyRaw = undefined;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(bromleyRaw).scale(152.63);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

var _mollweide = __webpack_require__(22);

var bromleyRaw = exports.bromleyRaw = (0, _mollweide.mollweideBromleyRaw)(1, 4 / _math.pi, _math.pi);

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.chamberlinRaw = chamberlinRaw;
exports.chamberlinAfrica = chamberlinAfrica;
exports.default = chamberlin;

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

// Azimuthal distance.
function distance(dPhi, c1, s1, c2, s2, dLambda) {
  var cosdLambda = (0, _math.cos)(dLambda),
      r;
  if ((0, _math.abs)(dPhi) > 1 || (0, _math.abs)(dLambda) > 1) {
    r = (0, _math.acos)(s1 * s2 + c1 * c2 * cosdLambda);
  } else {
    var sindPhi = (0, _math.sin)(dPhi / 2),
        sindLambda = (0, _math.sin)(dLambda / 2);
    r = 2 * (0, _math.asin)((0, _math.sqrt)(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));
  }
  return (0, _math.abs)(r) > _math.epsilon ? [r, (0, _math.atan2)(c2 * (0, _math.sin)(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];
}

// Angle opposite a, and contained between sides of lengths b and c.
function angle(b, c, a) {
  return (0, _math.acos)((b * b + c * c - a * a) / (2 * b * c));
}

// Normalize longitude.
function longitude(lambda) {
  return lambda - 2 * _math.pi * (0, _math.floor)((lambda + _math.pi) / (2 * _math.pi));
}

function chamberlinRaw(p0, p1, p2) {
  var points = [[p0[0], p0[1], (0, _math.sin)(p0[1]), (0, _math.cos)(p0[1])], [p1[0], p1[1], (0, _math.sin)(p1[1]), (0, _math.cos)(p1[1])], [p2[0], p2[1], (0, _math.sin)(p2[1]), (0, _math.cos)(p2[1])]];

  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {
    b = points[i];
    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);
    a.point = [0, 0];
  }

  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),
      beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),
      beta2 = _math.pi - beta0;

  points[2].point[1] = 0;
  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);

  var mean = [points[2].point[0] = points[0].point[0] + points[2].v[0] * (0, _math.cos)(beta0), 2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * (0, _math.sin)(beta0))];

  function forward(lambda, phi) {
    var sinPhi = (0, _math.sin)(phi),
        cosPhi = (0, _math.cos)(phi),
        v = new Array(3),
        i;

    // Compute distance and azimuth from control points.
    for (i = 0; i < 3; ++i) {
      var p = points[i];
      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);
      if (!v[i][0]) return p.point;
      v[i][1] = longitude(v[i][1] - p.v[1]);
    }

    // Arithmetic mean of interception points.
    var point = mean.slice();
    for (i = 0; i < 3; ++i) {
      var j = i == 2 ? 0 : i + 1;
      var a = angle(points[i].v[0], v[i][0], v[j][0]);
      if (v[i][1] < 0) a = -a;

      if (!i) {
        point[0] += v[i][0] * (0, _math.cos)(a);
        point[1] -= v[i][0] * (0, _math.sin)(a);
      } else if (i == 1) {
        a = beta1 - a;
        point[0] -= v[i][0] * (0, _math.cos)(a);
        point[1] -= v[i][0] * (0, _math.sin)(a);
      } else {
        a = beta2 - a;
        point[0] += v[i][0] * (0, _math.cos)(a);
        point[1] += v[i][0] * (0, _math.sin)(a);
      }
    }

    point[0] /= 3, point[1] /= 3;
    return point;
  }

  return forward;
}

function pointRadians(p) {
  return p[0] *= _math.radians, p[1] *= _math.radians, p;
}

function chamberlinAfrica() {
  return chamberlin([0, 22], [45, 22], [22.5, -22]).scale(380).center([22.5, 2]);
}

function chamberlin(p0, p1, p2) {
  // TODO order matters!
  var c = (0, _d3Geo.geoCentroid)({ type: "MultiPoint", coordinates: [p0, p1, p2] }),
      R = [-c[0], -c[1]],
      r = (0, _d3Geo.geoRotation)(R),
      p = (0, _d3Geo.geoProjection)(chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)))).rotate(R),
      center = p.center;

  delete p.rotate;

  p.center = function (_) {
    return arguments.length ? center(r(_)) : r.invert(center());
  };

  return p.clipAngle(90);
}

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.craigRaw = craigRaw;

exports.default = function () {
  return (0, _parallel2.default)(craigRaw).scale(249.828).clipAngle(90);
};

var _math = __webpack_require__(1);

var _parallel = __webpack_require__(35);

var _parallel2 = _interopRequireDefault(_parallel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function craigRaw(phi0) {
  var tanPhi0 = (0, _math.tan)(phi0);

  function forward(lambda, phi) {
    return [lambda, (lambda ? lambda / (0, _math.sin)(lambda) : 1) * ((0, _math.sin)(phi) * (0, _math.cos)(lambda) - tanPhi0 * (0, _math.cos)(phi))];
  }

  forward.invert = tanPhi0 ? function (x, y) {
    if (x) y *= (0, _math.sin)(x) / x;
    var cosLambda = (0, _math.cos)(x);
    return [x, 2 * (0, _math.atan2)((0, _math.sqrt)(cosLambda * cosLambda + tanPhi0 * tanPhi0 - y * y) - cosLambda, tanPhi0 - y)];
  } : function (x, y) {
    return [x, (0, _math.asin)(x ? y * (0, _math.tan)(x) / x : y)];
  };

  return forward;
}

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.crasterRaw = crasterRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(crasterRaw).scale(156.19);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

var sqrt3 = (0, _math.sqrt)(3);

function crasterRaw(lambda, phi) {
  return [sqrt3 * lambda * (2 * (0, _math.cos)(2 * phi / 3) - 1) / _math.sqrtPi, sqrt3 * _math.sqrtPi * (0, _math.sin)(phi / 3)];
}

crasterRaw.invert = function (x, y) {
  var phi = 3 * (0, _math.asin)(y / (sqrt3 * _math.sqrtPi));
  return [_math.sqrtPi * x / (sqrt3 * (2 * (0, _math.cos)(2 * phi / 3) - 1)), phi];
};

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.cylindricalStereographicRaw = cylindricalStereographicRaw;

exports.default = function () {
  return (0, _parallel2.default)(cylindricalStereographicRaw).scale(124.75);
};

var _math = __webpack_require__(1);

var _parallel = __webpack_require__(35);

var _parallel2 = _interopRequireDefault(_parallel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function cylindricalStereographicRaw(phi0) {
  var cosPhi0 = (0, _math.cos)(phi0);

  function forward(lambda, phi) {
    return [lambda * cosPhi0, (1 + cosPhi0) * (0, _math.tan)(phi / 2)];
  }

  forward.invert = function (x, y) {
    return [x / cosPhi0, (0, _math.atan)(y / (1 + cosPhi0)) * 2];
  };

  return forward;
}

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.eckert1Raw = eckert1Raw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(eckert1Raw).scale(165.664);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function eckert1Raw(lambda, phi) {
  var alpha = (0, _math.sqrt)(8 / (3 * _math.pi));
  return [alpha * lambda * (1 - (0, _math.abs)(phi) / _math.pi), alpha * phi];
}

eckert1Raw.invert = function (x, y) {
  var alpha = (0, _math.sqrt)(8 / (3 * _math.pi)),
      phi = y / alpha;
  return [x / (alpha * (1 - (0, _math.abs)(phi) / _math.pi)), phi];
};

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.eckert2Raw = eckert2Raw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(eckert2Raw).scale(165.664);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function eckert2Raw(lambda, phi) {
  var alpha = (0, _math.sqrt)(4 - 3 * (0, _math.sin)((0, _math.abs)(phi)));
  return [2 / (0, _math.sqrt)(6 * _math.pi) * lambda * alpha, (0, _math.sign)(phi) * (0, _math.sqrt)(2 * _math.pi / 3) * (2 - alpha)];
}

eckert2Raw.invert = function (x, y) {
  var alpha = 2 - (0, _math.abs)(y) / (0, _math.sqrt)(2 * _math.pi / 3);
  return [x * (0, _math.sqrt)(6 * _math.pi) / (2 * alpha), (0, _math.sign)(y) * (0, _math.asin)((4 - alpha * alpha) / 3)];
};

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.eckert3Raw = eckert3Raw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(eckert3Raw).scale(180.739);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function eckert3Raw(lambda, phi) {
  var k = (0, _math.sqrt)(_math.pi * (4 + _math.pi));
  return [2 / k * lambda * (1 + (0, _math.sqrt)(1 - 4 * phi * phi / (_math.pi * _math.pi))), 4 / k * phi];
}

eckert3Raw.invert = function (x, y) {
  var k = (0, _math.sqrt)(_math.pi * (4 + _math.pi)) / 2;
  return [x * k / (1 + (0, _math.sqrt)(1 - y * y * (4 + _math.pi) / (4 * _math.pi))), y * k / 2];
};

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.eckert4Raw = eckert4Raw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(eckert4Raw).scale(180.739);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function eckert4Raw(lambda, phi) {
  var k = (2 + _math.halfPi) * (0, _math.sin)(phi);
  phi /= 2;
  for (var i = 0, delta = Infinity; i < 10 && (0, _math.abs)(delta) > _math.epsilon; i++) {
    var cosPhi = (0, _math.cos)(phi);
    phi -= delta = (phi + (0, _math.sin)(phi) * (cosPhi + 2) - k) / (2 * cosPhi * (1 + cosPhi));
  }
  return [2 / (0, _math.sqrt)(_math.pi * (4 + _math.pi)) * lambda * (1 + (0, _math.cos)(phi)), 2 * (0, _math.sqrt)(_math.pi / (4 + _math.pi)) * (0, _math.sin)(phi)];
}

eckert4Raw.invert = function (x, y) {
  var A = y * (0, _math.sqrt)((4 + _math.pi) / _math.pi) / 2,
      k = (0, _math.asin)(A),
      c = (0, _math.cos)(k);
  return [x / (2 / (0, _math.sqrt)(_math.pi * (4 + _math.pi)) * (1 + c)), (0, _math.asin)((k + A * (c + 2)) / (2 + _math.halfPi))];
};

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.eckert5Raw = eckert5Raw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(eckert5Raw).scale(173.044);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function eckert5Raw(lambda, phi) {
  return [lambda * (1 + (0, _math.cos)(phi)) / (0, _math.sqrt)(2 + _math.pi), 2 * phi / (0, _math.sqrt)(2 + _math.pi)];
}

eckert5Raw.invert = function (x, y) {
  var k = (0, _math.sqrt)(2 + _math.pi),
      phi = y * k / 2;
  return [k * x / (1 + (0, _math.cos)(phi)), phi];
};

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.eckert6Raw = eckert6Raw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(eckert6Raw).scale(173.044);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function eckert6Raw(lambda, phi) {
  var k = (1 + _math.halfPi) * (0, _math.sin)(phi);
  for (var i = 0, delta = Infinity; i < 10 && (0, _math.abs)(delta) > _math.epsilon; i++) {
    phi -= delta = (phi + (0, _math.sin)(phi) - k) / (1 + (0, _math.cos)(phi));
  }
  k = (0, _math.sqrt)(2 + _math.pi);
  return [lambda * (1 + (0, _math.cos)(phi)) / k, 2 * phi / k];
}

eckert6Raw.invert = function (x, y) {
  var j = 1 + _math.halfPi,
      k = (0, _math.sqrt)(j / 2);
  return [x * 2 * k / (1 + (0, _math.cos)(y *= k)), (0, _math.asin)((y + (0, _math.sin)(y)) / j)];
};

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.eisenlohrRaw = eisenlohrRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(eisenlohrRaw).scale(62.5271);
};

var _d3Geo = __webpack_require__(0);

var _august = __webpack_require__(171);

var _math = __webpack_require__(1);

var eisenlohrK = 3 + 2 * _math.sqrt2;

function eisenlohrRaw(lambda, phi) {
  var s0 = (0, _math.sin)(lambda /= 2),
      c0 = (0, _math.cos)(lambda),
      k = (0, _math.sqrt)((0, _math.cos)(phi)),
      c1 = (0, _math.cos)(phi /= 2),
      t = (0, _math.sin)(phi) / (c1 + _math.sqrt2 * c0 * k),
      c = (0, _math.sqrt)(2 / (1 + t * t)),
      v = (0, _math.sqrt)((_math.sqrt2 * c1 + (c0 + s0) * k) / (_math.sqrt2 * c1 + (c0 - s0) * k));
  return [eisenlohrK * (c * (v - 1 / v) - 2 * (0, _math.log)(v)), eisenlohrK * (c * t * (v + 1 / v) - 2 * (0, _math.atan)(t))];
}

eisenlohrRaw.invert = function (x, y) {
  if (!(p = _august.augustRaw.invert(x / 1.2, y * 1.065))) return null;
  var lambda = p[0],
      phi = p[1],
      i = 20,
      p;
  x /= eisenlohrK, y /= eisenlohrK;
  do {
    var _0 = lambda / 2,
        _1 = phi / 2,
        s0 = (0, _math.sin)(_0),
        c0 = (0, _math.cos)(_0),
        s1 = (0, _math.sin)(_1),
        c1 = (0, _math.cos)(_1),
        cos1 = (0, _math.cos)(phi),
        k = (0, _math.sqrt)(cos1),
        t = s1 / (c1 + _math.sqrt2 * c0 * k),
        t2 = t * t,
        c = (0, _math.sqrt)(2 / (1 + t2)),
        v0 = _math.sqrt2 * c1 + (c0 + s0) * k,
        v1 = _math.sqrt2 * c1 + (c0 - s0) * k,
        v2 = v0 / v1,
        v = (0, _math.sqrt)(v2),
        vm1v = v - 1 / v,
        vp1v = v + 1 / v,
        fx = c * vm1v - 2 * (0, _math.log)(v) - x,
        fy = c * t * vp1v - 2 * (0, _math.atan)(t) - y,
        deltatDeltaLambda = s1 && _math.sqrt1_2 * k * s0 * t2 / s1,
        deltatDeltaPhi = (_math.sqrt2 * c0 * c1 + k) / (2 * (c1 + _math.sqrt2 * c0 * k) * (c1 + _math.sqrt2 * c0 * k) * k),
        deltacDeltat = -0.5 * t * c * c * c,
        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,
        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,
        A = (A = 2 * c1 + _math.sqrt2 * k * (c0 - s0)) * A * v,
        deltavDeltaLambda = (_math.sqrt2 * c0 * c1 * k + cos1) / A,
        deltavDeltaPhi = -(_math.sqrt2 * s0 * s1) / (k * A),
        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),
        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),
        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),
        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),
        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;
    if (!denominator) break;
    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,
        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;
    lambda -= deltaLambda;
    phi = (0, _math.max)(-_math.halfPi, (0, _math.min)(_math.halfPi, phi - deltaPhi));
  } while (((0, _math.abs)(deltaLambda) > _math.epsilon || (0, _math.abs)(deltaPhi) > _math.epsilon) && --i > 0);
  return (0, _math.abs)((0, _math.abs)(phi) - _math.halfPi) < _math.epsilon ? [0, phi] : i && [lambda, phi];
};

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.faheyRaw = faheyRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(faheyRaw).scale(137.152);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

var faheyK = (0, _math.cos)(35 * _math.radians);

function faheyRaw(lambda, phi) {
  var t = (0, _math.tan)(phi / 2);
  return [lambda * faheyK * (0, _math.sqrt)(1 - t * t), (1 + faheyK) * t];
}

faheyRaw.invert = function (x, y) {
  var t = y / (1 + faheyK);
  return [x && x / (faheyK * (0, _math.sqrt)(1 - t * t)), 2 * (0, _math.atan)(t)];
};

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.foucautRaw = foucautRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(foucautRaw).scale(135.264);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function foucautRaw(lambda, phi) {
  var k = phi / 2,
      cosk = (0, _math.cos)(k);
  return [2 * lambda / _math.sqrtPi * (0, _math.cos)(phi) * cosk * cosk, _math.sqrtPi * (0, _math.tan)(k)];
}

foucautRaw.invert = function (x, y) {
  var k = (0, _math.atan)(y / _math.sqrtPi),
      cosk = (0, _math.cos)(k),
      phi = 2 * k;
  return [x * _math.sqrtPi / 2 / ((0, _math.cos)(phi) * cosk * cosk), phi];
};

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (projectionType) {
  if (projectionType == null) projectionType = _d3Geo.geoOrthographic;
  var projection = projectionType(),
      equirectangular = (0, _d3Geo.geoEquirectangular)().scale(_math.degrees).precision(0).clipAngle(null).translate([0, 0]); // antimeridian cutting

  function gilbert(point) {
    return projection(gilbertForward(point));
  }

  if (projection.invert) gilbert.invert = function (point) {
    return gilbertInvert(projection.invert(point));
  };

  gilbert.stream = function (stream) {
    var s1 = projection.stream(stream),
        s0 = equirectangular.stream({
      point: function point(lambda, phi) {
        s1.point(lambda / 2, (0, _math.asin)((0, _math.tan)(-phi / 2 * _math.radians)) * _math.degrees);
      },
      lineStart: function lineStart() {
        s1.lineStart();
      },
      lineEnd: function lineEnd() {
        s1.lineEnd();
      },
      polygonStart: function polygonStart() {
        s1.polygonStart();
      },
      polygonEnd: function polygonEnd() {
        s1.polygonEnd();
      }
    });
    s0.sphere = s1.sphere;
    return s0;
  };

  function property(name) {
    gilbert[name] = function (_) {
      return arguments.length ? (projection[name](_), gilbert) : projection[name]();
    };
  }

  gilbert.rotate = function (_) {
    return arguments.length ? (equirectangular.rotate(_), gilbert) : equirectangular.rotate();
  };

  gilbert.center = function (_) {
    return arguments.length ? (projection.center(gilbertForward(_)), gilbert) : gilbertInvert(projection.center());
  };

  property("clipAngle");
  property("clipExtent");
  property("scale");
  property("translate");
  property("precision");

  return gilbert.scale(249.5);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function gilbertForward(point) {
  return [point[0] / 2, (0, _math.asin)((0, _math.tan)(point[1] / 2 * _math.radians)) * _math.degrees];
}

function gilbertInvert(point) {
  return [point[0] * 2, 2 * (0, _math.atan)((0, _math.sin)(point[1] * _math.radians)) * _math.degrees];
}

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.gingeryRaw = gingeryRaw;

exports.default = function () {
  var n = 6,
      rho = 30 * _math.radians,
      cRho = (0, _math.cos)(rho),
      sRho = (0, _math.sin)(rho),
      m = (0, _d3Geo.geoProjectionMutator)(gingeryRaw),
      p = m(rho, n),
      stream_ = p.stream,
      epsilon = 1e-2,
      cr = -(0, _math.cos)(epsilon * _math.radians),
      sr = (0, _math.sin)(epsilon * _math.radians);

  p.radius = function (_) {
    if (!arguments.length) return rho * _math.degrees;
    cRho = (0, _math.cos)(rho = _ * _math.radians);
    sRho = (0, _math.sin)(rho);
    return m(rho, n);
  };

  p.lobes = function (_) {
    if (!arguments.length) return n;
    return m(rho, n = +_);
  };

  p.stream = function (stream) {
    var rotate = p.rotate(),
        rotateStream = stream_(stream),
        sphereStream = (p.rotate([0, 0]), stream_(stream));
    p.rotate(rotate);
    rotateStream.sphere = function () {
      sphereStream.polygonStart(), sphereStream.lineStart();
      for (var i = 0, delta = 2 * _math.pi / n, phi = 0; i < n; ++i, phi -= delta) {
        sphereStream.point((0, _math.atan2)(sr * (0, _math.cos)(phi), cr) * _math.degrees, (0, _math.asin)(sr * (0, _math.sin)(phi)) * _math.degrees);
        sphereStream.point((0, _math.atan2)(sRho * (0, _math.cos)(phi - delta / 2), cRho) * _math.degrees, (0, _math.asin)(sRho * (0, _math.sin)(phi - delta / 2)) * _math.degrees);
      }
      sphereStream.lineEnd(), sphereStream.polygonEnd();
    };
    return rotateStream;
  };

  return p.rotate([90, -40]).scale(91.7095).clipAngle(180 - 1e-3);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function gingeryRaw(rho, n) {
  var k = 2 * _math.pi / n,
      rho2 = rho * rho;

  function forward(lambda, phi) {
    var p = (0, _d3Geo.geoAzimuthalEquidistantRaw)(lambda, phi),
        x = p[0],
        y = p[1],
        r2 = x * x + y * y;

    if (r2 > rho2) {
      var r = (0, _math.sqrt)(r2),
          theta = (0, _math.atan2)(y, x),
          theta0 = k * (0, _math.round)(theta / k),
          alpha = theta - theta0,
          rhoCosAlpha = rho * (0, _math.cos)(alpha),
          k_ = (rho * (0, _math.sin)(alpha) - alpha * (0, _math.sin)(rhoCosAlpha)) / (_math.halfPi - rhoCosAlpha),
          s_ = gingeryLength(alpha, k_),
          e = (_math.pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, _math.pi);

      x = r;
      var i = 50,
          delta;
      do {
        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);
      } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);

      y = alpha * (0, _math.sin)(x);
      if (x < _math.halfPi) y -= k_ * (x - _math.halfPi);

      var s = (0, _math.sin)(theta0),
          c = (0, _math.cos)(theta0);
      p[0] = x * c - y * s;
      p[1] = x * s + y * c;
    }
    return p;
  }

  forward.invert = function (x, y) {
    var r2 = x * x + y * y;
    if (r2 > rho2) {
      var r = (0, _math.sqrt)(r2),
          theta = (0, _math.atan2)(y, x),
          theta0 = k * (0, _math.round)(theta / k),
          dTheta = theta - theta0;

      x = r * (0, _math.cos)(dTheta);
      y = r * (0, _math.sin)(dTheta);

      var x_halfPi = x - _math.halfPi,
          sinx = (0, _math.sin)(x),
          alpha = y / sinx,
          delta = x < _math.halfPi ? Infinity : 0,
          i = 10;

      while (true) {
        var rhosinAlpha = rho * (0, _math.sin)(alpha),
            rhoCosAlpha = rho * (0, _math.cos)(alpha),
            sinRhoCosAlpha = (0, _math.sin)(rhoCosAlpha),
            halfPi_RhoCosAlpha = _math.halfPi - rhoCosAlpha,
            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,
            s_ = gingeryLength(alpha, k_);

        if ((0, _math.abs)(delta) < _math.epsilon2 || ! --i) break;

        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (sinx - x_halfPi * 2 * (halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * (0, _math.cos)(rhoCosAlpha) - sinRhoCosAlpha) - rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));
      }
      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (_math.pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, _math.pi);
      theta = theta0 + alpha;
      x = r * (0, _math.cos)(theta);
      y = r * (0, _math.sin)(theta);
    }
    return _d3Geo.geoAzimuthalEquidistantRaw.invert(x, y);
  };

  return forward;
}

function gingeryLength(alpha, k) {
  return function (x) {
    var y_ = alpha * (0, _math.cos)(x);
    if (x < _math.halfPi) y_ -= k;
    return (0, _math.sqrt)(1 + y_ * y_);
  };
}

// Numerical integration: trapezoidal rule.
function gingeryIntegrate(f, a, b) {
  var n = 50,
      h = (b - a) / n,
      s = f(a) + f(b);
  for (var i = 1, x = a; i < n; ++i) {
    s += 2 * f(x += h);
  }return s * 0.5 * h;
}

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.ginzburg4Raw = undefined;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(ginzburg4Raw).scale(149.995);
};

var _d3Geo = __webpack_require__(0);

var _ginzburgPolyconic = __webpack_require__(59);

var _ginzburgPolyconic2 = _interopRequireDefault(_ginzburgPolyconic);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ginzburg4Raw = exports.ginzburg4Raw = (0, _ginzburgPolyconic2.default)(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.ginzburg5Raw = undefined;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(ginzburg5Raw).scale(153.93);
};

var _d3Geo = __webpack_require__(0);

var _ginzburgPolyconic = __webpack_require__(59);

var _ginzburgPolyconic2 = _interopRequireDefault(_ginzburgPolyconic);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ginzburg5Raw = exports.ginzburg5Raw = (0, _ginzburgPolyconic2.default)(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435, 0.082742);

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.ginzburg6Raw = undefined;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(ginzburg6Raw).scale(130.945);
};

var _d3Geo = __webpack_require__(0);

var _ginzburgPolyconic = __webpack_require__(59);

var _ginzburgPolyconic2 = _interopRequireDefault(_ginzburgPolyconic);

var _math = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ginzburg6Raw = exports.ginzburg6Raw = (0, _ginzburgPolyconic2.default)(5 / 6 * _math.pi, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.ginzburg8Raw = ginzburg8Raw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(ginzburg8Raw).scale(131.747);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function ginzburg8Raw(lambda, phi) {
  var lambda2 = lambda * lambda,
      phi2 = phi * phi;
  return [lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2), phi * (1 + phi2 / 12)];
}

ginzburg8Raw.invert = function (x, y) {
  var lambda = x,
      phi = y,
      i = 50,
      delta;
  do {
    var phi2 = phi * phi;
    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);
  } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);
  i = 50;
  x /= 1 - 0.162388 * phi2;
  do {
    var lambda4 = (lambda4 = lambda * lambda) * lambda4;
    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);
  } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);
  return [lambda, phi];
};

/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.ginzburg9Raw = undefined;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(ginzburg9Raw).scale(131.087);
};

var _d3Geo = __webpack_require__(0);

var _ginzburgPolyconic = __webpack_require__(59);

var _ginzburgPolyconic2 = _interopRequireDefault(_ginzburgPolyconic);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ginzburg9Raw = exports.ginzburg9Raw = (0, _ginzburgPolyconic2.default)(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965, 0.031762);

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.ellipticJi = ellipticJi;
exports.ellipticJ = ellipticJ;
exports.ellipticFi = ellipticFi;
exports.ellipticF = ellipticF;

var _math = __webpack_require__(1);

// Returns [sn, cn, dn](u + iv|m).
function ellipticJi(u, v, m) {
  var a, b, c;
  if (!u) {
    b = ellipticJ(v, 1 - m);
    return [[0, b[0] / b[1]], [1 / b[1], 0], [b[2] / b[1], 0]];
  }
  a = ellipticJ(u, m);
  if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];
  b = ellipticJ(v, 1 - m);
  c = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];
  return [[a[0] * b[2] / c, a[1] * a[2] * b[0] * b[1] / c], [a[1] * b[1] / c, -a[0] * a[2] * b[0] * b[2] / c], [a[2] * b[1] * b[2] / c, -m * a[0] * a[1] * b[0] / c]];
}

// Returns [sn, cn, dn, ph](u|m).
function ellipticJ(u, m) {
  var ai, b, phi, t, twon;
  if (m < _math.epsilon) {
    t = (0, _math.sin)(u);
    b = (0, _math.cos)(u);
    ai = m * (u - t * b) / 4;
    return [t - ai * b, b + ai * t, 1 - m * t * t / 2, u - ai];
  }
  if (m >= 1 - _math.epsilon) {
    ai = (1 - m) / 4;
    b = (0, _math.cosh)(u);
    t = (0, _math.tanh)(u);
    phi = 1 / b;
    twon = b * (0, _math.sinh)(u);
    return [t + ai * (twon - u) / (b * b), phi - ai * t * phi * (twon - u), phi + ai * t * phi * (twon + u), 2 * (0, _math.atan)((0, _math.exp)(u)) - _math.halfPi + ai * (twon - u) / b];
  }

  var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],
      c = [(0, _math.sqrt)(m), 0, 0, 0, 0, 0, 0, 0, 0],
      i = 0;
  b = (0, _math.sqrt)(1 - m);
  twon = 1;

  while ((0, _math.abs)(c[i] / a[i]) > _math.epsilon && i < 8) {
    ai = a[i++];
    c[i] = (ai - b) / 2;
    a[i] = (ai + b) / 2;
    b = (0, _math.sqrt)(ai * b);
    twon *= 2;
  }

  phi = twon * a[i] * u;
  do {
    t = c[i] * (0, _math.sin)(b = phi) / a[i];
    phi = ((0, _math.asin)(t) + phi) / 2;
  } while (--i);

  return [(0, _math.sin)(phi), t = (0, _math.cos)(phi), t / (0, _math.cos)(phi - b), phi];
}

// Calculate F(phi+iPsi|m).
// See Abramowitz and Stegun, 17.4.11.
function ellipticFi(phi, psi, m) {
  var r = (0, _math.abs)(phi),
      i = (0, _math.abs)(psi),
      sinhPsi = (0, _math.sinh)(i);
  if (r) {
    var cscPhi = 1 / (0, _math.sin)(r),
        cotPhi2 = 1 / ((0, _math.tan)(r) * (0, _math.tan)(r)),
        b = -(cotPhi2 + m * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m),
        c = (m - 1) * cotPhi2,
        cotLambda2 = (-b + (0, _math.sqrt)(b * b - 4 * c)) / 2;
    return [ellipticF((0, _math.atan)(1 / (0, _math.sqrt)(cotLambda2)), m) * (0, _math.sign)(phi), ellipticF((0, _math.atan)((0, _math.sqrt)((cotLambda2 / cotPhi2 - 1) / m)), 1 - m) * (0, _math.sign)(psi)];
  }
  return [0, ellipticF((0, _math.atan)(sinhPsi), 1 - m) * (0, _math.sign)(psi)];
}

// Calculate F(phi|m) where m = k² = sin²α.
// See Abramowitz and Stegun, 17.6.7.
function ellipticF(phi, m) {
  if (!m) return phi;
  if (m === 1) return (0, _math.log)((0, _math.tan)(phi / 2 + _math.quarterPi));
  var a = 1,
      b = (0, _math.sqrt)(1 - m),
      c = (0, _math.sqrt)(m);
  for (var i = 0; (0, _math.abs)(c) > _math.epsilon; i++) {
    if (phi % _math.pi) {
      var dPhi = (0, _math.atan)(b * (0, _math.tan)(phi) / a);
      if (dPhi < 0) dPhi += _math.pi;
      phi += dPhi + ~~(phi / _math.pi) * _math.pi;
    } else phi += phi;
    c = (a + b) / 2;
    b = (0, _math.sqrt)(a * b);
    c = ((a = c) - b) / 2;
  }
  return phi / ((0, _math.pow)(2, i) * a);
}

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.hammerRaw = hammerRaw;

exports.default = function () {
  var B = 2,
      m = (0, _d3Geo.geoProjectionMutator)(hammerRaw),
      p = m(B);

  p.coefficient = function (_) {
    if (!arguments.length) return B;
    return m(B = +_);
  };

  return p.scale(169.529);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function hammerRaw(A, B) {
  if (arguments.length < 2) B = A;
  if (B === 1) return _d3Geo.geoAzimuthalEqualAreaRaw;
  if (B === Infinity) return hammerQuarticAuthalicRaw;

  function forward(lambda, phi) {
    var coordinates = (0, _d3Geo.geoAzimuthalEqualAreaRaw)(lambda / B, phi);
    coordinates[0] *= A;
    return coordinates;
  }

  forward.invert = function (x, y) {
    var coordinates = _d3Geo.geoAzimuthalEqualAreaRaw.invert(x / A, y);
    coordinates[0] *= B;
    return coordinates;
  };

  return forward;
}

function hammerQuarticAuthalicRaw(lambda, phi) {
  return [lambda * (0, _math.cos)(phi) / (0, _math.cos)(phi /= 2), 2 * (0, _math.sin)(phi)];
}

hammerQuarticAuthalicRaw.invert = function (x, y) {
  var phi = 2 * (0, _math.asin)(y / 2);
  return [x * (0, _math.cos)(phi / 2) / (0, _math.cos)(phi), phi];
};

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.hammerRetroazimuthalRaw = hammerRetroazimuthalRaw;

exports.default = function () {
  var phi0 = 0,
      m = (0, _d3Geo.geoProjectionMutator)(hammerRetroazimuthalRaw),
      p = m(phi0),
      rotate_ = p.rotate,
      stream_ = p.stream,
      circle = (0, _d3Geo.geoCircle)();

  p.parallel = function (_) {
    if (!arguments.length) return phi0 * _math.degrees;
    var r = p.rotate();
    return m(phi0 = _ * _math.radians).rotate(r);
  };

  // Temporary hack; see hammerRetroazimuthalRotation.
  p.rotate = function (_) {
    if (!arguments.length) return _ = rotate_.call(p), _[1] += phi0 * _math.degrees, _;
    rotate_.call(p, [_[0], _[1] - phi0 * _math.degrees]);
    circle.center([-_[0], -_[1]]);
    return p;
  };

  p.stream = function (stream) {
    stream = stream_(stream);
    stream.sphere = function () {
      stream.polygonStart();
      var epsilon = 1e-2,
          ring = circle.radius(90 - epsilon)().coordinates[0],
          n = ring.length - 1,
          i = -1,
          p;
      stream.lineStart();
      while (++i < n) {
        stream.point((p = ring[i])[0], p[1]);
      }stream.lineEnd();
      ring = circle.radius(90 + epsilon)().coordinates[0];
      n = ring.length - 1;
      stream.lineStart();
      while (--i >= 0) {
        stream.point((p = ring[i])[0], p[1]);
      }stream.lineEnd();
      stream.polygonEnd();
    };
    return stream;
  };

  return p.scale(79.4187).parallel(45).clipAngle(180 - 1e-3);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function hammerRetroazimuthalRaw(phi0) {
  var sinPhi0 = (0, _math.sin)(phi0),
      cosPhi0 = (0, _math.cos)(phi0),
      rotate = hammerRetroazimuthalRotation(phi0);

  rotate.invert = hammerRetroazimuthalRotation(-phi0);

  function forward(lambda, phi) {
    var p = rotate(lambda, phi);
    lambda = p[0], phi = p[1];
    var sinPhi = (0, _math.sin)(phi),
        cosPhi = (0, _math.cos)(phi),
        cosLambda = (0, _math.cos)(lambda),
        z = (0, _math.acos)(sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosLambda),
        sinz = (0, _math.sin)(z),
        K = (0, _math.abs)(sinz) > _math.epsilon ? z / sinz : 1;
    return [K * cosPhi0 * (0, _math.sin)(lambda), ((0, _math.abs)(lambda) > _math.halfPi ? K : -K) * ( // rotate for back hemisphere
    sinPhi0 * cosPhi - cosPhi0 * sinPhi * cosLambda)];
  }

  forward.invert = function (x, y) {
    var rho = (0, _math.sqrt)(x * x + y * y),
        sinz = -(0, _math.sin)(rho),
        cosz = (0, _math.cos)(rho),
        a = rho * cosz,
        b = -y * sinz,
        c = rho * sinPhi0,
        d = (0, _math.sqrt)(a * a + b * b - c * c),
        phi = (0, _math.atan2)(a * c + b * d, b * c - a * d),
        lambda = (rho > _math.halfPi ? -1 : 1) * (0, _math.atan2)(x * sinz, rho * (0, _math.cos)(phi) * cosz + y * (0, _math.sin)(phi) * sinz);
    return rotate.invert(lambda, phi);
  };

  return forward;
}

// Latitudinal rotation by phi0.
// Temporary hack until D3 supports arbitrary small-circle clipping origins.
function hammerRetroazimuthalRotation(phi0) {
  var sinPhi0 = (0, _math.sin)(phi0),
      cosPhi0 = (0, _math.cos)(phi0);

  return function (lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        x = (0, _math.cos)(lambda) * cosPhi,
        y = (0, _math.sin)(lambda) * cosPhi,
        z = (0, _math.sin)(phi);
    return [(0, _math.atan2)(y, x * cosPhi0 - z * sinPhi0), (0, _math.asin)(z * cosPhi0 + x * sinPhi0)];
  };
}

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.healpixRaw = healpixRaw;

exports.default = function () {
  var H = 4,
      m = (0, _d3Geo.geoProjectionMutator)(healpixRaw),
      p = m(H),
      stream_ = p.stream;

  p.lobes = function (_) {
    return arguments.length ? m(H = +_) : H;
  };

  p.stream = function (stream) {
    var rotate = p.rotate(),
        rotateStream = stream_(stream),
        sphereStream = (p.rotate([0, 0]), stream_(stream));
    p.rotate(rotate);
    rotateStream.sphere = function () {
      (0, _d3Geo.geoStream)(sphere(180 / H), sphereStream);
    };
    return rotateStream;
  };

  return p.scale(239.75);
};

var _d3Array = __webpack_require__(14);

var _d3Geo = __webpack_require__(0);

var _collignon = __webpack_require__(90);

var _cylindricalEqualArea = __webpack_require__(173);

var _math = __webpack_require__(1);

var healpixParallel = 41 + 48 / 36 + 37 / 3600,
    // for K=3; TODO automate
healpixLambert = (0, _cylindricalEqualArea.cylindricalEqualAreaRaw)(0);

function healpixRaw(H) {
  var phi0 = healpixParallel * _math.radians,
      dx = (0, _collignon.collignonRaw)(_math.pi, phi0)[0] - (0, _collignon.collignonRaw)(-_math.pi, phi0)[0],
      y0 = healpixLambert(0, phi0)[1],
      y1 = (0, _collignon.collignonRaw)(0, phi0)[1],
      dy1 = _math.sqrtPi - y1,
      k = _math.tau / H,
      w = 4 / _math.tau,
      h = y0 + dy1 * dy1 * 4 / _math.tau;

  function forward(lambda, phi) {
    var point,
        phi2 = (0, _math.abs)(phi);
    if (phi2 > phi0) {
      var i = (0, _math.min)(H - 1, (0, _math.max)(0, (0, _math.floor)((lambda + _math.pi) / k)));
      lambda += _math.pi * (H - 1) / H - i * k;
      point = (0, _collignon.collignonRaw)(lambda, phi2);
      point[0] = point[0] * _math.tau / dx - _math.tau * (H - 1) / (2 * H) + i * _math.tau / H;
      point[1] = y0 + (point[1] - y1) * 4 * dy1 / _math.tau;
      if (phi < 0) point[1] = -point[1];
    } else {
      point = healpixLambert(lambda, phi);
    }
    point[0] *= w, point[1] /= h;
    return point;
  }

  forward.invert = function (x, y) {
    x /= w, y *= h;
    var y2 = (0, _math.abs)(y);
    if (y2 > y0) {
      var i = (0, _math.min)(H - 1, (0, _math.max)(0, (0, _math.floor)((x + _math.pi) / k)));
      x = (x + _math.pi * (H - 1) / H - i * k) * dx / _math.tau;
      var point = _collignon.collignonRaw.invert(x, 0.25 * (y2 - y0) * _math.tau / dy1 + y1);
      point[0] -= _math.pi * (H - 1) / H - i * k;
      if (y < 0) point[1] = -point[1];
      return point;
    }
    return healpixLambert.invert(x, y);
  };

  return forward;
}

function sphere(step) {
  return {
    type: "Polygon",
    coordinates: [(0, _d3Array.range)(-180, 180 + step / 2, step).map(function (x, i) {
      return [x, i & 1 ? 90 - 1e-6 : healpixParallel];
    }).concat((0, _d3Array.range)(180, -180 - step / 2, -step).map(function (x, i) {
      return [x, i & 1 ? -90 + 1e-6 : -healpixParallel];
    }))]
  };
}

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.hillRaw = hillRaw;

exports.default = function () {
  var K = 1,
      m = (0, _d3Geo.geoProjectionMutator)(hillRaw),
      p = m(K);

  p.ratio = function (_) {
    return arguments.length ? m(K = +_) : K;
  };

  return p.scale(167.774).center([0, 18.67]);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function hillRaw(K) {
  var L = 1 + K,
      sinBt = (0, _math.sin)(1 / L),
      Bt = (0, _math.asin)(sinBt),
      A = 2 * (0, _math.sqrt)(_math.pi / (B = _math.pi + 4 * Bt * L)),
      B,
      rho0 = 0.5 * A * (L + (0, _math.sqrt)(K * (2 + K))),
      K2 = K * K,
      L2 = L * L;

  function forward(lambda, phi) {
    var t = 1 - (0, _math.sin)(phi),
        rho,
        omega;
    if (t && t < 2) {
      var theta = _math.halfPi - phi,
          i = 25,
          delta;
      do {
        var sinTheta = (0, _math.sin)(theta),
            cosTheta = (0, _math.cos)(theta),
            Bt_Bt1 = Bt + (0, _math.atan2)(sinTheta, L - cosTheta),
            C = 1 + L2 - 2 * L * cosTheta;
        theta -= delta = (theta - K2 * Bt - L * sinTheta + C * Bt_Bt1 - 0.5 * t * B) / (2 * L * sinTheta * Bt_Bt1);
      } while ((0, _math.abs)(delta) > _math.epsilon2 && --i > 0);
      rho = A * (0, _math.sqrt)(C);
      omega = lambda * Bt_Bt1 / _math.pi;
    } else {
      rho = A * (K + t);
      omega = lambda * Bt / _math.pi;
    }
    return [rho * (0, _math.sin)(omega), rho0 - rho * (0, _math.cos)(omega)];
  }

  forward.invert = function (x, y) {
    var rho2 = x * x + (y -= rho0) * y,
        cosTheta = (1 + L2 - rho2 / (A * A)) / (2 * L),
        theta = (0, _math.acos)(cosTheta),
        sinTheta = (0, _math.sin)(theta),
        Bt_Bt1 = Bt + (0, _math.atan2)(sinTheta, L - cosTheta);
    return [(0, _math.asin)(x / (0, _math.sqrt)(rho2)) * _math.pi / Bt_Bt1, (0, _math.asin)(1 - 2 * (theta - K2 * Bt - L * sinTheta + (1 + L2 - 2 * L * cosTheta) * Bt_Bt1) / B)];
  };

  return forward;
}

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  return (0, _index2.default)(_boggs.boggsRaw, lobes).scale(160.857);
};

var _boggs = __webpack_require__(172);

var _index = __webpack_require__(26);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lobes = [[// northern hemisphere
[[-180, 0], [-100, 90], [-40, 0]], [[-40, 0], [30, 90], [180, 0]]], [// southern hemisphere
[[-180, 0], [-160, -90], [-100, 0]], [[-100, 0], [-60, -90], [-20, 0]], [[-20, 0], [20, -90], [80, 0]], [[80, 0], [140, -90], [180, 0]]]];

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  return (0, _index2.default)(_homolosine.homolosineRaw, lobes).scale(152.63);
};

var _homolosine = __webpack_require__(177);

var _index = __webpack_require__(26);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lobes = [[// northern hemisphere
[[-180, 0], [-100, 90], [-40, 0]], [[-40, 0], [30, 90], [180, 0]]], [// southern hemisphere
[[-180, 0], [-160, -90], [-100, 0]], [[-100, 0], [-60, -90], [-20, 0]], [[-20, 0], [20, -90], [80, 0]], [[80, 0], [140, -90], [180, 0]]]];

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  return (0, _index2.default)(_mollweide.mollweideRaw, lobes).scale(169.529);
};

var _mollweide = __webpack_require__(22);

var _index = __webpack_require__(26);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lobes = [[// northern hemisphere
[[-180, 0], [-100, 90], [-40, 0]], [[-40, 0], [30, 90], [180, 0]]], [// southern hemisphere
[[-180, 0], [-160, -90], [-100, 0]], [[-100, 0], [-60, -90], [-20, 0]], [[-20, 0], [20, -90], [80, 0]], [[80, 0], [140, -90], [180, 0]]]];

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  return (0, _index2.default)(_mollweide.mollweideRaw, lobes).scale(169.529).rotate([20, 0]);
};

var _mollweide = __webpack_require__(22);

var _index = __webpack_require__(26);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lobes = [[// northern hemisphere
[[-180, 0], [-90, 90], [0, 0]], [[0, 0], [90, 90], [180, 0]]], [// southern hemisphere
[[-180, 0], [-90, -90], [0, 0]], [[0, 0], [90, -90], [180, 0]]]];

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  return (0, _index2.default)(_sinuMollweide.sinuMollweideRaw, lobes).rotate([-20, -55]).scale(164.263).center([0, -5.4036]);
};

var _sinuMollweide = __webpack_require__(91);

var _index = __webpack_require__(26);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lobes = [[// northern hemisphere
[[-180, 35], [-30, 90], [0, 35]], [[0, 35], [30, 90], [180, 35]]], [// southern hemisphere
[[-180, -10], [-102, -90], [-65, -10]], [[-65, -10], [5, -90], [77, -10]], [[77, -10], [103, -90], [180, -10]]]];

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  return (0, _index2.default)(_sinusoidal.sinusoidalRaw, lobes).scale(152.63).rotate([-20, 0]);
};

var _sinusoidal = __webpack_require__(41);

var _index = __webpack_require__(26);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lobes = [[// northern hemisphere
[[-180, 0], [-110, 90], [-40, 0]], [[-40, 0], [0, 90], [40, 0]], [[40, 0], [110, 90], [180, 0]]], [// southern hemisphere
[[-180, 0], [-110, -90], [-40, 0]], [[-40, 0], [0, -90], [40, 0]], [[40, 0], [110, -90], [180, 0]]]];

/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.kavrayskiy7Raw = kavrayskiy7Raw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(kavrayskiy7Raw).scale(158.837);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function kavrayskiy7Raw(lambda, phi) {
  return [3 / _math.tau * lambda * (0, _math.sqrt)(_math.pi * _math.pi / 3 - phi * phi), phi];
}

kavrayskiy7Raw.invert = function (x, y) {
  return [_math.tau / 3 * x / (0, _math.sqrt)(_math.pi * _math.pi / 3 - y * y), y];
};

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.lagrangeRaw = lagrangeRaw;

exports.default = function () {
  var n = 0.5,
      m = (0, _d3Geo.geoProjectionMutator)(lagrangeRaw),
      p = m(n);

  p.spacing = function (_) {
    return arguments.length ? m(n = +_) : n;
  };

  return p.scale(124.75);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function lagrangeRaw(n) {

  function forward(lambda, phi) {
    if ((0, _math.abs)((0, _math.abs)(phi) - _math.halfPi) < _math.epsilon) return [0, phi < 0 ? -2 : 2];
    var sinPhi = (0, _math.sin)(phi),
        v = (0, _math.pow)((1 + sinPhi) / (1 - sinPhi), n / 2),
        c = 0.5 * (v + 1 / v) + (0, _math.cos)(lambda *= n);
    return [2 * (0, _math.sin)(lambda) / c, (v - 1 / v) / c];
  }

  forward.invert = function (x, y) {
    var y0 = (0, _math.abs)(y);
    if ((0, _math.abs)(y0 - 2) < _math.epsilon) return x ? null : [0, (0, _math.sign)(y) * _math.halfPi];
    if (y0 > 2) return null;

    x /= 2, y /= 2;
    var x2 = x * x,
        y2 = y * y,
        t = 2 * y / (1 + x2 + y2); // tanh(nPhi)
    t = (0, _math.pow)((1 + t) / (1 - t), 1 / n);
    return [(0, _math.atan2)(2 * x, 1 - x2 - y2) / n, (0, _math.asin)((t - 1) / (t + 1))];
  };

  return forward;
}

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.larriveeRaw = larriveeRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(larriveeRaw).scale(97.2672);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

var pi_sqrt2 = _math.pi / _math.sqrt2;

function larriveeRaw(lambda, phi) {
  return [lambda * (1 + (0, _math.sqrt)((0, _math.cos)(phi))) / 2, phi / ((0, _math.cos)(phi / 2) * (0, _math.cos)(lambda / 6))];
}

larriveeRaw.invert = function (x, y) {
  var x0 = (0, _math.abs)(x),
      y0 = (0, _math.abs)(y),
      lambda = _math.epsilon,
      phi = _math.halfPi;
  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;else lambda += 6 * (0, _math.acos)(pi_sqrt2 / y0);
  for (var i = 0; i < 25; i++) {
    var sinPhi = (0, _math.sin)(phi),
        sqrtcosPhi = (0, _math.sqrt)((0, _math.cos)(phi)),
        sinPhi_2 = (0, _math.sin)(phi / 2),
        cosPhi_2 = (0, _math.cos)(phi / 2),
        sinLambda_6 = (0, _math.sin)(lambda / 6),
        cosLambda_6 = (0, _math.cos)(lambda / 6),
        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,
        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,
        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,
        df0dLambda = 0.5 * (1 + sqrtcosPhi),
        df1dPhi = (1 + 0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),
        df1dLambda = phi / cosPhi_2 * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),
        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,
        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,
        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;
    phi -= dPhi;
    lambda -= dLambda;
    if ((0, _math.abs)(dPhi) < _math.epsilon && (0, _math.abs)(dLambda) < _math.epsilon) break;
  }
  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];
};

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.laskowskiRaw = laskowskiRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(laskowskiRaw).scale(139.98);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function laskowskiRaw(lambda, phi) {
  var lambda2 = lambda * lambda,
      phi2 = phi * phi;
  return [lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)), phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))];
}

laskowskiRaw.invert = function (x, y) {
  var lambda = (0, _math.sign)(x) * _math.pi,
      phi = y / 2,
      i = 50;
  do {
    var lambda2 = lambda * lambda,
        phi2 = phi * phi,
        lambdaPhi = lambda * phi,
        fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x,
        fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y,
        deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009),
        deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2),
        deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2),
        deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2),
        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda,
        deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,
        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;
    lambda -= deltaLambda, phi -= deltaPhi;
  } while (((0, _math.abs)(deltaLambda) > _math.epsilon || (0, _math.abs)(deltaPhi) > _math.epsilon) && --i > 0);
  return i && [lambda, phi];
};

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.littrowRaw = littrowRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(littrowRaw).scale(144.049).clipAngle(90 - 1e-3);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function littrowRaw(lambda, phi) {
  return [(0, _math.sin)(lambda) / (0, _math.cos)(phi), (0, _math.tan)(phi) * (0, _math.cos)(lambda)];
}

littrowRaw.invert = function (x, y) {
  var x2 = x * x,
      y2 = y * y,
      y2_1 = y2 + 1,
      cosPhi = x ? _math.sqrt1_2 * (0, _math.sqrt)((y2_1 - (0, _math.sqrt)(x2 * x2 + 2 * x2 * (y2 - 1) + y2_1 * y2_1)) / x2 + 1) : 1 / (0, _math.sqrt)(y2_1);
  return [(0, _math.asin)(x * cosPhi), (0, _math.sign)(y) * (0, _math.acos)(cosPhi)];
};

/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.loximuthalRaw = loximuthalRaw;

exports.default = function () {
    return (0, _parallel2.default)(loximuthalRaw).parallel(40).scale(158.837);
};

var _parallel = __webpack_require__(35);

var _parallel2 = _interopRequireDefault(_parallel);

var _math = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function loximuthalRaw(phi0) {
    var cosPhi0 = (0, _math.cos)(phi0),
        tanPhi0 = (0, _math.tan)(_math.quarterPi + phi0 / 2);

    function forward(lambda, phi) {
        var y = phi - phi0,
            x = (0, _math.abs)(y) < _math.epsilon ? lambda * cosPhi0 : (0, _math.abs)(x = _math.quarterPi + phi / 2) < _math.epsilon || (0, _math.abs)((0, _math.abs)(x) - _math.halfPi) < _math.epsilon ? 0 : lambda * y / (0, _math.log)((0, _math.tan)(x) / tanPhi0);
        return [x, y];
    }

    forward.invert = function (x, y) {
        var lambda,
            phi = y + phi0;
        return [(0, _math.abs)(y) < _math.epsilon ? x / cosPhi0 : (0, _math.abs)(lambda = _math.quarterPi + phi / 2) < _math.epsilon || (0, _math.abs)((0, _math.abs)(lambda) - _math.halfPi) < _math.epsilon ? 0 : x * (0, _math.log)((0, _math.tan)(lambda) / tanPhi0) / y, phi];
    };

    return forward;
}

/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.millerRaw = millerRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(millerRaw).scale(108.318);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function millerRaw(lambda, phi) {
  return [lambda, 1.25 * (0, _math.log)((0, _math.tan)(_math.quarterPi + 0.4 * phi))];
}

millerRaw.invert = function (x, y) {
  return [x, 2.5 * (0, _math.atan)((0, _math.exp)(0.8 * y)) - 0.625 * _math.pi];
};

/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.modifiedStereographicRaw = modifiedStereographicRaw;
exports.modifiedStereographicAlaska = modifiedStereographicAlaska;
exports.modifiedStereographicGs48 = modifiedStereographicGs48;
exports.modifiedStereographicGs50 = modifiedStereographicGs50;
exports.modifiedStereographicMiller = modifiedStereographicMiller;
exports.modifiedStereographicLee = modifiedStereographicLee;
exports.default = modifiedStereographic;

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function modifiedStereographicRaw(C) {
  var m = C.length - 1;

  function forward(lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        k = 2 / (1 + cosPhi * (0, _math.cos)(lambda)),
        zr = k * cosPhi * (0, _math.sin)(lambda),
        zi = k * (0, _math.sin)(phi),
        i = m,
        w = C[i],
        ar = w[0],
        ai = w[1],
        t;
    while (--i >= 0) {
      w = C[i];
      ar = w[0] + zr * (t = ar) - zi * ai;
      ai = w[1] + zr * ai + zi * t;
    }
    ar = zr * (t = ar) - zi * ai;
    ai = zr * ai + zi * t;
    return [ar, ai];
  }

  forward.invert = function (x, y) {
    var i = 20,
        zr = x,
        zi = y;
    do {
      var j = m,
          w = C[j],
          ar = w[0],
          ai = w[1],
          br = 0,
          bi = 0,
          t;

      while (--j >= 0) {
        w = C[j];
        br = ar + zr * (t = br) - zi * bi;
        bi = ai + zr * bi + zi * t;
        ar = w[0] + zr * (t = ar) - zi * ai;
        ai = w[1] + zr * ai + zi * t;
      }
      br = ar + zr * (t = br) - zi * bi;
      bi = ai + zr * bi + zi * t;
      ar = zr * (t = ar) - zi * ai - x;
      ai = zr * ai + zi * t - y;

      var denominator = br * br + bi * bi,
          deltar,
          deltai;
      zr -= deltar = (ar * br + ai * bi) / denominator;
      zi -= deltai = (ai * br - ar * bi) / denominator;
    } while ((0, _math.abs)(deltar) + (0, _math.abs)(deltai) > _math.epsilon * _math.epsilon && --i > 0);

    if (i) {
      var rho = (0, _math.sqrt)(zr * zr + zi * zi),
          c = 2 * (0, _math.atan)(rho * 0.5),
          sinc = (0, _math.sin)(c);
      return [(0, _math.atan2)(zr * sinc, rho * (0, _math.cos)(c)), rho ? (0, _math.asin)(zi * sinc / rho) : 0];
    }
  };

  return forward;
}

var alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]],
    gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]],
    gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]],
    miller = [[0.9245, 0], [0, 0], [0.01943, 0]],
    lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];

function modifiedStereographicAlaska() {
  return modifiedStereographic(alaska, [152, -64]).scale(1500).center([-160.908, 62.4864]).clipAngle(25);
}

function modifiedStereographicGs48() {
  return modifiedStereographic(gs48, [95, -38]).scale(1000).clipAngle(55).center([-96.5563, 38.8675]);
}

function modifiedStereographicGs50() {
  return modifiedStereographic(gs50, [120, -45]).scale(359.513).clipAngle(55).center([-117.474, 53.0628]);
}

function modifiedStereographicMiller() {
  return modifiedStereographic(miller, [-20, -18]).scale(209.091).center([20, 16.7214]).clipAngle(82);
}

function modifiedStereographicLee() {
  return modifiedStereographic(lee, [165, 10]).scale(250).clipAngle(130).center([-165, -10]);
}

function modifiedStereographic(coefficients, rotate) {
  var p = (0, _d3Geo.geoProjection)(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),
      r = (0, _d3Geo.geoRotation)(rotate),
      center = p.center;

  delete p.rotate;

  p.center = function (_) {
    return arguments.length ? center(r(_)) : r.invert(center());
  };

  return p;
}

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.mtFlatPolarParabolicRaw = mtFlatPolarParabolicRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(mtFlatPolarParabolicRaw).scale(164.859);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

var sqrt6 = (0, _math.sqrt)(6),
    sqrt7 = (0, _math.sqrt)(7);

function mtFlatPolarParabolicRaw(lambda, phi) {
  var theta = (0, _math.asin)(7 * (0, _math.sin)(phi) / (3 * sqrt6));
  return [sqrt6 * lambda * (2 * (0, _math.cos)(2 * theta / 3) - 1) / sqrt7, 9 * (0, _math.sin)(theta / 3) / sqrt7];
}

mtFlatPolarParabolicRaw.invert = function (x, y) {
  var theta = 3 * (0, _math.asin)(y * sqrt7 / 9);
  return [x * sqrt7 / (sqrt6 * (2 * (0, _math.cos)(2 * theta / 3) - 1)), (0, _math.asin)((0, _math.sin)(theta) * 3 * sqrt6 / 7)];
};

/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.mtFlatPolarQuarticRaw = mtFlatPolarQuarticRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(mtFlatPolarQuarticRaw).scale(188.209);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function mtFlatPolarQuarticRaw(lambda, phi) {
  var k = (1 + _math.sqrt1_2) * (0, _math.sin)(phi),
      theta = phi;
  for (var i = 0, delta; i < 25; i++) {
    theta -= delta = ((0, _math.sin)(theta / 2) + (0, _math.sin)(theta) - k) / (0.5 * (0, _math.cos)(theta / 2) + (0, _math.cos)(theta));
    if ((0, _math.abs)(delta) < _math.epsilon) break;
  }
  return [lambda * (1 + 2 * (0, _math.cos)(theta) / (0, _math.cos)(theta / 2)) / (3 * _math.sqrt2), 2 * (0, _math.sqrt)(3) * (0, _math.sin)(theta / 2) / (0, _math.sqrt)(2 + _math.sqrt2)];
}

mtFlatPolarQuarticRaw.invert = function (x, y) {
  var sinTheta_2 = y * (0, _math.sqrt)(2 + _math.sqrt2) / (2 * (0, _math.sqrt)(3)),
      theta = 2 * (0, _math.asin)(sinTheta_2);
  return [3 * _math.sqrt2 * x / (1 + 2 * (0, _math.cos)(theta) / (0, _math.cos)(theta / 2)), (0, _math.asin)((sinTheta_2 + (0, _math.sin)(theta)) / (1 + _math.sqrt1_2))];
};

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.mtFlatPolarSinusoidalRaw = mtFlatPolarSinusoidalRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(mtFlatPolarSinusoidalRaw).scale(166.518);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function mtFlatPolarSinusoidalRaw(lambda, phi) {
  var A = (0, _math.sqrt)(6 / (4 + _math.pi)),
      k = (1 + _math.pi / 4) * (0, _math.sin)(phi),
      theta = phi / 2;
  for (var i = 0, delta; i < 25; i++) {
    theta -= delta = (theta / 2 + (0, _math.sin)(theta) - k) / (0.5 + (0, _math.cos)(theta));
    if ((0, _math.abs)(delta) < _math.epsilon) break;
  }
  return [A * (0.5 + (0, _math.cos)(theta)) * lambda / 1.5, A * theta];
}

mtFlatPolarSinusoidalRaw.invert = function (x, y) {
  var A = (0, _math.sqrt)(6 / (4 + _math.pi)),
      theta = y / A;
  if ((0, _math.abs)((0, _math.abs)(theta) - _math.halfPi) < _math.epsilon) theta = theta < 0 ? -_math.halfPi : _math.halfPi;
  return [1.5 * x / (A * (0.5 + (0, _math.cos)(theta))), (0, _math.asin)((theta / 2 + (0, _math.sin)(theta)) / (1 + _math.pi / 4))];
};

/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.naturalEarthRaw = naturalEarthRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(naturalEarthRaw).scale(175.295);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function naturalEarthRaw(lambda, phi) {
  var phi2 = phi * phi,
      phi4 = phi2 * phi2;
  return [lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))), phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))];
}

naturalEarthRaw.invert = function (x, y) {
  var phi = y,
      i = 25,
      delta;
  do {
    var phi2 = phi * phi,
        phi4 = phi2 * phi2;
    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
  } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);
  return [x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))), phi];
};

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.naturalEarth2Raw = naturalEarth2Raw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(naturalEarth2Raw).scale(175.295);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function naturalEarth2Raw(lambda, phi) {
  var phi2 = phi * phi,
      phi4 = phi2 * phi2,
      phi6 = phi2 * phi4;
  return [lambda * (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)), phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))];
}

naturalEarth2Raw.invert = function (x, y) {
  var phi = y,
      i = 25,
      delta,
      phi2,
      phi4,
      phi6;
  do {
    phi2 = phi * phi;phi4 = phi2 * phi2;
    phi -= delta = (phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4)) - y) / (1.01183 + phi4 * phi4 * (9 * -0.02625 + 11 * 0.01926 * phi2 + 13 * -0.00396 * phi4));
  } while ((0, _math.abs)(delta) > _math.epsilon2 && --i > 0);
  phi2 = phi * phi;phi4 = phi2 * phi2;phi6 = phi2 * phi4;
  return [x / (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)), phi];
};

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.nellHammerRaw = nellHammerRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(nellHammerRaw).scale(152.63);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function nellHammerRaw(lambda, phi) {
  return [lambda * (1 + (0, _math.cos)(phi)) / 2, 2 * (phi - (0, _math.tan)(phi / 2))];
}

nellHammerRaw.invert = function (x, y) {
  var p = y / 2;
  for (var i = 0, delta = Infinity; i < 10 && (0, _math.abs)(delta) > _math.epsilon; ++i) {
    var c = (0, _math.cos)(y / 2);
    y -= delta = (y - (0, _math.tan)(y / 2) - p) / (1 - 0.5 / (c * c));
  }
  return [2 * x / (1 + (0, _math.cos)(y)), y];
};

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.pattersonRaw = pattersonRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(pattersonRaw).scale(139.319);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

// Based on Java implementation by Bojan Savric.
// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java

var pattersonK1 = 1.0148,
    pattersonK2 = 0.23185,
    pattersonK3 = -0.14499,
    pattersonK4 = 0.02406,
    pattersonC1 = pattersonK1,
    pattersonC2 = 5 * pattersonK2,
    pattersonC3 = 7 * pattersonK3,
    pattersonC4 = 9 * pattersonK4,
    pattersonYmax = 1.790857183;

function pattersonRaw(lambda, phi) {
  var phi2 = phi * phi;
  return [lambda, phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))];
}

pattersonRaw.invert = function (x, y) {
  if (y > pattersonYmax) y = pattersonYmax;else if (y < -pattersonYmax) y = -pattersonYmax;
  var yc = y,
      delta;

  do {
    // Newton-Raphson
    var y2 = yc * yc;
    yc -= delta = (yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));
  } while ((0, _math.abs)(delta) > _math.epsilon);

  return [x, yc];
};

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.polyconicRaw = polyconicRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(polyconicRaw).scale(103.74);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function polyconicRaw(lambda, phi) {
  if ((0, _math.abs)(phi) < _math.epsilon) return [lambda, 0];
  var tanPhi = (0, _math.tan)(phi),
      k = lambda * (0, _math.sin)(phi);
  return [(0, _math.sin)(k) / tanPhi, phi + (1 - (0, _math.cos)(k)) / tanPhi];
}

polyconicRaw.invert = function (x, y) {
  if ((0, _math.abs)(y) < _math.epsilon) return [x, 0];
  var k = x * x + y * y,
      phi = y * 0.5,
      i = 10,
      delta;
  do {
    var tanPhi = (0, _math.tan)(phi),
        secPhi = 1 / (0, _math.cos)(phi),
        j = k - 2 * y * phi + phi * phi;
    phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);
  } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);
  tanPhi = (0, _math.tan)(phi);
  return [((0, _math.abs)(y) < (0, _math.abs)(phi + 1 / tanPhi) ? (0, _math.asin)(x * tanPhi) : (0, _math.sign)(x) * ((0, _math.acos)((0, _math.abs)(x * tanPhi)) + _math.halfPi)) / (0, _math.sin)(phi), phi];
};

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (a, b) {
  var u = subtract(a[1], a[0]),
      v = subtract(b[1], b[0]),
      phi = angle(u, v),
      s = length(u) / length(v);

  return multiply([1, 0, a[0][0], 0, 1, a[0][1]], multiply([s, 0, 0, 0, s, 0], multiply([(0, _math.cos)(phi), (0, _math.sin)(phi), 0, -(0, _math.sin)(phi), (0, _math.cos)(phi), 0], [1, 0, -b[0][0], 0, 1, -b[0][1]])));
};

exports.inverse = inverse;
exports.multiply = multiply;

var _math = __webpack_require__(1);

// Inverts a transform matrix.
function inverse(m) {
  var k = 1 / (m[0] * m[4] - m[1] * m[3]);
  return [k * m[4], -k * m[1], k * (m[1] * m[5] - m[2] * m[4]), -k * m[3], k * m[0], k * (m[2] * m[3] - m[0] * m[5])];
}

// Multiplies two 3x2 matrices.


// Note: 6-element arrays are used to denote the 3x3 affine transform matrix:
// [a, b, c,
//  d, e, f,
//  0, 0, 1] - this redundant row is left out.

// Transform matrix for [a0, a1] -> [b0, b1].
function multiply(a, b) {
  return [a[0] * b[0] + a[1] * b[3], a[0] * b[1] + a[1] * b[4], a[0] * b[2] + a[1] * b[5] + a[2], a[3] * b[0] + a[4] * b[3], a[3] * b[1] + a[4] * b[4], a[3] * b[2] + a[4] * b[5] + a[5]];
}

// Subtracts 2D vectors.
function subtract(a, b) {
  return [a[0] - b[0], a[1] - b[1]];
}

// Magnitude of a 2D vector.
function length(v) {
  return (0, _math.sqrt)(v[0] * v[0] + v[1] * v[1]);
}

// Angle between two 2D vectors.
function angle(a, b) {
  return (0, _math.atan2)(a[0] * b[1] - a[1] * b[0], a[0] * b[0] + a[1] * b[1]);
}

/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (faceProjection) {

  faceProjection = faceProjection || function (face) {
    var c = (0, _d3Geo.geoCentroid)({ type: "MultiPoint", coordinates: face });
    return (0, _d3Geo.geoGnomonic)().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);
  };

  var faces = _octahedron2.default.map(function (face) {
    return { face: face, project: faceProjection(face) };
  });

  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function (d, i) {
    var node = faces[d];
    node && (node.children || (node.children = [])).push(faces[i]);
  });

  return (0, _index2.default)(faces[0], function (lambda, phi) {
    return faces[lambda < -_math.pi / 2 ? phi < 0 ? 6 : 4 : lambda < 0 ? phi < 0 ? 2 : 0 : lambda < _math.pi / 2 ? phi < 0 ? 3 : 1 : phi < 0 ? 7 : 5];
  }).scale(101.858).center([0, 45]);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

var _index = __webpack_require__(60);

var _index2 = _interopRequireDefault(_index);

var _octahedron = __webpack_require__(92);

var _octahedron2 = _interopRequireDefault(_octahedron);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (faceProjection) {

  faceProjection = faceProjection || function (face) {
    var c = (0, _d3Geo.geoCentroid)({ type: "MultiPoint", coordinates: face });
    return (0, _d3Geo.geoProjection)(collignonK).translate([0, 0]).scale(1).rotate(c[1] > 0 ? [-c[0], 0] : [180 - c[0], 180]);
  };

  var faces = _octahedron2.default.map(function (face) {
    return { face: face, project: faceProjection(face) };
  });

  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function (d, i) {
    var node = faces[d];
    node && (node.children || (node.children = [])).push(faces[i]);
  });

  return (0, _index2.default)(faces[0], function (lambda, phi) {
    return faces[lambda < -_math.pi / 2 ? phi < 0 ? 6 : 4 : lambda < 0 ? phi < 0 ? 2 : 0 : lambda < _math.pi / 2 ? phi < 0 ? 3 : 1 : phi < 0 ? 7 : 5];
  }).scale(121.906).center([0, 48.5904]);
};

var _d3Geo = __webpack_require__(0);

var _collignon = __webpack_require__(90);

var _math = __webpack_require__(1);

var _index = __webpack_require__(60);

var _index2 = _interopRequireDefault(_index);

var _octahedron = __webpack_require__(92);

var _octahedron2 = _interopRequireDefault(_octahedron);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var kx = 2 / (0, _math.sqrt)(3);

function collignonK(a, b) {
  var p = (0, _collignon.collignonRaw)(a, b);
  return [p[0] * kx, p[1]];
}

collignonK.invert = function (x, y) {
  return _collignon.collignonRaw.invert(x / kx, y);
};

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (faceProjection) {

  faceProjection = faceProjection || function (face) {
    var c = face.length === 6 ? (0, _d3Geo.geoCentroid)({ type: "MultiPoint", coordinates: face }) : face[0];
    return (0, _d3Geo.geoGnomonic)().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);
  };

  var w5 = _octahedron2.default.map(function (face) {
    var xyz = face.map(cartesian),
        n = xyz.length,
        a = xyz[n - 1],
        b,
        hexagon = [];
    for (var i = 0; i < n; ++i) {
      b = xyz[i];
      hexagon.push(spherical([a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794, a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794, a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794]), spherical([b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794, b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794, b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794]));
      a = b;
    }
    return hexagon;
  });

  var cornerNormals = [];

  var parents = [-1, 0, 0, 1, 0, 1, 4, 5];

  w5.forEach(function (hexagon, j) {
    var face = _octahedron2.default[j],
        n = face.length,
        normals = cornerNormals[j] = [];
    for (var i = 0; i < n; ++i) {
      w5.push([face[i], hexagon[(i * 2 + 2) % (2 * n)], hexagon[(i * 2 + 1) % (2 * n)]]);
      parents.push(j);
      normals.push(cross(cartesian(hexagon[(i * 2 + 2) % (2 * n)]), cartesian(hexagon[(i * 2 + 1) % (2 * n)])));
    }
  });

  var faces = w5.map(function (face) {
    return {
      project: faceProjection(face),
      face: face
    };
  });

  parents.forEach(function (d, i) {
    var parent = faces[d];
    parent && (parent.children || (parent.children = [])).push(faces[i]);
  });

  function face(lambda, phi) {
    var cosphi = (0, _math.cos)(phi),
        p = [cosphi * (0, _math.cos)(lambda), cosphi * (0, _math.sin)(lambda), (0, _math.sin)(phi)];

    var hexagon = lambda < -_math.pi / 2 ? phi < 0 ? 6 : 4 : lambda < 0 ? phi < 0 ? 2 : 0 : lambda < _math.pi / 2 ? phi < 0 ? 3 : 1 : phi < 0 ? 7 : 5;

    var n = cornerNormals[hexagon];

    return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1 : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2 : hexagon];
  }

  return (0, _index2.default)(faces[0], face).scale(110.625).center([0, 45]);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

var _index = __webpack_require__(60);

var _index2 = _interopRequireDefault(_index);

var _octahedron = __webpack_require__(92);

var _octahedron2 = _interopRequireDefault(_octahedron);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dot(a, b) {
  for (var i = 0, n = a.length, s = 0; i < n; ++i) {
    s += a[i] * b[i];
  }return s;
}

function cross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
}

// Converts 3D Cartesian to spherical coordinates (degrees).
function spherical(cartesian) {
  return [(0, _math.atan2)(cartesian[1], cartesian[0]) * _math.degrees, (0, _math.asin)((0, _math.max)(-1, (0, _math.min)(1, cartesian[2]))) * _math.degrees];
}

// Converts spherical coordinates (degrees) to 3D Cartesian.
function cartesian(coordinates) {
  var lambda = coordinates[0] * _math.radians,
      phi = coordinates[1] * _math.radians,
      cosphi = (0, _math.cos)(phi);
  return [cosphi * (0, _math.cos)(lambda), cosphi * (0, _math.sin)(lambda), (0, _math.sin)(phi)];
}

/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (object, projection) {
  var stream = projection.stream,
      project;
  if (!stream) throw new Error("invalid projection");
  switch (object && object.type) {
    case "Feature":
      project = projectFeature;break;
    case "FeatureCollection":
      project = projectFeatureCollection;break;
    default:
      project = projectGeometry;break;
  }
  return project(object, stream);
};

var _d3Geo = __webpack_require__(0);

var _noop = __webpack_require__(391);

var _noop2 = _interopRequireDefault(_noop);

var _clockwise = __webpack_require__(392);

var _clockwise2 = _interopRequireDefault(_clockwise);

var _contains = __webpack_require__(393);

var _contains2 = _interopRequireDefault(_contains);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function projectFeatureCollection(o, stream) {
  return {
    type: "FeatureCollection",
    features: o.features.map(function (f) {
      return projectFeature(f, stream);
    })
  };
}

function projectFeature(o, stream) {
  return {
    type: "Feature",
    id: o.id,
    properties: o.properties,
    geometry: projectGeometry(o.geometry, stream)
  };
}

function projectGeometryCollection(o, stream) {
  return {
    type: "GeometryCollection",
    geometries: o.geometries.map(function (o) {
      return projectGeometry(o, stream);
    })
  };
}

function projectGeometry(o, stream) {
  if (!o) return null;
  if (o.type === "GeometryCollection") return projectGeometryCollection(o, stream);
  var sink;
  switch (o.type) {
    case "Point":
      sink = sinkPoint;break;
    case "MultiPoint":
      sink = sinkPoint;break;
    case "LineString":
      sink = sinkLine;break;
    case "MultiLineString":
      sink = sinkLine;break;
    case "Polygon":
      sink = sinkPolygon;break;
    case "MultiPolygon":
      sink = sinkPolygon;break;
    case "Sphere":
      sink = sinkPolygon;break;
    default:
      return null;
  }
  (0, _d3Geo.geoStream)(o, stream(sink));
  return sink.result();
}

var points = [],
    lines = [];

var sinkPoint = {
  point: function point(x, y) {
    points.push([x, y]);
  },
  result: function result() {
    var result = !points.length ? null : points.length < 2 ? { type: "Point", coordinates: points[0] } : { type: "MultiPoint", coordinates: points };
    points = [];
    return result;
  }
};

var sinkLine = {
  lineStart: _noop2.default,
  point: function point(x, y) {
    points.push([x, y]);
  },
  lineEnd: function lineEnd() {
    if (points.length) lines.push(points), points = [];
  },
  result: function result() {
    var result = !lines.length ? null : lines.length < 2 ? { type: "LineString", coordinates: lines[0] } : { type: "MultiLineString", coordinates: lines };
    lines = [];
    return result;
  }
};

var sinkPolygon = {
  polygonStart: _noop2.default,
  lineStart: _noop2.default,
  point: function point(x, y) {
    points.push([x, y]);
  },
  lineEnd: function lineEnd() {
    var n = points.length;
    if (n) {
      do {
        points.push(points[0].slice());
      } while (++n < 4);
      lines.push(points), points = [];
    }
  },
  polygonEnd: _noop2.default,
  result: function result() {
    if (!lines.length) return null;
    var polygons = [],
        holes = [];

    // https://github.com/d3/d3/issues/1558
    lines.forEach(function (ring) {
      if ((0, _clockwise2.default)(ring)) polygons.push([ring]);else holes.push(ring);
    });

    holes.forEach(function (hole) {
      var point = hole[0];
      polygons.some(function (polygon) {
        if ((0, _contains2.default)(polygon[0], point)) {
          polygon.push(hole);
          return true;
        }
      }) || polygons.push([hole]);
    });

    lines = [];

    return !polygons.length ? null : polygons.length > 1 ? { type: "MultiPolygon", coordinates: polygons } : { type: "Polygon", coordinates: polygons[0] };
  }
};

/***/ }),
/* 391 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function () {};

/***/ }),
/* 392 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (ring) {
  if ((n = ring.length) < 4) return false;
  var i = 0,
      n,
      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
  while (++i < n) {
    area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
  }return area <= 0;
};

/***/ }),
/* 393 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (ring, point) {
    var x = point[0],
        y = point[1],
        contains = false;
    for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
        var pi = ring[i],
            xi = pi[0],
            yi = pi[1],
            pj = ring[j],
            xj = pj[0],
            yj = pj[1];
        if (yi > y ^ yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = !contains;
    }
    return contains;
};

/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  return (0, _index2.default)(_gringorten.gringortenRaw).scale(176.423);
};

var _gringorten = __webpack_require__(174);

var _index = __webpack_require__(93);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  return (0, _index2.default)(_guyou.guyouRaw).scale(111.48);
};

var _guyou = __webpack_require__(176);

var _index = __webpack_require__(93);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 396 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (input, digits) {
  if (!(0 <= (digits = +digits) && digits <= 20)) throw new Error("invalid digits");

  function quantizePoint(input) {
    var n = input.length,
        i = 2,
        output = new Array(n);
    output[0] = +input[0].toFixed(digits);
    output[1] = +input[1].toFixed(digits);
    while (i < n) {
      output[i] = input[i], ++i;
    }return output;
  }

  function quantizePoints(input) {
    return input.map(quantizePoint);
  }

  function quantizePolygon(input) {
    return input.map(quantizePoints);
  }

  function quantizeGeometry(input) {
    if (input == null) return input;
    var output;
    switch (input.type) {
      case "GeometryCollection":
        output = { type: "GeometryCollection", geometries: input.geometries.map(quantizeGeometry) };break;
      case "Point":
        output = { type: "Point", coordinates: quantizePoint(input.coordinates) };break;
      case "MultiPoint":case "LineString":
        output = { type: input.type, coordinates: quantizePoints(input.coordinates) };break;
      case "MultiLineString":case "Polygon":
        output = { type: input.type, coordinates: quantizePolygon(input.coordinates) };break;
      case "MultiPolygon":
        output = { type: "MultiPolygon", coordinates: input.coordinates.map(quantizePolygon) };break;
      default:
        return input;
    }
    if (input.bbox != null) output.bbox = input.bbox;
    return output;
  }

  function quantizeFeature(input) {
    var output = { type: "Feature", properties: input.properties, geometry: quantizeGeometry(input.geometry) };
    if (input.id != null) output.id = input.id;
    if (input.bbox != null) output.bbox = input.bbox;
    return output;
  }

  if (input != null) switch (input.type) {
    case "Feature":
      return quantizeFeature(input);
    case "FeatureCollection":
      {
        var output = { type: "FeatureCollection", features: input.features.map(quantizeFeature) };
        if (input.bbox != null) output.bbox = input.bbox;
        return output;
      }
    default:
      return quantizeGeometry(input);
  }

  return input;
};

/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.rectangularPolyconicRaw = rectangularPolyconicRaw;

exports.default = function () {
  return (0, _parallel2.default)(rectangularPolyconicRaw).scale(131.215);
};

var _math = __webpack_require__(1);

var _parallel = __webpack_require__(35);

var _parallel2 = _interopRequireDefault(_parallel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function rectangularPolyconicRaw(phi0) {
  var sinPhi0 = (0, _math.sin)(phi0);

  function forward(lambda, phi) {
    var A = sinPhi0 ? (0, _math.tan)(lambda * sinPhi0 / 2) / sinPhi0 : lambda / 2;
    if (!phi) return [2 * A, -phi0];
    var E = 2 * (0, _math.atan)(A * (0, _math.sin)(phi)),
        cotPhi = 1 / (0, _math.tan)(phi);
    return [(0, _math.sin)(E) * cotPhi, phi + (1 - (0, _math.cos)(E)) * cotPhi - phi0];
  }

  // TODO return null for points outside outline.
  forward.invert = function (x, y) {
    if ((0, _math.abs)(y += phi0) < _math.epsilon) return [sinPhi0 ? 2 * (0, _math.atan)(sinPhi0 * x / 2) / sinPhi0 : x, 0];
    var k = x * x + y * y,
        phi = 0,
        i = 10,
        delta;
    do {
      var tanPhi = (0, _math.tan)(phi),
          secPhi = 1 / (0, _math.cos)(phi),
          j = k - 2 * y * phi + phi * phi;
      phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);
    } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);
    var E = x * (tanPhi = (0, _math.tan)(phi)),
        A = (0, _math.tan)((0, _math.abs)(y) < (0, _math.abs)(phi + 1 / tanPhi) ? (0, _math.asin)(E) * 0.5 : (0, _math.acos)(E) * 0.5 + _math.pi / 4) / (0, _math.sin)(phi);
    return [sinPhi0 ? 2 * (0, _math.atan)(sinPhi0 * A) / sinPhi0 : 2 * A, phi];
  };

  return forward;
}

/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.robinsonRaw = robinsonRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(robinsonRaw).scale(152.63);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

var K = [[0.9986, -0.062], [1.0000, 0.0000], [0.9986, 0.0620], [0.9954, 0.1240], [0.9900, 0.1860], [0.9822, 0.2480], [0.9730, 0.3100], [0.9600, 0.3720], [0.9427, 0.4340], [0.9216, 0.4958], [0.8962, 0.5571], [0.8679, 0.6176], [0.8350, 0.6769], [0.7986, 0.7346], [0.7597, 0.7903], [0.7186, 0.8435], [0.6732, 0.8936], [0.6213, 0.9394], [0.5722, 0.9761], [0.5322, 1.0000]];

K.forEach(function (d) {
  d[1] *= 1.0144;
});

function robinsonRaw(lambda, phi) {
  var i = (0, _math.min)(18, (0, _math.abs)(phi) * 36 / _math.pi),
      i0 = (0, _math.floor)(i),
      di = i - i0,
      ax = (k = K[i0])[0],
      ay = k[1],
      bx = (k = K[++i0])[0],
      by = k[1],
      cx = (k = K[(0, _math.min)(19, ++i0)])[0],
      cy = k[1],
      k;
  return [lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), (phi > 0 ? _math.halfPi : -_math.halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)];
}

robinsonRaw.invert = function (x, y) {
  var yy = y / _math.halfPi,
      phi = yy * 90,
      i = (0, _math.min)(18, (0, _math.abs)(phi / 5)),
      i0 = (0, _math.max)(0, (0, _math.floor)(i));
  do {
    var ay = K[i0][1],
        by = K[i0 + 1][1],
        cy = K[(0, _math.min)(19, i0 + 2)][1],
        u = cy - ay,
        v = cy - 2 * by + ay,
        t = 2 * ((0, _math.abs)(yy) - by) / u,
        c = v / u,
        di = t * (1 - c * t * (1 - 2 * c * t));
    if (di >= 0 || i0 === 1) {
      phi = (y >= 0 ? 5 : -5) * (di + i);
      var j = 50,
          delta;
      do {
        i = (0, _math.min)(18, (0, _math.abs)(phi) / 5);
        i0 = (0, _math.floor)(i);
        di = i - i0;
        ay = K[i0][1];
        by = K[i0 + 1][1];
        cy = K[(0, _math.min)(19, i0 + 2)][1];
        phi -= (delta = (y >= 0 ? _math.halfPi : -_math.halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * _math.degrees;
      } while ((0, _math.abs)(delta) > _math.epsilon2 && --j > 0);
      break;
    }
  } while (--i0 >= 0);
  var ax = K[i0][0],
      bx = K[i0 + 1][0],
      cx = K[(0, _math.min)(19, i0 + 2)][0];
  return [x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), phi * _math.radians];
};

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.satelliteRaw = satelliteRaw;

exports.default = function () {
  var distance = 2,
      omega = 0,
      m = (0, _d3Geo.geoProjectionMutator)(satelliteRaw),
      p = m(distance, omega);

  // As a multiple of radius.
  p.distance = function (_) {
    if (!arguments.length) return distance;
    return m(distance = +_, omega);
  };

  p.tilt = function (_) {
    if (!arguments.length) return omega * _math.degrees;
    return m(distance, omega = _ * _math.radians);
  };

  return p.scale(432.147).clipAngle((0, _math.acos)(1 / distance) * _math.degrees - 1e-6);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function satelliteVerticalRaw(P) {
  function forward(lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        k = (P - 1) / (P - cosPhi * (0, _math.cos)(lambda));
    return [k * cosPhi * (0, _math.sin)(lambda), k * (0, _math.sin)(phi)];
  }

  forward.invert = function (x, y) {
    var rho2 = x * x + y * y,
        rho = (0, _math.sqrt)(rho2),
        sinc = (P - (0, _math.sqrt)(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));
    return [(0, _math.atan2)(x * sinc, rho * (0, _math.sqrt)(1 - sinc * sinc)), rho ? (0, _math.asin)(y * sinc / rho) : 0];
  };

  return forward;
}

function satelliteRaw(P, omega) {
  var vertical = satelliteVerticalRaw(P);
  if (!omega) return vertical;
  var cosOmega = (0, _math.cos)(omega),
      sinOmega = (0, _math.sin)(omega);

  function forward(lambda, phi) {
    var coordinates = vertical(lambda, phi),
        y = coordinates[1],
        A = y * sinOmega / (P - 1) + cosOmega;
    return [coordinates[0] * cosOmega / A, y / A];
  }

  forward.invert = function (x, y) {
    var k = (P - 1) / (P - 1 - y * sinOmega);
    return vertical.invert(k * x, k * y * cosOmega);
  };

  return forward;
}

/***/ }),
/* 400 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (input) {
  if (input == null) return input;
  switch (input.type) {
    case "Feature":
      return stitchFeature(input);
    case "FeatureCollection":
      {
        var output = { type: "FeatureCollection", features: input.features.map(stitchFeature) };
        if (input.bbox != null) output.bbox = input.bbox;
        return output;
      }
    default:
      return stitchGeometry(input);
  }
};

var epsilon = 1e-4,
    epsilonInverse = 1e4,
    x0 = -180,
    x0e = x0 + epsilon,
    x1 = 180,
    x1e = x1 - epsilon,
    y0 = -90,
    y0e = y0 + epsilon,
    y1 = 90,
    y1e = y1 - epsilon;

function nonempty(coordinates) {
  return coordinates.length > 0;
}

function quantize(x) {
  return Math.floor(x * epsilonInverse) / epsilonInverse;
}

function normalizePoint(y) {
  return y === y0 || y === y1 ? [0, y] : [x0, quantize(y)]; // pole or antimeridian?
}

function clampPoint(p) {
  var x = p[0],
      y = p[1],
      clamped = false;
  if (x <= x0e) x = x0, clamped = true;else if (x >= x1e) x = x1, clamped = true;
  if (y <= y0e) y = y0, clamped = true;else if (y >= y1e) y = y1, clamped = true;
  return clamped ? [x, y] : p;
}

function clampPoints(points) {
  return points.map(clampPoint);
}

// For each ring, detect where it crosses the antimeridian or pole.
function extractFragments(rings, polygon, fragments) {
  for (var j = 0, m = rings.length; j < m; ++j) {
    var ring = rings[j].slice();

    // By default, assume that this ring doesn’t need any stitching.
    fragments.push({ index: -1, polygon: polygon, ring: ring });

    for (var i = 0, n = ring.length; i < n; ++i) {
      var point = ring[i],
          x = point[0],
          y = point[1];

      // If this is an antimeridian or polar point…
      if (x <= x0e || x >= x1e || y <= y0e || y >= y1e) {
        ring[i] = clampPoint(point);

        // Advance through any antimeridian or polar points…
        for (var k = i + 1; k < n; ++k) {
          var pointk = ring[k],
              xk = pointk[0],
              yk = pointk[1];
          if (xk > x0e && xk < x1e && yk > y0e && yk < y1e) break;
        }

        // If this was just a single antimeridian or polar point,
        // we don’t need to cut this ring into a fragment;
        // we can just leave it as-is.
        if (k === i + 1) continue;

        // Otherwise, if this is not the first point in the ring,
        // cut the current fragment so that it ends at the current point.
        // The current point is also normalized for later joining.
        if (i) {
          var fragmentBefore = { index: -1, polygon: polygon, ring: ring.slice(0, i + 1) };
          fragmentBefore.ring[fragmentBefore.ring.length - 1] = normalizePoint(y);
          fragments[fragments.length - 1] = fragmentBefore;
        }

        // If the ring started with an antimeridian fragment,
        // we can ignore that fragment entirely.
        else fragments.pop();

        // If the remainder of the ring is an antimeridian fragment,
        // move on to the next ring.
        if (k >= n) break;

        // Otherwise, add the remaining ring fragment and continue.
        fragments.push({ index: -1, polygon: polygon, ring: ring = ring.slice(k - 1) });
        ring[0] = normalizePoint(ring[0][1]);
        i = -1;
        n = ring.length;
      }
    }
  }
}

// Now stitch the fragments back together into rings.
function stitchFragments(fragments) {
  var i,
      n = fragments.length;

  // To connect the fragments start-to-end, create a simple index by end.
  var fragmentByStart = {},
      fragmentByEnd = {},
      fragment,
      start,
      startFragment,
      end,
      endFragment;

  // For each fragment…
  for (i = 0; i < n; ++i) {
    fragment = fragments[i];
    start = fragment.ring[0];
    end = fragment.ring[fragment.ring.length - 1];

    // If this fragment is closed, add it as a standalone ring.
    if (start[0] === end[0] && start[1] === end[1]) {
      fragment.polygon.push(fragment.ring);
      fragments[i] = null;
      continue;
    }

    fragment.index = i;
    fragmentByStart[start] = fragmentByEnd[end] = fragment;
  }

  // For each open fragment…
  for (i = 0; i < n; ++i) {
    fragment = fragments[i];
    if (fragment) {
      start = fragment.ring[0];
      end = fragment.ring[fragment.ring.length - 1];
      startFragment = fragmentByEnd[start];
      endFragment = fragmentByStart[end];

      delete fragmentByStart[start];
      delete fragmentByEnd[end];

      // If this fragment is closed, add it as a standalone ring.
      if (start[0] === end[0] && start[1] === end[1]) {
        fragment.polygon.push(fragment.ring);
        continue;
      }

      if (startFragment) {
        delete fragmentByEnd[start];
        delete fragmentByStart[startFragment.ring[0]];
        startFragment.ring.pop(); // drop the shared coordinate
        fragments[startFragment.index] = null;
        fragment = { index: -1, polygon: startFragment.polygon, ring: startFragment.ring.concat(fragment.ring) };

        if (startFragment === endFragment) {
          // Connect both ends to this single fragment to create a ring.
          fragment.polygon.push(fragment.ring);
        } else {
          fragment.index = n++;
          fragments.push(fragmentByStart[fragment.ring[0]] = fragmentByEnd[fragment.ring[fragment.ring.length - 1]] = fragment);
        }
      } else if (endFragment) {
        delete fragmentByStart[end];
        delete fragmentByEnd[endFragment.ring[endFragment.ring.length - 1]];
        fragment.ring.pop(); // drop the shared coordinate
        fragment = { index: n++, polygon: endFragment.polygon, ring: fragment.ring.concat(endFragment.ring) };
        fragments[endFragment.index] = null;
        fragments.push(fragmentByStart[fragment.ring[0]] = fragmentByEnd[fragment.ring[fragment.ring.length - 1]] = fragment);
      } else {
        fragment.ring.push(fragment.ring[0]); // close ring
        fragment.polygon.push(fragment.ring);
      }
    }
  }
}

function stitchFeature(input) {
  var output = { type: "Feature", geometry: stitchGeometry(input.geometry) };
  if (input.id != null) output.id = input.id;
  if (input.bbox != null) output.bbox = input.bbox;
  if (input.properties != null) output.properties = input.properties;
  return output;
}

function stitchGeometry(input) {
  if (input == null) return input;
  var output, fragments, i, n;
  switch (input.type) {
    case "GeometryCollection":
      output = { type: "GeometryCollection", geometries: input.geometries.map(stitchGeometry) };break;
    case "Point":
      output = { type: "Point", coordinates: clampPoint(input.coordinates) };break;
    case "MultiPoint":case "LineString":
      output = { type: input.type, coordinates: clampPoints(input.coordinates) };break;
    case "MultiLineString":
      output = { type: "MultiLineString", coordinates: input.coordinates.map(clampPoints) };break;
    case "Polygon":
      {
        var polygon = [];
        extractFragments(input.coordinates, polygon, fragments = []);
        stitchFragments(fragments);
        output = { type: "Polygon", coordinates: polygon };
        break;
      }
    case "MultiPolygon":
      {
        fragments = [], i = -1, n = input.coordinates.length;
        var polygons = new Array(n);
        while (++i < n) {
          extractFragments(input.coordinates[i], polygons[i] = [], fragments);
        }stitchFragments(fragments);
        output = { type: "MultiPolygon", coordinates: polygons.filter(nonempty) };
        break;
      }
    default:
      return input;
  }
  if (input.bbox != null) output.bbox = input.bbox;
  return output;
}

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.timesRaw = timesRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(timesRaw).scale(146.153);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function timesRaw(lambda, phi) {
  var t = (0, _math.tan)(phi / 2),
      s = (0, _math.sin)(_math.quarterPi * t);
  return [lambda * (0.74482 - 0.34588 * s * s), 1.70711 * t];
}

timesRaw.invert = function (x, y) {
  var t = y / 1.70711,
      s = (0, _math.sin)(_math.quarterPi * t);
  return [x / (0.74482 - 0.34588 * s * s), 2 * (0, _math.atan)(t)];
};

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.twoPointAzimuthalRaw = twoPointAzimuthalRaw;
exports.twoPointAzimuthalUsa = twoPointAzimuthalUsa;
exports.default = twoPointAzimuthal;

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

var _twoPoint = __webpack_require__(178);

var _twoPoint2 = _interopRequireDefault(_twoPoint);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function twoPointAzimuthalRaw(d) {
  var cosd = (0, _math.cos)(d);

  function forward(lambda, phi) {
    var coordinates = (0, _d3Geo.geoGnomonicRaw)(lambda, phi);
    coordinates[0] *= cosd;
    return coordinates;
  }

  forward.invert = function (x, y) {
    return _d3Geo.geoGnomonicRaw.invert(x / cosd, y);
  };

  return forward;
}

function twoPointAzimuthalUsa() {
  return twoPointAzimuthal([-158, 21.5], [-77, 39]).clipAngle(60).scale(400);
}

function twoPointAzimuthal(p0, p1) {
  return (0, _twoPoint2.default)(twoPointAzimuthalRaw, p0, p1);
}

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.twoPointEquidistantRaw = twoPointEquidistantRaw;
exports.twoPointEquidistantUsa = twoPointEquidistantUsa;
exports.default = twoPointEquidistant;

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

var _twoPoint = __webpack_require__(178);

var _twoPoint2 = _interopRequireDefault(_twoPoint);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO clip to ellipse
function twoPointEquidistantRaw(z0) {
  if (!(z0 *= 2)) return _d3Geo.geoAzimuthalEquidistantRaw;
  var lambdaa = -z0 / 2,
      lambdab = -lambdaa,
      z02 = z0 * z0,
      tanLambda0 = (0, _math.tan)(lambdab),
      S = 0.5 / (0, _math.sin)(lambdab);

  function forward(lambda, phi) {
    var za = (0, _math.acos)((0, _math.cos)(phi) * (0, _math.cos)(lambda - lambdaa)),
        zb = (0, _math.acos)((0, _math.cos)(phi) * (0, _math.cos)(lambda - lambdab)),
        ys = phi < 0 ? -1 : 1;
    za *= za, zb *= zb;
    return [(za - zb) / (2 * z0), ys * (0, _math.sqrt)(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0)];
  }

  forward.invert = function (x, y) {
    var y2 = y * y,
        cosza = (0, _math.cos)((0, _math.sqrt)(y2 + (t = x + lambdaa) * t)),
        coszb = (0, _math.cos)((0, _math.sqrt)(y2 + (t = x + lambdab) * t)),
        t,
        d;
    return [(0, _math.atan2)(d = cosza - coszb, t = (cosza + coszb) * tanLambda0), (y < 0 ? -1 : 1) * (0, _math.acos)((0, _math.sqrt)(t * t + d * d) * S)];
  };

  return forward;
}

function twoPointEquidistantUsa() {
  return twoPointEquidistant([-158, 21.5], [-77, 39]).clipAngle(130).scale(122.571);
}

function twoPointEquidistant(p0, p1) {
  return (0, _twoPoint2.default)(twoPointEquidistantRaw, p0, p1);
}

/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.vanDerGrintenRaw = vanDerGrintenRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(vanDerGrintenRaw).scale(79.4183);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function vanDerGrintenRaw(lambda, phi) {
  if ((0, _math.abs)(phi) < _math.epsilon) return [lambda, 0];
  var sinTheta = (0, _math.abs)(phi / _math.halfPi),
      theta = (0, _math.asin)(sinTheta);
  if ((0, _math.abs)(lambda) < _math.epsilon || (0, _math.abs)((0, _math.abs)(phi) - _math.halfPi) < _math.epsilon) return [0, (0, _math.sign)(phi) * _math.pi * (0, _math.tan)(theta / 2)];
  var cosTheta = (0, _math.cos)(theta),
      A = (0, _math.abs)(_math.pi / lambda - lambda / _math.pi) / 2,
      A2 = A * A,
      G = cosTheta / (sinTheta + cosTheta - 1),
      P = G * (2 / sinTheta - 1),
      P2 = P * P,
      P2_A2 = P2 + A2,
      G_P2 = G - P2,
      Q = A2 + G;
  return [(0, _math.sign)(lambda) * _math.pi * (A * G_P2 + (0, _math.sqrt)(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2, (0, _math.sign)(phi) * _math.pi * (P * Q - A * (0, _math.sqrt)((A2 + 1) * P2_A2 - Q * Q)) / P2_A2];
}

vanDerGrintenRaw.invert = function (x, y) {
  if ((0, _math.abs)(y) < _math.epsilon) return [x, 0];
  if ((0, _math.abs)(x) < _math.epsilon) return [0, _math.halfPi * (0, _math.sin)(2 * (0, _math.atan)(y / _math.pi))];
  var x2 = (x /= _math.pi) * x,
      y2 = (y /= _math.pi) * y,
      x2_y2 = x2 + y2,
      z = x2_y2 * x2_y2,
      c1 = -(0, _math.abs)(y) * (1 + x2_y2),
      c2 = c1 - 2 * y2 + x2,
      c3 = -2 * c1 + 1 + 2 * y2 + z,
      d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,
      a1 = (c1 - c2 * c2 / (3 * c3)) / c3,
      m1 = 2 * (0, _math.sqrt)(-a1 / 3),
      theta1 = (0, _math.acos)(3 * d / (a1 * m1)) / 3;
  return [_math.pi * (x2_y2 - 1 + (0, _math.sqrt)(1 + 2 * (x2 - y2) + z)) / (2 * x), (0, _math.sign)(y) * _math.pi * (-m1 * (0, _math.cos)(theta1 + _math.pi / 3) - c2 / (3 * c3))];
};

/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.vanDerGrinten2Raw = vanDerGrinten2Raw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(vanDerGrinten2Raw).scale(79.4183);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function vanDerGrinten2Raw(lambda, phi) {
  if ((0, _math.abs)(phi) < _math.epsilon) return [lambda, 0];
  var sinTheta = (0, _math.abs)(phi / _math.halfPi),
      theta = (0, _math.asin)(sinTheta);
  if ((0, _math.abs)(lambda) < _math.epsilon || (0, _math.abs)((0, _math.abs)(phi) - _math.halfPi) < _math.epsilon) return [0, (0, _math.sign)(phi) * _math.pi * (0, _math.tan)(theta / 2)];
  var cosTheta = (0, _math.cos)(theta),
      A = (0, _math.abs)(_math.pi / lambda - lambda / _math.pi) / 2,
      A2 = A * A,
      x1 = cosTheta * ((0, _math.sqrt)(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);
  return [(0, _math.sign)(lambda) * _math.pi * x1, (0, _math.sign)(phi) * _math.pi * (0, _math.sqrt)(1 - x1 * (2 * A + x1))];
}

vanDerGrinten2Raw.invert = function (x, y) {
  if (!x) return [0, _math.halfPi * (0, _math.sin)(2 * (0, _math.atan)(y / _math.pi))];
  var x1 = (0, _math.abs)(x / _math.pi),
      A = (1 - x1 * x1 - (y /= _math.pi) * y) / (2 * x1),
      A2 = A * A,
      B = (0, _math.sqrt)(A2 + 1);
  return [(0, _math.sign)(x) * _math.pi * (B - A), (0, _math.sign)(y) * _math.halfPi * (0, _math.sin)(2 * (0, _math.atan2)((0, _math.sqrt)((1 - 2 * A * x1) * (A + B) - x1), (0, _math.sqrt)(B + A + x1)))];
};

/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.vanDerGrinten3Raw = vanDerGrinten3Raw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(vanDerGrinten3Raw).scale(79.4183);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function vanDerGrinten3Raw(lambda, phi) {
  if ((0, _math.abs)(phi) < _math.epsilon) return [lambda, 0];
  var sinTheta = phi / _math.halfPi,
      theta = (0, _math.asin)(sinTheta);
  if ((0, _math.abs)(lambda) < _math.epsilon || (0, _math.abs)((0, _math.abs)(phi) - _math.halfPi) < _math.epsilon) return [0, _math.pi * (0, _math.tan)(theta / 2)];
  var A = (_math.pi / lambda - lambda / _math.pi) / 2,
      y1 = sinTheta / (1 + (0, _math.cos)(theta));
  return [_math.pi * ((0, _math.sign)(lambda) * (0, _math.sqrt)(A * A + 1 - y1 * y1) - A), _math.pi * y1];
}

vanDerGrinten3Raw.invert = function (x, y) {
  if (!y) return [x, 0];
  var y1 = y / _math.pi,
      A = (_math.pi * _math.pi * (1 - y1 * y1) - x * x) / (2 * _math.pi * x);
  return [x ? _math.pi * ((0, _math.sign)(x) * (0, _math.sqrt)(A * A + 1) - A) : 0, _math.halfPi * (0, _math.sin)(2 * (0, _math.atan)(y1))];
};

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.vanDerGrinten4Raw = vanDerGrinten4Raw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(vanDerGrinten4Raw).scale(127.16);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function vanDerGrinten4Raw(lambda, phi) {
  if (!phi) return [lambda, 0];
  var phi0 = (0, _math.abs)(phi);
  if (!lambda || phi0 === _math.halfPi) return [0, phi];
  var B = phi0 / _math.halfPi,
      B2 = B * B,
      C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),
      C2 = C * C,
      BC = B * C,
      B_C2 = B2 + C2 + 2 * BC,
      B_3C = B + 3 * C,
      lambda0 = lambda / _math.halfPi,
      lambda1 = lambda0 + 1 / lambda0,
      D = (0, _math.sign)((0, _math.abs)(lambda) - _math.halfPi) * (0, _math.sqrt)(lambda1 * lambda1 - 4),
      D2 = D * D,
      F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2),
      x1 = (D * (B_C2 + C2 - 1) + 2 * (0, _math.sqrt)(F)) / (4 * B_C2 + D2);
  return [(0, _math.sign)(lambda) * _math.halfPi * x1, (0, _math.sign)(phi) * _math.halfPi * (0, _math.sqrt)(1 + D * (0, _math.abs)(x1) - x1 * x1)];
}

vanDerGrinten4Raw.invert = function (x, y) {
  var delta;
  if (!x || !y) return [x, y];
  y /= _math.pi;
  var x1 = (0, _math.sign)(x) * x / _math.halfPi,
      D = (x1 * x1 - 1 + 4 * y * y) / (0, _math.abs)(x1),
      D2 = D * D,
      B = 2 * y,
      i = 50;
  do {
    var B2 = B * B,
        C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),
        C_ = (3 * B - B2 * B - 10) / (2 * B2 * B),
        C2 = C * C,
        BC = B * C,
        B_C = B + C,
        B_C2 = B_C * B_C,
        B_3C = B + 3 * C,
        F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)),
        F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)),
        sqrtF = (0, _math.sqrt)(F),
        f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2),
        f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);
    B -= delta = f / f_;
  } while (delta > _math.epsilon && --i > 0);
  return [(0, _math.sign)(x) * ((0, _math.sqrt)(D * D + 4) + D) * _math.pi / 4, _math.halfPi * B];
};

/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.wagner4Raw = undefined;

exports.default = function () {
    return (0, _d3Geo.geoProjection)(wagner4Raw).scale(176.84);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

var _mollweide = __webpack_require__(22);

var A = 4 * _math.pi + 3 * (0, _math.sqrt)(3),
    B = 2 * (0, _math.sqrt)(2 * _math.pi * (0, _math.sqrt)(3) / A);

var wagner4Raw = exports.wagner4Raw = (0, _mollweide.mollweideBromleyRaw)(B * (0, _math.sqrt)(3) / _math.pi, B, A / 6);

/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.wagner6Raw = wagner6Raw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(wagner6Raw).scale(152.63);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function wagner6Raw(lambda, phi) {
  return [lambda * (0, _math.sqrt)(1 - 3 * phi * phi / (_math.pi * _math.pi)), phi];
}

wagner6Raw.invert = function (x, y) {
  return [x / (0, _math.sqrt)(1 - 3 * y * y / (_math.pi * _math.pi)), y];
};

/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.wagner7Raw = wagner7Raw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(wagner7Raw).scale(172.632);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function wagner7Raw(lambda, phi) {
  var s = 0.90631 * (0, _math.sin)(phi),
      c0 = (0, _math.sqrt)(1 - s * s),
      c1 = (0, _math.sqrt)(2 / (1 + c0 * (0, _math.cos)(lambda /= 3)));
  return [2.66723 * c0 * c1 * (0, _math.sin)(lambda), 1.24104 * s * c1];
}

wagner7Raw.invert = function (x, y) {
  var t1 = x / 2.66723,
      t2 = y / 1.24104,
      p = (0, _math.sqrt)(t1 * t1 + t2 * t2),
      c = 2 * (0, _math.asin)(p / 2);
  return [3 * (0, _math.atan2)(x * (0, _math.tan)(c), 2.66723 * p), p && (0, _math.asin)(y * (0, _math.sin)(c) / (1.24104 * 0.90631 * p))];
};

/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.wiechelRaw = wiechelRaw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(wiechelRaw).rotate([0, -90, 45]).scale(124.75).clipAngle(180 - 1e-3);
};

var _d3Geo = __webpack_require__(0);

var _math = __webpack_require__(1);

function wiechelRaw(lambda, phi) {
  var cosPhi = (0, _math.cos)(phi),
      sinPhi = (0, _math.cos)(lambda) * cosPhi,
      sin1_Phi = 1 - sinPhi,
      cosLambda = (0, _math.cos)(lambda = (0, _math.atan2)((0, _math.sin)(lambda) * cosPhi, -(0, _math.sin)(phi))),
      sinLambda = (0, _math.sin)(lambda);
  cosPhi = (0, _math.sqrt)(1 - sinPhi * sinPhi);
  return [sinLambda * cosPhi - cosLambda * sin1_Phi, -cosLambda * cosPhi - sinLambda * sin1_Phi];
}

wiechelRaw.invert = function (x, y) {
  var w = (x * x + y * y) / -2,
      k = (0, _math.sqrt)(-w * (2 + w)),
      b = y * w + x * k,
      a = x * w - y * k,
      D = (0, _math.sqrt)(a * a + b * b);
  return [(0, _math.atan2)(k * b, D * (1 + w)), D ? -(0, _math.asin)(k * a / D) : 0];
};

/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.winkel3Raw = winkel3Raw;

exports.default = function () {
  return (0, _d3Geo.geoProjection)(winkel3Raw).scale(158.837);
};

var _d3Geo = __webpack_require__(0);

var _aitoff = __webpack_require__(170);

var _math = __webpack_require__(1);

function winkel3Raw(lambda, phi) {
  var coordinates = (0, _aitoff.aitoffRaw)(lambda, phi);
  return [(coordinates[0] + lambda / _math.halfPi) / 2, (coordinates[1] + phi) / 2];
}

winkel3Raw.invert = function (x, y) {
  var lambda = x,
      phi = y,
      i = 25;
  do {
    var cosphi = (0, _math.cos)(phi),
        sinphi = (0, _math.sin)(phi),
        sin_2phi = (0, _math.sin)(2 * phi),
        sin2phi = sinphi * sinphi,
        cos2phi = cosphi * cosphi,
        sinlambda = (0, _math.sin)(lambda),
        coslambda_2 = (0, _math.cos)(lambda / 2),
        sinlambda_2 = (0, _math.sin)(lambda / 2),
        sin2lambda_2 = sinlambda_2 * sinlambda_2,
        C = 1 - cos2phi * coslambda_2 * coslambda_2,
        E = C ? (0, _math.acos)(cosphi * coslambda_2) * (0, _math.sqrt)(F = 1 / C) : F = 0,
        F,
        fx = 0.5 * (2 * E * cosphi * sinlambda_2 + lambda / _math.halfPi) - x,
        fy = 0.5 * (E * sinphi + phi) - y,
        dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E * cosphi * coslambda_2 * sin2phi) + 0.5 / _math.halfPi,
        dxdphi = F * (sinlambda * sin_2phi / 4 - E * sinphi * sinlambda_2),
        dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E * sinphi * cos2phi * sinlambda),
        dydphi = 0.5 * F * (sin2phi * coslambda_2 + E * sin2lambda_2 * cosphi) + 0.5,
        denominator = dxdphi * dydlambda - dydphi * dxdlambda,
        dlambda = (fy * dxdphi - fx * dydphi) / denominator,
        dphi = (fx * dydlambda - fy * dxdlambda) / denominator;
    lambda -= dlambda, phi -= dphi;
  } while (((0, _math.abs)(dlambda) > _math.epsilon || (0, _math.abs)(dphi) > _math.epsilon) && --i > 0);
  return [lambda, phi];
};

/***/ }),
/* 413 */
/***/ (function(module, exports) {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(62);

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;

/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(62);

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(62);

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(62);

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;

/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(61);

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache();
  this.size = 0;
}

module.exports = stackClear;

/***/ }),
/* 419 */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;

/***/ }),
/* 420 */
/***/ (function(module, exports) {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

/***/ }),
/* 421 */
/***/ (function(module, exports) {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(61),
    Map = __webpack_require__(95),
    MapCache = __webpack_require__(96);

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

var Hash = __webpack_require__(424),
    ListCache = __webpack_require__(61),
    Map = __webpack_require__(95);

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash(),
    'map': new (Map || ListCache)(),
    'string': new Hash()
  };
}

module.exports = mapCacheClear;

/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

var hashClear = __webpack_require__(425),
    hashDelete = __webpack_require__(426),
    hashGet = __webpack_require__(427),
    hashHas = __webpack_require__(428),
    hashSet = __webpack_require__(429);

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;

/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(63);

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

/***/ }),
/* 426 */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(63);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(63);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(63);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(64);

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

/***/ }),
/* 431 */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}

module.exports = isKeyable;

/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(64);

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(64);

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(64);

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

/***/ }),
/* 435 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;

/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(36),
    keys = __webpack_require__(9);

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;

/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(36),
    keysIn = __webpack_require__(97);

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;

/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(12),
    isPrototype = __webpack_require__(56),
    nativeKeysIn = __webpack_require__(439);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeysIn;

/***/ }),
/* 439 */
/***/ (function(module, exports) {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;

/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var root = __webpack_require__(13);

/** Detect free variable `exports`. */
var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)(module)))

/***/ }),
/* 441 */
/***/ (function(module, exports) {

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;

/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(36),
    getSymbols = __webpack_require__(98);

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;

/***/ }),
/* 443 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;

/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(36),
    getSymbolsIn = __webpack_require__(183);

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;

/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(185),
    getSymbolsIn = __webpack_require__(183),
    keysIn = __webpack_require__(97);

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;

/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(24),
    root = __webpack_require__(13);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;

/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(24),
    root = __webpack_require__(13);

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;

/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(24),
    root = __webpack_require__(13);

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;

/***/ }),
/* 449 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

module.exports = initCloneArray;

/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(101),
    cloneDataView = __webpack_require__(451),
    cloneMap = __webpack_require__(452),
    cloneRegExp = __webpack_require__(454),
    cloneSet = __webpack_require__(455),
    cloneSymbol = __webpack_require__(457),
    cloneTypedArray = __webpack_require__(458);

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, cloneFunc, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag:case float64Tag:
    case int8Tag:case int16Tag:case int32Tag:
    case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return cloneMap(object, isDeep, cloneFunc);

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return cloneSet(object, isDeep, cloneFunc);

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;

/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(101);

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;

/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

var addMapEntry = __webpack_require__(453),
    arrayReduce = __webpack_require__(189),
    mapToArray = __webpack_require__(190);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1;

/**
 * Creates a clone of `map`.
 *
 * @private
 * @param {Object} map The map to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned map.
 */
function cloneMap(map, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
  return arrayReduce(array, addMapEntry, new map.constructor());
}

module.exports = cloneMap;

/***/ }),
/* 453 */
/***/ (function(module, exports) {

/**
 * Adds the key-value `pair` to `map`.
 *
 * @private
 * @param {Object} map The map to modify.
 * @param {Array} pair The key-value pair to add.
 * @returns {Object} Returns `map`.
 */
function addMapEntry(map, pair) {
  // Don't return `map.set` because it's not chainable in IE 11.
  map.set(pair[0], pair[1]);
  return map;
}

module.exports = addMapEntry;

/***/ }),
/* 454 */
/***/ (function(module, exports) {

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;

/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

var addSetEntry = __webpack_require__(456),
    arrayReduce = __webpack_require__(189),
    setToArray = __webpack_require__(65);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1;

/**
 * Creates a clone of `set`.
 *
 * @private
 * @param {Object} set The set to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned set.
 */
function cloneSet(set, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
  return arrayReduce(array, addSetEntry, new set.constructor());
}

module.exports = cloneSet;

/***/ }),
/* 456 */
/***/ (function(module, exports) {

/**
 * Adds `value` to `set`.
 *
 * @private
 * @param {Object} set The set to modify.
 * @param {*} value The value to add.
 * @returns {Object} Returns `set`.
 */
function addSetEntry(set, value) {
  // Don't return `set.add` because it's not chainable in IE 11.
  set.add(value);
  return set;
}

module.exports = addSetEntry;

/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

var _Symbol = __webpack_require__(32);

/** Used to convert symbols to primitives and strings. */
var symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;

/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(101);

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;

/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

var baseCreate = __webpack_require__(460),
    getPrototype = __webpack_require__(100),
    isPrototype = __webpack_require__(56);

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
    return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
}

module.exports = initCloneObject;

/***/ }),
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(12);

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = function () {
  function object() {}
  return function (proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object();
    object.prototype = undefined;
    return result;
  };
}();

module.exports = baseCreate;

/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

var createFind = __webpack_require__(462),
    findIndex = __webpack_require__(480);

/**
 * Iterates over elements of `collection`, returning the first element
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {*} Returns the matched element, else `undefined`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36, 'active': true },
 *   { 'user': 'fred',    'age': 40, 'active': false },
 *   { 'user': 'pebbles', 'age': 1,  'active': true }
 * ];
 *
 * _.find(users, function(o) { return o.age < 40; });
 * // => object for 'barney'
 *
 * // The `_.matches` iteratee shorthand.
 * _.find(users, { 'age': 1, 'active': true });
 * // => object for 'pebbles'
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.find(users, ['active', false]);
 * // => object for 'fred'
 *
 * // The `_.property` iteratee shorthand.
 * _.find(users, 'active');
 * // => object for 'barney'
 */
var find = createFind(findIndex);

module.exports = find;

/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

var baseIteratee = __webpack_require__(66),
    isArrayLike = __webpack_require__(20),
    keys = __webpack_require__(9);

/**
 * Creates a `_.find` or `_.findLast` function.
 *
 * @private
 * @param {Function} findIndexFunc The function to find the collection index.
 * @returns {Function} Returns the new find function.
 */
function createFind(findIndexFunc) {
  return function (collection, predicate, fromIndex) {
    var iterable = Object(collection);
    if (!isArrayLike(collection)) {
      var iteratee = baseIteratee(predicate, 3);
      collection = keys(collection);
      predicate = function predicate(key) {
        return iteratee(iterable[key], key, iterable);
      };
    }
    var index = findIndexFunc(collection, predicate, fromIndex);
    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
  };
}

module.exports = createFind;

/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsMatch = __webpack_require__(191),
    getMatchData = __webpack_require__(194),
    matchesStrictComparable = __webpack_require__(196);

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function (object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;

/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(94),
    equalArrays = __webpack_require__(193),
    equalByTag = __webpack_require__(468),
    equalObjects = __webpack_require__(469),
    getTag = __webpack_require__(186),
    isArray = __webpack_require__(10),
    isBuffer = __webpack_require__(80),
    isTypedArray = __webpack_require__(142);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack());
    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack());
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;

/***/ }),
/* 465 */
/***/ (function(module, exports) {

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;

/***/ }),
/* 466 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;

/***/ }),
/* 467 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;

/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

var _Symbol = __webpack_require__(32),
    Uint8Array = __webpack_require__(188),
    eq = __webpack_require__(54),
    equalArrays = __webpack_require__(193),
    mapToArray = __webpack_require__(190),
    setToArray = __webpack_require__(65);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == other + '';

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;

/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

var getAllKeys = __webpack_require__(184);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;

/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqual = __webpack_require__(192),
    get = __webpack_require__(471),
    hasIn = __webpack_require__(198),
    isKey = __webpack_require__(105),
    isStrictComparable = __webpack_require__(195),
    matchesStrictComparable = __webpack_require__(196),
    toKey = __webpack_require__(44);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function (object) {
    var objValue = get(object, path);
    return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;

/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(104);

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;

/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

var memoizeCapped = __webpack_require__(473);

/** Used to match property names within property paths. */
var reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function (string) {
  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function (match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
  });
  return result;
});

module.exports = stringToPath;

/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

var memoize = __webpack_require__(474);

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function (key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;

/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(96);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function memoized() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache)();
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;

/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

var _Symbol = __webpack_require__(32),
    arrayMap = __webpack_require__(68),
    isArray = __webpack_require__(10),
    isSymbol = __webpack_require__(43);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

module.exports = baseToString;

/***/ }),
/* 476 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;

/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

var baseProperty = __webpack_require__(478),
    basePropertyDeep = __webpack_require__(479),
    isKey = __webpack_require__(105),
    toKey = __webpack_require__(44);

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;

/***/ }),
/* 478 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function (object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;

/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(104);

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function (object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;

/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

var baseFindIndex = __webpack_require__(200),
    baseIteratee = __webpack_require__(66),
    toInteger = __webpack_require__(481);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * This method is like `_.find` except that it returns the index of the first
 * element `predicate` returns truthy for instead of the element itself.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.findIndex(users, function(o) { return o.user == 'barney'; });
 * // => 0
 *
 * // The `_.matches` iteratee shorthand.
 * _.findIndex(users, { 'user': 'fred', 'active': false });
 * // => 1
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findIndex(users, ['active', false]);
 * // => 0
 *
 * // The `_.property` iteratee shorthand.
 * _.findIndex(users, 'active');
 * // => 2
 */
function findIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : toInteger(fromIndex);
  if (index < 0) {
    index = nativeMax(length + index, 0);
  }
  return baseFindIndex(array, baseIteratee(predicate, 3), index);
}

module.exports = findIndex;

/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

var toFinite = __webpack_require__(482);

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? remainder ? result - remainder : result : 0;
}

module.exports = toInteger;

/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

var toNumber = __webpack_require__(483);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;

/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(12),
    isSymbol = __webpack_require__(43);

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? other + '' : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}

module.exports = toNumber;

/***/ }),
/* 484 */
/***/ (function(module, exports) {

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function (object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;

/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__(37);

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction(value) {
  return typeof value == 'function' ? value : identity;
}

module.exports = castFunction;

/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsMatch = __webpack_require__(191),
    getMatchData = __webpack_require__(194);

/**
 * Performs a partial deep comparison between `object` and `source` to
 * determine if `object` contains equivalent property values.
 *
 * **Note:** This method is equivalent to `_.matches` when `source` is
 * partially applied.
 *
 * Partial comparisons will match empty array and empty object `source`
 * values against any array or object value, respectively. See `_.isEqual`
 * for a list of supported value comparisons.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 *
 * _.isMatch(object, { 'b': 2 });
 * // => true
 *
 * _.isMatch(object, { 'b': 1 });
 * // => false
 */
function isMatch(object, source) {
  return object === source || baseIsMatch(object, source, getMatchData(source));
}

module.exports = isMatch;

/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

var basePickBy = __webpack_require__(488),
    hasIn = __webpack_require__(198);

/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @returns {Object} Returns the new object.
 */
function basePick(object, paths) {
  return basePickBy(object, paths, function (value, path) {
    return hasIn(object, path);
  });
}

module.exports = basePick;

/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(104),
    baseSet = __webpack_require__(489),
    castPath = __webpack_require__(67);

/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy(object, paths, predicate) {
    var index = -1,
        length = paths.length,
        result = {};

    while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
            baseSet(result, castPath(path, object), value);
        }
    }
    return result;
}

module.exports = basePickBy;

/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(53),
    castPath = __webpack_require__(67),
    isIndex = __webpack_require__(55),
    isObject = __webpack_require__(12),
    toKey = __webpack_require__(44);

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

module.exports = baseSet;

/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

var flatten = __webpack_require__(491),
    overRest = __webpack_require__(138),
    setToString = __webpack_require__(139);

/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
function flatRest(func) {
  return setToString(overRest(func, undefined, flatten), func + '');
}

module.exports = flatRest;

/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

var baseFlatten = __webpack_require__(106);

/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, 1) : [];
}

module.exports = flatten;

/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

var _Symbol = __webpack_require__(32),
    isArguments = __webpack_require__(79),
    isArray = __webpack_require__(10);

/** Built-in value references. */
var spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
}

module.exports = isFlattenable;

/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

var baseClone = __webpack_require__(181);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

module.exports = cloneDeep;

/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// http://geoexamples.com/d3-composite-projections/ Version 1.2.0. Copyright 2017 Roger Veciana i Rovira.
(function (global, factory) {
  ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, __webpack_require__(203), __webpack_require__(29)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(203), __webpack_require__(29)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.d3 = global.d3 || {}, global.d3, global.d3);
})(undefined, function (exports, d3Geo, d3Path) {
  'use strict';

  var epsilon = 1e-6;

  function noop() {}

  var x0 = Infinity;
  var y0 = x0;
  var x1 = -x0;
  var y1 = x1;
  var boundsStream = {
    point: boundsPoint,
    lineStart: noop,
    lineEnd: noop,
    polygonStart: noop,
    polygonEnd: noop,
    result: function result() {
      var bounds = [[x0, y0], [x1, y1]];
      x1 = y1 = -(y0 = x0 = Infinity);
      return bounds;
    }
  };

  function boundsPoint(x, y) {
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
  }

  function fitExtent(projection, extent, object) {
    var w = extent[1][0] - extent[0][0],
        h = extent[1][1] - extent[0][1],
        clip = projection.clipExtent && projection.clipExtent();

    projection.scale(150).translate([0, 0]);

    if (clip != null) projection.clipExtent(null);

    d3Geo.geoStream(object, projection.stream(boundsStream));

    var b = boundsStream.result(),
        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;

    if (clip != null) projection.clipExtent(clip);

    return projection.scale(k * 150).translate([x, y]);
  }

  function fitSize(projection, size, object) {
    return fitExtent(projection, [[0, 0], size], object);
  }

  // The projections must have mutually exclusive clip regions on the sphere,
  // as this will avoid emitting interleaving lines and polygons.
  function multiplex(streams) {
    var n = streams.length;
    return {
      point: function point(x, y) {
        var i = -1;while (++i < n) {
          streams[i].point(x, y);
        }
      },
      sphere: function sphere() {
        var i = -1;while (++i < n) {
          streams[i].sphere();
        }
      },
      lineStart: function lineStart() {
        var i = -1;while (++i < n) {
          streams[i].lineStart();
        }
      },
      lineEnd: function lineEnd() {
        var i = -1;while (++i < n) {
          streams[i].lineEnd();
        }
      },
      polygonStart: function polygonStart() {
        var i = -1;while (++i < n) {
          streams[i].polygonStart();
        }
      },
      polygonEnd: function polygonEnd() {
        var i = -1;while (++i < n) {
          streams[i].polygonEnd();
        }
      }
    };
  }

  // A composite projection for the United States, configured by default for
  // 960×500. The projection also works quite well at 960×600 if you change the
  // scale to 1285 and adjust the translate accordingly. The set of standard
  // parallels for each region comes from USGS, which is published here:
  // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
  function albersUsa() {
    var cache,
        cacheStream,
        lower48 = d3Geo.geoAlbers(),
        lower48Point,
        alaska = d3Geo.geoConicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
        alaskaPoint,
        // EPSG:3338
    hawaii = d3Geo.geoConicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
        hawaiiPoint,
        // ESRI:102007
    _point,
        pointStream = { point: function point(x, y) {
        _point = [x, y];
      } };

    function albersUsa(coordinates) {
      var x = coordinates[0],
          y = coordinates[1];
      return _point = null, (lower48Point.point(x, y), _point) || (alaskaPoint.point(x, y), _point) || (hawaiiPoint.point(x, y), _point);
    }

    albersUsa.invert = function (coordinates) {
      var k = lower48.scale(),
          t = lower48.translate(),
          x = (coordinates[0] - t[0]) / k,
          y = (coordinates[1] - t[1]) / k;
      return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
    };

    albersUsa.stream = function (stream) {
      return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
    };

    albersUsa.precision = function (_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_), alaska.precision(_), hawaii.precision(_);
      return reset();
    };

    albersUsa.scale = function (_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };

    albersUsa.translate = function (_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(),
          x = +_[0],
          y = +_[1];

      lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);

      alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]]).stream(pointStream);

      hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]]).stream(pointStream);

      return reset();
    };

    albersUsa.fitExtent = function (extent, object) {
      return fitExtent(albersUsa, extent, object);
    };

    albersUsa.fitSize = function (size, object) {
      return fitSize(albersUsa, size, object);
    };

    function reset() {
      cache = cacheStream = null;
      return albersUsa;
    }

    albersUsa.drawCompositionBorders = function (context) {
      var hawaii1 = lower48([-102.91, 26.3]);
      var hawaii2 = lower48([-104.0, 27.5]);
      var hawaii3 = lower48([-108.0, 29.1]);
      var hawaii4 = lower48([-110.0, 29.1]);

      var alaska1 = lower48([-110.0, 26.7]);
      var alaska2 = lower48([-112.8, 27.6]);
      var alaska3 = lower48([-114.3, 30.6]);
      var alaska4 = lower48([-119.3, 30.1]);

      context.moveTo(hawaii1[0], hawaii1[1]);
      context.lineTo(hawaii2[0], hawaii2[1]);
      context.lineTo(hawaii3[0], hawaii3[1]);
      context.lineTo(hawaii4[0], hawaii4[1]);

      context.moveTo(alaska1[0], alaska1[1]);
      context.lineTo(alaska2[0], alaska2[1]);
      context.lineTo(alaska3[0], alaska3[1]);
      context.lineTo(alaska4[0], alaska4[1]);
    };
    albersUsa.getCompositionBorders = function () {
      var context = d3Path.path();
      this.drawCompositionBorders(context);
      return context.toString();
    };

    return albersUsa.scale(1070);
  }

  // The projections must have mutually exclusive clip regions on the sphere,
  // as this will avoid emitting interleaving lines and polygons.
  function multiplex$1(streams) {
    var n = streams.length;
    return {
      point: function point(x, y) {
        var i = -1;while (++i < n) {
          streams[i].point(x, y);
        }
      },
      sphere: function sphere() {
        var i = -1;while (++i < n) {
          streams[i].sphere();
        }
      },
      lineStart: function lineStart() {
        var i = -1;while (++i < n) {
          streams[i].lineStart();
        }
      },
      lineEnd: function lineEnd() {
        var i = -1;while (++i < n) {
          streams[i].lineEnd();
        }
      },
      polygonStart: function polygonStart() {
        var i = -1;while (++i < n) {
          streams[i].polygonStart();
        }
      },
      polygonEnd: function polygonEnd() {
        var i = -1;while (++i < n) {
          streams[i].polygonEnd();
        }
      }
    };
  }

  // A composite projection for the United States, configured by default for
  // 960×500. Also works quite well at 960×600 with scale 1285. The set of
  // standard parallels for each region comes from USGS, which is published here:
  // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
  function albersUsaTerritories() {
    var cache,
        cacheStream,
        lower48 = d3Geo.geoAlbers(),
        lower48Point,
        alaska = d3Geo.geoConicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
        alaskaPoint,
        // EPSG:3338
    hawaii = d3Geo.geoConicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
        hawaiiPoint,
        // ESRI:102007
    puertoRico = d3Geo.geoConicEqualArea().rotate([66, 0]).center([0, 18]).parallels([8, 18]),
        puertoRicoPoint,
        //Taken from https://bl.ocks.org/mbostock/5629120
    samoa = d3Geo.geoEquirectangular().rotate([173, 14]),
        samoaPoint,
        // EPSG:4169
    guam = d3Geo.geoEquirectangular().rotate([-145, -16.8]),
        guamPoint,
        _point2,
        pointStream = { point: function point(x, y) {
        _point2 = [x, y];
      } };

    /*
    var puertoRicoBbox = [[-68.3, 19], [-63.9, 17]];
    var samoaBbox = [[-171, -14], [-168, -14.8]];
    var guamBbox = [[144, 20.8], [146.5, 12.7]];
    */

    function albersUsa(coordinates) {
      var x = coordinates[0],
          y = coordinates[1];

      return _point2 = null, (lower48Point.point(x, y), _point2) || (alaskaPoint.point(x, y), _point2) || (hawaiiPoint.point(x, y), _point2) || (puertoRicoPoint.point(x, y), _point2) || (samoaPoint.point(x, y), _point2) || (guamPoint.point(x, y), _point2);
    }

    albersUsa.invert = function (coordinates) {

      var k = lower48.scale(),
          t = lower48.translate(),
          x = (coordinates[0] - t[0]) / k,
          y = (coordinates[1] - t[1]) / k;
      /*
      //How are the return values calculated:
      console.info("******");
      var c0 = puertoRico(puertoRicoBbox[0]);
      var x0 = (c0[0] - t[0]) / k;
      var y0 = (c0[1] - t[1]) / k;
       console.info("p0 puertoRico", x0 + ' - ' + y0);
       var c1 = puertoRico(puertoRicoBbox[1]);
      var x1 = (c1[0] - t[0]) / k;
      var y1 = (c1[1] - t[1]) / k;
       console.info("p1 puertoRico", x1 + ' - ' + y1);
       c0 = samoa(samoaBbox[0]);
      x0 = (c0[0] - t[0]) / k;
      y0 = (c0[1] - t[1]) / k;
       console.info("p0 samoa", x0 + ' - ' + y0);
       c1 = samoa(samoaBbox[1]);
      x1 = (c1[0] - t[0]) / k;
      y1 = (c1[1] - t[1]) / k;
       console.info("p1 samoa", x1 + ' - ' + y1);
       c0 = guam(guamBbox[0]);
      x0 = (c0[0] - t[0]) / k;
      y0 = (c0[1] - t[1]) / k;
       console.info("p0 guam", x0 + ' - ' + y0);
       c1 = guam(guamBbox[1]);
      x1 = (c1[0] - t[0]) / k;
      y1 = (c1[1] - t[1]) / k;
       console.info("p1 guam", x1 + ' - ' + y1);
      */

      return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : y >= 0.2064 && y < 0.2413 && x >= 0.312 && x < 0.385 ? puertoRico : y >= 0.09 && y < 0.1197 && x >= -0.4243 && x < -0.3232 ? samoa : y >= -0.0518 && y < 0.0895 && x >= -0.4243 && x < -0.3824 ? guam : lower48).invert(coordinates);
    };

    albersUsa.stream = function (stream) {
      return cache && cacheStream === stream ? cache : cache = multiplex$1([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream), puertoRico.stream(stream), samoa.stream(stream), guam.stream(stream)]);
    };

    albersUsa.precision = function (_) {
      if (!arguments.length) {
        return lower48.precision();
      }
      lower48.precision(_);
      alaska.precision(_);
      hawaii.precision(_);
      puertoRico.precision(_);
      samoa.precision(_);
      guam.precision(_);
      return reset();
    };

    albersUsa.scale = function (_) {
      if (!arguments.length) {
        return lower48.scale();
      }
      lower48.scale(_);
      alaska.scale(_ * 0.35);
      hawaii.scale(_);
      puertoRico.scale(_);
      samoa.scale(_ * 2);
      guam.scale(_);
      return albersUsa.translate(lower48.translate());
    };

    albersUsa.translate = function (_) {
      if (!arguments.length) {
        return lower48.translate();
      }
      var k = lower48.scale(),
          x = +_[0],
          y = +_[1];

      /*
      var c0 = puertoRico.translate([x + 0.350 * k, y + 0.224 * k])(puertoRicoBbox[0]);
      var x0 = (x - c0[0]) / k;
      var y0 = (y - c0[1]) / k;
       var c1 = puertoRico.translate([x + 0.350 * k, y + 0.224 * k])(puertoRicoBbox[1]);
      var x1 = (x - c1[0]) / k;
      var y1 = (y - c1[1]) / k;
       console.info('puertoRico: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
      console.info('.clipExtent([[x '+
       (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
       ' * k + epsilon, y '+
       (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
       ' * k + epsilon],[x '+
       (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
       ' * k - epsilon, y '+
       (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
       ' * k - epsilon]])');
         c0 = samoa.translate([x - 0.492 * k, y + 0.09 * k])(samoaBbox[0]);
        x0 = (x - c0[0]) / k;
        y0 = (y - c0[1]) / k;
         c1 = samoa.translate([x - 0.492 * k, y + 0.09 * k])(samoaBbox[1]);
        x1 = (x - c1[0]) / k;
        y1 = (y - c1[1]) / k;
        console.info('samoa: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
       console.info('.clipExtent([[x '+
        (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
        ' * k + epsilon, y '+
        (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
        ' * k + epsilon],[x '+
        (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
        ' * k - epsilon, y '+
        (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
        ' * k - epsilon]])');
         c0 = guam.translate([x - 0.408 * k, y + 0.018 * k])(guamBbox[0]);
        x0 = (x - c0[0]) / k;
        y0 = (y - c0[1]) / k;
         c1 = guam.translate([x - 0.408 * k, y + 0.018 * k])(guamBbox[1]);
        x1 = (x - c1[0]) / k;
        y1 = (y - c1[1]) / k;
        console.info('guam: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
       console.info('.clipExtent([[x '+
        (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
        ' * k + epsilon, y '+
        (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
        ' * k + epsilon],[x '+
        (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
        ' * k - epsilon, y '+
        (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
        ' * k - epsilon]])');
        */

      lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);

      alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.233 * k - epsilon]]).stream(pointStream);

      hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.233 * k - epsilon]]).stream(pointStream);

      puertoRicoPoint = puertoRico.translate([x + 0.350 * k, y + 0.224 * k]).clipExtent([[x + 0.312 * k + epsilon, y + 0.2064 * k + epsilon], [x + 0.385 * k - epsilon, y + 0.233 * k - epsilon]]).stream(pointStream);

      samoaPoint = samoa.translate([x - 0.492 * k, y + 0.09 * k]).clipExtent([[x - 0.4243 * k + epsilon, y + 0.0903 * k + epsilon], [x - 0.3233 * k - epsilon, y + 0.1197 * k - epsilon]]).stream(pointStream);

      guamPoint = guam.translate([x - 0.408 * k, y + 0.018 * k]).clipExtent([[x - 0.4244 * k + epsilon, y - 0.0519 * k + epsilon], [x - 0.3824 * k - epsilon, y + 0.0895 * k - epsilon]]).stream(pointStream);

      return reset();
    };

    albersUsa.fitExtent = function (extent, object) {
      return fitExtent(albersUsa, extent, object);
    };

    albersUsa.fitSize = function (size, object) {
      return fitSize(albersUsa, size, object);
    };

    function reset() {
      cache = cacheStream = null;
      return albersUsa;
    }

    albersUsa.drawCompositionBorders = function (context) {

      /*
      console.info("CLIP EXTENT hawaii: ", hawaii.clipExtent());
      console.info("UL BBOX:", lower48.invert([hawaii.clipExtent()[0][0], hawaii.clipExtent()[0][1]]));
      console.info("UR BBOX:", lower48.invert([hawaii.clipExtent()[1][0], hawaii.clipExtent()[0][1]]));
      console.info("LD BBOX:", lower48.invert([hawaii.clipExtent()[1][0], hawaii.clipExtent()[1][1]]));
      console.info("LL BBOX:", lower48.invert([hawaii.clipExtent()[0][0], hawaii.clipExtent()[1][1]]));
       console.info("CLIP EXTENT alaska: ", alaska.clipExtent());
      console.info("UL BBOX:", lower48.invert([alaska.clipExtent()[0][0], alaska.clipExtent()[0][1]]));
      console.info("UR BBOX:", lower48.invert([alaska.clipExtent()[1][0], alaska.clipExtent()[0][1]]));
      console.info("LD BBOX:", lower48.invert([alaska.clipExtent()[1][0], alaska.clipExtent()[1][1]]));
      console.info("LL BBOX:", lower48.invert([alaska.clipExtent()[0][0], alaska.clipExtent()[1][1]]));
       console.info("CLIP EXTENT puertoRico: ", puertoRico.clipExtent());
      console.info("UL BBOX:", lower48.invert([puertoRico.clipExtent()[0][0], puertoRico.clipExtent()[0][1]]));
      console.info("UR BBOX:", lower48.invert([puertoRico.clipExtent()[1][0], puertoRico.clipExtent()[0][1]]));
      console.info("LD BBOX:", lower48.invert([puertoRico.clipExtent()[1][0], puertoRico.clipExtent()[1][1]]));
      console.info("LL BBOX:", lower48.invert([puertoRico.clipExtent()[0][0], puertoRico.clipExtent()[1][1]]));
       console.info("CLIP EXTENT samoa: ", samoa.clipExtent());
      console.info("UL BBOX:", lower48.invert([samoa.clipExtent()[0][0], samoa.clipExtent()[0][1]]));
      console.info("UR BBOX:", lower48.invert([samoa.clipExtent()[1][0], samoa.clipExtent()[0][1]]));
      console.info("LD BBOX:", lower48.invert([samoa.clipExtent()[1][0], samoa.clipExtent()[1][1]]));
      console.info("LL BBOX:", lower48.invert([samoa.clipExtent()[0][0], samoa.clipExtent()[1][1]]));
        console.info("CLIP EXTENT guam: ", guam.clipExtent());
      console.info("UL BBOX:", lower48.invert([guam.clipExtent()[0][0], guam.clipExtent()[0][1]]));
      console.info("UR BBOX:", lower48.invert([guam.clipExtent()[1][0], guam.clipExtent()[0][1]]));
      console.info("LD BBOX:", lower48.invert([guam.clipExtent()[1][0], guam.clipExtent()[1][1]]));
      console.info("LL BBOX:", lower48.invert([guam.clipExtent()[0][0], guam.clipExtent()[1][1]]));
      */

      var ulhawaii = lower48([-110.4641, 28.2805]);
      var urhawaii = lower48([-104.0597, 28.9528]);
      var ldhawaii = lower48([-103.7049, 25.1031]);
      var llhawaii = lower48([-109.8337, 24.4531]);

      var ulalaska = lower48([-124.4745, 28.1407]);
      var uralaska = lower48([-110.931, 30.8844]);
      var ldalaska = lower48([-109.8337, 24.4531]);
      var llalaska = lower48([-122.4628, 21.8562]);

      var ulpuertoRico = lower48([-76.8579, 25.1544]);
      var urpuertoRico = lower48([-72.429, 24.2097]);
      var ldpuertoRico = lower48([-72.8265, 22.7056]);
      var llpuertoRico = lower48([-77.1852, 23.6392]);

      var ulsamoa = lower48([-125.0093, 29.7791]);
      var ursamoa = lower48([-118.5193, 31.3262]);
      var ldsamoa = lower48([-118.064, 29.6912]);
      var llsamoa = lower48([-124.4369, 28.169]);

      var ulguam = lower48([-128.1314, 37.4582]);
      var urguam = lower48([-125.2132, 38.214]);
      var ldguam = lower48([-122.3616, 30.5115]);
      var llguam = lower48([-125.0315, 29.8211]);

      context.moveTo(ulhawaii[0], ulhawaii[1]);
      context.lineTo(urhawaii[0], urhawaii[1]);
      context.lineTo(ldhawaii[0], ldhawaii[1]);
      context.lineTo(ldhawaii[0], ldhawaii[1]);
      context.lineTo(llhawaii[0], llhawaii[1]);
      context.closePath();

      context.moveTo(ulalaska[0], ulalaska[1]);
      context.lineTo(uralaska[0], uralaska[1]);
      context.lineTo(ldalaska[0], ldalaska[1]);
      context.lineTo(ldalaska[0], ldalaska[1]);
      context.lineTo(llalaska[0], llalaska[1]);
      context.closePath();

      context.moveTo(ulpuertoRico[0], ulpuertoRico[1]);
      context.lineTo(urpuertoRico[0], urpuertoRico[1]);
      context.lineTo(ldpuertoRico[0], ldpuertoRico[1]);
      context.lineTo(ldpuertoRico[0], ldpuertoRico[1]);
      context.lineTo(llpuertoRico[0], llpuertoRico[1]);
      context.closePath();

      context.moveTo(ulsamoa[0], ulsamoa[1]);
      context.lineTo(ursamoa[0], ursamoa[1]);
      context.lineTo(ldsamoa[0], ldsamoa[1]);
      context.lineTo(ldsamoa[0], ldsamoa[1]);
      context.lineTo(llsamoa[0], llsamoa[1]);
      context.closePath();

      context.moveTo(ulguam[0], ulguam[1]);
      context.lineTo(urguam[0], urguam[1]);
      context.lineTo(ldguam[0], ldguam[1]);
      context.lineTo(ldguam[0], ldguam[1]);
      context.lineTo(llguam[0], llguam[1]);
      context.closePath();
    };
    albersUsa.getCompositionBorders = function () {
      var context = d3Path.path();
      this.drawCompositionBorders(context);
      return context.toString();
    };

    return albersUsa.scale(1070);
  }

  // The projections must have mutually exclusive clip regions on the sphere,
  // as this will avoid emitting interleaving lines and polygons.
  function multiplex$2(streams) {
    var n = streams.length;
    return {
      point: function point(x, y) {
        var i = -1;while (++i < n) {
          streams[i].point(x, y);
        }
      },
      sphere: function sphere() {
        var i = -1;while (++i < n) {
          streams[i].sphere();
        }
      },
      lineStart: function lineStart() {
        var i = -1;while (++i < n) {
          streams[i].lineStart();
        }
      },
      lineEnd: function lineEnd() {
        var i = -1;while (++i < n) {
          streams[i].lineEnd();
        }
      },
      polygonStart: function polygonStart() {
        var i = -1;while (++i < n) {
          streams[i].polygonStart();
        }
      },
      polygonEnd: function polygonEnd() {
        var i = -1;while (++i < n) {
          streams[i].polygonEnd();
        }
      }
    };
  }

  // A composite projection for Spain, configured by default for 960×500.
  function conicConformalSpain() {
    var cache,
        cacheStream,
        iberianPeninsule = d3Geo.geoConicConformal().rotate([5, -38.6]).parallels([0, 60]),
        iberianPeninsulePoint,
        canaryIslands = d3Geo.geoConicConformal().rotate([5, -38.6]).parallels([0, 60]),
        canaryIslandsPoint,
        _point3,
        pointStream = { point: function point(x, y) {
        _point3 = [x, y];
      } };

    /*
    var iberianPeninsuleBbox = [[-11, 46], [4, 35]];
    var canaryIslandsBbox = [[-19.0, 28.85], [-12.7, 28.1]];
    */

    function conicConformalSpain(coordinates) {
      var x = coordinates[0],
          y = coordinates[1];
      return _point3 = null, (iberianPeninsulePoint.point(x, y), _point3) || (canaryIslandsPoint.point(x, y), _point3);
    }

    conicConformalSpain.invert = function (coordinates) {
      var k = iberianPeninsule.scale(),
          t = iberianPeninsule.translate(),
          x = (coordinates[0] - t[0]) / k,
          y = (coordinates[1] - t[1]) / k;

      return (y >= 0.05346 && y < 0.0897 && x >= -0.13388 && x < -0.0322 ? canaryIslands : iberianPeninsule).invert(coordinates);
    };

    conicConformalSpain.stream = function (stream) {
      return cache && cacheStream === stream ? cache : cache = multiplex$2([iberianPeninsule.stream(cacheStream = stream), canaryIslands.stream(stream)]);
    };

    conicConformalSpain.precision = function (_) {
      if (!arguments.length) {
        return iberianPeninsule.precision();
      }
      iberianPeninsule.precision(_);
      canaryIslands.precision(_);
      return reset();
    };

    conicConformalSpain.scale = function (_) {
      if (!arguments.length) {
        return iberianPeninsule.scale();
      }
      iberianPeninsule.scale(_);
      canaryIslands.scale(_);
      return conicConformalSpain.translate(iberianPeninsule.translate());
    };

    conicConformalSpain.translate = function (_) {
      if (!arguments.length) {
        return iberianPeninsule.translate();
      }
      var k = iberianPeninsule.scale(),
          x = +_[0],
          y = +_[1];
      /*
      var c0 = iberianPeninsule(iberianPeninsuleBbox[0]);
      var x0 = (x - c0[0]) / k;
      var y0 = (y - c0[1]) / k;
      var c1 = iberianPeninsule(iberianPeninsuleBbox[1]);
      var x1 = (x - c1[0]) / k;
      var y1 = (y - c1[1]) / k;
      console.info('Iberian Peninsula: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
      c0 = canaryIslands.translate([x + 0.1 * k, y - 0.094 * k])(canaryIslandsBbox[0]);
      x0 = (x - c0[0]) / k;
      y0 = (y - c0[1]) / k;
      c1 = canaryIslands.translate([x + 0.1 * k, y - 0.094 * k])(canaryIslandsBbox[1]);
      x1 = (x - c1[0]) / k;
      y1 = (y - c1[1]) / k;
      console.info('Canry Islands: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
      */
      iberianPeninsulePoint = iberianPeninsule.translate(_).clipExtent([[x - 0.06857 * k, y - 0.1288 * k], [x + 0.13249 * k, y + 0.06 * k]]).stream(pointStream);

      canaryIslandsPoint = canaryIslands.translate([x + 0.1 * k, y - 0.094 * k]).clipExtent([[x - 0.1331 * k + epsilon, y + 0.053457 * k + epsilon], [x - 0.0354 * k - epsilon, y + 0.08969 * k - epsilon]]).stream(pointStream);

      return reset();
    };

    conicConformalSpain.fitExtent = function (extent, object) {
      return fitExtent(conicConformalSpain, extent, object);
    };

    conicConformalSpain.fitSize = function (size, object) {
      return fitSize(conicConformalSpain, size, object);
    };

    function reset() {
      cache = cacheStream = null;
      return conicConformalSpain;
    }

    conicConformalSpain.drawCompositionBorders = function (context) {
      /*
      console.info("CLIP EXTENT: ", canaryIslands.clipExtent());
      console.info("UL BBOX:", iberianPeninsule.invert([canaryIslands.clipExtent()[0][0], canaryIslands.clipExtent()[0][1]]));
      console.info("UR BBOX:", iberianPeninsule.invert([canaryIslands.clipExtent()[1][0], canaryIslands.clipExtent()[0][1]]));
      console.info("LD BBOX:", iberianPeninsule.invert([canaryIslands.clipExtent()[1][0], canaryIslands.clipExtent()[1][1]]));
      */

      var ulCanaryIslands = iberianPeninsule([-14.0346750, 34.965007]);
      var urCanaryIslands = iberianPeninsule([-7.4208899, 35.536988]);
      var ldCanaryIslands = iberianPeninsule([-7.3148275, 33.54359]);

      context.moveTo(ulCanaryIslands[0], ulCanaryIslands[1]);
      context.lineTo(urCanaryIslands[0], urCanaryIslands[1]);
      context.lineTo(ldCanaryIslands[0], ldCanaryIslands[1]);
    };
    conicConformalSpain.getCompositionBorders = function () {
      var context = d3Path.path();
      this.drawCompositionBorders(context);
      return context.toString();
    };

    return conicConformalSpain.scale(2700);
  }

  // The projections must have mutually exclusive clip regions on the sphere,
  // as this will avoid emitting interleaving lines and polygons.
  function multiplex$3(streams) {
    var n = streams.length;
    return {
      point: function point(x, y) {
        var i = -1;while (++i < n) {
          streams[i].point(x, y);
        }
      },
      sphere: function sphere() {
        var i = -1;while (++i < n) {
          streams[i].sphere();
        }
      },
      lineStart: function lineStart() {
        var i = -1;while (++i < n) {
          streams[i].lineStart();
        }
      },
      lineEnd: function lineEnd() {
        var i = -1;while (++i < n) {
          streams[i].lineEnd();
        }
      },
      polygonStart: function polygonStart() {
        var i = -1;while (++i < n) {
          streams[i].polygonStart();
        }
      },
      polygonEnd: function polygonEnd() {
        var i = -1;while (++i < n) {
          streams[i].polygonEnd();
        }
      }
    };
  }

  // A composite projection for Portugal, configured by default for 960×500.
  function conicConformalPortugal() {
    var cache,
        cacheStream,
        iberianPeninsule = d3Geo.geoConicConformal().rotate([10, -39.3]).parallels([0, 60]),
        iberianPeninsulePoint,
        madeira = d3Geo.geoConicConformal().rotate([17, -32.7]).parallels([0, 60]),
        madeiraPoint,
        azores = d3Geo.geoConicConformal().rotate([27.8, -38.6]).parallels([0, 60]),
        azoresPoint,
        _point4,
        pointStream = { point: function point(x, y) {
        _point4 = [x, y];
      } };

    /*
    var iberianPeninsuleBbox = [[-11, 46], [4, 34]];
    var madeiraBbox = [[-17.85, 33.6], [-16, 32.02]];
    var azoresBbox = [[-32, 40.529], [-23.98, 35.75]];
    */

    function conicConformalPortugal(coordinates) {
      var x = coordinates[0],
          y = coordinates[1];
      return _point4 = null, (iberianPeninsulePoint.point(x, y), _point4) || (madeiraPoint.point(x, y), _point4) || (azoresPoint.point(x, y), _point4);
    }

    conicConformalPortugal.invert = function (coordinates) {
      var k = iberianPeninsule.scale(),
          t = iberianPeninsule.translate(),
          x = (coordinates[0] - t[0]) / k,
          y = (coordinates[1] - t[1]) / k;

      /*
      //How are the return values calculated:
      console.info("******");
      var c0 = madeira(madeiraBbox[0]);
      var x0 = (c0[0] - t[0]) / k;
      var y0 = (c0[1] - t[1]) / k;
       console.info("p0 madeira", x0 + ' - ' + y0);
       var c1 = madeira(madeiraBbox[1]);
      var x1 = (c1[0] - t[0]) / k;
      var y1 = (c1[1] - t[1]) / k;
       console.info("p1 madeira", x1 + ' - ' + y1);
       c0 = azores(azoresBbox[0]);
      x0 = (c0[0] - t[0]) / k;
      y0 = (c0[1] - t[1]) / k;
       console.info("p0 azores", x0 + ' - ' + y0);
       c1 = azores(azoresBbox[1]);
      x1 = (c1[0] - t[0]) / k;
      y1 = (c1[1] - t[1]) / k;
       console.info("p1 azores", x1 + ' - ' + y1);
      */

      return (y >= 0.0093 && y < 0.03678 && x >= -0.03875 && x < -0.0116 ? madeira : y >= -0.0412 && y < 0.0091 && x >= -0.07782 && x < -0.01166 ? azores : iberianPeninsule).invert(coordinates);
    };

    conicConformalPortugal.stream = function (stream) {
      return cache && cacheStream === stream ? cache : cache = multiplex$3([iberianPeninsule.stream(cacheStream = stream), madeira.stream(stream), azores.stream(stream)]);
    };

    conicConformalPortugal.precision = function (_) {
      if (!arguments.length) {
        return iberianPeninsule.precision();
      }
      iberianPeninsule.precision(_);
      madeira.precision(_);
      azores.precision(_);
      return reset();
    };

    conicConformalPortugal.scale = function (_) {
      if (!arguments.length) {
        return iberianPeninsule.scale();
      }
      iberianPeninsule.scale(_);
      madeira.scale(_);
      azores.scale(_ * 0.6);
      return conicConformalPortugal.translate(iberianPeninsule.translate());
    };

    conicConformalPortugal.translate = function (_) {
      if (!arguments.length) {
        return iberianPeninsule.translate();
      }
      var k = iberianPeninsule.scale(),
          x = +_[0],
          y = +_[1];
      /*
      var c0 = iberianPeninsule(iberianPeninsuleBbox[0]);
      var x0 = (x - c0[0]) / k;
      var y0 = (y - c0[1]) / k;
      var c1 = iberianPeninsule(iberianPeninsuleBbox[1]);
      var x1 = (x - c1[0]) / k;
      var y1 = (y - c1[1]) / k;
      console.info('Iberian Peninsula: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
      console.info('.clipExtent([[x '+
      (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
      ' * k, y '+
      (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
      ' * k],[x '+
      (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
      ' * k, y '+
      (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
      ' * k]])');
      c0 = madeira.translate([x - 0.0265 * k, y + 0.025 * k])(madeiraBbox[0]);
      x0 = (x - c0[0]) / k;
      y0 = (y - c0[1]) / k;
      c1 = madeira.translate([x - 0.0265 * k, y + 0.025 * k])(madeiraBbox[1]);
      x1 = (x - c1[0]) / k;
      y1 = (y - c1[1]) / k;
      console.info('Madeira: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
      console.info('.clipExtent([[x '+
      (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
      ' * k + epsilon, y '+
      (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
      ' * k + epsilon],[x '+
      (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
      ' * k - epsilon, y '+
      (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
      ' * k - epsilon]])');
       c0 = azores.translate([x - 0.045 * k, y + -0.02 * k])(azoresBbox[0]);
      x0 = (x - c0[0]) / k;
      y0 = (y - c0[1]) / k;
       c1 = azores.translate([x - 0.045 * k, y + -0.02 * k])(azoresBbox[1]);
      x1 = (x - c1[0]) / k;
      y1 = (y - c1[1]) / k;
       console.info('Azores: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
      console.info('.clipExtent([[x '+
       (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
       ' * k + epsilon, y '+
       (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
       ' * k + epsilon],[x '+
       (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
       ' * k - epsilon, y '+
       (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
       ' * k - epsilon]])');
       */
      iberianPeninsulePoint = iberianPeninsule.translate(_).clipExtent([[x - 0.0115 * k, y - 0.1138 * k], [x + 0.2105 * k, y + 0.0673 * k]]).stream(pointStream);

      madeiraPoint = madeira.translate([x - 0.0265 * k, y + 0.025 * k]).clipExtent([[x - 0.0388 * k + epsilon, y + 0.0093 * k + epsilon], [x - 0.0116 * k - epsilon, y + 0.0368 * k - epsilon]]).stream(pointStream);

      azoresPoint = azores.translate([x - 0.045 * k, y + -0.02 * k]).clipExtent([[x - 0.0778 * k + epsilon, y - 0.0413 * k + epsilon], [x - 0.0117 * k - epsilon, y + 0.0091 * k - epsilon]]).stream(pointStream);

      return reset();
    };

    conicConformalPortugal.fitExtent = function (extent, object) {
      return fitExtent(conicConformalPortugal, extent, object);
    };

    conicConformalPortugal.fitSize = function (size, object) {
      return fitSize(conicConformalPortugal, size, object);
    };

    function reset() {
      cache = cacheStream = null;
      return conicConformalPortugal;
    }

    conicConformalPortugal.drawCompositionBorders = function (context) {
      /*
      console.info("CLIP EXTENT MADEIRA: ", madeira.clipExtent());
      console.info("UL BBOX:", iberianPeninsule.invert([madeira.clipExtent()[0][0], madeira.clipExtent()[0][1]]));
      console.info("UR BBOX:", iberianPeninsule.invert([madeira.clipExtent()[1][0], madeira.clipExtent()[0][1]]));
      console.info("LD BBOX:", iberianPeninsule.invert([madeira.clipExtent()[1][0], madeira.clipExtent()[1][1]]));
      console.info("LL BBOX:", iberianPeninsule.invert([madeira.clipExtent()[0][0], madeira.clipExtent()[1][1]]));
       console.info("CLIP EXTENT AZORES: ", azores.clipExtent());
      console.info("UL BBOX:", iberianPeninsule.invert([azores.clipExtent()[0][0], azores.clipExtent()[0][1]]));
      console.info("UR BBOX:", iberianPeninsule.invert([azores.clipExtent()[1][0], azores.clipExtent()[0][1]]));
      console.info("LD BBOX:", iberianPeninsule.invert([azores.clipExtent()[1][0], azores.clipExtent()[1][1]]));
      console.info("LL BBOX:", iberianPeninsule.invert([azores.clipExtent()[0][0], azores.clipExtent()[1][1]]));
      */

      var ulmadeira = iberianPeninsule([-12.8351, 38.7113]);
      var urmadeira = iberianPeninsule([-10.8482, 38.7633]);
      var ldmadeira = iberianPeninsule([-10.8181, 37.2072]);
      var llmadeira = iberianPeninsule([-12.7345, 37.1573]);

      var ulazores = iberianPeninsule([-16.0753, 41.4436]);
      var urazores = iberianPeninsule([-10.9168, 41.6861]);
      var ldazores = iberianPeninsule([-10.8557, 38.7747]);
      var llazores = iberianPeninsule([-15.6728, 38.5505]);

      context.moveTo(ulmadeira[0], ulmadeira[1]);
      context.lineTo(urmadeira[0], urmadeira[1]);
      context.lineTo(ldmadeira[0], ldmadeira[1]);
      context.lineTo(ldmadeira[0], ldmadeira[1]);
      context.lineTo(llmadeira[0], llmadeira[1]);
      context.closePath();

      context.moveTo(ulazores[0], ulazores[1]);
      context.lineTo(urazores[0], urazores[1]);
      context.lineTo(ldazores[0], ldazores[1]);
      context.lineTo(ldazores[0], ldazores[1]);
      context.lineTo(llazores[0], llazores[1]);
      context.closePath();
    };
    conicConformalPortugal.getCompositionBorders = function () {
      var context = d3Path.path();
      this.drawCompositionBorders(context);
      return context.toString();
    };

    return conicConformalPortugal.scale(4200);
  }

  // The projections must have mutually exclusive clip regions on the sphere,
  // as this will avoid emitting interleaving lines and polygons.
  function multiplex$4(streams) {
    var n = streams.length;
    return {
      point: function point(x, y) {
        var i = -1;while (++i < n) {
          streams[i].point(x, y);
        }
      },
      sphere: function sphere() {
        var i = -1;while (++i < n) {
          streams[i].sphere();
        }
      },
      lineStart: function lineStart() {
        var i = -1;while (++i < n) {
          streams[i].lineStart();
        }
      },
      lineEnd: function lineEnd() {
        var i = -1;while (++i < n) {
          streams[i].lineEnd();
        }
      },
      polygonStart: function polygonStart() {
        var i = -1;while (++i < n) {
          streams[i].polygonStart();
        }
      },
      polygonEnd: function polygonEnd() {
        var i = -1;while (++i < n) {
          streams[i].polygonEnd();
        }
      }
    };
  }

  // A composite projection for Ecuador, configured by default for 960×500.
  function mercatorEcuador() {
    var cache,
        cacheStream,
        mainland = d3Geo.geoMercator().rotate([80, 1.5]),
        mainlandPoint,
        galapagos = d3Geo.geoMercator().rotate([90.73, 1]),
        galapagosPoint,
        _point5,
        pointStream = { point: function point(x, y) {
        _point5 = [x, y];
      } };

    /*
    var mainlandBbox = [[-81.5, 2.7], [-70.0, -6.0]];
    var galapagosBbox = [[-92.2, 0.58], [-88.8, -1.8]];
    */

    function mercatorEcuador(coordinates) {
      var x = coordinates[0],
          y = coordinates[1];
      return _point5 = null, (mainlandPoint.point(x, y), _point5) || (galapagosPoint.point(x, y), _point5);
    }

    mercatorEcuador.invert = function (coordinates) {
      var k = mainland.scale(),
          t = mainland.translate(),
          x = (coordinates[0] - t[0]) / k,
          y = (coordinates[1] - t[1]) / k;
      /*
      //How are the return values calculated:
      var c0 = galapagos(galapagosBbox[0]);
      var x0 = (c0[0] - t[0]) / k;
      var y0 = (c0[1] - t[1]) / k;
       console.info("p0 galapagos", x0 + ' - ' + y0);
        var c1 = galapagos(galapagosBbox[1]);
      var x1 = (c1[0] - t[0]) / k;
      var y1 = (c1[1] - t[1]) / k;
       console.info("p1 galapagos", x1 + ' - ' + y1);
      */
      return (y >= -0.0676 && y < -0.026 && x >= -0.0857 && x < -0.0263 ? galapagos : mainland).invert(coordinates);
    };

    mercatorEcuador.stream = function (stream) {
      return cache && cacheStream === stream ? cache : cache = multiplex$4([mainland.stream(cacheStream = stream), galapagos.stream(stream)]);
    };

    mercatorEcuador.precision = function (_) {
      if (!arguments.length) {
        return mainland.precision();
      }
      mainland.precision(_);
      galapagos.precision(_);
      return reset();
    };

    mercatorEcuador.scale = function (_) {
      if (!arguments.length) {
        return mainland.scale();
      }
      mainland.scale(_);
      galapagos.scale(_);
      return mercatorEcuador.translate(mainland.translate());
    };

    mercatorEcuador.translate = function (_) {
      if (!arguments.length) {
        return mainland.translate();
      }
      var k = mainland.scale(),
          x = +_[0],
          y = +_[1];
      /*
      var c0 = mainland(mainlandBbox[0]);
      var x0 = (x - c0[0]) / k;
      var y0 = (y - c0[1]) / k;
      var c1 = mainland(mainlandBbox[1]);
      var x1 = (x - c1[0]) / k;
      var y1 = (y - c1[1]) / k;
      console.info('mainland: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
      console.info('.clipExtent([[x '+
      (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
      ' * k, y '+
      (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
      ' * k],[x '+
      (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
      ' * k, y '+
      (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
      ' * k]])');
      c0 = galapagos.translate([x - 0.06 * k, y - 0.04 * k])(galapagosBbox[0]);
      x0 = (x - c0[0]) / k;
      y0 = (y - c0[1]) / k;
      c1 = galapagos.translate([x - 0.06 * k, y - 0.04 * k])(galapagosBbox[1]);
      x1 = (x - c1[0]) / k;
      y1 = (y - c1[1]) / k;
      console.info('galapagos: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
      console.info('.clipExtent([[x '+
      (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
      ' * k + epsilon, y '+
      (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
      ' * k + epsilon],[x '+
      (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
      ' * k - epsilon, y '+
      (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
      ' * k - epsilon]])');*/

      mainlandPoint = mainland.translate(_).clipExtent([[x - 0.0262 * k, y - 0.0734 * k], [x + 0.1741 * k, y + 0.079 * k]]).stream(pointStream);

      galapagosPoint = galapagos.translate([x - 0.06 * k, y - 0.04 * k]).clipExtent([[x - 0.0857 * k + epsilon, y - 0.0676 * k + epsilon], [x - 0.0263 * k - epsilon, y - 0.026 * k - epsilon]]).stream(pointStream);

      return reset();
    };

    mercatorEcuador.fitExtent = function (extent, object) {
      return fitExtent(mercatorEcuador, extent, object);
    };

    mercatorEcuador.fitSize = function (size, object) {
      return fitSize(mercatorEcuador, size, object);
    };

    function reset() {
      cache = cacheStream = null;
      return mercatorEcuador;
    }

    mercatorEcuador.drawCompositionBorders = function (context) {
      /*
      console.info("CLIP EXTENT: ", galapagos.clipExtent());
      console.info("UL BBOX:", mainland.invert([galapagos.clipExtent()[0][0], galapagos.clipExtent()[0][1]]));
      console.info("UR BBOX:", mainland.invert([galapagos.clipExtent()[1][0], galapagos.clipExtent()[0][1]]));
      console.info("LD BBOX:", mainland.invert([galapagos.clipExtent()[1][0], galapagos.clipExtent()[1][1]]));
      console.info("LL BBOX:", mainland.invert([galapagos.clipExtent()[0][0], galapagos.clipExtent()[1][1]]));
      */

      var ulgalapagos = mainland([-84.9032, 2.3757]);
      var urgalapagos = mainland([-81.5047, 2.3708]);
      var ldgalapagos = mainland([-81.5063, -0.01]);
      var llgalapagos = mainland([-84.9086, -0.005]);

      context.moveTo(ulgalapagos[0], ulgalapagos[1]);
      context.lineTo(urgalapagos[0], urgalapagos[1]);
      context.lineTo(ldgalapagos[0], ldgalapagos[1]);
      context.lineTo(llgalapagos[0], llgalapagos[1]);
      context.closePath();
    };
    mercatorEcuador.getCompositionBorders = function () {
      var context = d3Path.path();
      this.drawCompositionBorders(context);
      return context.toString();
    };

    return mercatorEcuador.scale(3500);
  }

  // The projections must have mutually exclusive clip regions on the sphere,
  // as this will avoid emitting interleaving lines and polygons.
  function multiplex$5(streams) {
    var n = streams.length;
    return {
      point: function point(x, y) {
        var i = -1;while (++i < n) {
          streams[i].point(x, y);
        }
      },
      sphere: function sphere() {
        var i = -1;while (++i < n) {
          streams[i].sphere();
        }
      },
      lineStart: function lineStart() {
        var i = -1;while (++i < n) {
          streams[i].lineStart();
        }
      },
      lineEnd: function lineEnd() {
        var i = -1;while (++i < n) {
          streams[i].lineEnd();
        }
      },
      polygonStart: function polygonStart() {
        var i = -1;while (++i < n) {
          streams[i].polygonStart();
        }
      },
      polygonEnd: function polygonEnd() {
        var i = -1;while (++i < n) {
          streams[i].polygonEnd();
        }
      }
    };
  }

  // A composite projection for Chile, configured by default for 960×500.
  function transverseMercatorChile() {
    var cache,
        cacheStream,
        mainland = d3Geo.geoTransverseMercator().rotate([72, 37]),
        mainlandPoint,
        antarctic = d3Geo.geoStereographic().rotate([72, 0]),
        antarcticPoint,
        juanFernandez = d3Geo.geoMercator().rotate([80, 33.5]),
        juanFernandezPoint,
        pascua = d3Geo.geoMercator().rotate([110, 25]),
        pascuaPoint,
        _point6,
        pointStream = { point: function point(x, y) {
        _point6 = [x, y];
      } };

    /*
    var mainlandBbox = [[-75.5, -15.0], [-32, -49.0]];
    var antarcticBbox = [[-91.0, -60.0], [-43.0, -90.0]];
    var juanFernandezBbox = [[-81.0, -33.0], [-78.5, -34.0]];
    var pascuaBbox = [[-110, -26.6], [-108.7, -27.5]];
    */

    function transverseMercatorChile(coordinates) {
      var x = coordinates[0],
          y = coordinates[1];
      return _point6 = null, (mainlandPoint.point(x, y), _point6) || (antarcticPoint.point(x, y), _point6) || (juanFernandezPoint.point(x, y), _point6) || (pascuaPoint.point(x, y), _point6);
    }

    transverseMercatorChile.invert = function (coordinates) {
      var k = mainland.scale(),
          t = mainland.translate(),
          x = (coordinates[0] - t[0]) / k,
          y = (coordinates[1] - t[1]) / k;

      /*
      //How are the return values calculated:
      console.info("******");
      var c0 = antarctic(antarcticBbox[0]);
      var x0 = (c0[0] - t[0]) / k;
      var y0 = (c0[1] - t[1]) / k;
       console.info("p0 antarctic", x0 + ' - ' + y0);
       var c1 = antarctic(antarcticBbox[1]);
      var x1 = (c1[0] - t[0]) / k;
      var y1 = (c1[1] - t[1]) / k;
       console.info("p1 antarctic", x1 + ' - ' + y1);
       c0 = juanFernandez(juanFernandezBbox[0]);
      x0 = (c0[0] - t[0]) / k;
      y0 = (c0[1] - t[1]) / k;
       console.info("p0 juanFernandez", x0 + ' - ' + y0);
       c1 = juanFernandez(juanFernandezBbox[1]);
      x1 = (c1[0] - t[0]) / k;
      y1 = (c1[1] - t[1]) / k;
       console.info("p1 juanFernandez", x1 + ' - ' + y1);
       c0 = pascua(pascuaBbox[0]);
      x0 = (c0[0] - t[0]) / k;
      y0 = (c0[1] - t[1]) / k;
       console.info("p0 pascua", x0 + ' - ' + y0);
       c1 = pascua(pascuaBbox[1]);
      x1 = (c1[0] - t[0]) / k;
      y1 = (c1[1] - t[1]) / k;
       console.info("p1 pascua", x1 + ' - ' + y1);
      */

      return (y >= 0.2582 && y < 0.32 && x >= -0.1036 && x < -0.087 ? antarctic : y >= -0.01298 && y < 0.0133 && x >= -0.11396 && x < -0.05944 ? juanFernandez : y >= 0.01539 && y < 0.03911 && x >= -0.089 && x < -0.0588 ? pascua : mainland).invert(coordinates);
    };

    transverseMercatorChile.stream = function (stream) {
      return cache && cacheStream === stream ? cache : cache = multiplex$5([mainland.stream(cacheStream = stream), antarctic.stream(stream), juanFernandez.stream(stream), pascua.stream(stream)]);
    };

    transverseMercatorChile.precision = function (_) {
      if (!arguments.length) {
        return mainland.precision();
      }
      mainland.precision(_);
      antarctic.precision(_);
      juanFernandez.precision(_);
      pascua.precision(_);
      return reset();
    };

    transverseMercatorChile.scale = function (_) {
      if (!arguments.length) {
        return mainland.scale();
      }
      mainland.scale(_);
      antarctic.scale(_ * 0.15);
      juanFernandez.scale(_ * 1.5);
      pascua.scale(_ * 1.5);
      return transverseMercatorChile.translate(mainland.translate());
    };

    transverseMercatorChile.translate = function (_) {
      if (!arguments.length) {
        return mainland.translate();
      }
      var k = mainland.scale(),
          x = +_[0],
          y = +_[1];

      /*
      var c0 = mainland(mainlandBbox[0]);
      var x0 = (x - c0[0]) / k;
      var y0 = (y - c0[1]) / k;
      var c1 = mainland(mainlandBbox[1]);
      var x1 = (x - c1[0]) / k;
      var y1 = (y - c1[1]) / k;
      console.info('Mainland: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
      console.info('.clipExtent([[x '+
      (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
      ' * k, y '+
      (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
      ' * k],[x '+
      (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
      ' * k, y '+
      (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
      ' * k]])');
      c0 = antarctic.translate([x - 0.1 * k, y + 0.17 * k])(antarcticBbox[0]);
      x0 = (x - c0[0]) / k;
      y0 = (y - c0[1]) / k;
      c1 = antarctic.translate([x - 0.1 * k, y + 0.17 * k])(antarcticBbox[1]);
      x1 = (x - c1[0]) / k;
      y1 = (y - c1[1]) / k;
      console.info('antarctic: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
      console.info('Doesn t work due to -90 latitude!' + '.clipExtent([[x '+
      (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
      ' * k + epsilon, y '+
      (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
      ' * k + epsilon],[x '+
      (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
      ' * k - epsilon, y '+
      (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
      ' * k - epsilon]])');
       c0 = juanFernandez.translate([x - 0.092 * k, y -0 * k])(juanFernandezBbox[0]);
      x0 = (x - c0[0]) / k;
      y0 = (y - c0[1]) / k;
       c1 = juanFernandez.translate([x - 0.092 * k, y -0 * k])(juanFernandezBbox[1]);
      x1 = (x - c1[0]) / k;
      y1 = (y - c1[1]) / k;
       console.info('juanFernandez: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
      console.info('.clipExtent([[x '+
       (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
       ' * k + epsilon, y '+
       (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
       ' * k + epsilon],[x '+
       (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
       ' * k - epsilon, y '+
       (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
       ' * k - epsilon]])');
        c0 = pascua.translate([x - 0.089 * k, y -0.0265 * k])(pascuaBbox[0]);
       x0 = (x - c0[0]) / k;
       y0 = (y - c0[1]) / k;
        c1 = pascua.translate([x - 0.089 * k, y -0.0265 * k])(pascuaBbox[1]);
       x1 = (x - c1[0]) / k;
       y1 = (y - c1[1]) / k;
        console.info('pascua: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
       console.info('.clipExtent([[x '+
        (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
        ' * k + epsilon, y '+
        (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
        ' * k + epsilon],[x '+
        (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
        ' * k - epsilon, y '+
        (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
        ' * k - epsilon]])');
        */
      mainlandPoint = mainland.translate(_).clipExtent([[x - 0.059 * k, y - 0.3835 * k], [x + 0.4498 * k, y + 0.3375 * k]]).stream(pointStream);

      antarcticPoint = antarctic.translate([x - 0.087 * k, y + 0.17 * k]).clipExtent([[x - 0.1166 * k + epsilon, y + 0.2582 * k + epsilon], [x - 0.06 * k - epsilon, y + 0.32 * k - epsilon]]).stream(pointStream);

      juanFernandezPoint = juanFernandez.translate([x - 0.092 * k, y - 0 * k]).clipExtent([[x - 0.114 * k + epsilon, y - 0.013 * k + epsilon], [x - 0.0594 * k - epsilon, y + 0.0133 * k - epsilon]]).stream(pointStream);

      pascuaPoint = pascua.translate([x - 0.089 * k, y - 0.0265 * k]).clipExtent([[x - 0.089 * k + epsilon, y + 0.0154 * k + epsilon], [x - 0.0588 * k - epsilon, y + 0.0391 * k - epsilon]]).stream(pointStream);

      return reset();
    };

    transverseMercatorChile.fitExtent = function (extent, object) {
      return fitExtent(transverseMercatorChile, extent, object);
    };

    transverseMercatorChile.fitSize = function (size, object) {
      return fitSize(transverseMercatorChile, size, object);
    };

    function reset() {
      cache = cacheStream = null;
      return transverseMercatorChile;
    }

    transverseMercatorChile.drawCompositionBorders = function (context) {
      /*
      console.info("CLIP EXTENT antarctic: ", antarctic.clipExtent());
      console.info("UL BBOX:", mainland.invert([antarctic.clipExtent()[0][0], antarctic.clipExtent()[0][1]]));
      console.info("UR BBOX:", mainland.invert([antarctic.clipExtent()[1][0], antarctic.clipExtent()[0][1]]));
      console.info("LD BBOX:", mainland.invert([antarctic.clipExtent()[1][0], antarctic.clipExtent()[1][1]]));
      console.info("LL BBOX:", mainland.invert([antarctic.clipExtent()[0][0], antarctic.clipExtent()[1][1]]));
       console.info("CLIP EXTENT juanFernandez: ", juanFernandez.clipExtent());
      console.info("UL BBOX:", mainland.invert([juanFernandez.clipExtent()[0][0], juanFernandez.clipExtent()[0][1]]));
      console.info("UR BBOX:", mainland.invert([juanFernandez.clipExtent()[1][0], juanFernandez.clipExtent()[0][1]]));
      console.info("LD BBOX:", mainland.invert([juanFernandez.clipExtent()[1][0], juanFernandez.clipExtent()[1][1]]));
      console.info("LL BBOX:", mainland.invert([juanFernandez.clipExtent()[0][0], juanFernandez.clipExtent()[1][1]]));
       console.info("CLIP EXTENT pascua: ", pascua.clipExtent());
      console.info("UL BBOX:", mainland.invert([pascua.clipExtent()[0][0], pascua.clipExtent()[0][1]]));
      console.info("UR BBOX:", mainland.invert([pascua.clipExtent()[1][0], pascua.clipExtent()[0][1]]));
      console.info("LD BBOX:", mainland.invert([pascua.clipExtent()[1][0], pascua.clipExtent()[1][1]]));
      console.info("LL BBOX:", mainland.invert([pascua.clipExtent()[0][0], pascua.clipExtent()[1][1]]));
      */

      var ulantarctic = mainland([-82.6999, -51.3043]);
      var urantarctic = mainland([-77.5442, -51.6631]);
      var ldantarctic = mainland([-78.0254, -55.1860]);
      var llantarctic = mainland([-83.6106, -54.7785]);

      var uljuanFernandez = mainland([-80.0638, -35.9840]);
      var urjuanFernandez = mainland([-76.2153, -36.1811]);
      var ldjuanFernandez = mainland([-76.2994, -37.6839]);
      var lljuanFernandez = mainland([-80.2231, -37.4757]);

      var ulpascua = mainland([-78.442, -37.706]);
      var urpascua = mainland([-76.263, -37.8054]);
      var ldpascua = mainland([-76.344, -39.1595]);
      var llpascua = mainland([-78.5638, -39.0559]);

      context.moveTo(ulantarctic[0], ulantarctic[1]);
      context.lineTo(urantarctic[0], urantarctic[1]);
      context.lineTo(ldantarctic[0], ldantarctic[1]);
      context.lineTo(ldantarctic[0], ldantarctic[1]);
      context.lineTo(llantarctic[0], llantarctic[1]);
      context.closePath();

      context.moveTo(uljuanFernandez[0], uljuanFernandez[1]);
      context.lineTo(urjuanFernandez[0], urjuanFernandez[1]);
      context.lineTo(ldjuanFernandez[0], ldjuanFernandez[1]);
      context.lineTo(ldjuanFernandez[0], ldjuanFernandez[1]);
      context.lineTo(lljuanFernandez[0], lljuanFernandez[1]);
      context.closePath();

      context.moveTo(ulpascua[0], ulpascua[1]);
      context.lineTo(urpascua[0], urpascua[1]);
      context.lineTo(ldpascua[0], ldpascua[1]);
      context.lineTo(ldpascua[0], ldpascua[1]);
      context.lineTo(llpascua[0], llpascua[1]);
      context.closePath();
    };
    transverseMercatorChile.getCompositionBorders = function () {
      var context = d3Path.path();
      this.drawCompositionBorders(context);
      return context.toString();
    };

    return transverseMercatorChile.scale(700);
  }

  // The projections must have mutually exclusive clip regions on the sphere,
  // as this will avoid emitting interleaving lines and polygons.
  function multiplex$6(streams) {
    var n = streams.length;
    return {
      point: function point(x, y) {
        var i = -1;while (++i < n) {
          streams[i].point(x, y);
        }
      },
      sphere: function sphere() {
        var i = -1;while (++i < n) {
          streams[i].sphere();
        }
      },
      lineStart: function lineStart() {
        var i = -1;while (++i < n) {
          streams[i].lineStart();
        }
      },
      lineEnd: function lineEnd() {
        var i = -1;while (++i < n) {
          streams[i].lineEnd();
        }
      },
      polygonStart: function polygonStart() {
        var i = -1;while (++i < n) {
          streams[i].polygonStart();
        }
      },
      polygonEnd: function polygonEnd() {
        var i = -1;while (++i < n) {
          streams[i].polygonEnd();
        }
      }
    };
  }

  // A composite projection for Portugal, configured by default for 960×500.
  function conicEquidistantJapan() {
    var cache,
        cacheStream,
        mainland = d3Geo.geoConicEquidistant().rotate([-136, -22]).parallels([40, 34]),
        mainlandPoint,
        //gis.stackexchange.com/a/73135
    hokkaido = d3Geo.geoConicEquidistant().rotate([-146, -26]).parallels([40, 34]),
        hokkaidoPoint,
        okinawa = d3Geo.geoConicEquidistant().rotate([-126, -19]).parallels([40, 34]),
        okinawaPoint,
        _point7,
        pointStream = { point: function point(x, y) {
        _point7 = [x, y];
      } };

    /*
    var mainlandBbox = [[126.0, 41.606], [142.97, 29.97]];
    var hokkaidoBbox = [[138.7, 45.61], [146.2, 41.2]];
    var okinawaBbox = [[122.6, 29.0], [130, 23.7]];
    */

    function conicEquidistantJapan(coordinates) {
      var x = coordinates[0],
          y = coordinates[1];
      return _point7 = null, (mainlandPoint.point(x, y), _point7) || (hokkaidoPoint.point(x, y), _point7) || (okinawaPoint.point(x, y), _point7);
    }

    conicEquidistantJapan.invert = function (coordinates) {
      var k = mainland.scale(),
          t = mainland.translate(),
          x = (coordinates[0] - t[0]) / k,
          y = (coordinates[1] - t[1]) / k;

      /*
      //How are the return values calculated:
      console.info("******");
      var c0 = hokkaido(hokkaidoBbox[0]);
      var x0 = (c0[0] - t[0]) / k;
      var y0 = (c0[1] - t[1]) / k;
       console.info("p0 hokkaido", x0 + ' - ' + y0);
       var c1 = hokkaido(hokkaidoBbox[1]);
      var x1 = (c1[0] - t[0]) / k;
      var y1 = (c1[1] - t[1]) / k;
       console.info("p1 hokkaido", x1 + ' - ' + y1);
       c0 = okinawa(okinawaBbox[0]);
      x0 = (c0[0] - t[0]) / k;
      y0 = (c0[1] - t[1]) / k;
       console.info("p0 okinawa", x0 + ' - ' + y0);
       c1 = okinawa(okinawaBbox[1]);
      x1 = (c1[0] - t[0]) / k;
      y1 = (c1[1] - t[1]) / k;
       console.info("p1 okinawa", x1 + ' - ' + y1);
      */

      return (y >= -0.10925 && y < -0.02701 && x >= -0.135 && x < -0.0397 ? hokkaido : y >= 0.04713 && y < 0.11138 && x >= -0.03986 && x < 0.051 ? okinawa : mainland).invert(coordinates);
    };

    conicEquidistantJapan.stream = function (stream) {
      return cache && cacheStream === stream ? cache : cache = multiplex$6([mainland.stream(cacheStream = stream), hokkaido.stream(stream), okinawa.stream(stream)]);
    };

    conicEquidistantJapan.precision = function (_) {
      if (!arguments.length) {
        return mainland.precision();
      }
      mainland.precision(_);
      hokkaido.precision(_);
      okinawa.precision(_);
      return reset();
    };

    conicEquidistantJapan.scale = function (_) {
      if (!arguments.length) {
        return mainland.scale();
      }
      mainland.scale(_);
      hokkaido.scale(_);
      okinawa.scale(_ * 0.7);
      return conicEquidistantJapan.translate(mainland.translate());
    };

    conicEquidistantJapan.translate = function (_) {
      if (!arguments.length) {
        return mainland.translate();
      }
      var k = mainland.scale(),
          x = +_[0],
          y = +_[1];

      /*
      var c0 = mainland(mainlandBbox[0]);
      var x0 = (x - c0[0]) / k;
      var y0 = (y - c0[1]) / k;
      var c1 = mainland(mainlandBbox[1]);
      var x1 = (x - c1[0]) / k;
      var y1 = (y - c1[1]) / k;
      console.info('Main: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
      console.info('.clipExtent([[x '+
      (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
      ' * k, y '+
      (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
      ' * k],[x '+
      (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
      ' * k, y '+
      (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
      ' * k]])');
      c0 = hokkaido.translate([x - 0.0425 * k, y - 0.005 * k])(hokkaidoBbox[0]);
      x0 = (x - c0[0]) / k;
      y0 = (y - c0[1]) / k;
      c1 = hokkaido.translate([x - 0.0425 * k, y - 0.005 * k])(hokkaidoBbox[1]);
      x1 = (x - c1[0]) / k;
      y1 = (y - c1[1]) / k;
      console.info('hokkaido: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
      console.info('.clipExtent([[x '+
      (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
      ' * k + epsilon, y '+
      (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
      ' * k + epsilon],[x '+
      (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
      ' * k - epsilon, y '+
      (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
      ' * k - epsilon]])');
       c0 = okinawa.translate([x - 0 * k, y + 0 * k])(okinawaBbox[0]);
      x0 = (x - c0[0]) / k;
      y0 = (y - c0[1]) / k;
       c1 = okinawa.translate([x - 0 * k, y + 0 * k])(okinawaBbox[1]);
      x1 = (x - c1[0]) / k;
      y1 = (y - c1[1]) / k;
       console.info('okinawa: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
      console.info('.clipExtent([[x '+
       (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
       ' * k + epsilon, y '+
       (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
       ' * k + epsilon],[x '+
       (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
       ' * k - epsilon, y '+
       (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
       ' * k - epsilon]])');
       */

      mainlandPoint = mainland.translate(_).clipExtent([[x - 0.1352 * k, y - 0.1091 * k], [x + 0.117 * k, y + 0.098 * k]]).stream(pointStream);

      hokkaidoPoint = hokkaido.translate([x - 0.0425 * k, y - 0.005 * k]).clipExtent([[x - 0.135 * k + epsilon, y - 0.1093 * k + epsilon], [x - 0.0397 * k - epsilon, y - 0.027 * k - epsilon]]).stream(pointStream);

      okinawaPoint = okinawa.translate(_).clipExtent([[x - 0.0399 * k + epsilon, y + 0.0471 * k + epsilon], [x + 0.051 * k - epsilon, y + 0.1114 * k - epsilon]]).stream(pointStream);

      return reset();
    };

    conicEquidistantJapan.fitExtent = function (extent, object) {
      return fitExtent(conicEquidistantJapan, extent, object);
    };

    conicEquidistantJapan.fitSize = function (size, object) {
      return fitSize(conicEquidistantJapan, size, object);
    };

    function reset() {
      cache = cacheStream = null;
      return conicEquidistantJapan;
    }

    conicEquidistantJapan.drawCompositionBorders = function (context) {
      /*
      console.info("CLIP EXTENT hokkaido: ", hokkaido.clipExtent());
      console.info("UL BBOX:", mainland.invert([hokkaido.clipExtent()[0][0], hokkaido.clipExtent()[0][1]]));
      console.info("UR BBOX:", mainland.invert([hokkaido.clipExtent()[1][0], hokkaido.clipExtent()[0][1]]));
      console.info("LD BBOX:", mainland.invert([hokkaido.clipExtent()[1][0], hokkaido.clipExtent()[1][1]]));
      console.info("LL BBOX:", mainland.invert([hokkaido.clipExtent()[0][0], hokkaido.clipExtent()[1][1]]));
      */

      var ulhokkaido = mainland([126.01320483689143, 41.621090310215585]);
      var urhokkaido = mainland([133.04304387025903, 42.15087523707186]);
      var ldhokkaido = mainland([133.3021766080688, 37.43975444725098]);
      var llhokkaido = mainland([126.87889168628224, 36.95488945159779]);

      var llokinawa = mainland([132.9, 29.8]);
      var lmokinawa = mainland([134, 33]);
      var lrokinawa = mainland([139.3, 33.2]);
      var llrokinawa = mainland([139.16, 30.5]);

      context.moveTo(ulhokkaido[0], ulhokkaido[1]);
      context.lineTo(urhokkaido[0], urhokkaido[1]);
      context.lineTo(ldhokkaido[0], ldhokkaido[1]);
      context.lineTo(llhokkaido[0], llhokkaido[1]);
      context.closePath();

      context.moveTo(llokinawa[0], llokinawa[1]);
      context.lineTo(lmokinawa[0], lmokinawa[1]);
      context.lineTo(lrokinawa[0], lrokinawa[1]);
      context.lineTo(llrokinawa[0], llrokinawa[1]);
    };
    conicEquidistantJapan.getCompositionBorders = function () {
      var context = d3Path.path();
      this.drawCompositionBorders(context);
      return context.toString();
    };

    return conicEquidistantJapan.scale(2200);
  }

  // The projections must have mutually exclusive clip regions on the sphere,
  // as this will avoid emitting interleaving lines and polygons.
  function multiplex$7(streams) {
    var n = streams.length;
    return {
      point: function point(x, y) {
        var i = -1;while (++i < n) {
          streams[i].point(x, y);
        }
      },
      sphere: function sphere() {
        var i = -1;while (++i < n) {
          streams[i].sphere();
        }
      },
      lineStart: function lineStart() {
        var i = -1;while (++i < n) {
          streams[i].lineStart();
        }
      },
      lineEnd: function lineEnd() {
        var i = -1;while (++i < n) {
          streams[i].lineEnd();
        }
      },
      polygonStart: function polygonStart() {
        var i = -1;while (++i < n) {
          streams[i].polygonStart();
        }
      },
      polygonEnd: function polygonEnd() {
        var i = -1;while (++i < n) {
          streams[i].polygonEnd();
        }
      }
    };
  }

  // A composite projection for France, configured by default for 960×500.
  function conicConformalFrance() {
    var cache,
        cacheStream,
        europe = d3Geo.geoConicConformal().rotate([-3, -46.2]).parallels([0, 60]),
        europePoint,
        guyane = d3Geo.geoMercator().center([-53.2, 3.9]),
        guyanePoint,
        martinique = d3Geo.geoMercator().center([-61.03, 14.67]),
        martiniquePoint,
        guadeloupe = d3Geo.geoMercator().center([-61.46, 16.14]),
        guadeloupePoint,
        saintBarthelemy = d3Geo.geoMercator().center([-62.85, 17.92]),
        saintBarthelemyPoint,
        stPierreMiquelon = d3Geo.geoMercator().center([-56.23, 46.93]),
        stPierreMiquelonPoint,
        mayotte = d3Geo.geoMercator().center([45.16, -12.8]),
        mayottePoint,
        reunion = d3Geo.geoMercator().center([55.52, -21.13]),
        reunionPoint,
        nouvelleCaledonie = d3Geo.geoMercator().center([165.8, -21.07]),
        nouvelleCaledoniePoint,
        wallisFutuna = d3Geo.geoMercator().center([-178.1, -14.3]),
        wallisFutunaPoint,
        polynesie = d3Geo.geoMercator().center([-150.55, -17.11]),
        polynesiePoint,
        polynesie2 = d3Geo.geoMercator().center([-150.55, -17.11]),
        polynesie2Point,
        _point8,
        pointStream = { point: function point(x, y) {
        _point8 = [x, y];
      } };

    /*
    var europeBbox = [[-6.5, 51], [10, 41]];
    var guyaneBbox = [[-54.5, 6.29], [-50.9, 1.48]];
    */

    function conicConformalFrance(coordinates) {
      var x = coordinates[0],
          y = coordinates[1];
      return _point8 = null, (europePoint.point(x, y), _point8) || (guyanePoint.point(x, y), _point8) || (martiniquePoint.point(x, y), _point8) || (guadeloupePoint.point(x, y), _point8) || (saintBarthelemyPoint.point(x, y), _point8) || (stPierreMiquelonPoint.point(x, y), _point8) || (mayottePoint.point(x, y), _point8) || (reunionPoint.point(x, y), _point8) || (nouvelleCaledoniePoint.point(x, y), _point8) || (wallisFutunaPoint.point(x, y), _point8) || (polynesiePoint.point(x, y), _point8) || (polynesie2Point.point(x, y), _point8);
    }

    conicConformalFrance.invert = function (coordinates) {
      var k = europe.scale(),
          t = europe.translate(),
          x = (coordinates[0] - t[0]) / k,
          y = (coordinates[1] - t[1]) / k;

      return (y >= 0.029 && y < 0.0864 && x >= -0.14 && x < -0.0996 ? guyane : y >= 0 && y < 0.029 && x >= -0.14 && x < -0.0996 ? martinique : y >= -0.032 && y < 0 && x >= -0.14 && x < -0.0996 ? guadeloupe : y >= -0.052 && y < -0.032 && x >= -0.14 && x < -0.0996 ? saintBarthelemy : y >= -0.076 && y < 0.052 && x >= -0.14 && x < -0.0996 ? stPierreMiquelon : y >= -0.076 && y < -0.052 && x >= 0.0967 && x < 0.1371 ? mayotte : y >= -0.052 && y < -0.02 && x >= 0.0967 && x < 0.1371 ? reunion : y >= -0.02 && y < 0.012 && x >= 0.0967 && x < 0.1371 ? nouvelleCaledonie : y >= 0.012 && y < 0.033 && x >= 0.0967 && x < 0.1371 ? wallisFutuna : y >= 0.033 && y < 0.0864 && x >= 0.0967 && x < 0.1371 ? polynesie : europe).invert(coordinates);
    };

    conicConformalFrance.stream = function (stream) {
      return cache && cacheStream === stream ? cache : cache = multiplex$7([europe.stream(cacheStream = stream), guyane.stream(stream), martinique.stream(stream), guadeloupe.stream(stream), saintBarthelemy.stream(stream), stPierreMiquelon.stream(stream), mayotte.stream(stream), reunion.stream(stream), nouvelleCaledonie.stream(stream), wallisFutuna.stream(stream), polynesie.stream(stream), polynesie2.stream(stream)]);
    };

    conicConformalFrance.precision = function (_) {
      if (!arguments.length) {
        return europe.precision();
      }
      europe.precision(_);
      guyane.precision(_);
      martinique.precision(_);
      guadeloupe.precision(_);
      saintBarthelemy.precision(_);
      stPierreMiquelon.precision(_);
      mayotte.precision(_);
      reunion.precision(_);
      nouvelleCaledonie.precision(_);
      wallisFutuna.precision(_);
      polynesie.precision(_);
      polynesie2.precision(_);

      return reset();
    };

    conicConformalFrance.scale = function (_) {
      if (!arguments.length) {
        return europe.scale();
      }
      europe.scale(_);
      guyane.scale(_ * 0.6);
      martinique.scale(_ * 1.6);
      guadeloupe.scale(_ * 1.4);
      saintBarthelemy.scale(_ * 5);
      stPierreMiquelon.scale(_ * 1.3);
      mayotte.scale(_ * 1.6);
      reunion.scale(_ * 1.2);
      nouvelleCaledonie.scale(_ * 0.3);
      wallisFutuna.scale(_ * 2.7);
      polynesie.scale(_ * 0.5);
      polynesie2.scale(_ * 0.06);
      return conicConformalFrance.translate(europe.translate());
    };

    conicConformalFrance.translate = function (_) {
      if (!arguments.length) {
        return europe.translate();
      }
      var k = europe.scale(),
          x = +_[0],
          y = +_[1];

      europePoint = europe.translate(_).clipExtent([[x - 0.0996 * k, y - 0.0908 * k], [x + 0.0967 * k, y + 0.0864 * k]]).stream(pointStream);

      guyanePoint = guyane.translate([x - 0.12 * k, y + 0.0575 * k]).clipExtent([[x - 0.14 * k + epsilon, y + 0.029 * k + epsilon], [x - 0.0996 * k - epsilon, y + 0.0864 * k - epsilon]]).stream(pointStream);

      martiniquePoint = martinique.translate([x - 0.12 * k, y + 0.013 * k]).clipExtent([[x - 0.14 * k + epsilon, y + 0 * k + epsilon], [x - 0.0996 * k - epsilon, y + 0.029 * k - epsilon]]).stream(pointStream);

      guadeloupePoint = guadeloupe.translate([x - 0.12 * k, y - 0.014 * k]).clipExtent([[x - 0.14 * k + epsilon, y - 0.032 * k + epsilon], [x - 0.0996 * k - epsilon, y + 0 * k - epsilon]]).stream(pointStream);

      saintBarthelemyPoint = saintBarthelemy.translate([x - 0.12 * k, y - 0.044 * k]).clipExtent([[x - 0.14 * k + epsilon, y - 0.052 * k + epsilon], [x - 0.0996 * k - epsilon, y - 0.032 * k - epsilon]]).stream(pointStream);

      stPierreMiquelonPoint = stPierreMiquelon.translate([x - 0.12 * k, y - 0.065 * k]).clipExtent([[x - 0.14 * k + epsilon, y - 0.076 * k + epsilon], [x - 0.0996 * k - epsilon, y - 0.052 * k - epsilon]]).stream(pointStream);

      mayottePoint = mayotte.translate([x + 0.117 * k, y - 0.064 * k]).clipExtent([[x + 0.0967 * k + epsilon, y - 0.076 * k + epsilon], [x + 0.1371 * k - epsilon, y - 0.052 * k - epsilon]]).stream(pointStream);

      reunionPoint = reunion.translate([x + 0.116 * k, y - 0.0355 * k]).clipExtent([[x + 0.0967 * k + epsilon, y - 0.052 * k + epsilon], [x + 0.1371 * k - epsilon, y - 0.02 * k - epsilon]]).stream(pointStream);

      nouvelleCaledoniePoint = nouvelleCaledonie.translate([x + 0.116 * k, y - 0.0048 * k]).clipExtent([[x + 0.0967 * k + epsilon, y - 0.02 * k + epsilon], [x + 0.1371 * k - epsilon, y + 0.012 * k - epsilon]]).stream(pointStream);

      wallisFutunaPoint = wallisFutuna.translate([x + 0.116 * k, y + 0.022 * k]).clipExtent([[x + 0.0967 * k + epsilon, y + 0.012 * k + epsilon], [x + 0.1371 * k - epsilon, y + 0.033 * k - epsilon]]).stream(pointStream);

      polynesie2Point = polynesie2.translate([x + 0.11 * k, y + 0.045 * k]).clipExtent([[x + 0.0967 * k + epsilon, y + 0.033 * k + epsilon], [x + 0.1371 * k - epsilon, y + 0.06 * k - epsilon]]).stream(pointStream);

      polynesiePoint = polynesie.translate([x + 0.115 * k, y + 0.075 * k]).clipExtent([[x + 0.0967 * k + epsilon, y + 0.06 * k + epsilon], [x + 0.1371 * k - epsilon, y + 0.0864 * k - epsilon]]).stream(pointStream);

      return reset();
    };

    conicConformalFrance.fitExtent = function (extent, object) {
      return fitExtent(conicConformalFrance, extent, object);
    };

    conicConformalFrance.fitSize = function (size, object) {
      return fitSize(conicConformalFrance, size, object);
    };

    function reset() {
      cache = cacheStream = null;
      return conicConformalFrance;
    }

    conicConformalFrance.drawCompositionBorders = function (context) {

      /*
      console.log("var ul, ur, ld, ll;");
      var projs = [guyane, martinique, guadeloupe, saintBarthelemy, stPierreMiquelon, mayotte, reunion, nouvelleCaledonie, wallisFutuna, polynesie, polynesie2];
      for (var i in projs){
        var ul = europe.invert([projs[i].clipExtent()[0][0], projs[i].clipExtent()[0][1]]);
        var ur = europe.invert([projs[i].clipExtent()[1][0], projs[i].clipExtent()[0][1]]);
        var ld = europe.invert([projs[i].clipExtent()[1][0], projs[i].clipExtent()[1][1]]);
        var ll = europe.invert([projs[i].clipExtent()[0][0], projs[i].clipExtent()[1][1]]);
         console.log("ul = europe(["+ul+"]);");
        console.log("ur = europe(["+ur+"]);");
        console.log("ld = europe(["+ld+"]);");
        console.log("ll = europe(["+ll+"]);");
         console.log("context.moveTo(ul[0], ul[1]);");
        console.log("context.lineTo(ur[0], ur[1]);");
        console.log("context.lineTo(ld[0], ld[1]);");
        console.log("context.lineTo(ll[0], ll[1]);");
        console.log("context.closePath();");
       }*/

      var ul, ur, ld, ll;
      ul = europe([-7.938886725111036, 43.7219460918835]);
      ur = europe([-4.832080896458295, 44.12930268549372]);
      ld = europe([-4.205299743793263, 40.98096346967365]);
      ll = europe([-7.071796453126152, 40.610037319181444]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = europe([-8.42751373617692, 45.32889452553031]);
      ur = europe([-5.18599305777107, 45.7566442062976]);
      ld = europe([-4.832080905154431, 44.129302726751426]);
      ll = europe([-7.938886737126192, 43.72194613263854]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = europe([-9.012656899657046, 47.127733821030176]);
      ur = europe([-5.6105244772793155, 47.579777861410626]);
      ld = europe([-5.185993067168585, 45.756644248170346]);
      ll = europe([-8.427513749141811, 45.32889456686326]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = europe([-9.405747558985553, 48.26506375557457]);
      ur = europe([-5.896175018439575, 48.733352850851624]);
      ld = europe([-5.610524487556043, 47.57977790393761]);
      ll = europe([-9.012656913808351, 47.127733862971255]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = europe([-9.908436061346974, 49.642448789505856]);
      ur = europe([-6.262026716233124, 50.131426841787174]);
      ld = europe([-5.896175029331232, 48.73335289377258]);
      ll = europe([-9.40574757396393, 48.26506379787767]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = europe([11.996907706504462, 50.16039028163579]);
      ur = europe([15.649907879773343, 49.68279246765253]);
      ld = europe([15.156712840526632, 48.30371557625831]);
      ll = europe([11.64122661754411, 48.761078240546816]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = europe([11.641226606955788, 48.7610781975889]);
      ur = europe([15.156712825832164, 48.30371553390465]);
      ld = europe([14.549932166241172, 46.4866532486199]);
      ll = europe([11.204443787952183, 46.91899233914248]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = europe([11.204443778297161, 46.918992296823646]);
      ur = europe([14.549932152815039, 46.486653206856396]);
      ld = europe([13.994409796764009, 44.695833444323256]);
      ll = europe([10.805306599253848, 45.105133870684924]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = europe([10.805306590412085, 45.10513382903308]);
      ur = europe([13.99440978444733, 44.695833403183606]);
      ld = europe([13.654633799024392, 43.53552468558152]);
      ll = europe([10.561516803980956, 43.930671459798624]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();

      ul = europe([10.561516795617383, 43.93067141859757]);
      ur = europe([13.654633787361952, 43.5355246448671]);
      ld = europe([12.867691604239901, 40.640701985019405]);
      ll = europe([9.997809515987688, 41.00288343254471]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();

      ul = europe([10.8, 42.4]);
      ur = europe([12.8, 42.13]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
    };
    conicConformalFrance.getCompositionBorders = function () {
      var context = d3Path.path();
      this.drawCompositionBorders(context);
      return context.toString();
    };

    return conicConformalFrance.scale(2700);
  }

  // The projections must have mutually exclusive clip regions on the sphere,
  // as this will avoid emitting interleaving lines and polygons.
  function multiplex$8(streams) {
    var n = streams.length;
    return {
      point: function point(x, y) {
        var i = -1;while (++i < n) {
          streams[i].point(x, y);
        }
      },
      sphere: function sphere() {
        var i = -1;while (++i < n) {
          streams[i].sphere();
        }
      },
      lineStart: function lineStart() {
        var i = -1;while (++i < n) {
          streams[i].lineStart();
        }
      },
      lineEnd: function lineEnd() {
        var i = -1;while (++i < n) {
          streams[i].lineEnd();
        }
      },
      polygonStart: function polygonStart() {
        var i = -1;while (++i < n) {
          streams[i].polygonStart();
        }
      },
      polygonEnd: function polygonEnd() {
        var i = -1;while (++i < n) {
          streams[i].polygonEnd();
        }
      }
    };
  }

  // A composite projection for Portugal, configured by default for 960×500.
  function conicConformalEurope() {
    var cache,
        cacheStream,
        europe = d3Geo.geoConicConformal().rotate([-10, -53]).parallels([0, 60]),
        europePoint,
        guadeloupe = d3Geo.geoMercator().center([-61.46, 16.14]),
        guadeloupePoint,
        guyane = d3Geo.geoMercator().center([-53.2, 3.9]),
        guyanePoint,
        azores = d3Geo.geoConicConformal().rotate([27.8, -38.9]).parallels([0, 60]),
        azoresPoint,
        azores2 = d3Geo.geoConicConformal().rotate([25.43, -37.398]).parallels([0, 60]),
        azores2Point,
        azores3 = d3Geo.geoConicConformal().rotate([31.17, -39.539]).parallels([0, 60]),
        azores3Point,
        madeira = d3Geo.geoConicConformal().rotate([17, -32.7]).parallels([0, 60]),
        madeiraPoint,
        canaryIslands = d3Geo.geoConicConformal().rotate([16, -28.5]).parallels([0, 60]),
        canaryIslandsPoint,
        martinique = d3Geo.geoMercator().center([-61.03, 14.67]),
        martiniquePoint,
        mayotte = d3Geo.geoMercator().center([45.16, -12.8]),
        mayottePoint,
        reunion = d3Geo.geoMercator().center([55.52, -21.13]),
        reunionPoint,
        malta = d3Geo.geoConicConformal().rotate([-14.4, -35.95]).parallels([0, 60]),
        maltaPoint,
        _point9,
        pointStream = { point: function point(x, y) {
        _point9 = [x, y];
      } };

    /*
    var europeBbox = [[-6.5, 51], [10, 41]];
    var guyaneBbox = [[-54.5, 6.29], [-50.9, 1.48]];
    */

    function conicConformalEurope(coordinates) {
      var x = coordinates[0],
          y = coordinates[1];
      return _point9 = null, (europePoint.point(x, y), _point9) || (guyanePoint.point(x, y), _point9) || (martiniquePoint.point(x, y), _point9) || (guadeloupePoint.point(x, y), _point9) || (canaryIslandsPoint.point(x, y), _point9) || (madeiraPoint.point(x, y), _point9) || (mayottePoint.point(x, y), _point9) || (reunionPoint.point(x, y), _point9) || (maltaPoint.point(x, y), _point9) || (azoresPoint.point(x, y), _point9) || (azores2Point.point(x, y), _point9) || (azores3Point.point(x, y), _point9);
    }

    conicConformalEurope.invert = function (coordinates) {
      var k = europe.scale(),
          t = europe.translate(),
          x = (coordinates[0] - (t[0] + 0.08 * k)) / k,
          y = (coordinates[1] - t[1]) / k;

      return (y >= -0.31 && y < -0.24 && x >= 0.14 && x < 0.24 ? guadeloupe : y >= -0.24 && y < -0.17 && x >= 0.14 && x < 0.24 ? guyane : y >= -0.17 && y < -0.12 && x >= 0.21 && x < 0.24 ? azores2 : y >= -0.17 && y < -0.14 && x >= 0.14 && x < 0.165 ? azores3 : y >= -0.17 && y < -0.1 && x >= 0.14 && x < 0.24 ? azores : y >= -0.1 && y < -0.03 && x >= 0.14 && x < 0.24 ? madeira : y >= -0.03 && y < 0.04 && x >= 0.14 && x < 0.24 ? canaryIslands : y >= -0.31 && y < -0.24 && x >= 0.24 && x < 0.34 ? martinique : y >= -0.24 && y < -0.17 && x >= 0.24 && x < 0.34 ? mayotte : y >= -0.17 && y < -0.1 && x >= 0.24 && x < 0.34 ? reunion : y >= -0.1 && y < -0.03 && x >= 0.24 && x < 0.34 ? malta : europe).invert(coordinates);
    };

    conicConformalEurope.stream = function (stream) {
      return cache && cacheStream === stream ? cache : cache = multiplex$8([europe.stream(cacheStream = stream), guyane.stream(stream), martinique.stream(stream), guadeloupe.stream(stream), canaryIslands.stream(stream), madeira.stream(stream), mayotte.stream(stream), reunion.stream(stream), malta.stream(stream), azores.stream(stream), azores2.stream(stream), azores3.stream(stream)]);
    };

    conicConformalEurope.precision = function (_) {
      if (!arguments.length) {
        return europe.precision();
      }
      europe.precision(_);
      guyane.precision(_);
      martinique.precision(_);
      guadeloupe.precision(_);
      canaryIslands.precision(_);
      madeira.precision(_);
      mayotte.precision(_);
      reunion.precision(_);
      malta.precision(_);

      azores.precision(_);
      azores2.precision(_);
      azores3.precision(_);

      return reset();
    };

    conicConformalEurope.scale = function (_) {
      if (!arguments.length) {
        return europe.scale();
      }
      europe.scale(_);
      guadeloupe.scale(_ * 3);
      guyane.scale(_ * 0.8);
      martinique.scale(_ * 3.5);
      reunion.scale(_ * 2.7);
      azores.scale(_ * 2);
      azores2.scale(_ * 2);
      azores3.scale(_ * 2);
      madeira.scale(_ * 3);
      canaryIslands.scale(_);

      mayotte.scale(_ * 5.5);
      malta.scale(_ * 6);

      return conicConformalEurope.translate(europe.translate());
    };

    conicConformalEurope.translate = function (_) {
      if (!arguments.length) {
        return europe.translate();
      }
      var k = europe.scale(),
          x = +_[0],
          y = +_[1];

      europePoint = europe.translate([x - 0.08 * k, y]).clipExtent([[x - 0.51 * k, y - 0.33 * k], [x + 0.5 * k, y + 0.33 * k]]).stream(pointStream);

      guadeloupePoint = guadeloupe.translate([x + 0.19 * k, y - 0.275 * k]).clipExtent([[x + 0.14 * k + epsilon, y - 0.31 * k + epsilon], [x + 0.24 * k - epsilon, y - 0.24 * k - epsilon]]).stream(pointStream);

      guyanePoint = guyane.translate([x + 0.19 * k, y - 0.205 * k]).clipExtent([[x + 0.14 * k + epsilon, y - 0.24 * k + epsilon], [x + 0.24 * k - epsilon, y - 0.17 * k - epsilon]]).stream(pointStream);

      azoresPoint = azores.translate([x + 0.19 * k, y - 0.135 * k]).clipExtent([[x + 0.14 * k + epsilon, y - 0.17 * k + epsilon], [x + 0.24 * k - epsilon, y - 0.1 * k - epsilon]]).stream(pointStream);

      azores2Point = azores2.translate([x + 0.225 * k, y - 0.147 * k]).clipExtent([[x + 0.21 * k + epsilon, y - 0.17 * k + epsilon], [x + 0.24 * k - epsilon, y - 0.12 * k - epsilon]]).stream(pointStream);

      azores3Point = azores3.translate([x + 0.153 * k, y - 0.15 * k]).clipExtent([[x + 0.14 * k + epsilon, y - 0.17 * k + epsilon], [x + 0.165 * k - epsilon, y - 0.14 * k - epsilon]]).stream(pointStream);

      madeiraPoint = madeira.translate([x + 0.19 * k, y - 0.065 * k]).clipExtent([[x + 0.14 * k + epsilon, y - 0.1 * k + epsilon], [x + 0.24 * k - epsilon, y - 0.03 * k - epsilon]]).stream(pointStream);

      canaryIslandsPoint = canaryIslands.translate([x + 0.19 * k, y + 0.005 * k]).clipExtent([[x + 0.14 * k + epsilon, y - 0.03 * k + epsilon], [x + 0.24 * k - epsilon, y + 0.04 * k - epsilon]]).stream(pointStream);

      martiniquePoint = martinique.translate([x + 0.29 * k, y - 0.275 * k]).clipExtent([[x + 0.24 * k + epsilon, y - 0.31 * k + epsilon], [x + 0.34 * k - epsilon, y - 0.24 * k - epsilon]]).stream(pointStream);

      mayottePoint = mayotte.translate([x + 0.29 * k, y - 0.205 * k]).clipExtent([[x + 0.24 * k + epsilon, y - 0.24 * k + epsilon], [x + 0.34 * k - epsilon, y - 0.17 * k - epsilon]]).stream(pointStream);

      reunionPoint = reunion.translate([x + 0.29 * k, y - 0.135 * k]).clipExtent([[x + 0.24 * k + epsilon, y - 0.17 * k + epsilon], [x + 0.34 * k - epsilon, y - 0.1 * k - epsilon]]).stream(pointStream);

      maltaPoint = malta.translate([x + 0.29 * k, y - 0.065 * k]).clipExtent([[x + 0.24 * k + epsilon, y - 0.1 * k + epsilon], [x + 0.34 * k - epsilon, y - 0.03 * k - epsilon]]).stream(pointStream);

      return reset();
    };

    conicConformalEurope.fitExtent = function (extent, object) {
      return fitExtent(conicConformalEurope, extent, object);
    };

    conicConformalEurope.fitSize = function (size, object) {
      return fitSize(conicConformalEurope, size, object);
    };

    function reset() {
      cache = cacheStream = null;
      return conicConformalEurope;
    }

    conicConformalEurope.drawCompositionBorders = function (context) {

      /*
      console.log("var ul, ur, ld, ll;");
      var projs = [guyane, martinique, guadeloupe, canaryIslands, madeira, mayotte, reunion, malta, azores, azores2, azores3];
      for (var i in projs){
        var ul = europe.invert([projs[i].clipExtent()[0][0], projs[i].clipExtent()[0][1]]);
        var ur = europe.invert([projs[i].clipExtent()[1][0], projs[i].clipExtent()[0][1]]);
        var ld = europe.invert([projs[i].clipExtent()[1][0], projs[i].clipExtent()[1][1]]);
        var ll = europe.invert([projs[i].clipExtent()[0][0], projs[i].clipExtent()[1][1]]);
         console.log("ul = europe(["+ul+"]);");
        console.log("ur = europe(["+ur+"]);");
        console.log("ld = europe(["+ld+"]);");
        console.log("ll = europe(["+ll+"]);");
         console.log("context.moveTo(ul[0], ul[1]);");
        console.log("context.lineTo(ur[0], ur[1]);");
        console.log("context.lineTo(ld[0], ld[1]);");
        console.log("context.lineTo(ll[0], ll[1]);");
        console.log("context.closePath();");
       }*/

      var ul, ur, ld, ll;
      ul = europe([42.45755610828648, 63.343658547914934]);
      ur = europe([52.65837266667029, 59.35045080290929]);
      ld = europe([47.19754502247785, 56.12653496548117]);
      ll = europe([37.673034273363044, 59.61638268506111]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = europe([59.41110754003403, 62.35069727399336]);
      ur = europe([66.75050228640794, 57.11797303636038]);
      ld = europe([60.236065725110436, 54.63331433818992]);
      ll = europe([52.65837313153311, 59.350450804599355]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = europe([48.81091130080243, 66.93353402634641]);
      ur = europe([59.41110730654679, 62.35069740653086]);
      ld = europe([52.6583728974441, 59.3504509222445]);
      ll = europe([42.45755631675751, 63.34365868805821]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = europe([31.054198418446475, 52.1080673766184]);
      ur = europe([39.09869284884117, 49.400700047190554]);
      ld = europe([36.0580811499175, 46.02944174908498]);
      ll = europe([28.690508588835726, 48.433126979386415]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = europe([33.977877745912025, 55.849945501331]);
      ur = europe([42.75328432167726, 52.78455122462353]);
      ld = europe([39.09869297540224, 49.400700176148625]);
      ll = europe([31.05419851807008, 52.10806751810923]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = europe([52.658372900759296, 59.35045068526415]);
      ur = europe([60.23606549583304, 54.63331423800264]);
      ld = europe([54.6756370953122, 51.892298789399455]);
      ll = europe([47.19754524788189, 56.126534861222794]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = europe([47.19754506082455, 56.126534735591456]);
      ur = europe([54.675636900123514, 51.892298681337095]);
      ld = europe([49.94448648951486, 48.98775484983285]);
      ll = europe([42.75328468716108, 52.78455126060818]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = europe([42.75328453416769, 52.78455113209101]);
      ur = europe([49.94448632339758, 48.98775473706457]);
      ld = europe([45.912339990394315, 45.99361784987003]);
      ll = europe([39.09869317356607, 49.40070009378711]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = europe([37.673034114296634, 59.61638254183119]);
      ur = europe([47.197544835420544, 56.126534839849846]);
      ld = europe([42.75328447467064, 52.78455135314068]);
      ll = europe([33.977877870363905, 55.849945644671145]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = europe([44.56748486446032, 57.26489367845818]);
      ld = europe([43.9335791193588, 53.746540942601726]);
      ll = europe([43, 56]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = europe([37.673034114296634, 59.61638254183119]);
      ur = europe([40.25902691953466, 58.83002044222639]);
      ld = europe([38.458270492742024, 57.26232178028002]);
      ll = europe([35.97754948030156, 58.00266637992386]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
    };
    conicConformalEurope.getCompositionBorders = function () {
      var context = d3Path.path();
      this.drawCompositionBorders(context);
      return context.toString();
    };

    return conicConformalEurope.scale(750);
  }

  // The projections must have mutually exclusive clip regions on the sphere,
  // as this will avoid emitting interleaving lines and polygons.
  function multiplex$9(streams) {
    var n = streams.length;
    return {
      point: function point(x, y) {
        var i = -1;while (++i < n) {
          streams[i].point(x, y);
        }
      },
      sphere: function sphere() {
        var i = -1;while (++i < n) {
          streams[i].sphere();
        }
      },
      lineStart: function lineStart() {
        var i = -1;while (++i < n) {
          streams[i].lineStart();
        }
      },
      lineEnd: function lineEnd() {
        var i = -1;while (++i < n) {
          streams[i].lineEnd();
        }
      },
      polygonStart: function polygonStart() {
        var i = -1;while (++i < n) {
          streams[i].polygonStart();
        }
      },
      polygonEnd: function polygonEnd() {
        var i = -1;while (++i < n) {
          streams[i].polygonEnd();
        }
      }
    };
  }

  // A composite projection for Malaysia, configured by default for 960×500.
  function mercatorMalaysia() {
    var cache,
        cacheStream,
        peninsular = d3Geo.geoMercator().center([105.25, 4.00]),
        peninsularPoint,
        borneo = d3Geo.geoMercator().center([118.65, 2.86]),
        borneoPoint,
        _point10,
        pointStream = { point: function point(x, y) {
        _point10 = [x, y];
      } };

    function mercatorMalaysia(coordinates) {
      var x = coordinates[0],
          y = coordinates[1];
      return _point10 = null, (peninsularPoint.point(x, y), _point10) || (borneoPoint.point(x, y), _point10);
    }

    mercatorMalaysia.invert = function (coordinates) {
      var k = peninsular.scale(),
          t = peninsular.translate(),
          x = (coordinates[0] - t[0]) / k,
          y = (coordinates[1] - t[1]) / k;

      return (y >= -0.0521 && y < 0.0229 && x >= -0.0111 && x < 0.1000 ? borneo : peninsular).invert(coordinates);
    };

    mercatorMalaysia.stream = function (stream) {
      return cache && cacheStream === stream ? cache : cache = multiplex$9([peninsular.stream(cacheStream = stream), borneo.stream(stream)]);
    };

    mercatorMalaysia.precision = function (_) {
      if (!arguments.length) {
        return peninsular.precision();
      }
      peninsular.precision(_);
      borneo.precision(_);
      return reset();
    };

    mercatorMalaysia.scale = function (_) {
      if (!arguments.length) {
        return peninsular.scale();
      }
      peninsular.scale(_);
      borneo.scale(_ * 0.615);
      return mercatorMalaysia.translate(peninsular.translate());
    };

    mercatorMalaysia.translate = function (_) {
      if (!arguments.length) {
        return peninsular.translate();
      }
      var k = peninsular.scale(),
          x = +_[0],
          y = +_[1];

      peninsularPoint = peninsular.translate(_).clipExtent([[x - 0.1100 * k, y - 0.0521 * k], [x - 0.0111 * k, y + 0.0521 * k]]).stream(pointStream);

      borneoPoint = borneo.translate([x + 0.09000 * k, y - 0.00 * k]).clipExtent([[x - 0.0111 * k + epsilon, y - 0.0521 * k + epsilon], [x + 0.1000 * k - epsilon, y + 0.024 * k - epsilon]]).stream(pointStream);

      return reset();
    };

    mercatorMalaysia.fitExtent = function (extent, object) {
      return fitExtent(mercatorMalaysia, extent, object);
    };

    mercatorMalaysia.fitSize = function (size, object) {
      return fitSize(mercatorMalaysia, size, object);
    };

    function reset() {
      cache = cacheStream = null;
      return mercatorMalaysia;
    }

    mercatorMalaysia.drawCompositionBorders = function (context) {

      var llbor = peninsular([106.3214, 2.0228]);
      var lmbor = peninsular([105.1843, 2.3761]);
      var lrbor = peninsular([104.2151, 3.3618]);
      var llrbor = peninsular([104.2150, 4.5651]);

      context.moveTo(llbor[0], llbor[1]);
      context.lineTo(lmbor[0], lmbor[1]);
      context.lineTo(lrbor[0], lrbor[1]);
      context.lineTo(llrbor[0], llrbor[1]);
    };
    mercatorMalaysia.getCompositionBorders = function () {
      var context = d3Path.path();
      this.drawCompositionBorders(context);
      return context.toString();
    };

    return mercatorMalaysia.scale(4800);
  }

  // The projections must have mutually exclusive clip regions on the sphere,
  // as this will avoid emitting interleaving lines and polygons.
  function multiplex$10(streams) {
    var n = streams.length;
    return {
      point: function point(x, y) {
        var i = -1;while (++i < n) {
          streams[i].point(x, y);
        }
      },
      sphere: function sphere() {
        var i = -1;while (++i < n) {
          streams[i].sphere();
        }
      },
      lineStart: function lineStart() {
        var i = -1;while (++i < n) {
          streams[i].lineStart();
        }
      },
      lineEnd: function lineEnd() {
        var i = -1;while (++i < n) {
          streams[i].lineEnd();
        }
      },
      polygonStart: function polygonStart() {
        var i = -1;while (++i < n) {
          streams[i].polygonStart();
        }
      },
      polygonEnd: function polygonEnd() {
        var i = -1;while (++i < n) {
          streams[i].polygonEnd();
        }
      }
    };
  }

  // A composite projection for Equatorial Guinea, configured by default for 960×500.
  function mercatorEquatorialGuinea() {
    var cache,
        cacheStream,
        continent = d3Geo.geoMercator().rotate([-9.5, -1.5]),
        continentPoint,
        bioko = d3Geo.geoMercator().rotate([-8.6, -3.5]),
        biokoPoint,
        annobon = d3Geo.geoMercator().rotate([-5.6, 1.45]),
        annobonPoint,
        _point11,
        pointStream = { point: function point(x, y) {
        _point11 = [x, y];
      } };

    function mercatorEquatorialGuinea(coordinates) {
      var x = coordinates[0],
          y = coordinates[1];
      return _point11 = null, (continentPoint.point(x, y), _point11) || (biokoPoint.point(x, y), _point11) || (annobonPoint.point(x, y), _point11);
    }

    mercatorEquatorialGuinea.invert = function (coordinates) {
      var k = continent.scale(),
          t = continent.translate(),
          x = (coordinates[0] - t[0]) / k,
          y = (coordinates[1] - t[1]) / k;
      return (y >= -0.02 && y < 0 && x >= -0.038 && x < -0.005 ? bioko : y >= 0 && y < 0.02 && x >= -0.038 && x < -0.005 ? annobon : continent).invert(coordinates);
    };

    mercatorEquatorialGuinea.stream = function (stream) {
      return cache && cacheStream === stream ? cache : cache = multiplex$10([continent.stream(cacheStream = stream), bioko.stream(stream), annobon.stream(stream)]);
    };

    mercatorEquatorialGuinea.precision = function (_) {
      if (!arguments.length) {
        return continent.precision();
      }
      continent.precision(_);
      bioko.precision(_);
      annobon.precision(_);
      return reset();
    };

    mercatorEquatorialGuinea.scale = function (_) {
      if (!arguments.length) {
        return continent.scale();
      }
      continent.scale(_);
      bioko.scale(_ * 1.5);
      annobon.scale(_ * 4);
      return mercatorEquatorialGuinea.translate(continent.translate());
    };

    mercatorEquatorialGuinea.translate = function (_) {
      if (!arguments.length) {
        return continent.translate();
      }
      var k = continent.scale(),
          x = +_[0],
          y = +_[1];
      continentPoint = continent.translate(_).clipExtent([[x - 0.005 * k, y - 0.02 * k], [x + 0.038 * k, y + 0.02 * k]]).stream(pointStream);

      biokoPoint = bioko.translate([x - 0.025 * k, y - 0.01 * k]).clipExtent([[x - 0.038 * k + epsilon, y - 0.02 * k + epsilon], [x - 0.005 * k - epsilon, y + 0 * k - epsilon]]).stream(pointStream);

      annobonPoint = annobon.translate([x - 0.025 * k, y + 0.01 * k]).clipExtent([[x - 0.038 * k + epsilon, y - 0 * k + epsilon], [x - 0.005 * k - epsilon, y + 0.02 * k - epsilon]]).stream(pointStream);

      return reset();
    };

    mercatorEquatorialGuinea.fitExtent = function (extent, object) {
      return fitExtent(mercatorEquatorialGuinea, extent, object);
    };

    mercatorEquatorialGuinea.fitSize = function (size, object) {
      return fitSize(mercatorEquatorialGuinea, size, object);
    };

    function reset() {
      cache = cacheStream = null;
      return mercatorEquatorialGuinea;
    }

    mercatorEquatorialGuinea.drawCompositionBorders = function (context) {
      /*
      console.log("var ul, ur, ld, ll;");
      var projs = [continent, bioko, annobon];
      for (var i in projs){
        var ul = continent.invert([projs[i].clipExtent()[0][0], projs[i].clipExtent()[0][1]]);
        var ur = continent.invert([projs[i].clipExtent()[1][0], projs[i].clipExtent()[0][1]]);
        var ld = continent.invert([projs[i].clipExtent()[1][0], projs[i].clipExtent()[1][1]]);
        var ll = continent.invert([projs[i].clipExtent()[0][0], projs[i].clipExtent()[1][1]]);
         console.log("ul = continent(["+ul+"]);");
        console.log("ur = continent(["+ur+"]);");
        console.log("ld = continent(["+ld+"]);");
        console.log("ll = continent(["+ll+"]);");
         console.log("context.moveTo(ul[0], ul[1]);");
        console.log("context.lineTo(ur[0], ur[1]);");
        console.log("context.lineTo(ld[0], ld[1]);");
        console.log("context.lineTo(ll[0], ll[1]);");
        console.log("context.closePath();");
       }*/

      var ul, ur, ld, ll;
      ul = continent([9.21327272751682, 2.645820439454123]);
      ur = continent([11.679126293239872, 2.644755519268689]);
      ld = continent([11.676845389029227, 0.35307824637606433]);
      ll = continent([9.213572917774014, 0.35414205204417754]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = continent([7.320873711543669, 2.64475551449975]);
      ur = continent([9.213272722738658, 2.645820434679803]);
      ld = continent([9.213422896480349, 1.4999812505283054]);
      ll = continent([7.322014760520787, 1.4989168878985566]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
      ul = continent([7.3220147605302905, 1.4989168783492766]);
      ur = continent([9.213422896481598, 1.499981240979021]);
      ld = continent([9.213572912999604, 0.354142056817247]);
      ll = continent([7.323154615739809, 0.353078251154504]);
      context.moveTo(ul[0], ul[1]);
      context.lineTo(ur[0], ur[1]);
      context.lineTo(ld[0], ld[1]);
      context.lineTo(ll[0], ll[1]);
      context.closePath();
    };
    mercatorEquatorialGuinea.getCompositionBorders = function () {
      var context = d3Path.path();
      this.drawCompositionBorders(context);
      return context.toString();
    };

    return mercatorEquatorialGuinea.scale(12000);
  }

  exports.geoAlbersUsa = albersUsa;
  exports.geoAlbersUsaTerritories = albersUsaTerritories;
  exports.geoConicConformalSpain = conicConformalSpain;
  exports.geoConicConformalPortugal = conicConformalPortugal;
  exports.geoMercatorEcuador = mercatorEcuador;
  exports.geoTransverseMercatorChile = transverseMercatorChile;
  exports.geoConicEquidistantJapan = conicEquidistantJapan;
  exports.geoConicConformalFrance = conicConformalFrance;
  exports.geoConicConformalEurope = conicConformalEurope;
  exports.geoMercatorMalaysia = mercatorMalaysia;
  exports.geoMercatorEquatorialGuinea = mercatorEquatorialGuinea;

  Object.defineProperty(exports, '__esModule', { value: true });
});

/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (feature) {
  var i, n, a, b, merged, deltaMax, delta;

  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);
  ranges = [];
  (0, _stream2.default)(feature, boundsStream);

  // First, sort ranges by their minimum longitudes.
  if (n = ranges.length) {
    ranges.sort(rangeCompare);

    // Then, merge any ranges that overlap.
    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
      b = ranges[i];
      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
      } else {
        merged.push(a = b);
      }
    }

    // Finally, find the largest gap between the merged ranges.
    // The final bounding box will be the inverse of this gap.
    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
      b = merged[i];
      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];
    }
  }

  ranges = range = null;

  return lambda0 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda0, phi0], [lambda1, phi1]];
};

var _adder = __webpack_require__(45);

var _adder2 = _interopRequireDefault(_adder);

var _area = __webpack_require__(204);

var _cartesian = __webpack_require__(46);

var _math = __webpack_require__(4);

var _stream = __webpack_require__(28);

var _stream2 = _interopRequireDefault(_stream);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lambda0,
    phi0,
    lambda1,
    phi1,
    // bounds
lambda2,
    // previous lambda-coordinate
lambda00,
    phi00,
    // first point
p0,
    // previous 3D point
deltaSum = (0, _adder2.default)(),
    ranges,
    range;

var boundsStream = {
  point: boundsPoint,
  lineStart: boundsLineStart,
  lineEnd: boundsLineEnd,
  polygonStart: function polygonStart() {
    boundsStream.point = boundsRingPoint;
    boundsStream.lineStart = boundsRingStart;
    boundsStream.lineEnd = boundsRingEnd;
    deltaSum.reset();
    _area.areaStream.polygonStart();
  },
  polygonEnd: function polygonEnd() {
    _area.areaStream.polygonEnd();
    boundsStream.point = boundsPoint;
    boundsStream.lineStart = boundsLineStart;
    boundsStream.lineEnd = boundsLineEnd;
    if (_area.areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);else if (deltaSum > _math.epsilon) phi1 = 90;else if (deltaSum < -_math.epsilon) phi0 = -90;
    range[0] = lambda0, range[1] = lambda1;
  }
};

function boundsPoint(lambda, phi) {
  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
}

function linePoint(lambda, phi) {
  var p = (0, _cartesian.cartesian)([lambda * _math.radians, phi * _math.radians]);
  if (p0) {
    var normal = (0, _cartesian.cartesianCross)(p0, p),
        equatorial = [normal[1], -normal[0], 0],
        inflection = (0, _cartesian.cartesianCross)(equatorial, normal);
    (0, _cartesian.cartesianNormalizeInPlace)(inflection);
    inflection = (0, _cartesian.spherical)(inflection);
    var delta = lambda - lambda2,
        sign = delta > 0 ? 1 : -1,
        lambdai = inflection[0] * _math.degrees * sign,
        phii,
        antimeridian = (0, _math.abs)(delta) > 180;
    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = inflection[1] * _math.degrees;
      if (phii > phi1) phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = -inflection[1] * _math.degrees;
      if (phii < phi0) phi0 = phii;
    } else {
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }
    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
      }
    } else {
      if (lambda1 >= lambda0) {
        if (lambda < lambda0) lambda0 = lambda;
        if (lambda > lambda1) lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
        }
      }
    }
  } else {
    boundsPoint(lambda, phi);
  }
  p0 = p, lambda2 = lambda;
}

function boundsLineStart() {
  boundsStream.point = linePoint;
}

function boundsLineEnd() {
  range[0] = lambda0, range[1] = lambda1;
  boundsStream.point = boundsPoint;
  p0 = null;
}

function boundsRingPoint(lambda, phi) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add((0, _math.abs)(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    lambda00 = lambda, phi00 = phi;
  }
  _area.areaStream.point(lambda, phi);
  linePoint(lambda, phi);
}

function boundsRingStart() {
  _area.areaStream.lineStart();
}

function boundsRingEnd() {
  boundsRingPoint(lambda00, phi00);
  _area.areaStream.lineEnd();
  if ((0, _math.abs)(deltaSum) > _math.epsilon) lambda0 = -(lambda1 = 180);
  range[0] = lambda0, range[1] = lambda1;
  p0 = null;
}

// Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.
function angle(lambda0, lambda1) {
  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
}

function rangeCompare(a, b) {
  return a[0] - b[0];
}

function rangeContains(range, x) {
  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
}

/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (object) {
  W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
  (0, _stream2.default)(object, centroidStream);

  var x = X2,
      y = Y2,
      z = Z2,
      m = x * x + y * y + z * z;

  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
  if (m < _math.epsilon2) {
    x = X1, y = Y1, z = Z1;
    // If the feature has zero length, fall back to arithmetic mean of point vectors.
    if (W1 < _math.epsilon) x = X0, y = Y0, z = Z0;
    m = x * x + y * y + z * z;
    // If the feature still has an undefined ccentroid, then return.
    if (m < _math.epsilon2) return [NaN, NaN];
  }

  return [(0, _math.atan2)(y, x) * _math.degrees, (0, _math.asin)(z / (0, _math.sqrt)(m)) * _math.degrees];
};

var _math = __webpack_require__(4);

var _noop = __webpack_require__(27);

var _noop2 = _interopRequireDefault(_noop);

var _stream = __webpack_require__(28);

var _stream2 = _interopRequireDefault(_stream);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00, phi00, // first point
x0, y0, z0; // previous point

var centroidStream = {
  sphere: _noop2.default,
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function polygonStart() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function polygonEnd() {
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  }
};

// Arithmetic mean of Cartesian vectors.
function centroidPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi);
  centroidPointCartesian(cosPhi * (0, _math.cos)(lambda), cosPhi * (0, _math.sin)(lambda), (0, _math.sin)(phi));
}

function centroidPointCartesian(x, y, z) {
  ++W0;
  X0 += (x - X0) / W0;
  Y0 += (y - Y0) / W0;
  Z0 += (z - Z0) / W0;
}

function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}

function centroidLinePointFirst(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi);
  x0 = cosPhi * (0, _math.cos)(lambda);
  y0 = cosPhi * (0, _math.sin)(lambda);
  z0 = (0, _math.sin)(phi);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x0, y0, z0);
}

function centroidLinePoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi),
      x = cosPhi * (0, _math.cos)(lambda),
      y = cosPhi * (0, _math.sin)(lambda),
      z = (0, _math.sin)(phi),
      w = (0, _math.atan2)((0, _math.sqrt)((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).
function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}

function centroidRingEnd() {
  centroidRingPoint(lambda00, phi00);
  centroidStream.point = centroidPoint;
}

function centroidRingPointFirst(lambda, phi) {
  lambda00 = lambda, phi00 = phi;
  lambda *= _math.radians, phi *= _math.radians;
  centroidStream.point = centroidRingPoint;
  var cosPhi = (0, _math.cos)(phi);
  x0 = cosPhi * (0, _math.cos)(lambda);
  y0 = cosPhi * (0, _math.sin)(lambda);
  z0 = (0, _math.sin)(phi);
  centroidPointCartesian(x0, y0, z0);
}

function centroidRingPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi),
      x = cosPhi * (0, _math.cos)(lambda),
      y = cosPhi * (0, _math.sin)(lambda),
      z = (0, _math.sin)(phi),
      cx = y0 * z - z0 * y,
      cy = z0 * x - x0 * z,
      cz = x0 * y - y0 * x,
      m = (0, _math.sqrt)(cx * cx + cy * cy + cz * cz),
      u = x0 * x + y0 * y + z0 * z,
      v = m && -(0, _math.acos)(u) / m,
      // area weight
  w = (0, _math.atan2)(m, u); // line weight
  X2 += v * cx;
  Y2 += v * cy;
  Z2 += v * cz;
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

/***/ }),
/* 497 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (x) {
  return function () {
    return x;
  };
};

/***/ }),
/* 498 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (a, b, x0, y0, x1, y1) {
  var ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;

  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;
  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;
  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;
  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;
  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
  return true;
};

/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (a, b) {
  coordinates[0] = a;
  coordinates[1] = b;
  return (0, _length2.default)(object);
};

var _length = __webpack_require__(211);

var _length2 = _interopRequireDefault(_length);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var coordinates = [null, null],
    object = { type: "LineString", coordinates: coordinates };

/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var x1,
      x0,
      X1,
      X0,
      y1,
      y0,
      Y1,
      Y0,
      dx = 10,
      dy = dx,
      DX = 90,
      DY = 360,
      x,
      y,
      X,
      Y,
      precision = 2.5;

  function graticule() {
    return { type: "MultiLineString", coordinates: lines() };
  }

  function lines() {
    return (0, _d3Array.range)((0, _math.ceil)(X0 / DX) * DX, X1, DX).map(X).concat((0, _d3Array.range)((0, _math.ceil)(Y0 / DY) * DY, Y1, DY).map(Y)).concat((0, _d3Array.range)((0, _math.ceil)(x0 / dx) * dx, x1, dx).filter(function (x) {
      return (0, _math.abs)(x % DX) > _math.epsilon;
    }).map(x)).concat((0, _d3Array.range)((0, _math.ceil)(y0 / dy) * dy, y1, dy).filter(function (y) {
      return (0, _math.abs)(y % DY) > _math.epsilon;
    }).map(y));
  }

  graticule.lines = function () {
    return lines().map(function (coordinates) {
      return { type: "LineString", coordinates: coordinates };
    });
  };

  graticule.outline = function () {
    return {
      type: "Polygon",
      coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
    };
  };

  graticule.extent = function (_) {
    if (!arguments.length) return graticule.extentMinor();
    return graticule.extentMajor(_).extentMinor(_);
  };

  graticule.extentMajor = function (_) {
    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
    X0 = +_[0][0], X1 = +_[1][0];
    Y0 = +_[0][1], Y1 = +_[1][1];
    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
    return graticule.precision(precision);
  };

  graticule.extentMinor = function (_) {
    if (!arguments.length) return [[x0, y0], [x1, y1]];
    x0 = +_[0][0], x1 = +_[1][0];
    y0 = +_[0][1], y1 = +_[1][1];
    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
    return graticule.precision(precision);
  };

  graticule.step = function (_) {
    if (!arguments.length) return graticule.stepMinor();
    return graticule.stepMajor(_).stepMinor(_);
  };

  graticule.stepMajor = function (_) {
    if (!arguments.length) return [DX, DY];
    DX = +_[0], DY = +_[1];
    return graticule;
  };

  graticule.stepMinor = function (_) {
    if (!arguments.length) return [dx, dy];
    dx = +_[0], dy = +_[1];
    return graticule;
  };

  graticule.precision = function (_) {
    if (!arguments.length) return precision;
    precision = +_;
    x = graticuleX(y0, y1, 90);
    y = graticuleY(x0, x1, precision);
    X = graticuleX(Y0, Y1, 90);
    Y = graticuleY(X0, X1, precision);
    return graticule;
  };

  return graticule.extentMajor([[-180, -90 + _math.epsilon], [180, 90 - _math.epsilon]]).extentMinor([[-180, -80 - _math.epsilon], [180, 80 + _math.epsilon]]);
};

var _d3Array = __webpack_require__(14);

var _math = __webpack_require__(4);

function graticuleX(y0, y1, dy) {
  var y = (0, _d3Array.range)(y0, y1 - _math.epsilon, dy).concat(y1);
  return function (x) {
    return y.map(function (y) {
      return [x, y];
    });
  };
}

function graticuleY(x0, x1, dx) {
  var x = (0, _d3Array.range)(x0, x1 - _math.epsilon, dx).concat(x1);
  return function (y) {
    return x.map(function (x) {
      return [x, y];
    });
  };
}

/***/ }),
/* 501 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (a, b) {
  var x0 = a[0] * _math.radians,
      y0 = a[1] * _math.radians,
      x1 = b[0] * _math.radians,
      y1 = b[1] * _math.radians,
      cy0 = (0, _math.cos)(y0),
      sy0 = (0, _math.sin)(y0),
      cy1 = (0, _math.cos)(y1),
      sy1 = (0, _math.sin)(y1),
      kx0 = cy0 * (0, _math.cos)(x0),
      ky0 = cy0 * (0, _math.sin)(x0),
      kx1 = cy1 * (0, _math.cos)(x1),
      ky1 = cy1 * (0, _math.sin)(x1),
      d = 2 * (0, _math.asin)((0, _math.sqrt)((0, _math.haversin)(y1 - y0) + cy0 * cy1 * (0, _math.haversin)(x1 - x0))),
      k = (0, _math.sin)(d);

  var interpolate = d ? function (t) {
    var B = (0, _math.sin)(t *= d) / k,
        A = (0, _math.sin)(d - t) / k,
        x = A * kx0 + B * kx1,
        y = A * ky0 + B * ky1,
        z = A * sy0 + B * sy1;
    return [(0, _math.atan2)(y, x) * _math.degrees, (0, _math.atan2)(z, (0, _math.sqrt)(x * x + y * y)) * _math.degrees];
  } : function () {
    return [x0 * _math.degrees, y0 * _math.degrees];
  };

  interpolate.distance = d;

  return interpolate;
};

var _math = __webpack_require__(4);

/***/ }),
/* 502 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var pointRadius = 4.5,
      projection,
      projectionStream,
      context,
      contextStream;

  function path(object) {
    if (object) {
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
      (0, _stream2.default)(object, projectionStream(contextStream));
    }
    return contextStream.result();
  }

  path.area = function (object) {
    (0, _stream2.default)(object, projectionStream(_area2.default));
    return _area2.default.result();
  };

  path.bounds = function (object) {
    (0, _stream2.default)(object, projectionStream(_bounds2.default));
    return _bounds2.default.result();
  };

  path.centroid = function (object) {
    (0, _stream2.default)(object, projectionStream(_centroid2.default));
    return _centroid2.default.result();
  };

  path.projection = function (_) {
    return arguments.length ? (projectionStream = (projection = _) == null ? _identity2.default : _.stream, path) : projection;
  };

  path.context = function (_) {
    if (!arguments.length) return context;
    contextStream = (context = _) == null ? new _string2.default() : new _context2.default(_);
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
    return path;
  };

  path.pointRadius = function (_) {
    if (!arguments.length) return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path;
  };

  return path.projection(null).context(null);
};

var _identity = __webpack_require__(212);

var _identity2 = _interopRequireDefault(_identity);

var _stream = __webpack_require__(28);

var _stream2 = _interopRequireDefault(_stream);

var _area = __webpack_require__(503);

var _area2 = _interopRequireDefault(_area);

var _bounds = __webpack_require__(213);

var _bounds2 = _interopRequireDefault(_bounds);

var _centroid = __webpack_require__(504);

var _centroid2 = _interopRequireDefault(_centroid);

var _context = __webpack_require__(505);

var _context2 = _interopRequireDefault(_context);

var _string = __webpack_require__(506);

var _string2 = _interopRequireDefault(_string);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 503 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _adder = __webpack_require__(45);

var _adder2 = _interopRequireDefault(_adder);

var _math = __webpack_require__(4);

var _noop = __webpack_require__(27);

var _noop2 = _interopRequireDefault(_noop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var areaSum = (0, _adder2.default)(),
    areaRingSum = (0, _adder2.default)(),
    x00,
    y00,
    x0,
    y0;

var areaStream = {
  point: _noop2.default,
  lineStart: _noop2.default,
  lineEnd: _noop2.default,
  polygonStart: function polygonStart() {
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function polygonEnd() {
    areaStream.lineStart = areaStream.lineEnd = areaStream.point = _noop2.default;
    areaSum.add((0, _math.abs)(areaRingSum));
    areaRingSum.reset();
  },
  result: function result() {
    var area = areaSum / 2;
    areaSum.reset();
    return area;
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaPointFirst(x, y) {
  areaStream.point = areaPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function areaPoint(x, y) {
  areaRingSum.add(y0 * x - x0 * y);
  x0 = x, y0 = y;
}

function areaRingEnd() {
  areaPoint(x00, y00);
}

exports.default = areaStream;

/***/ }),
/* 504 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _math = __webpack_require__(4);

// TODO Enforce positive area for exterior, negative area for interior?

var X0 = 0,
    Y0 = 0,
    Z0 = 0,
    X1 = 0,
    Y1 = 0,
    Z1 = 0,
    X2 = 0,
    Y2 = 0,
    Z2 = 0,
    x00,
    y00,
    x0,
    y0;

var centroidStream = {
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function polygonStart() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function polygonEnd() {
    centroidStream.point = centroidPoint;
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  },
  result: function result() {
    var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];
    X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
    return centroid;
  }
};

function centroidPoint(x, y) {
  X0 += x;
  Y0 += y;
  ++Z0;
}

function centroidLineStart() {
  centroidStream.point = centroidPointFirstLine;
}

function centroidPointFirstLine(x, y) {
  centroidStream.point = centroidPointLine;
  centroidPoint(x0 = x, y0 = y);
}

function centroidPointLine(x, y) {
  var dx = x - x0,
      dy = y - y0,
      z = (0, _math.sqrt)(dx * dx + dy * dy);
  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;
  centroidPoint(x0 = x, y0 = y);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

function centroidRingStart() {
  centroidStream.point = centroidPointFirstRing;
}

function centroidRingEnd() {
  centroidPointRing(x00, y00);
}

function centroidPointFirstRing(x, y) {
  centroidStream.point = centroidPointRing;
  centroidPoint(x00 = x0 = x, y00 = y0 = y);
}

function centroidPointRing(x, y) {
  var dx = x - x0,
      dy = y - y0,
      z = (0, _math.sqrt)(dx * dx + dy * dy);

  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;

  z = y0 * x - x0 * y;
  X2 += z * (x0 + x);
  Y2 += z * (y0 + y);
  Z2 += z * 3;
  centroidPoint(x0 = x, y0 = y);
}

exports.default = centroidStream;

/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.default = PathContext;

var _math = __webpack_require__(4);

var _noop = __webpack_require__(27);

var _noop2 = _interopRequireDefault(_noop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function PathContext(context) {
  this._context = context;
}

PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function pointRadius(_) {
    return this._radius = _, this;
  },
  polygonStart: function polygonStart() {
    this._line = 0;
  },
  polygonEnd: function polygonEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function point(x, y) {
    switch (this._point) {
      case 0:
        {
          this._context.moveTo(x, y);
          this._point = 1;
          break;
        }
      case 1:
        {
          this._context.lineTo(x, y);
          break;
        }
      default:
        {
          this._context.moveTo(x + this._radius, y);
          this._context.arc(x, y, this._radius, 0, _math.tau);
          break;
        }
    }
  },
  result: _noop2.default
};

/***/ }),
/* 506 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.default = PathString;
function PathString() {
  this._string = [];
}

PathString.prototype = {
  _circle: circle(4.5),
  pointRadius: function pointRadius(_) {
    return this._circle = circle(_), this;
  },
  polygonStart: function polygonStart() {
    this._line = 0;
  },
  polygonEnd: function polygonEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    if (this._line === 0) this._string.push("Z");
    this._point = NaN;
  },
  point: function point(x, y) {
    switch (this._point) {
      case 0:
        {
          this._string.push("M", x, ",", y);
          this._point = 1;
          break;
        }
      case 1:
        {
          this._string.push("L", x, ",", y);
          break;
        }
      default:
        {
          this._string.push("M", x, ",", y, this._circle);
          break;
        }
    }
  },
  result: function result() {
    if (this._string.length) {
      var result = this._string.join("");
      this._string = [];
      return result;
    }
  }
};

function circle(radius) {
  return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
}

/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _index = __webpack_require__(215);

var _index2 = _interopRequireDefault(_index);

var _math = __webpack_require__(4);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _index2.default)(function () {
  return true;
}, clipAntimeridianLine, clipAntimeridianInterpolate, [-_math.pi, -_math.halfPi]);

// Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.

function clipAntimeridianLine(stream) {
  var lambda0 = NaN,
      phi0 = NaN,
      sign0 = NaN,
      _clean; // no intersections

  return {
    lineStart: function lineStart() {
      stream.lineStart();
      _clean = 1;
    },
    point: function point(lambda1, phi1) {
      var sign1 = lambda1 > 0 ? _math.pi : -_math.pi,
          delta = (0, _math.abs)(lambda1 - lambda0);
      if ((0, _math.abs)(delta - _math.pi) < _math.epsilon) {
        // line crosses a pole
        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? _math.halfPi : -_math.halfPi);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        _clean = 0;
      } else if (sign0 !== sign1 && delta >= _math.pi) {
        // line crosses antimeridian
        if ((0, _math.abs)(lambda0 - sign0) < _math.epsilon) lambda0 -= sign0 * _math.epsilon; // handle degeneracies
        if ((0, _math.abs)(lambda1 - sign1) < _math.epsilon) lambda1 -= sign1 * _math.epsilon;
        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        _clean = 0;
      }
      stream.point(lambda0 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function lineEnd() {
      stream.lineEnd();
      lambda0 = phi0 = NaN;
    },
    clean: function clean() {
      return 2 - _clean; // if intersections, rejoin first and last segments
    }
  };
}

function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
  var cosPhi0,
      cosPhi1,
      sinLambda0Lambda1 = (0, _math.sin)(lambda0 - lambda1);
  return (0, _math.abs)(sinLambda0Lambda1) > _math.epsilon ? (0, _math.atan)(((0, _math.sin)(phi0) * (cosPhi1 = (0, _math.cos)(phi1)) * (0, _math.sin)(lambda1) - (0, _math.sin)(phi1) * (cosPhi0 = (0, _math.cos)(phi0)) * (0, _math.sin)(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
}

function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi;
  if (from == null) {
    phi = direction * _math.halfPi;
    stream.point(-_math.pi, phi);
    stream.point(0, phi);
    stream.point(_math.pi, phi);
    stream.point(_math.pi, 0);
    stream.point(_math.pi, -phi);
    stream.point(0, -phi);
    stream.point(-_math.pi, -phi);
    stream.point(-_math.pi, 0);
    stream.point(-_math.pi, phi);
  } else if ((0, _math.abs)(from[0] - to[0]) > _math.epsilon) {
    var lambda = from[0] < to[0] ? _math.pi : -_math.pi;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}

/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (polygon, point) {
  var lambda = point[0],
      phi = point[1],
      normal = [(0, _math.sin)(lambda), -(0, _math.cos)(lambda), 0],
      angle = 0,
      winding = 0;

  sum.reset();

  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length)) continue;
    var ring,
        m,
        point0 = ring[m - 1],
        lambda0 = point0[0],
        phi0 = point0[1] / 2 + _math.quarterPi,
        sinPhi0 = (0, _math.sin)(phi0),
        cosPhi0 = (0, _math.cos)(phi0);

    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
      var point1 = ring[j],
          lambda1 = point1[0],
          phi1 = point1[1] / 2 + _math.quarterPi,
          sinPhi1 = (0, _math.sin)(phi1),
          cosPhi1 = (0, _math.cos)(phi1),
          delta = lambda1 - lambda0,
          sign = delta >= 0 ? 1 : -1,
          absDelta = sign * delta,
          antimeridian = absDelta > _math.pi,
          k = sinPhi0 * sinPhi1;

      sum.add((0, _math.atan2)(k * sign * (0, _math.sin)(absDelta), cosPhi0 * cosPhi1 + k * (0, _math.cos)(absDelta)));
      angle += antimeridian ? delta + sign * _math.tau : delta;

      // Are the longitudes either side of the point’s meridian (lambda),
      // and are the latitudes smaller than the parallel (phi)?
      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
        var arc = (0, _cartesian.cartesianCross)((0, _cartesian.cartesian)(point0), (0, _cartesian.cartesian)(point1));
        (0, _cartesian.cartesianNormalizeInPlace)(arc);
        var intersection = (0, _cartesian.cartesianCross)(normal, arc);
        (0, _cartesian.cartesianNormalizeInPlace)(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * (0, _math.asin)(intersection[2]);
        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  }

  // First, determine whether the South pole is inside or outside:
  //
  // It is inside if:
  // * the polygon winds around it in a clockwise direction.
  // * the polygon does not (cumulatively) wind around it, but has a negative
  //   (counter-clockwise) area.
  //
  // Second, count the (signed) number of times a segment crosses a lambda
  // from the point to the South pole.  If it is zero, then the point is the
  // same side as the South pole.

  return (angle < -_math.epsilon || angle < _math.epsilon && sum < -_math.epsilon) ^ winding & 1;
};

var _adder = __webpack_require__(45);

var _adder2 = _interopRequireDefault(_adder);

var _cartesian = __webpack_require__(46);

var _math = __webpack_require__(4);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var sum = (0, _adder2.default)();

/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (radius, delta) {
  var cr = (0, _math.cos)(radius),
      smallRadius = cr > 0,
      notHemisphere = (0, _math.abs)(cr) > _math.epsilon; // TODO optimise for this common case

  function interpolate(from, to, direction, stream) {
    (0, _circle.circleStream)(stream, radius, delta, direction, from, to);
  }

  function visible(lambda, phi) {
    return (0, _math.cos)(lambda) * (0, _math.cos)(phi) > cr;
  }

  // Takes a line and cuts into visible segments. Return values used for polygon
  // clipping: 0 - there were intersections or the line was empty; 1 - no
  // intersections 2 - there were intersections, and the first and last segments
  // should be rejoined.
  function clipLine(stream) {
    var point0, // previous point
    c0, // code for previous point
    v0, // visibility of previous point
    v00, // visibility of first point
    _clean; // no intersections
    return {
      lineStart: function lineStart() {
        v00 = v0 = false;
        _clean = 1;
      },
      point: function point(lambda, phi) {
        var point1 = [lambda, phi],
            point2,
            v = visible(lambda, phi),
            c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? _math.pi : -_math.pi), phi) : 0;
        if (!point0 && (v00 = v0 = v)) stream.lineStart();
        // Handle degeneracies.
        // TODO ignore if not clipping polygons.
        if (v !== v0) {
          point2 = intersect(point0, point1);
          if ((0, _pointEqual2.default)(point0, point2) || (0, _pointEqual2.default)(point1, point2)) {
            point1[0] += _math.epsilon;
            point1[1] += _math.epsilon;
            v = visible(point1[0], point1[1]);
          }
        }
        if (v !== v0) {
          _clean = 0;
          if (v) {
            // outside going in
            stream.lineStart();
            point2 = intersect(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            // inside going out
            point2 = intersect(point0, point1);
            stream.point(point2[0], point2[1]);
            stream.lineEnd();
          }
          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v) {
          var t;
          // If the codes for two points are different, or are both zero,
          // and there this segment intersects with the small circle.
          if (!(c & c0) && (t = intersect(point1, point0, true))) {
            _clean = 0;
            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
            }
          }
        }
        if (v && (!point0 || !(0, _pointEqual2.default)(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }
        point0 = point1, v0 = v, c0 = c;
      },
      lineEnd: function lineEnd() {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function clean() {
        return _clean | (v00 && v0) << 1;
      }
    };
  }

  // Intersects the great circle between a and b with the clip circle.
  function intersect(a, b, two) {
    var pa = (0, _cartesian.cartesian)(a),
        pb = (0, _cartesian.cartesian)(b);

    // We have two planes, n1.p = d1 and n2.p = d2.
    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
    var n1 = [1, 0, 0],
        // normal
    n2 = (0, _cartesian.cartesianCross)(pa, pb),
        n2n2 = (0, _cartesian.cartesianDot)(n2, n2),
        n1n2 = n2[0],
        // cartesianDot(n1, n2),
    determinant = n2n2 - n1n2 * n1n2;

    // Two polar points.
    if (!determinant) return !two && a;

    var c1 = cr * n2n2 / determinant,
        c2 = -cr * n1n2 / determinant,
        n1xn2 = (0, _cartesian.cartesianCross)(n1, n2),
        A = (0, _cartesian.cartesianScale)(n1, c1),
        B = (0, _cartesian.cartesianScale)(n2, c2);
    (0, _cartesian.cartesianAddInPlace)(A, B);

    // Solve |p(t)|^2 = 1.
    var u = n1xn2,
        w = (0, _cartesian.cartesianDot)(A, u),
        uu = (0, _cartesian.cartesianDot)(u, u),
        t2 = w * w - uu * ((0, _cartesian.cartesianDot)(A, A) - 1);

    if (t2 < 0) return;

    var t = (0, _math.sqrt)(t2),
        q = (0, _cartesian.cartesianScale)(u, (-w - t) / uu);
    (0, _cartesian.cartesianAddInPlace)(q, A);
    q = (0, _cartesian.spherical)(q);

    if (!two) return q;

    // Two intersection points.
    var lambda0 = a[0],
        lambda1 = b[0],
        phi0 = a[1],
        phi1 = b[1],
        z;

    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

    var delta = lambda1 - lambda0,
        polar = (0, _math.abs)(delta - _math.pi) < _math.epsilon,
        meridian = polar || delta < _math.epsilon;

    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

    // Check that the first point is between a and b.
    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < ((0, _math.abs)(q[0] - lambda0) < _math.epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > _math.pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
      var q1 = (0, _cartesian.cartesianScale)(u, (-w + t) / uu);
      (0, _cartesian.cartesianAddInPlace)(q1, A);
      return [q, (0, _cartesian.spherical)(q1)];
    }
  }

  // Generates a 4-bit vector representing the location of a point relative to
  // the small circle's bounding box.
  function code(lambda, phi) {
    var r = smallRadius ? radius : _math.pi - radius,
        code = 0;
    if (lambda < -r) code |= 1; // left
    else if (lambda > r) code |= 2; // right
    if (phi < -r) code |= 4; // below
    else if (phi > r) code |= 8; // above
    return code;
  }

  return (0, _index2.default)(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-_math.pi, radius - _math.pi]);
};

var _cartesian = __webpack_require__(46);

var _circle = __webpack_require__(205);

var _math = __webpack_require__(4);

var _pointEqual = __webpack_require__(210);

var _pointEqual2 = _interopRequireDefault(_pointEqual);

var _index = __webpack_require__(215);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 510 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (project, delta2) {
  return +delta2 ? resample(project, delta2) : resampleNone(project);
};

var _cartesian = __webpack_require__(46);

var _math = __webpack_require__(4);

var _transform = __webpack_require__(111);

var maxDepth = 16,
    // maximum depth of subdivision
cosMinDistance = (0, _math.cos)(30 * _math.radians); // cos(minimum angular distance)

function resampleNone(project) {
  return (0, _transform.transform)({
    point: function point(x, y) {
      x = project(x, y);
      this.stream.point(x[0], x[1]);
    }
  });
}

function resample(project, delta2) {

  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
    var dx = x1 - x0,
        dy = y1 - y0,
        d2 = dx * dx + dy * dy;
    if (d2 > 4 * delta2 && depth--) {
      var a = a0 + a1,
          b = b0 + b1,
          c = c0 + c1,
          m = (0, _math.sqrt)(a * a + b * b + c * c),
          phi2 = (0, _math.asin)(c /= m),
          lambda2 = (0, _math.abs)((0, _math.abs)(c) - 1) < _math.epsilon || (0, _math.abs)(lambda0 - lambda1) < _math.epsilon ? (lambda0 + lambda1) / 2 : (0, _math.atan2)(b, a),
          p = project(lambda2, phi2),
          x2 = p[0],
          y2 = p[1],
          dx2 = x2 - x0,
          dy2 = y2 - y0,
          dz = dy * dx2 - dx * dy2;
      if (dz * dz / d2 > delta2 // perpendicular projected distance
      || (0, _math.abs)((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
      || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
        // angular distance
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }
  return function (stream) {
    var lambda00, x00, y00, a00, b00, c00, // first point
    lambda0, x0, y0, a0, b0, c0; // previous point

    var resampleStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function polygonStart() {
        stream.polygonStart();resampleStream.lineStart = ringStart;
      },
      polygonEnd: function polygonEnd() {
        stream.polygonEnd();resampleStream.lineStart = lineStart;
      }
    };

    function point(x, y) {
      x = project(x, y);
      stream.point(x[0], x[1]);
    }

    function lineStart() {
      x0 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }

    function linePoint(lambda, phi) {
      var c = (0, _cartesian.cartesian)([lambda, phi]),
          p = project(lambda, phi);
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
      stream.point(x0, y0);
    }

    function lineEnd() {
      resampleStream.point = point;
      stream.lineEnd();
    }

    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }

    function ringPoint(lambda, phi) {
      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }

    function ringEnd() {
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }

    return resampleStream;
  };
}

/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var cache,
      cacheStream,
      lower48 = (0, _albers2.default)(),
      lower48Point,
      alaska = (0, _conicEqualArea2.default)().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
      alaskaPoint,
      // EPSG:3338
  hawaii = (0, _conicEqualArea2.default)().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
      hawaiiPoint,
      // ESRI:102007
  _point,
      pointStream = { point: function point(x, y) {
      _point = [x, y];
    } };

  function albersUsa(coordinates) {
    var x = coordinates[0],
        y = coordinates[1];
    return _point = null, (lower48Point.point(x, y), _point) || (alaskaPoint.point(x, y), _point) || (hawaiiPoint.point(x, y), _point);
  }

  albersUsa.invert = function (coordinates) {
    var k = lower48.scale(),
        t = lower48.translate(),
        x = (coordinates[0] - t[0]) / k,
        y = (coordinates[1] - t[1]) / k;
    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
  };

  albersUsa.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
  };

  albersUsa.precision = function (_) {
    if (!arguments.length) return lower48.precision();
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
    return albersUsa;
  };

  albersUsa.scale = function (_) {
    if (!arguments.length) return lower48.scale();
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
    return albersUsa.translate(lower48.translate());
  };

  albersUsa.translate = function (_) {
    if (!arguments.length) return lower48.translate();
    var k = lower48.scale(),
        x = +_[0],
        y = +_[1];

    lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);

    alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + _math.epsilon, y + 0.120 * k + _math.epsilon], [x - 0.214 * k - _math.epsilon, y + 0.234 * k - _math.epsilon]]).stream(pointStream);

    hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + _math.epsilon, y + 0.166 * k + _math.epsilon], [x - 0.115 * k - _math.epsilon, y + 0.234 * k - _math.epsilon]]).stream(pointStream);

    return albersUsa;
  };

  albersUsa.fitExtent = (0, _fit.fitExtent)(albersUsa);

  albersUsa.fitSize = (0, _fit.fitSize)(albersUsa);

  return albersUsa.scale(1070);
};

var _math = __webpack_require__(4);

var _albers = __webpack_require__(214);

var _albers2 = _interopRequireDefault(_albers);

var _conicEqualArea = __webpack_require__(109);

var _conicEqualArea2 = _interopRequireDefault(_conicEqualArea);

var _fit = __webpack_require__(216);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
function multiplex(streams) {
  var n = streams.length;
  return {
    point: function point(x, y) {
      var i = -1;while (++i < n) {
        streams[i].point(x, y);
      }
    },
    sphere: function sphere() {
      var i = -1;while (++i < n) {
        streams[i].sphere();
      }
    },
    lineStart: function lineStart() {
      var i = -1;while (++i < n) {
        streams[i].lineStart();
      }
    },
    lineEnd: function lineEnd() {
      var i = -1;while (++i < n) {
        streams[i].lineEnd();
      }
    },
    polygonStart: function polygonStart() {
      var i = -1;while (++i < n) {
        streams[i].polygonStart();
      }
    },
    polygonEnd: function polygonEnd() {
      var i = -1;while (++i < n) {
        streams[i].polygonEnd();
      }
    }
  };
}

// A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers

/***/ }),
/* 512 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.azimuthalEqualAreaRaw = undefined;

exports.default = function () {
  return (0, _index2.default)(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
};

var _math = __webpack_require__(4);

var _azimuthal = __webpack_require__(47);

var _index = __webpack_require__(17);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var azimuthalEqualAreaRaw = exports.azimuthalEqualAreaRaw = (0, _azimuthal.azimuthalRaw)(function (cxcy) {
  return (0, _math.sqrt)(2 / (1 + cxcy));
});

azimuthalEqualAreaRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return 2 * (0, _math.asin)(z / 2);
});

/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.azimuthalEquidistantRaw = undefined;

exports.default = function () {
  return (0, _index2.default)(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
};

var _math = __webpack_require__(4);

var _azimuthal = __webpack_require__(47);

var _index = __webpack_require__(17);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var azimuthalEquidistantRaw = exports.azimuthalEquidistantRaw = (0, _azimuthal.azimuthalRaw)(function (c) {
  return (c = (0, _math.acos)(c)) && c / (0, _math.sin)(c);
});

azimuthalEquidistantRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return z;
});

/***/ }),
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.conicConformalRaw = conicConformalRaw;

exports.default = function () {
  return (0, _conic.conicProjection)(conicConformalRaw).scale(109.5).parallels([30, 30]);
};

var _math = __webpack_require__(4);

var _conic = __webpack_require__(110);

var _mercator = __webpack_require__(112);

function tany(y) {
  return (0, _math.tan)((_math.halfPi + y) / 2);
}

function conicConformalRaw(y0, y1) {
  var cy0 = (0, _math.cos)(y0),
      n = y0 === y1 ? (0, _math.sin)(y0) : (0, _math.log)(cy0 / (0, _math.cos)(y1)) / (0, _math.log)(tany(y1) / tany(y0)),
      f = cy0 * (0, _math.pow)(tany(y0), n) / n;

  if (!n) return _mercator.mercatorRaw;

  function project(x, y) {
    if (f > 0) {
      if (y < -_math.halfPi + _math.epsilon) y = -_math.halfPi + _math.epsilon;
    } else {
      if (y > _math.halfPi - _math.epsilon) y = _math.halfPi - _math.epsilon;
    }
    var r = f / (0, _math.pow)(tany(y), n);
    return [r * (0, _math.sin)(n * x), f - r * (0, _math.cos)(n * x)];
  }

  project.invert = function (x, y) {
    var fy = f - y,
        r = (0, _math.sign)(n) * (0, _math.sqrt)(x * x + fy * fy);
    return [(0, _math.atan2)(x, fy) / n, 2 * (0, _math.atan)((0, _math.pow)(f / r, 1 / n)) - _math.halfPi];
  };

  return project;
}

/***/ }),
/* 515 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.conicEquidistantRaw = conicEquidistantRaw;

exports.default = function () {
  return (0, _conic.conicProjection)(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);
};

var _math = __webpack_require__(4);

var _conic = __webpack_require__(110);

var _equirectangular = __webpack_require__(217);

function conicEquidistantRaw(y0, y1) {
  var cy0 = (0, _math.cos)(y0),
      n = y0 === y1 ? (0, _math.sin)(y0) : (cy0 - (0, _math.cos)(y1)) / (y1 - y0),
      g = cy0 / n + y0;

  if ((0, _math.abs)(n) < _math.epsilon) return _equirectangular.equirectangularRaw;

  function project(x, y) {
    var gy = g - y,
        nx = n * x;
    return [gy * (0, _math.sin)(nx), g - gy * (0, _math.cos)(nx)];
  }

  project.invert = function (x, y) {
    var gy = g - y;
    return [(0, _math.atan2)(x, gy) / n, g - (0, _math.sign)(n) * (0, _math.sqrt)(x * x + gy * gy)];
  };

  return project;
}

/***/ }),
/* 516 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.gnomonicRaw = gnomonicRaw;

exports.default = function () {
  return (0, _index2.default)(gnomonicRaw).scale(144.049).clipAngle(60);
};

var _math = __webpack_require__(4);

var _azimuthal = __webpack_require__(47);

var _index = __webpack_require__(17);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function gnomonicRaw(x, y) {
  var cy = (0, _math.cos)(y),
      k = (0, _math.cos)(x) * cy;
  return [cy * (0, _math.sin)(x) / k, (0, _math.sin)(y) / k];
}

gnomonicRaw.invert = (0, _azimuthal.azimuthalInvert)(_math.atan);

/***/ }),
/* 517 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.orthographicRaw = orthographicRaw;

exports.default = function () {
  return (0, _index2.default)(orthographicRaw).scale(249.5).clipAngle(90 + _math.epsilon);
};

var _math = __webpack_require__(4);

var _azimuthal = __webpack_require__(47);

var _index = __webpack_require__(17);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function orthographicRaw(x, y) {
  return [(0, _math.cos)(y) * (0, _math.sin)(x), (0, _math.sin)(y)];
}

orthographicRaw.invert = (0, _azimuthal.azimuthalInvert)(_math.asin);

/***/ }),
/* 518 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.stereographicRaw = stereographicRaw;

exports.default = function () {
  return (0, _index2.default)(stereographicRaw).scale(250).clipAngle(142);
};

var _math = __webpack_require__(4);

var _azimuthal = __webpack_require__(47);

var _index = __webpack_require__(17);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stereographicRaw(x, y) {
  var cy = (0, _math.cos)(y),
      k = 1 + (0, _math.cos)(x) * cy;
  return [cy * (0, _math.sin)(x) / k, (0, _math.sin)(y) / k];
}

stereographicRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return 2 * (0, _math.atan)(z);
});

/***/ }),
/* 519 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.transverseMercatorRaw = transverseMercatorRaw;

exports.default = function () {
  var m = (0, _mercator.mercatorProjection)(transverseMercatorRaw),
      center = m.center,
      rotate = m.rotate;

  m.center = function (_) {
    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
  };

  m.rotate = function (_) {
    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
  };

  return rotate([0, 0, 90]).scale(159.155);
};

var _math = __webpack_require__(4);

var _mercator = __webpack_require__(112);

function transverseMercatorRaw(lambda, phi) {
  return [(0, _math.log)((0, _math.tan)((_math.halfPi + phi) / 2)), -lambda];
}

transverseMercatorRaw.invert = function (x, y) {
  return [-y, 2 * (0, _math.atan)((0, _math.exp)(x)) - _math.halfPi];
};

/***/ }),
/* 520 */
/***/ (function(module, exports) {

exports.__esModule = true;
var pi = Math.PI,
    tau = 2 * pi,
    epsilon = 1e-6,
    tauEpsilon = tau - epsilon;

function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null; // end of current subpath
  this._ = "";
}

function path() {
  return new Path();
}

Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function moveTo(x, y) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
  },
  closePath: function closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function lineTo(x, y) {
    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  quadraticCurveTo: function quadraticCurveTo(x1, y1, x, y) {
    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {
    this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  arcTo: function arcTo(x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01;

    // Is the radius negative? Error.
    if (r < 0) throw new Error("negative radius: " + r);

    // Is this path empty? Move to (x1,y1).
    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    }

    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon)) {}

      // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
      // Equivalently, is (x1,y1) coincident with (x2,y2)?
      // Or, is the radius zero? Line to (x1,y1).
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        }

        // Otherwise, draw an arc!
        else {
            var x20 = x2 - x0,
                y20 = y2 - y0,
                l21_2 = x21 * x21 + y21 * y21,
                l20_2 = x20 * x20 + y20 * y20,
                l21 = Math.sqrt(l21_2),
                l01 = Math.sqrt(l01_2),
                l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
                t01 = l / l01,
                t21 = l / l21;

            // If the start tangent is not coincident with (x0,y0), line to.
            if (Math.abs(t01 - 1) > epsilon) {
              this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
            }

            this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
          }
  },
  arc: function arc(x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r;
    var dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0;

    // Is the radius negative? Error.
    if (r < 0) throw new Error("negative radius: " + r);

    // Is this path empty? Move to (x0,y0).
    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    }

    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
        this._ += "L" + x0 + "," + y0;
      }

    // Is this arc empty? We’re done.
    if (!r) return;

    // Does the angle go the wrong way? Flip the direction.
    if (da < 0) da = da % tau + tau;

    // Is this a complete circle? Draw two arcs to complete the circle.
    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    }

    // Is this arc non-empty? Draw an arc!
    else if (da > epsilon) {
        this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
      }
  },
  rect: function rect(x, y, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
  },
  toString: function toString() {
    return this._;
  }
};

exports.default = path;

/***/ }),
/* 521 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable no-cond-assign, no-loop-func */
var assign = __webpack_require__(5);
var View = __webpack_require__(42);

assign(View.prototype, {
  getAllNodes: function getAllNodes() {
    var nodes = [];
    this.root.each(function (node) {
      nodes.push(node);
    });
    return nodes;
  },
  getAllLinks: function getAllLinks() {
    var links = [];
    var nodes = [this.root];
    var node = void 0;
    while (node = nodes.pop()) {
      var children = node.children;
      if (children) {
        children.forEach(function (child) {
          links.push({
            source: node,
            target: child
          });
          nodes.push(child);
        });
      }
    }
    return links;
  }
});

/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var values = __webpack_require__(113);
var _partition = __webpack_require__(18);
var View = __webpack_require__(42);

assign(View.prototype, {
  partition: function partition() {
    var group_by = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var order_by = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    return _partition(this.rows, group_by, order_by);
  },
  group: function group(group_by, order_by) {
    var groups = this.partition(group_by, order_by);
    return values(groups);
  },
  groups: function groups(group_by, order_by) {
    return this.group(group_by, order_by);
  }
});

/***/ }),
/* 523 */
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__(68);

/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */
function baseValues(object, props) {
  return arrayMap(props, function (key) {
    return object[key];
  });
}

module.exports = baseValues;

/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(76),
    createAggregator = __webpack_require__(525);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an object composed of keys generated from the results of running
 * each element of `collection` thru `iteratee`. The order of grouped values
 * is determined by the order they occur in `collection`. The corresponding
 * value of each key is an array of elements responsible for generating the
 * key. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * _.groupBy([6.1, 4.2, 6.3], Math.floor);
 * // => { '4': [4.2], '6': [6.1, 6.3] }
 *
 * // The `_.property` iteratee shorthand.
 * _.groupBy(['one', 'two', 'three'], 'length');
 * // => { '3': ['one', 'two'], '5': ['three'] }
 */
var groupBy = createAggregator(function (result, value, key) {
  if (hasOwnProperty.call(result, key)) {
    result[key].push(value);
  } else {
    baseAssignValue(result, key, [value]);
  }
});

module.exports = groupBy;

/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

var arrayAggregator = __webpack_require__(526),
    baseAggregator = __webpack_require__(527),
    baseIteratee = __webpack_require__(66),
    isArray = __webpack_require__(10);

/**
 * Creates a function like `_.groupBy`.
 *
 * @private
 * @param {Function} setter The function to set accumulator values.
 * @param {Function} [initializer] The accumulator object initializer.
 * @returns {Function} Returns the new aggregator function.
 */
function createAggregator(setter, initializer) {
    return function (collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, baseIteratee(iteratee, 2), accumulator);
    };
}

module.exports = createAggregator;

/***/ }),
/* 526 */
/***/ (function(module, exports) {

/**
 * A specialized version of `baseAggregator` for arrays.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */
function arrayAggregator(array, setter, iteratee, accumulator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    var value = array[index];
    setter(accumulator, value, iteratee(value), array);
  }
  return accumulator;
}

module.exports = arrayAggregator;

/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

var baseEach = __webpack_require__(218);

/**
 * Aggregates elements of `collection` on `accumulator` with keys transformed
 * by `iteratee` and values set by `setter`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */
function baseAggregator(collection, setter, iteratee, accumulator) {
  baseEach(collection, function (value, key, collection) {
    setter(accumulator, value, iteratee(value), collection);
  });
  return accumulator;
}

module.exports = baseAggregator;

/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

var baseFor = __webpack_require__(201),
    keys = __webpack_require__(9);

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;

/***/ }),
/* 529 */
/***/ (function(module, exports, __webpack_require__) {

var isArrayLike = __webpack_require__(20);

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function (collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while (fromRight ? index-- : ++index < length) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;

/***/ }),
/* 530 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(8);
var isString = __webpack_require__(7);

module.exports = function (arr) {
  var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var comparer = void 0;
  if (isFunction(keys)) {
    comparer = keys;
  } else if (Array.isArray(keys)) {
    comparer = function comparer(a, b) {
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (a[key] < b[key]) {
          return -1;
        }
        if (a[key] > b[key]) {
          return 1;
        }
      }
      return 0;
    };
  } else if (isString(keys)) {
    comparer = function comparer(a, b) {
      if (a[keys] < b[keys]) {
        return -1;
      }
      if (a[keys] > b[keys]) {
        return 1;
      }
      return 0;
    };
  }
  return arr.sort(comparer);
};

/***/ }),
/* 531 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);

var _require = __webpack_require__(30),
    _max = _require.max,
    _mean = _require.mean,
    _median = _require.median,
    _min = _require.min,
    _mode = _require.mode,
    _quantile = _require.quantile,
    _standardDeviation = _require.standardDeviation,
    _sum = _require.sum,
    _variance = _require.variance;

var View = __webpack_require__(42);
var pByFraction = __webpack_require__(235);

assign(View.prototype, {
  // statistics
  max: function max(column) {
    return _max(this.getColumn(column));
  },
  mean: function mean(column) {
    return _mean(this.getColumn(column));
  },
  average: function average(column) {
    // alias
    return this.mean(column);
  },
  median: function median(column) {
    return _median(this.getColumn(column));
  },
  min: function min(column) {
    return _min(this.getColumn(column));
  },
  mode: function mode(column) {
    return _mode(this.getColumn(column));
  },
  quantile: function quantile(column, p) {
    return _quantile(this.getColumn(column), p);
  },
  quantiles: function quantiles(column, pArr) {
    var columnArr = this.getColumn(column);
    return pArr.map(function (p) {
      return _quantile(columnArr, p);
    });
  },
  quantilesByFraction: function quantilesByFraction(column, fraction) {
    return this.quantiles(column, pByFraction(fraction));
  },
  standardDeviation: function standardDeviation(column) {
    return _standardDeviation(this.getColumn(column));
  },
  sum: function sum(column) {
    return _sum(this.getColumn(column));
  },
  variance: function variance(column) {
    return _variance(this.getColumn(column));
  },
  range: function range(column) {
    var me = this;
    return [me.min(column), me.max(column)];
  },
  extent: function extent(column) {
    // alias
    return this.range(column);
  }
});

/***/ }),
/* 532 */
/***/ (function(module, exports) {


/* @flow */

/**
 * [Simple linear regression](http://en.wikipedia.org/wiki/Simple_linear_regression)
 * is a simple way to find a fitted line
 * between a set of coordinates. This algorithm finds the slope and y-intercept of a regression line
 * using the least sum of squares.
 *
 * @param {Array<Array<number>>} data an array of two-element of arrays,
 * like `[[0, 1], [2, 3]]`
 * @returns {Object} object containing slope and intersect of regression line
 * @example
 * linearRegression([[0, 0], [1, 1]]); // => { m: 1, b: 0 }
 */
function linearRegression(data /*: Array<Array<number>> */) /*: { m: number, b: number } */{

    var m, b;

    // Store data length in a local variable to reduce
    // repeated object property lookups
    var dataLength = data.length;

    //if there's only one point, arbitrarily choose a slope of 0
    //and a y-intercept of whatever the y of the initial point is
    if (dataLength === 1) {
        m = 0;
        b = data[0][1];
    } else {
        // Initialize our sums and scope the `m` and `b`
        // variables that define the line.
        var sumX = 0,
            sumY = 0,
            sumXX = 0,
            sumXY = 0;

        // Use local variables to grab point values
        // with minimal object property lookups
        var point, x, y;

        // Gather the sum of all x values, the sum of all
        // y values, and the sum of x^2 and (x*y) for each
        // value.
        //
        // In math notation, these would be SS_x, SS_y, SS_xx, and SS_xy
        for (var i = 0; i < dataLength; i++) {
            point = data[i];
            x = point[0];
            y = point[1];

            sumX += x;
            sumY += y;

            sumXX += x * x;
            sumXY += x * y;
        }

        // `m` is the slope of the regression line
        m = (dataLength * sumXY - sumX * sumY) / (dataLength * sumXX - sumX * sumX);

        // `b` is the y-intercept of the line.
        b = sumY / dataLength - m * sumX / dataLength;
    }

    // Return both values as an object.
    return {
        m: m,
        b: b
    };
}

module.exports = linearRegression;

/***/ }),
/* 533 */
/***/ (function(module, exports) {


/* @flow */

/**
 * Given the output of `linearRegression`: an object
 * with `m` and `b` values indicating slope and intercept,
 * respectively, generate a line function that translates
 * x values into y values.
 *
 * @param {Object} mb object with `m` and `b` members, representing
 * slope and intersect of desired line
 * @returns {Function} method that computes y-value at any given
 * x-value on the line.
 * @example
 * var l = linearRegressionLine(linearRegression([[0, 0], [1, 1]]));
 * l(0) // = 0
 * l(2) // = 2
 * linearRegressionLine({ b: 0, m: 1 })(1); // => 1
 * linearRegressionLine({ b: 1, m: 1 })(1); // => 2
 */
function linearRegressionLine(mb /*: { b: number, m: number }*/) /*: Function */{
    // Return a function that computes a `y` value for each
    // x value it is given, based on the values of `b` and `a`
    // that we just computed.
    return function (x) {
        return mb.b + mb.m * x;
    };
}

module.exports = linearRegressionLine;

/***/ }),
/* 534 */
/***/ (function(module, exports) {


/* @flow */

/**
 * The [R Squared](http://en.wikipedia.org/wiki/Coefficient_of_determination)
 * value of data compared with a function `f`
 * is the sum of the squared differences between the prediction
 * and the actual value.
 *
 * @param {Array<Array<number>>} x input data: this should be doubly-nested
 * @param {Function} func function called on `[i][0]` values within the dataset
 * @returns {number} r-squared value
 * @example
 * var samples = [[0, 0], [1, 1]];
 * var regressionLine = linearRegressionLine(linearRegression(samples));
 * rSquared(samples, regressionLine); // = 1 this line is a perfect fit
 */
function rSquared(x /*: Array<Array<number>> */, func /*: Function */) /*: number */{
    if (x.length < 2) {
        return 1;
    }

    // Compute the average y value for the actual
    // data set in order to compute the
    // _total sum of squares_
    var sum = 0,
        average;
    for (var i = 0; i < x.length; i++) {
        sum += x[i][1];
    }
    average = sum / x.length;

    // Compute the total sum of squares - the
    // squared difference between each point
    // and the average of all points.
    var sumOfSquares = 0;
    for (var j = 0; j < x.length; j++) {
        sumOfSquares += Math.pow(average - x[j][1], 2);
    }

    // Finally estimate the error: the squared
    // difference between the estimate and the actual data
    // value at each point.
    var err = 0;
    for (var k = 0; k < x.length; k++) {
        err += Math.pow(x[k][1] - func(x[k][0]), 2);
    }

    // As the error grows larger, its ratio to the
    // sum of squares increases and the r squared
    // value grows lower.
    return 1 - err / sumOfSquares;
}

module.exports = rSquared;

/***/ }),
/* 535 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var numericSort = __webpack_require__(222),
    modeSorted = __webpack_require__(223);

/**
 * The [mode](http://bit.ly/W5K4Yt) is the number that appears in a list the highest number of times.
 * There can be multiple modes in a list: in the event of a tie, this
 * algorithm will return the most recently seen mode.
 *
 * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):
 * a method of finding a typical or central value of a set of numbers.
 *
 * This runs on `O(nlog(n))` because it needs to sort the array internally
 * before running an `O(n)` search to find the mode.
 *
 * @param {Array<number>} x input
 * @returns {number} mode
 * @example
 * mode([0, 0, 1]); // => 0
 */
function mode(x /*: Array<number> */) /*:number*/{
    // Sorting the array lets us iterate through it below and be sure
    // that every time we see a new number it's new and we'll never
    // see the same number twice
    return modeSorted(numericSort(x));
}

module.exports = mode;

/***/ }),
/* 536 */
/***/ (function(module, exports) {


/* @flow */
/* globals Map: false */

/**
 * The [mode](http://bit.ly/W5K4Yt) is the number that appears in a list the highest number of times.
 * There can be multiple modes in a list: in the event of a tie, this
 * algorithm will return the most recently seen mode.
 *
 * modeFast uses a Map object to keep track of the mode, instead of the approach
 * used with `mode`, a sorted array. As a result, it is faster
 * than `mode` and supports any data type that can be compared with `==`.
 * It also requires a
 * [JavaScript environment with support for Map](https://kangax.github.io/compat-table/es6/#test-Map),
 * and will throw an error if Map is not available.
 *
 * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):
 * a method of finding a typical or central value of a set of numbers.
 *
 * @param {Array<*>} x a sample of one or more data points
 * @returns {?*} mode
 * @throws {ReferenceError} if the JavaScript environment doesn't support Map
 * @throws {Error} if x is empty
 * @example
 * modeFast(['rabbits', 'rabbits', 'squirrels']); // => 'rabbits'
 */
function modeFast /*::<T>*/(x /*: Array<T> */) /*: ?T */{

    // This index will reflect the incidence of different values, indexing
    // them like
    // { value: count }
    var index = new Map();

    // A running `mode` and the number of times it has been encountered.
    var mode;
    var modeCount = 0;

    for (var i = 0; i < x.length; i++) {
        var newCount = index.get(x[i]);
        if (newCount === undefined) {
            newCount = 1;
        } else {
            newCount++;
        }
        if (newCount > modeCount) {
            mode = x[i];
            modeCount = newCount;
        }
        index.set(x[i], newCount);
    }

    if (modeCount === 0) {
        throw new Error('mode requires at last one data point');
    }

    return mode;
}

module.exports = modeFast;

/***/ }),
/* 537 */
/***/ (function(module, exports) {


/* @flow */

/**
 * The minimum is the lowest number in the array. With a sorted array,
 * the first element in the array is always the smallest, so this calculation
 * can be done in one step, or constant time.
 *
 * @param {Array<number>} x input
 * @returns {number} minimum value
 * @example
 * minSorted([-100, -10, 1, 2, 5]); // => -100
 */
function minSorted(x /*: Array<number> */) /*:number*/{
  return x[0];
}

module.exports = minSorted;

/***/ }),
/* 538 */
/***/ (function(module, exports) {


/* @flow */

/**
 * The maximum is the highest number in the array. With a sorted array,
 * the last element in the array is always the largest, so this calculation
 * can be done in one step, or constant time.
 *
 * @param {Array<number>} x input
 * @returns {number} maximum value
 * @example
 * maxSorted([-100, -10, 1, 2, 5]); // => 5
 */
function maxSorted(x /*: Array<number> */) /*:number*/{
  return x[x.length - 1];
}

module.exports = maxSorted;

/***/ }),
/* 539 */
/***/ (function(module, exports) {


/* @flow */

/**
 * The simple [sum](https://en.wikipedia.org/wiki/Summation) of an array
 * is the result of adding all numbers together, starting from zero.
 *
 * This runs on `O(n)`, linear time in respect to the array
 *
 * @param {Array<number>} x input
 * @return {number} sum of all input numbers
 * @example
 * sumSimple([1, 2, 3]); // => 6
 */
function sumSimple(x /*: Array<number> */) /*: number */{
    var value = 0;
    for (var i = 0; i < x.length; i++) {
        value += x[i];
    }
    return value;
}

module.exports = sumSimple;

/***/ }),
/* 540 */
/***/ (function(module, exports) {


/* @flow */

/**
 * The [product](https://en.wikipedia.org/wiki/Product_(mathematics)) of an array
 * is the result of multiplying all numbers together, starting using one as the multiplicative identity.
 *
 * This runs on `O(n)`, linear time in respect to the array
 *
 * @param {Array<number>} x input
 * @return {number} product of all input numbers
 * @example
 * product([1, 2, 3, 4]); // => 24
 */
function product(x /*: Array<number> */) /*: number */{
    var value = 1;
    for (var i = 0; i < x.length; i++) {
        value *= x[i];
    }
    return value;
}

module.exports = product;

/***/ }),
/* 541 */
/***/ (function(module, exports) {


/* @flow */

module.exports = quickselect;

/**
 * Rearrange items in `arr` so that all items in `[left, k]` range are the smallest.
 * The `k`-th element will have the `(k - left + 1)`-th smallest value in `[left, right]`.
 *
 * Implements Floyd-Rivest selection algorithm https://en.wikipedia.org/wiki/Floyd-Rivest_algorithm
 *
 * @private
 * @param {Array<number>} arr input array
 * @param {number} k pivot index
 * @param {number} left left index
 * @param {number} right right index
 * @returns {undefined}
 * @example
 * var arr = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];
 * quickselect(arr, 8);
 * // = [39, 28, 28, 33, 21, 12, 22, 50, 53, 56, 59, 65, 90, 77, 95]
 */
function quickselect(arr /*: Array<number> */, k /*: number */, left /*: number */, right /*: number */) {
    left = left || 0;
    right = right || arr.length - 1;

    while (right > left) {
        // 600 and 0.5 are arbitrary constants chosen in the original paper to minimize execution time
        if (right - left > 600) {
            var n = right - left + 1;
            var m = k - left + 1;
            var z = Math.log(n);
            var s = 0.5 * Math.exp(2 * z / 3);
            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n);
            if (m - n / 2 < 0) sd *= -1;
            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
            quickselect(arr, k, newLeft, newRight);
        }

        var t = arr[k];
        var i = left;
        var j = right;

        swap(arr, left, k);
        if (arr[right] > t) swap(arr, left, right);

        while (i < j) {
            swap(arr, i, j);
            i++;
            j--;
            while (arr[i] < t) {
                i++;
            }while (arr[j] > t) {
                j--;
            }
        }

        if (arr[left] === t) swap(arr, left, j);else {
            j++;
            swap(arr, j, right);
        }

        if (j <= k) left = j + 1;
        if (k <= j) right = j - 1;
    }
}

function swap(arr, i, j) {
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
}

/***/ }),
/* 542 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var quantile = __webpack_require__(115);

/**
 * The [Interquartile range](http://en.wikipedia.org/wiki/Interquartile_range) is
 * a measure of statistical dispersion, or how scattered, spread, or
 * concentrated a distribution is. It's computed as the difference between
 * the third quartile and first quartile.
 *
 * @param {Array<number>} x sample of one or more numbers
 * @returns {number} interquartile range: the span between lower and upper quartile,
 * 0.25 and 0.75
 * @example
 * interquartileRange([0, 1, 2, 3]); // => 2
 */
function interquartileRange(x /*: Array<number> */) {
    // Interquartile range is the span between the upper quartile,
    // at `0.75`, and lower quartile, `0.25`
    var q1 = quantile(x, 0.75),
        q2 = quantile(x, 0.25);

    if (typeof q1 === 'number' && typeof q2 === 'number') {
        return q1 - q2;
    }
}

module.exports = interquartileRange;

/***/ }),
/* 543 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var median = __webpack_require__(226);

/**
 * The [Median Absolute Deviation](http://en.wikipedia.org/wiki/Median_absolute_deviation) is
 * a robust measure of statistical
 * dispersion. It is more resilient to outliers than the standard deviation.
 *
 * @param {Array<number>} x input array
 * @returns {number} median absolute deviation
 * @example
 * medianAbsoluteDeviation([1, 1, 2, 2, 4, 6, 9]); // => 1
 */
function medianAbsoluteDeviation(x /*: Array<number> */) {
    // The mad of nothing is null
    var medianValue = median(x),
        medianAbsoluteDeviations = [];

    // Make a list of absolute deviations from the median
    for (var i = 0; i < x.length; i++) {
        medianAbsoluteDeviations.push(Math.abs(x[i] - medianValue));
    }

    // Find the median value of that list
    return median(medianAbsoluteDeviations);
}

module.exports = medianAbsoluteDeviation;

/***/ }),
/* 544 */
/***/ (function(module, exports) {


/* @flow */

/**
 * Split an array into chunks of a specified size. This function
 * has the same behavior as [PHP's array_chunk](http://php.net/manual/en/function.array-chunk.php)
 * function, and thus will insert smaller-sized chunks at the end if
 * the input size is not divisible by the chunk size.
 *
 * `x` is expected to be an array, and `chunkSize` a number.
 * The `x` array can contain any kind of data.
 *
 * @param {Array} x a sample
 * @param {number} chunkSize size of each output array. must be a positive integer
 * @returns {Array<Array>} a chunked array
 * @throws {Error} if chunk size is less than 1 or not an integer
 * @example
 * chunk([1, 2, 3, 4, 5, 6], 2);
 * // => [[1, 2], [3, 4], [5, 6]]
 */
function chunk(x /*:Array<any>*/, chunkSize /*:number*/) /*:?Array<Array<any>>*/{

    // a list of result chunks, as arrays in an array
    var output = [];

    // `chunkSize` must be zero or higher - otherwise the loop below,
    // in which we call `start += chunkSize`, will loop infinitely.
    // So, we'll detect and throw in that case to indicate
    // invalid input.
    if (chunkSize < 1) {
        throw new Error('chunk size must be a positive number');
    }

    if (Math.floor(chunkSize) !== chunkSize) {
        throw new Error('chunk size must be an integer');
    }

    // `start` is the index at which `.slice` will start selecting
    // new array elements
    for (var start = 0; start < x.length; start += chunkSize) {

        // for each chunk, slice that part of the array and add it
        // to the output. The `.slice` function does not change
        // the original array.
        output.push(x.slice(start, start + chunkSize));
    }
    return output;
}

module.exports = chunk;

/***/ }),
/* 545 */
/***/ (function(module, exports) {


/* @flow */

/**
 * Sampling with replacement is a type of sampling that allows the same
 * item to be picked out of a population more than once.
 *
 * @param {Array<*>} x an array of any kind of value
 * @param {number} n count of how many elements to take
 * @param {Function} [randomSource=Math.random] an optional entropy source that
 * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)
 * @return {Array} n sampled items from the population
 * @example
 * var sample = sampleWithReplacement([1, 2, 3, 4], 2);
 * sampleWithReplacement; // = [2, 4] or any other random sample of 2 items
 */
function sampleWithReplacement /*::<T>*/(x /*:Array<T>*/
, n /*: number */
, randomSource /*:Function*/) {

    if (x.length === 0) {
        return [];
    }

    // a custom random number source can be provided if you want to use
    // a fixed seed or another random number generator, like
    // [random-js](https://www.npmjs.org/package/random-js)
    randomSource = randomSource || Math.random;

    var length = x.length;
    var sample = [];

    for (var i = 0; i < n; i++) {
        var index = Math.floor(randomSource() * length);

        sample.push(x[index]);
    }

    return sample;
}

module.exports = sampleWithReplacement;

/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var shuffle = __webpack_require__(227);

/**
 * Create a [simple random sample](http://en.wikipedia.org/wiki/Simple_random_sample)
 * from a given array of `n` elements.
 *
 * The sampled values will be in any order, not necessarily the order
 * they appear in the input.
 *
 * @param {Array<any>} x input array. can contain any type
 * @param {number} n count of how many elements to take
 * @param {Function} [randomSource=Math.random] an optional entropy source that
 * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)
 * @return {Array} subset of n elements in original array
 * @example
 * var values = [1, 2, 4, 5, 6, 7, 8, 9];
 * sample(values, 3); // returns 3 random values, like [2, 5, 8];
 */
function sample /*:: <T> */(x /*: Array<T> */
, n /*: number */
, randomSource /*: Function */) /*: Array<T> */{
  // shuffle the original array using a fisher-yates shuffle
  var shuffled = shuffle(x, randomSource);

  // and then return a subset of it - the first `n` elements.
  return shuffled.slice(0, n);
}

module.exports = sample;

/***/ }),
/* 547 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var uniqueCountSorted = __webpack_require__(229),
    numericSort = __webpack_require__(222);

/**
 * Create a new column x row matrix.
 *
 * @private
 * @param {number} columns
 * @param {number} rows
 * @return {Array<Array<number>>} matrix
 * @example
 * makeMatrix(10, 10);
 */
function makeMatrix(columns, rows) {
    var matrix = [];
    for (var i = 0; i < columns; i++) {
        var column = [];
        for (var j = 0; j < rows; j++) {
            column.push(0);
        }
        matrix.push(column);
    }
    return matrix;
}

/**
 * Generates incrementally computed values based on the sums and sums of
 * squares for the data array
 *
 * @private
 * @param {number} j
 * @param {number} i
 * @param {Array<number>} sums
 * @param {Array<number>} sumsOfSquares
 * @return {number}
 * @example
 * ssq(0, 1, [-1, 0, 2], [1, 1, 5]);
 */
function ssq(j, i, sums, sumsOfSquares) {
    var sji; // s(j, i)
    if (j > 0) {
        var muji = (sums[i] - sums[j - 1]) / (i - j + 1); // mu(j, i)
        sji = sumsOfSquares[i] - sumsOfSquares[j - 1] - (i - j + 1) * muji * muji;
    } else {
        sji = sumsOfSquares[i] - sums[i] * sums[i] / (i + 1);
    }
    if (sji < 0) {
        return 0;
    }
    return sji;
}

/**
 * Function that recursively divides and conquers computations
 * for cluster j
 *
 * @private
 * @param {number} iMin Minimum index in cluster to be computed
 * @param {number} iMax Maximum index in cluster to be computed
 * @param {number} cluster Index of the cluster currently being computed
 * @param {Array<Array<number>>} matrix
 * @param {Array<Array<number>>} backtrackMatrix
 * @param {Array<number>} sums
 * @param {Array<number>} sumsOfSquares
 */
function fillMatrixColumn(iMin, iMax, cluster, matrix, backtrackMatrix, sums, sumsOfSquares) {
    if (iMin > iMax) {
        return;
    }

    // Start at midpoint between iMin and iMax
    var i = Math.floor((iMin + iMax) / 2);

    matrix[cluster][i] = matrix[cluster - 1][i - 1];
    backtrackMatrix[cluster][i] = i;

    var jlow = cluster; // the lower end for j

    if (iMin > cluster) {
        jlow = Math.max(jlow, backtrackMatrix[cluster][iMin - 1] || 0);
    }
    jlow = Math.max(jlow, backtrackMatrix[cluster - 1][i] || 0);

    var jhigh = i - 1; // the upper end for j
    if (iMax < matrix.length - 1) {
        jhigh = Math.min(jhigh, backtrackMatrix[cluster][iMax + 1] || 0);
    }

    var sji;
    var sjlowi;
    var ssqjlow;
    var ssqj;
    for (var j = jhigh; j >= jlow; --j) {
        sji = ssq(j, i, sums, sumsOfSquares);

        if (sji + matrix[cluster - 1][jlow - 1] >= matrix[cluster][i]) {
            break;
        }

        // Examine the lower bound of the cluster border
        sjlowi = ssq(jlow, i, sums, sumsOfSquares);

        ssqjlow = sjlowi + matrix[cluster - 1][jlow - 1];

        if (ssqjlow < matrix[cluster][i]) {
            // Shrink the lower bound
            matrix[cluster][i] = ssqjlow;
            backtrackMatrix[cluster][i] = jlow;
        }
        jlow++;

        ssqj = sji + matrix[cluster - 1][j - 1];
        if (ssqj < matrix[cluster][i]) {
            matrix[cluster][i] = ssqj;
            backtrackMatrix[cluster][i] = j;
        }
    }

    fillMatrixColumn(iMin, i - 1, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);
    fillMatrixColumn(i + 1, iMax, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);
}

/**
 * Initializes the main matrices used in Ckmeans and kicks
 * off the divide and conquer cluster computation strategy
 *
 * @private
 * @param {Array<number>} data sorted array of values
 * @param {Array<Array<number>>} matrix
 * @param {Array<Array<number>>} backtrackMatrix
 */
function fillMatrices(data, matrix, backtrackMatrix) {
    var nValues = matrix[0].length;

    // Shift values by the median to improve numeric stability
    var shift = data[Math.floor(nValues / 2)];

    // Cumulative sum and cumulative sum of squares for all values in data array
    var sums = [];
    var sumsOfSquares = [];

    // Initialize first column in matrix & backtrackMatrix
    for (var i = 0, shiftedValue; i < nValues; ++i) {
        shiftedValue = data[i] - shift;
        if (i === 0) {
            sums.push(shiftedValue);
            sumsOfSquares.push(shiftedValue * shiftedValue);
        } else {
            sums.push(sums[i - 1] + shiftedValue);
            sumsOfSquares.push(sumsOfSquares[i - 1] + shiftedValue * shiftedValue);
        }

        // Initialize for cluster = 0
        matrix[0][i] = ssq(0, i, sums, sumsOfSquares);
        backtrackMatrix[0][i] = 0;
    }

    // Initialize the rest of the columns
    var iMin;
    for (var cluster = 1; cluster < matrix.length; ++cluster) {
        if (cluster < matrix.length - 1) {
            iMin = cluster;
        } else {
            // No need to compute matrix[K-1][0] ... matrix[K-1][N-2]
            iMin = nValues - 1;
        }

        fillMatrixColumn(iMin, nValues - 1, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);
    }
}

/**
 * Ckmeans clustering is an improvement on heuristic-based clustering
 * approaches like Jenks. The algorithm was developed in
 * [Haizhou Wang and Mingzhou Song](http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Wang+Song.pdf)
 * as a [dynamic programming](https://en.wikipedia.org/wiki/Dynamic_programming) approach
 * to the problem of clustering numeric data into groups with the least
 * within-group sum-of-squared-deviations.
 *
 * Minimizing the difference within groups - what Wang & Song refer to as
 * `withinss`, or within sum-of-squares, means that groups are optimally
 * homogenous within and the data is split into representative groups.
 * This is very useful for visualization, where you may want to represent
 * a continuous variable in discrete color or style groups. This function
 * can provide groups that emphasize differences between data.
 *
 * Being a dynamic approach, this algorithm is based on two matrices that
 * store incrementally-computed values for squared deviations and backtracking
 * indexes.
 *
 * This implementation is based on Ckmeans 3.4.6, which introduced a new divide
 * and conquer approach that improved runtime from O(kn^2) to O(kn log(n)).
 *
 * Unlike the [original implementation](https://cran.r-project.org/web/packages/Ckmeans.1d.dp/index.html),
 * this implementation does not include any code to automatically determine
 * the optimal number of clusters: this information needs to be explicitly
 * provided.
 *
 * ### References
 * _Ckmeans.1d.dp: Optimal k-means Clustering in One Dimension by Dynamic
 * Programming_ Haizhou Wang and Mingzhou Song ISSN 2073-4859
 *
 * from The R Journal Vol. 3/2, December 2011
 * @param {Array<number>} x input data, as an array of number values
 * @param {number} nClusters number of desired classes. This cannot be
 * greater than the number of values in the data array.
 * @returns {Array<Array<number>>} clustered input
 * @throws {Error} if the number of requested clusters is higher than the size of the data
 * @example
 * ckmeans([-1, 2, -1, 2, 4, 5, 6, -1, 2, -1], 3);
 * // The input, clustered into groups of similar numbers.
 * //= [[-1, -1, -1, -1], [2, 2, 2], [4, 5, 6]]);
 */
function ckmeans(x /*: Array<number> */, nClusters /*: number */) /*: Array<Array<number>> */{

    if (nClusters > x.length) {
        throw new Error('cannot generate more classes than there are data values');
    }

    var sorted = numericSort(x),

    // we'll use this as the maximum number of clusters
    uniqueCount = uniqueCountSorted(sorted);

    // if all of the input values are identical, there's one cluster
    // with all of the input in it.
    if (uniqueCount === 1) {
        return [sorted];
    }

    // named 'S' originally
    var matrix = makeMatrix(nClusters, sorted.length),

    // named 'J' originally
    backtrackMatrix = makeMatrix(nClusters, sorted.length);

    // This is a dynamic programming way to solve the problem of minimizing
    // within-cluster sum of squares. It's similar to linear regression
    // in this way, and this calculation incrementally computes the
    // sum of squares that are later read.
    fillMatrices(sorted, matrix, backtrackMatrix);

    // The real work of Ckmeans clustering happens in the matrix generation:
    // the generated matrices encode all possible clustering combinations, and
    // once they're generated we can solve for the best clustering groups
    // very quickly.
    var clusters = [],
        clusterRight = backtrackMatrix[0].length - 1;

    // Backtrack the clusters from the dynamic programming matrix. This
    // starts at the bottom-right corner of the matrix (if the top-left is 0, 0),
    // and moves the cluster target with the loop.
    for (var cluster = backtrackMatrix.length - 1; cluster >= 0; cluster--) {

        var clusterLeft = backtrackMatrix[cluster][clusterRight];

        // fill the cluster from the sorted input by taking a slice of the
        // array. the backtrack matrix makes this easy - it stores the
        // indexes where the cluster should start and end.
        clusters[cluster] = sorted.slice(clusterLeft, clusterRight + 1);

        if (cluster > 0) {
            clusterRight = clusterLeft - 1;
        }
    }

    return clusters;
}

module.exports = ckmeans;

/***/ }),
/* 548 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var max = __webpack_require__(225),
    min = __webpack_require__(224);

/**
 * Given an array of x, this will find the extent of the
 * x and return an array of breaks that can be used
 * to categorize the x into a number of classes. The
 * returned array will always be 1 longer than the number of
 * classes because it includes the minimum value.
 *
 * @param {Array<number>} x an array of number values
 * @param {number} nClasses number of desired classes
 * @returns {Array<number>} array of class break positions
 * @example
 * equalIntervalBreaks([1, 2, 3, 4, 5, 6], 4); //= [1, 2.25, 3.5, 4.75, 6]
 */
function equalIntervalBreaks(x /*: Array<number> */, nClasses /*:number*/) /*: Array<number> */{

    if (x.length < 2) {
        return x;
    }

    var theMin = min(x),
        theMax = max(x);

    // the first break will always be the minimum value
    // in the xset
    var breaks = [theMin];

    // The size of each break is the full range of the x
    // divided by the number of classes requested
    var breakSize = (theMax - theMin) / nClasses;

    // In the case of nClasses = 1, this loop won't run
    // and the returned breaks will be [min, max]
    for (var i = 1; i < nClasses; i++) {
        breaks.push(breaks[0] + breakSize * i);
    }

    // the last break will always be the
    // maximum.
    breaks.push(theMax);

    return breaks;
}

module.exports = equalIntervalBreaks;

/***/ }),
/* 549 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var sampleCovariance = __webpack_require__(230);
var sampleStandardDeviation = __webpack_require__(231);

/**
 * The [correlation](http://en.wikipedia.org/wiki/Correlation_and_dependence) is
 * a measure of how correlated two datasets are, between -1 and 1
 *
 * @param {Array<number>} x first input
 * @param {Array<number>} y second input
 * @returns {number} sample correlation
 * @example
 * sampleCorrelation([1, 2, 3, 4, 5, 6], [2, 2, 3, 4, 5, 60]).toFixed(2);
 * // => '0.69'
 */
function sampleCorrelation(x /*: Array<number> */, y /*: Array<number> */) /*:number*/{
    var cov = sampleCovariance(x, y),
        xstd = sampleStandardDeviation(x),
        ystd = sampleStandardDeviation(y);

    return cov / xstd / ystd;
}

module.exports = sampleCorrelation;

/***/ }),
/* 550 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var mean = __webpack_require__(23);

/**
 * [Skewness](http://en.wikipedia.org/wiki/Skewness) is
 * a measure of the extent to which a probability distribution of a
 * real-valued random variable "leans" to one side of the mean.
 * The skewness value can be positive or negative, or even undefined.
 *
 * Implementation is based on the adjusted Fisher-Pearson standardized
 * moment coefficient, which is the version found in Excel and several
 * statistical packages including Minitab, SAS and SPSS.
 *
 * @since 4.1.0
 * @param {Array<number>} x a sample of 3 or more data points
 * @returns {number} sample skewness
 * @throws {Error} if x has length less than 3
 * @example
 * sampleSkewness([2, 4, 6, 3, 1]); // => 0.590128656384365
 */
function sampleSkewness(x /*: Array<number> */) /*:number*/{

    if (x.length < 3) {
        throw new Error('sampleSkewness requires at least three data points');
    }

    var meanValue = mean(x);
    var tempValue;
    var sumSquaredDeviations = 0;
    var sumCubedDeviations = 0;

    for (var i = 0; i < x.length; i++) {
        tempValue = x[i] - meanValue;
        sumSquaredDeviations += tempValue * tempValue;
        sumCubedDeviations += tempValue * tempValue * tempValue;
    }

    // this is Bessels' Correction: an adjustment made to sample statistics
    // that allows for the reduced degree of freedom entailed in calculating
    // values from samples rather than complete populations.
    var besselsCorrection = x.length - 1;

    // Find the mean value of that list
    var theSampleStandardDeviation = Math.sqrt(sumSquaredDeviations / besselsCorrection);

    var n = x.length,
        cubedS = Math.pow(theSampleStandardDeviation, 3);

    return n * sumCubedDeviations / ((n - 1) * (n - 2) * cubedS);
}

module.exports = sampleSkewness;

/***/ }),
/* 551 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var mean = __webpack_require__(23);

/**
 * [Kurtosis](http://en.wikipedia.org/wiki/Kurtosis) is
 * a measure of the heaviness of a distribution's tails relative to its
 * variance. The kurtosis value can be positive or negative, or even undefined.
 *
 * Implementation is based on Fisher's excess kurtosis definition and uses 
 * unbiased moment estimators. This is the version found in Excel and available 
 * in several statistical packages, including SAS and SciPy.
 *
 * @param {Array<number>} x a sample of 4 or more data points
 * @returns {number} sample kurtosis
 * @throws {Error} if x has length less than 4
 * @example
 * sampleKurtosis([1, 2, 2, 3, 5]); // => 1.4555765595463122
 */
function sampleKurtosis(x /*: Array<number> */) /*:number*/{

    var n = x.length;

    if (n < 4) {
        throw new Error('sampleKurtosis requires at least four data points');
    }

    var meanValue = mean(x);
    var tempValue;
    var secondCentralMoment = 0;
    var fourthCentralMoment = 0;

    for (var i = 0; i < n; i++) {
        tempValue = x[i] - meanValue;
        secondCentralMoment += tempValue * tempValue;
        fourthCentralMoment += tempValue * tempValue * tempValue * tempValue;
    }

    return (n - 1) / ((n - 2) * (n - 3)) * (n * (n + 1) * fourthCentralMoment / (secondCentralMoment * secondCentralMoment) - 3 * (n - 1));
}

module.exports = sampleKurtosis;

/***/ }),
/* 552 */
/***/ (function(module, exports) {



/**
 * Implementation of [Heap's Algorithm](https://en.wikipedia.org/wiki/Heap%27s_algorithm)
 * for generating permutations.
 *
 * @param {Array} elements any type of data
 * @returns {Array<Array>} array of permutations
 */
function permutationsHeap /*:: <T> */(elements /*: Array<T> */) /*: Array<Array<T>> */{
    var indexes = new Array(elements.length);
    var permutations = [elements.slice()];

    for (var i = 0; i < elements.length; i++) {
        indexes[i] = 0;
    }

    for (i = 0; i < elements.length;) {
        if (indexes[i] < i) {

            // At odd indexes, swap from indexes[i] instead
            // of from the beginning of the array
            var swapFrom = 0;
            if (i % 2 !== 0) {
                swapFrom = indexes[i];
            }

            // swap between swapFrom and i, using
            // a temporary variable as storage.
            var temp = elements[swapFrom];
            elements[swapFrom] = elements[i];
            elements[i] = temp;

            permutations.push(elements.slice());
            indexes[i]++;
            i = 0;
        } else {
            indexes[i] = 0;
            i++;
        }
    }

    return permutations;
}

module.exports = permutationsHeap;

/***/ }),
/* 553 */
/***/ (function(module, exports) {


/**
 * Implementation of Combinations
 * Combinations are unique subsets of a collection - in this case, k x from a collection at a time.
 * https://en.wikipedia.org/wiki/Combination
 * @param {Array} x any type of data
 * @param {int} k the number of objects in each group (without replacement)
 * @returns {Array<Array>} array of permutations
 * @example
 * combinations([1, 2, 3], 2); // => [[1,2], [1,3], [2,3]]
 */

function combinations(x /*: Array<any> */, k /*: number */) {
    var i;
    var subI;
    var combinationList = [];
    var subsetCombinations;
    var next;

    for (i = 0; i < x.length; i++) {
        if (k === 1) {
            combinationList.push([x[i]]);
        } else {
            subsetCombinations = combinations(x.slice(i + 1, x.length), k - 1);
            for (subI = 0; subI < subsetCombinations.length; subI++) {
                next = subsetCombinations[subI];
                next.unshift(x[i]);
                combinationList.push(next);
            }
        }
    }
    return combinationList;
}

module.exports = combinations;

/***/ }),
/* 554 */
/***/ (function(module, exports) {



/**
 * Implementation of [Combinations](https://en.wikipedia.org/wiki/Combination) with replacement
 * Combinations are unique subsets of a collection - in this case, k x from a collection at a time.
 * 'With replacement' means that a given element can be chosen multiple times.
 * Unlike permutation, order doesn't matter for combinations.
 * 
 * @param {Array} x any type of data
 * @param {int} k the number of objects in each group (without replacement)
 * @returns {Array<Array>} array of permutations
 * @example
 * combinationsReplacement([1, 2], 2); // => [[1, 1], [1, 2], [2, 2]]
 */
function combinationsReplacement(x /*: Array<any> */
, k /*: number */) {

    var combinationList = [];

    for (var i = 0; i < x.length; i++) {
        if (k === 1) {
            // If we're requested to find only one element, we don't need
            // to recurse: just push `x[i]` onto the list of combinations.
            combinationList.push([x[i]]);
        } else {
            // Otherwise, recursively find combinations, given `k - 1`. Note that
            // we request `k - 1`, so if you were looking for k=3 combinations, we're
            // requesting k=2. This -1 gets reversed in the for loop right after this
            // code, since we concatenate `x[i]` onto the selected combinations,
            // bringing `k` back up to your requested level.
            // This recursion may go many levels deep, since it only stops once
            // k=1.
            var subsetCombinations = combinationsReplacement(x.slice(i, x.length), k - 1);

            for (var j = 0; j < subsetCombinations.length; j++) {
                combinationList.push([x[i]].concat(subsetCombinations[j]));
            }
        }
    }

    return combinationList;
}

module.exports = combinationsReplacement;

/***/ }),
/* 555 */
/***/ (function(module, exports) {


/* @flow */

/**
 * When adding a new value to a list, one does not have to necessary
 * recompute the mean of the list in linear time. They can instead use
 * this function to compute the new mean by providing the current mean,
 * the number of elements in the list that produced it and the new
 * value to add.
 *
 * @since 2.5.0
 * @param {number} mean current mean
 * @param {number} n number of items in the list
 * @param {number} newValue the added value
 * @returns {number} the new mean
 *
 * @example
 * addToMean(14, 5, 53); // => 20.5
 */
function addToMean(mean /*: number*/, n /*: number */, newValue /*: number */) /*: number */{
  return mean + (newValue - mean) / (n + 1);
}

module.exports = addToMean;

/***/ }),
/* 556 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var combineMeans = __webpack_require__(232);

/**
 * When combining two lists of values for which one already knows the variances,
 * one does not have to necessary recompute the variance of the combined lists
 * in linear time. They can instead use this function to compute the combined
 * variance by providing the variance, mean & number of values of the first list
 * and the variance, mean & number of values of the second list.
 *
 * @since 3.0.0
 * @param {number} variance1 variance of the first list
 * @param {number} mean1 mean of the first list
 * @param {number} n1 number of items in the first list
 * @param {number} variance2 variance of the second list
 * @param {number} mean2 mean of the second list
 * @param {number} n2 number of items in the second list
 * @returns {number} the combined mean
 *
 * @example
 * combineVariances(14 / 3, 5, 3, 8 / 3, 4, 3); // => 47 / 12
 */
function combineVariances(variance1 /*: number*/
, mean1 /*: number*/
, n1 /*: number */
, variance2 /*: number*/
, mean2 /*: number*/
, n2 /*: number */) /*: number */{

  var newMean = combineMeans(mean1, n1, mean2, n2);

  return (n1 * (variance1 + Math.pow(mean1 - newMean, 2)) + n2 * (variance2 + Math.pow(mean2 - newMean, 2))) / (n1 + n2);
}

module.exports = combineVariances;

/***/ }),
/* 557 */
/***/ (function(module, exports) {


/* @flow */

/**
 * The [Geometric Mean](https://en.wikipedia.org/wiki/Geometric_mean) is
 * a mean function that is more useful for numbers in different
 * ranges.
 *
 * This is the nth root of the input numbers multiplied by each other.
 *
 * The geometric mean is often useful for
 * **[proportional growth](https://en.wikipedia.org/wiki/Geometric_mean#Proportional_growth)**: given
 * growth rates for multiple years, like _80%, 16.66% and 42.85%_, a simple
 * mean will incorrectly estimate an average growth rate, whereas a geometric
 * mean will correctly estimate a growth rate that, over those years,
 * will yield the same end value.
 *
 * This runs on `O(n)`, linear time in respect to the array
 *
 * @param {Array<number>} x sample of one or more data points
 * @returns {number} geometric mean
 * @throws {Error} if x is empty
 * @throws {Error} if x contains a negative number
 * @example
 * var growthRates = [1.80, 1.166666, 1.428571];
 * var averageGrowth = geometricMean(growthRates);
 * var averageGrowthRates = [averageGrowth, averageGrowth, averageGrowth];
 * var startingValue = 10;
 * var startingValueMean = 10;
 * growthRates.forEach(function(rate) {
 *   startingValue *= rate;
 * });
 * averageGrowthRates.forEach(function(rate) {
 *   startingValueMean *= rate;
 * });
 * startingValueMean === startingValue;
 */
function geometricMean(x /*: Array<number> */) {
    // The mean of no numbers is null
    if (x.length === 0) {
        throw new Error('geometricMean requires at least one data point');
    }

    // the starting value.
    var value = 1;

    for (var i = 0; i < x.length; i++) {
        // the geometric mean is only valid for positive numbers
        if (x[i] <= 0) {
            throw new Error('geometricMean requires only positive numbers as input');
        }

        // repeatedly multiply the value by each number
        value *= x[i];
    }

    return Math.pow(value, 1 / x.length);
}

module.exports = geometricMean;

/***/ }),
/* 558 */
/***/ (function(module, exports) {


/* @flow */

/**
 * The [Harmonic Mean](https://en.wikipedia.org/wiki/Harmonic_mean) is
 * a mean function typically used to find the average of rates.
 * This mean is calculated by taking the reciprocal of the arithmetic mean
 * of the reciprocals of the input numbers.
 *
 * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):
 * a method of finding a typical or central value of a set of numbers.
 *
 * This runs on `O(n)`, linear time in respect to the array.
 *
 * @param {Array<number>} x sample of one or more data points
 * @returns {number} harmonic mean
 * @throws {Error} if x is empty
 * @throws {Error} if x contains a negative number
 * @example
 * harmonicMean([2, 3]).toFixed(2) // => '2.40'
 */
function harmonicMean(x /*: Array<number> */) {
    // The mean of no numbers is null
    if (x.length === 0) {
        throw new Error('harmonicMean requires at least one data point');
    }

    var reciprocalSum = 0;

    for (var i = 0; i < x.length; i++) {
        // the harmonic mean is only valid for positive numbers
        if (x[i] <= 0) {
            throw new Error('harmonicMean requires only positive numbers as input');
        }

        reciprocalSum += 1 / x[i];
    }

    // divide n by the the reciprocal sum
    return x.length / reciprocalSum;
}

module.exports = harmonicMean;

/***/ }),
/* 559 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var quantileSorted = __webpack_require__(116);

/**
 * The [median](http://en.wikipedia.org/wiki/Median) is
 * the middle number of a list. This is often a good indicator of 'the middle'
 * when there are outliers that skew the `mean()` value.
 * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):
 * a method of finding a typical or central value of a set of numbers.
 *
 * The median isn't necessarily one of the elements in the list: the value
 * can be the average of two elements if the list has an even length
 * and the two central values are different.
 *
 * @param {Array<number>} sorted input
 * @returns {number} median value
 * @example
 * medianSorted([10, 2, 5, 100, 2, 1]); // => 52.5
 */
function medianSorted(sorted /*: Array<number> */) /*:number*/{
  return quantileSorted(sorted, 0.5);
}

module.exports = medianSorted;

/***/ }),
/* 560 */
/***/ (function(module, exports) {


/* @flow */

/**
 * When removing a value from a list, one does not have to necessary
 * recompute the mean of the list in linear time. They can instead use
 * this function to compute the new mean by providing the current mean,
 * the number of elements in the list that produced it and the value to remove.
 *
 * @since 3.0.0
 * @param {number} mean current mean
 * @param {number} n number of items in the list
 * @param {number} value the value to remove
 * @returns {number} the new mean
 *
 * @example
 * subtractFromMean(20.5, 6, 53); // => 14
 */
function subtractFromMean(mean /*: number*/, n /*: number */, value /*: number */) /*: number */{
  return (mean * n - value) / (n - 1);
}

module.exports = subtractFromMean;

/***/ }),
/* 561 */
/***/ (function(module, exports) {


/* @flow */

/**
 * The Root Mean Square (RMS) is
 * a mean function used as a measure of the magnitude of a set
 * of numbers, regardless of their sign.
 * This is the square root of the mean of the squares of the
 * input numbers.
 * This runs on `O(n)`, linear time in respect to the array
 *
 * @param {Array<number>} x a sample of one or more data points
 * @returns {number} root mean square
 * @throws {Error} if x is empty
 * @example
 * rootMeanSquare([-1, 1, -1, 1]); // => 1
 */
function rootMeanSquare(x /*: Array<number> */) /*:number*/{
    if (x.length === 0) {
        throw new Error('rootMeanSquare requires at least one data point');
    }

    var sumOfSquares = 0;
    for (var i = 0; i < x.length; i++) {
        sumOfSquares += Math.pow(x[i], 2);
    }

    return Math.sqrt(sumOfSquares / x.length);
}

module.exports = rootMeanSquare;

/***/ }),
/* 562 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var standardDeviation = __webpack_require__(219);
var mean = __webpack_require__(23);

/**
 * This is to compute [a one-sample t-test](https://en.wikipedia.org/wiki/Student%27s_t-test#One-sample_t-test), comparing the mean
 * of a sample to a known value, x.
 *
 * in this case, we're trying to determine whether the
 * population mean is equal to the value that we know, which is `x`
 * here. usually the results here are used to look up a
 * [p-value](http://en.wikipedia.org/wiki/P-value), which, for
 * a certain level of significance, will let you determine that the
 * null hypothesis can or cannot be rejected.
 *
 * @param {Array<number>} x sample of one or more numbers
 * @param {number} expectedValue expected value of the population mean
 * @returns {number} value
 * @example
 * tTest([1, 2, 3, 4, 5, 6], 3.385).toFixed(2); // => '0.16'
 */
function tTest(x /*: Array<number> */, expectedValue /*: number */) /*:number*/{
  // The mean of the sample
  var sampleMean = mean(x);

  // The standard deviation of the sample
  var sd = standardDeviation(x);

  // Square root the length of the sample
  var rootN = Math.sqrt(x.length);

  // returning the t value
  return (sampleMean - expectedValue) / (sd / rootN);
}

module.exports = tTest;

/***/ }),
/* 563 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var mean = __webpack_require__(23);
var sampleVariance = __webpack_require__(117);

/**
 * This is to compute [two sample t-test](http://en.wikipedia.org/wiki/Student's_t-test).
 * Tests whether "mean(X)-mean(Y) = difference", (
 * in the most common case, we often have `difference == 0` to test if two samples
 * are likely to be taken from populations with the same mean value) with
 * no prior knowledge on standard deviations of both samples
 * other than the fact that they have the same standard deviation.
 *
 * Usually the results here are used to look up a
 * [p-value](http://en.wikipedia.org/wiki/P-value), which, for
 * a certain level of significance, will let you determine that the
 * null hypothesis can or cannot be rejected.
 *
 * `diff` can be omitted if it equals 0.
 *
 * [This is used to confirm or deny](http://www.monarchlab.org/Lab/Research/Stats/2SampleT.aspx)
 * a null hypothesis that the two populations that have been sampled into
 * `sampleX` and `sampleY` are equal to each other.
 *
 * @param {Array<number>} sampleX a sample as an array of numbers
 * @param {Array<number>} sampleY a sample as an array of numbers
 * @param {number} [difference=0]
 * @returns {number} test result
 * @example
 * ss.tTestTwoSample([1, 2, 3, 4], [3, 4, 5, 6], 0); //= -2.1908902300206643
 */
function tTestTwoSample(sampleX /*: Array<number> */
, sampleY /*: Array<number> */
, difference /*: number */) {
    var n = sampleX.length,
        m = sampleY.length;

    // If either sample doesn't actually have any values, we can't
    // compute this at all, so we return `null`.
    if (!n || !m) {
        return null;
    }

    // default difference (mu) is zero
    if (!difference) {
        difference = 0;
    }

    var meanX = mean(sampleX),
        meanY = mean(sampleY),
        sampleVarianceX = sampleVariance(sampleX),
        sampleVarianceY = sampleVariance(sampleY);

    if (typeof meanX === 'number' && typeof meanY === 'number' && typeof sampleVarianceX === 'number' && typeof sampleVarianceY === 'number') {
        var weightedVariance = ((n - 1) * sampleVarianceX + (m - 1) * sampleVarianceY) / (n + m - 2);

        return (meanX - meanY - difference) / Math.sqrt(weightedVariance * (1 / n + 1 / m));
    }
}

module.exports = tTestTwoSample;

/***/ }),
/* 564 */
/***/ (function(module, exports) {


/* @flow */

/**
 * [Bayesian Classifier](http://en.wikipedia.org/wiki/Naive_Bayes_classifier)
 *
 * This is a naïve bayesian classifier that takes
 * singly-nested objects.
 *
 * @class
 * @example
 * var bayes = new BayesianClassifier();
 * bayes.train({
 *   species: 'Cat'
 * }, 'animal');
 * var result = bayes.score({
 *   species: 'Cat'
 * })
 * // result
 * // {
 * //   animal: 1
 * // }
 */
function BayesianClassifier() {
    // The number of items that are currently
    // classified in the model
    this.totalCount = 0;
    // Every item classified in the model
    this.data = {};
}

/**
 * Train the classifier with a new item, which has a single
 * dimension of Javascript literal keys and values.
 *
 * @param {Object} item an object with singly-deep properties
 * @param {string} category the category this item belongs to
 * @return {undefined} adds the item to the classifier
 */
BayesianClassifier.prototype.train = function (item, category) {
    // If the data object doesn't have any values
    // for this category, create a new object for it.
    if (!this.data[category]) {
        this.data[category] = {};
    }

    // Iterate through each key in the item.
    for (var k in item) {
        var v = item[k];
        // Initialize the nested object `data[category][k][item[k]]`
        // with an object of keys that equal 0.
        if (this.data[category][k] === undefined) {
            this.data[category][k] = {};
        }
        if (this.data[category][k][v] === undefined) {
            this.data[category][k][v] = 0;
        }

        // And increment the key for this key/value combination.
        this.data[category][k][v]++;
    }

    // Increment the number of items classified
    this.totalCount++;
};

/**
 * Generate a score of how well this item matches all
 * possible categories based on its attributes
 *
 * @param {Object} item an item in the same format as with train
 * @returns {Object} of probabilities that this item belongs to a
 * given category.
 */
BayesianClassifier.prototype.score = function (item) {
    // Initialize an empty array of odds per category.
    var odds = {},
        category;
    // Iterate through each key in the item,
    // then iterate through each category that has been used
    // in previous calls to `.train()`
    for (var k in item) {
        var v = item[k];
        for (category in this.data) {
            // Create an empty object for storing key - value combinations
            // for this category.
            odds[category] = {};

            // If this item doesn't even have a property, it counts for nothing,
            // but if it does have the property that we're looking for from
            // the item to categorize, it counts based on how popular it is
            // versus the whole population.
            if (this.data[category][k]) {
                odds[category][k + '_' + v] = (this.data[category][k][v] || 0) / this.totalCount;
            } else {
                odds[category][k + '_' + v] = 0;
            }
        }
    }

    // Set up a new object that will contain sums of these odds by category
    var oddsSums = {};

    for (category in odds) {
        // Tally all of the odds for each category-combination pair -
        // the non-existence of a category does not add anything to the
        // score.
        oddsSums[category] = 0;
        for (var combination in odds[category]) {
            oddsSums[category] += odds[category][combination];
        }
    }

    return oddsSums;
};

module.exports = BayesianClassifier;

/***/ }),
/* 565 */
/***/ (function(module, exports) {


/* @flow */

/**
 * This is a single-layer [Perceptron Classifier](http://en.wikipedia.org/wiki/Perceptron) that takes
 * arrays of numbers and predicts whether they should be classified
 * as either 0 or 1 (negative or positive examples).
 * @class
 * @example
 * // Create the model
 * var p = new PerceptronModel();
 * // Train the model with input with a diagonal boundary.
 * for (var i = 0; i < 5; i++) {
 *     p.train([1, 1], 1);
 *     p.train([0, 1], 0);
 *     p.train([1, 0], 0);
 *     p.train([0, 0], 0);
 * }
 * p.predict([0, 0]); // 0
 * p.predict([0, 1]); // 0
 * p.predict([1, 0]); // 0
 * p.predict([1, 1]); // 1
 */
function PerceptronModel() {
    // The weights, or coefficients of the model;
    // weights are only populated when training with data.
    this.weights = [];
    // The bias term, or intercept; it is also a weight but
    // it's stored separately for convenience as it is always
    // multiplied by one.
    this.bias = 0;
}

/**
 * **Predict**: Use an array of features with the weight array and bias
 * to predict whether an example is labeled 0 or 1.
 *
 * @param {Array<number>} features an array of features as numbers
 * @returns {number} 1 if the score is over 0, otherwise 0
 */
PerceptronModel.prototype.predict = function (features) {

    // Only predict if previously trained
    // on the same size feature array(s).
    if (features.length !== this.weights.length) {
        return null;
    }

    // Calculate the sum of features times weights,
    // with the bias added (implicitly times one).
    var score = 0;
    for (var i = 0; i < this.weights.length; i++) {
        score += this.weights[i] * features[i];
    }
    score += this.bias;

    // Classify as 1 if the score is over 0, otherwise 0.
    if (score > 0) {
        return 1;
    } else {
        return 0;
    }
};

/**
 * **Train** the classifier with a new example, which is
 * a numeric array of features and a 0 or 1 label.
 *
 * @param {Array<number>} features an array of features as numbers
 * @param {number} label either 0 or 1
 * @returns {PerceptronModel} this
 */
PerceptronModel.prototype.train = function (features, label) {
    // Require that only labels of 0 or 1 are considered.
    if (label !== 0 && label !== 1) {
        return null;
    }
    // The length of the feature array determines
    // the length of the weight array.
    // The perceptron will continue learning as long as
    // it keeps seeing feature arrays of the same length.
    // When it sees a new data shape, it initializes.
    if (features.length !== this.weights.length) {
        this.weights = features;
        this.bias = 1;
    }
    // Make a prediction based on current weights.
    var prediction = this.predict(features);
    // Update the weights if the prediction is wrong.
    if (prediction !== label) {
        var gradient = label - prediction;
        for (var i = 0; i < this.weights.length; i++) {
            this.weights[i] += gradient * features[i];
        }
        this.bias += gradient;
    }
    return this;
};

module.exports = PerceptronModel;

/***/ }),
/* 566 */
/***/ (function(module, exports) {


/* @flow */

/**
 * A [Factorial](https://en.wikipedia.org/wiki/Factorial), usually written n!, is the product of all positive
 * integers less than or equal to n. Often factorial is implemented
 * recursively, but this iterative approach is significantly faster
 * and simpler.
 *
 * @param {number} n input, must be an integer number 1 or greater
 * @returns {number} factorial: n!
 * @throws {Error} if n is less than 0 or not an integer
 * @example
 * factorial(5); // => 120
 */
function factorial(n /*: number */) /*: number */{

    // factorial is mathematically undefined for negative numbers
    if (n < 0) {
        throw new Error('factorial requires a non-negative value');
    }

    if (Math.floor(n) !== n) {
        throw new Error('factorial requires an integer input');
    }

    // typically you'll expand the factorial function going down, like
    // 5! = 5 * 4 * 3 * 2 * 1. This is going in the opposite direction,
    // counting from 2 up to the number in question, and since anything
    // multiplied by 1 is itself, the loop only needs to start at 2.
    var accumulator = 1;
    for (var i = 2; i <= n; i++) {
        // for each number up to and including the number `n`, multiply
        // the accumulator my that number.
        accumulator *= i;
    }
    return accumulator;
}

module.exports = factorial;

/***/ }),
/* 567 */
/***/ (function(module, exports) {


/* @flow */

/**
 * The [Bernoulli distribution](http://en.wikipedia.org/wiki/Bernoulli_distribution)
 * is the probability discrete
 * distribution of a random variable which takes value 1 with success
 * probability `p` and value 0 with failure
 * probability `q` = 1 - `p`. It can be used, for example, to represent the
 * toss of a coin, where "1" is defined to mean "heads" and "0" is defined
 * to mean "tails" (or vice versa). It is
 * a special case of a Binomial Distribution
 * where `n` = 1.
 *
 * @param {number} p input value, between 0 and 1 inclusive
 * @returns {number[]} values of bernoulli distribution at this point
 * @throws {Error} if p is outside 0 and 1
 * @example
 * bernoulliDistribution(0.3); // => [0.7, 0.3]
 */
function bernoulliDistribution(p /*: number */) /*: number[] */{
    // Check that `p` is a valid probability (0 ≤ p ≤ 1)
    if (p < 0 || p > 1) {
        throw new Error('bernoulliDistribution requires probability to be between 0 and 1 inclusive');
    }

    return [1 - p, p];
}

module.exports = bernoulliDistribution;

/***/ }),
/* 568 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var epsilon = __webpack_require__(70);

/**
 * The [Binomial Distribution](http://en.wikipedia.org/wiki/Binomial_distribution) is the discrete probability
 * distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields
 * success with probability `probability`. Such a success/failure experiment is also called a Bernoulli experiment or
 * Bernoulli trial; when trials = 1, the Binomial Distribution is a Bernoulli Distribution.
 *
 * @param {number} trials number of trials to simulate
 * @param {number} probability
 * @returns {number[]} output
 */
function binomialDistribution(trials /*: number */
, probability /*: number */) /*: ?number[] */{
    // Check that `p` is a valid probability (0 ≤ p ≤ 1),
    // that `n` is an integer, strictly positive.
    if (probability < 0 || probability > 1 || trials <= 0 || trials % 1 !== 0) {
        return undefined;
    }

    // We initialize `x`, the random variable, and `accumulator`, an accumulator
    // for the cumulative distribution function to 0. `distribution_functions`
    // is the object we'll return with the `probability_of_x` and the
    // `cumulativeProbability_of_x`, as well as the calculated mean &
    // variance. We iterate until the `cumulativeProbability_of_x` is
    // within `epsilon` of 1.0.
    var x = 0,
        cumulativeProbability = 0,
        cells = [],
        binomialCoefficient = 1;

    // This algorithm iterates through each potential outcome,
    // until the `cumulativeProbability` is very close to 1, at
    // which point we've defined the vast majority of outcomes
    do {
        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)
        cells[x] = binomialCoefficient * Math.pow(probability, x) * Math.pow(1 - probability, trials - x);
        cumulativeProbability += cells[x];
        x++;
        binomialCoefficient = binomialCoefficient * (trials - x + 1) / x;
        // when the cumulativeProbability is nearly 1, we've calculated
        // the useful range of this distribution
    } while (cumulativeProbability < 1 - epsilon);

    return cells;
}

module.exports = binomialDistribution;

/***/ }),
/* 569 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var epsilon = __webpack_require__(70);

/**
 * The [Poisson Distribution](http://en.wikipedia.org/wiki/Poisson_distribution)
 * is a discrete probability distribution that expresses the probability
 * of a given number of events occurring in a fixed interval of time
 * and/or space if these events occur with a known average rate and
 * independently of the time since the last event.
 *
 * The Poisson Distribution is characterized by the strictly positive
 * mean arrival or occurrence rate, `λ`.
 *
 * @param {number} lambda location poisson distribution
 * @returns {number[]} values of poisson distribution at that point
 */
function poissonDistribution(lambda /*: number */) /*: ?number[] */{
    // Check that lambda is strictly positive
    if (lambda <= 0) {
        return undefined;
    }

    // our current place in the distribution
    var x = 0,

    // and we keep track of the current cumulative probability, in
    // order to know when to stop calculating chances.
    cumulativeProbability = 0,

    // the calculated cells to be returned
    cells = [],
        factorialX = 1;

    // This algorithm iterates through each potential outcome,
    // until the `cumulativeProbability` is very close to 1, at
    // which point we've defined the vast majority of outcomes
    do {
        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)
        cells[x] = Math.exp(-lambda) * Math.pow(lambda, x) / factorialX;
        cumulativeProbability += cells[x];
        x++;
        factorialX *= x;
        // when the cumulativeProbability is nearly 1, we've calculated
        // the useful range of this distribution
    } while (cumulativeProbability < 1 - epsilon);

    return cells;
}

module.exports = poissonDistribution;

/***/ }),
/* 570 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var mean = __webpack_require__(23);
var chiSquaredDistributionTable = __webpack_require__(571);

/**
 * The [χ2 (Chi-Squared) Goodness-of-Fit Test](http://en.wikipedia.org/wiki/Goodness_of_fit#Pearson.27s_chi-squared_test)
 * uses a measure of goodness of fit which is the sum of differences between observed and expected outcome frequencies
 * (that is, counts of observations), each squared and divided by the number of observations expected given the
 * hypothesized distribution. The resulting χ2 statistic, `chiSquared`, can be compared to the chi-squared distribution
 * to determine the goodness of fit. In order to determine the degrees of freedom of the chi-squared distribution, one
 * takes the total number of observed frequencies and subtracts the number of estimated parameters. The test statistic
 * follows, approximately, a chi-square distribution with (k − c) degrees of freedom where `k` is the number of non-empty
 * cells and `c` is the number of estimated parameters for the distribution.
 *
 * @param {Array<number>} data
 * @param {Function} distributionType a function that returns a point in a distribution:
 * for instance, binomial, bernoulli, or poisson
 * @param {number} significance
 * @returns {number} chi squared goodness of fit
 * @example
 * // Data from Poisson goodness-of-fit example 10-19 in William W. Hines & Douglas C. Montgomery,
 * // "Probability and Statistics in Engineering and Management Science", Wiley (1980).
 * var data1019 = [
 *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 *     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
 *     2, 2, 2, 2, 2, 2, 2, 2, 2,
 *     3, 3, 3, 3
 * ];
 * ss.chiSquaredGoodnessOfFit(data1019, ss.poissonDistribution, 0.05)); //= false
 */
function chiSquaredGoodnessOfFit(data /*: Array<number> */
, distributionType /*: Function */
, significance /*: number */) /*: boolean */{
    // Estimate from the sample data, a weighted mean.
    var inputMean = mean(data),

    // Calculated value of the χ2 statistic.
    chiSquared = 0,

    // Degrees of freedom, calculated as (number of class intervals -
    // number of hypothesized distribution parameters estimated - 1)
    degreesOfFreedom,

    // Number of hypothesized distribution parameters estimated, expected to be supplied in the distribution test.
    // Lose one degree of freedom for estimating `lambda` from the sample data.
    c = 1,

    // The hypothesized distribution.
    // Generate the hypothesized distribution.
    hypothesizedDistribution = distributionType(inputMean),
        observedFrequencies = [],
        expectedFrequencies = [],
        k;

    // Create an array holding a histogram from the sample data, of
    // the form `{ value: numberOfOcurrences }`
    for (var i = 0; i < data.length; i++) {
        if (observedFrequencies[data[i]] === undefined) {
            observedFrequencies[data[i]] = 0;
        }
        observedFrequencies[data[i]]++;
    }

    // The histogram we created might be sparse - there might be gaps
    // between values. So we iterate through the histogram, making
    // sure that instead of undefined, gaps have 0 values.
    for (i = 0; i < observedFrequencies.length; i++) {
        if (observedFrequencies[i] === undefined) {
            observedFrequencies[i] = 0;
        }
    }

    // Create an array holding a histogram of expected data given the
    // sample size and hypothesized distribution.
    for (k in hypothesizedDistribution) {
        if (k in observedFrequencies) {
            expectedFrequencies[+k] = hypothesizedDistribution[k] * data.length;
        }
    }

    // Working backward through the expected frequencies, collapse classes
    // if less than three observations are expected for a class.
    // This transformation is applied to the observed frequencies as well.
    for (k = expectedFrequencies.length - 1; k >= 0; k--) {
        if (expectedFrequencies[k] < 3) {
            expectedFrequencies[k - 1] += expectedFrequencies[k];
            expectedFrequencies.pop();

            observedFrequencies[k - 1] += observedFrequencies[k];
            observedFrequencies.pop();
        }
    }

    // Iterate through the squared differences between observed & expected
    // frequencies, accumulating the `chiSquared` statistic.
    for (k = 0; k < observedFrequencies.length; k++) {
        chiSquared += Math.pow(observedFrequencies[k] - expectedFrequencies[k], 2) / expectedFrequencies[k];
    }

    // Calculate degrees of freedom for this test and look it up in the
    // `chiSquaredDistributionTable` in order to
    // accept or reject the goodness-of-fit of the hypothesized distribution.
    degreesOfFreedom = observedFrequencies.length - c - 1;
    return chiSquaredDistributionTable[degreesOfFreedom][significance] < chiSquared;
}

module.exports = chiSquaredGoodnessOfFit;

/***/ }),
/* 571 */
/***/ (function(module, exports) {


/* @flow */

/**
 * **Percentage Points of the χ2 (Chi-Squared) Distribution**
 *
 * The [χ2 (Chi-Squared) Distribution](http://en.wikipedia.org/wiki/Chi-squared_distribution) is used in the common
 * chi-squared tests for goodness of fit of an observed distribution to a theoretical one, the independence of two
 * criteria of classification of qualitative data, and in confidence interval estimation for a population standard
 * deviation of a normal distribution from a sample standard deviation.
 *
 * Values from Appendix 1, Table III of William W. Hines & Douglas C. Montgomery, "Probability and Statistics in
 * Engineering and Management Science", Wiley (1980).
 */
var chiSquaredDistributionTable = {
    '1': {
        '0.995': 0,
        '0.99': 0,
        '0.975': 0,
        '0.95': 0,
        '0.9': 0.02,
        '0.5': 0.45,
        '0.1': 2.71,
        '0.05': 3.84,
        '0.025': 5.02,
        '0.01': 6.63,
        '0.005': 7.88
    },
    '2': {
        '0.995': 0.01,
        '0.99': 0.02,
        '0.975': 0.05,
        '0.95': 0.1,
        '0.9': 0.21,
        '0.5': 1.39,
        '0.1': 4.61,
        '0.05': 5.99,
        '0.025': 7.38,
        '0.01': 9.21,
        '0.005': 10.6
    },
    '3': {
        '0.995': 0.07,
        '0.99': 0.11,
        '0.975': 0.22,
        '0.95': 0.35,
        '0.9': 0.58,
        '0.5': 2.37,
        '0.1': 6.25,
        '0.05': 7.81,
        '0.025': 9.35,
        '0.01': 11.34,
        '0.005': 12.84
    },
    '4': {
        '0.995': 0.21,
        '0.99': 0.3,
        '0.975': 0.48,
        '0.95': 0.71,
        '0.9': 1.06,
        '0.5': 3.36,
        '0.1': 7.78,
        '0.05': 9.49,
        '0.025': 11.14,
        '0.01': 13.28,
        '0.005': 14.86
    },
    '5': {
        '0.995': 0.41,
        '0.99': 0.55,
        '0.975': 0.83,
        '0.95': 1.15,
        '0.9': 1.61,
        '0.5': 4.35,
        '0.1': 9.24,
        '0.05': 11.07,
        '0.025': 12.83,
        '0.01': 15.09,
        '0.005': 16.75
    },
    '6': {
        '0.995': 0.68,
        '0.99': 0.87,
        '0.975': 1.24,
        '0.95': 1.64,
        '0.9': 2.2,
        '0.5': 5.35,
        '0.1': 10.65,
        '0.05': 12.59,
        '0.025': 14.45,
        '0.01': 16.81,
        '0.005': 18.55
    },
    '7': {
        '0.995': 0.99,
        '0.99': 1.25,
        '0.975': 1.69,
        '0.95': 2.17,
        '0.9': 2.83,
        '0.5': 6.35,
        '0.1': 12.02,
        '0.05': 14.07,
        '0.025': 16.01,
        '0.01': 18.48,
        '0.005': 20.28
    },
    '8': {
        '0.995': 1.34,
        '0.99': 1.65,
        '0.975': 2.18,
        '0.95': 2.73,
        '0.9': 3.49,
        '0.5': 7.34,
        '0.1': 13.36,
        '0.05': 15.51,
        '0.025': 17.53,
        '0.01': 20.09,
        '0.005': 21.96
    },
    '9': {
        '0.995': 1.73,
        '0.99': 2.09,
        '0.975': 2.7,
        '0.95': 3.33,
        '0.9': 4.17,
        '0.5': 8.34,
        '0.1': 14.68,
        '0.05': 16.92,
        '0.025': 19.02,
        '0.01': 21.67,
        '0.005': 23.59
    },
    '10': {
        '0.995': 2.16,
        '0.99': 2.56,
        '0.975': 3.25,
        '0.95': 3.94,
        '0.9': 4.87,
        '0.5': 9.34,
        '0.1': 15.99,
        '0.05': 18.31,
        '0.025': 20.48,
        '0.01': 23.21,
        '0.005': 25.19
    },
    '11': {
        '0.995': 2.6,
        '0.99': 3.05,
        '0.975': 3.82,
        '0.95': 4.57,
        '0.9': 5.58,
        '0.5': 10.34,
        '0.1': 17.28,
        '0.05': 19.68,
        '0.025': 21.92,
        '0.01': 24.72,
        '0.005': 26.76
    },
    '12': {
        '0.995': 3.07,
        '0.99': 3.57,
        '0.975': 4.4,
        '0.95': 5.23,
        '0.9': 6.3,
        '0.5': 11.34,
        '0.1': 18.55,
        '0.05': 21.03,
        '0.025': 23.34,
        '0.01': 26.22,
        '0.005': 28.3
    },
    '13': {
        '0.995': 3.57,
        '0.99': 4.11,
        '0.975': 5.01,
        '0.95': 5.89,
        '0.9': 7.04,
        '0.5': 12.34,
        '0.1': 19.81,
        '0.05': 22.36,
        '0.025': 24.74,
        '0.01': 27.69,
        '0.005': 29.82
    },
    '14': {
        '0.995': 4.07,
        '0.99': 4.66,
        '0.975': 5.63,
        '0.95': 6.57,
        '0.9': 7.79,
        '0.5': 13.34,
        '0.1': 21.06,
        '0.05': 23.68,
        '0.025': 26.12,
        '0.01': 29.14,
        '0.005': 31.32
    },
    '15': {
        '0.995': 4.6,
        '0.99': 5.23,
        '0.975': 6.27,
        '0.95': 7.26,
        '0.9': 8.55,
        '0.5': 14.34,
        '0.1': 22.31,
        '0.05': 25,
        '0.025': 27.49,
        '0.01': 30.58,
        '0.005': 32.8
    },
    '16': {
        '0.995': 5.14,
        '0.99': 5.81,
        '0.975': 6.91,
        '0.95': 7.96,
        '0.9': 9.31,
        '0.5': 15.34,
        '0.1': 23.54,
        '0.05': 26.3,
        '0.025': 28.85,
        '0.01': 32,
        '0.005': 34.27
    },
    '17': {
        '0.995': 5.7,
        '0.99': 6.41,
        '0.975': 7.56,
        '0.95': 8.67,
        '0.9': 10.09,
        '0.5': 16.34,
        '0.1': 24.77,
        '0.05': 27.59,
        '0.025': 30.19,
        '0.01': 33.41,
        '0.005': 35.72
    },
    '18': {
        '0.995': 6.26,
        '0.99': 7.01,
        '0.975': 8.23,
        '0.95': 9.39,
        '0.9': 10.87,
        '0.5': 17.34,
        '0.1': 25.99,
        '0.05': 28.87,
        '0.025': 31.53,
        '0.01': 34.81,
        '0.005': 37.16
    },
    '19': {
        '0.995': 6.84,
        '0.99': 7.63,
        '0.975': 8.91,
        '0.95': 10.12,
        '0.9': 11.65,
        '0.5': 18.34,
        '0.1': 27.2,
        '0.05': 30.14,
        '0.025': 32.85,
        '0.01': 36.19,
        '0.005': 38.58
    },
    '20': {
        '0.995': 7.43,
        '0.99': 8.26,
        '0.975': 9.59,
        '0.95': 10.85,
        '0.9': 12.44,
        '0.5': 19.34,
        '0.1': 28.41,
        '0.05': 31.41,
        '0.025': 34.17,
        '0.01': 37.57,
        '0.005': 40
    },
    '21': {
        '0.995': 8.03,
        '0.99': 8.9,
        '0.975': 10.28,
        '0.95': 11.59,
        '0.9': 13.24,
        '0.5': 20.34,
        '0.1': 29.62,
        '0.05': 32.67,
        '0.025': 35.48,
        '0.01': 38.93,
        '0.005': 41.4
    },
    '22': {
        '0.995': 8.64,
        '0.99': 9.54,
        '0.975': 10.98,
        '0.95': 12.34,
        '0.9': 14.04,
        '0.5': 21.34,
        '0.1': 30.81,
        '0.05': 33.92,
        '0.025': 36.78,
        '0.01': 40.29,
        '0.005': 42.8
    },
    '23': {
        '0.995': 9.26,
        '0.99': 10.2,
        '0.975': 11.69,
        '0.95': 13.09,
        '0.9': 14.85,
        '0.5': 22.34,
        '0.1': 32.01,
        '0.05': 35.17,
        '0.025': 38.08,
        '0.01': 41.64,
        '0.005': 44.18
    },
    '24': {
        '0.995': 9.89,
        '0.99': 10.86,
        '0.975': 12.4,
        '0.95': 13.85,
        '0.9': 15.66,
        '0.5': 23.34,
        '0.1': 33.2,
        '0.05': 36.42,
        '0.025': 39.36,
        '0.01': 42.98,
        '0.005': 45.56
    },
    '25': {
        '0.995': 10.52,
        '0.99': 11.52,
        '0.975': 13.12,
        '0.95': 14.61,
        '0.9': 16.47,
        '0.5': 24.34,
        '0.1': 34.28,
        '0.05': 37.65,
        '0.025': 40.65,
        '0.01': 44.31,
        '0.005': 46.93
    },
    '26': {
        '0.995': 11.16,
        '0.99': 12.2,
        '0.975': 13.84,
        '0.95': 15.38,
        '0.9': 17.29,
        '0.5': 25.34,
        '0.1': 35.56,
        '0.05': 38.89,
        '0.025': 41.92,
        '0.01': 45.64,
        '0.005': 48.29
    },
    '27': {
        '0.995': 11.81,
        '0.99': 12.88,
        '0.975': 14.57,
        '0.95': 16.15,
        '0.9': 18.11,
        '0.5': 26.34,
        '0.1': 36.74,
        '0.05': 40.11,
        '0.025': 43.19,
        '0.01': 46.96,
        '0.005': 49.65
    },
    '28': {
        '0.995': 12.46,
        '0.99': 13.57,
        '0.975': 15.31,
        '0.95': 16.93,
        '0.9': 18.94,
        '0.5': 27.34,
        '0.1': 37.92,
        '0.05': 41.34,
        '0.025': 44.46,
        '0.01': 48.28,
        '0.005': 50.99
    },
    '29': {
        '0.995': 13.12,
        '0.99': 14.26,
        '0.975': 16.05,
        '0.95': 17.71,
        '0.9': 19.77,
        '0.5': 28.34,
        '0.1': 39.09,
        '0.05': 42.56,
        '0.025': 45.72,
        '0.01': 49.59,
        '0.005': 52.34
    },
    '30': {
        '0.995': 13.79,
        '0.99': 14.95,
        '0.975': 16.79,
        '0.95': 18.49,
        '0.9': 20.6,
        '0.5': 29.34,
        '0.1': 40.26,
        '0.05': 43.77,
        '0.025': 46.98,
        '0.01': 50.89,
        '0.005': 53.67
    },
    '40': {
        '0.995': 20.71,
        '0.99': 22.16,
        '0.975': 24.43,
        '0.95': 26.51,
        '0.9': 29.05,
        '0.5': 39.34,
        '0.1': 51.81,
        '0.05': 55.76,
        '0.025': 59.34,
        '0.01': 63.69,
        '0.005': 66.77
    },
    '50': {
        '0.995': 27.99,
        '0.99': 29.71,
        '0.975': 32.36,
        '0.95': 34.76,
        '0.9': 37.69,
        '0.5': 49.33,
        '0.1': 63.17,
        '0.05': 67.5,
        '0.025': 71.42,
        '0.01': 76.15,
        '0.005': 79.49
    },
    '60': {
        '0.995': 35.53,
        '0.99': 37.48,
        '0.975': 40.48,
        '0.95': 43.19,
        '0.9': 46.46,
        '0.5': 59.33,
        '0.1': 74.4,
        '0.05': 79.08,
        '0.025': 83.3,
        '0.01': 88.38,
        '0.005': 91.95
    },
    '70': {
        '0.995': 43.28,
        '0.99': 45.44,
        '0.975': 48.76,
        '0.95': 51.74,
        '0.9': 55.33,
        '0.5': 69.33,
        '0.1': 85.53,
        '0.05': 90.53,
        '0.025': 95.02,
        '0.01': 100.42,
        '0.005': 104.22
    },
    '80': {
        '0.995': 51.17,
        '0.99': 53.54,
        '0.975': 57.15,
        '0.95': 60.39,
        '0.9': 64.28,
        '0.5': 79.33,
        '0.1': 96.58,
        '0.05': 101.88,
        '0.025': 106.63,
        '0.01': 112.33,
        '0.005': 116.32
    },
    '90': {
        '0.995': 59.2,
        '0.99': 61.75,
        '0.975': 65.65,
        '0.95': 69.13,
        '0.9': 73.29,
        '0.5': 89.33,
        '0.1': 107.57,
        '0.05': 113.14,
        '0.025': 118.14,
        '0.01': 124.12,
        '0.005': 128.3
    },
    '100': {
        '0.995': 67.33,
        '0.99': 70.06,
        '0.975': 74.22,
        '0.95': 77.93,
        '0.9': 82.36,
        '0.5': 99.33,
        '0.1': 118.5,
        '0.05': 124.34,
        '0.025': 129.56,
        '0.01': 135.81,
        '0.005': 140.17
    }
};

module.exports = chiSquaredDistributionTable;

/***/ }),
/* 572 */
/***/ (function(module, exports) {


/* @flow */

/**
 * The [Z-Score, or Standard Score](http://en.wikipedia.org/wiki/Standard_score).
 *
 * The standard score is the number of standard deviations an observation
 * or datum is above or below the mean. Thus, a positive standard score
 * represents a datum above the mean, while a negative standard score
 * represents a datum below the mean. It is a dimensionless quantity
 * obtained by subtracting the population mean from an individual raw
 * score and then dividing the difference by the population standard
 * deviation.
 *
 * The z-score is only defined if one knows the population parameters;
 * if one only has a sample set, then the analogous computation with
 * sample mean and sample standard deviation yields the
 * Student's t-statistic.
 *
 * @param {number} x
 * @param {number} mean
 * @param {number} standardDeviation
 * @return {number} z score
 * @example
 * zScore(78, 80, 5); // => -0.4
 */
function zScore(x /*:number*/, mean /*:number*/, standardDeviation /*:number*/) /*:number*/{
  return (x - mean) / standardDeviation;
}

module.exports = zScore;

/***/ }),
/* 573 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var standardNormalTable = __webpack_require__(233);

/**
 * **[Cumulative Standard Normal Probability](http://en.wikipedia.org/wiki/Standard_normal_table)**
 *
 * Since probability tables cannot be
 * printed for every normal distribution, as there are an infinite variety
 * of normal distributions, it is common practice to convert a normal to a
 * standard normal and then use the standard normal table to find probabilities.
 *
 * You can use `.5 + .5 * errorFunction(x / Math.sqrt(2))` to calculate the probability
 * instead of looking it up in a table.
 *
 * @param {number} z
 * @returns {number} cumulative standard normal probability
 */
function cumulativeStdNormalProbability(z /*:number */) /*:number */{

    // Calculate the position of this value.
    var absZ = Math.abs(z),

    // Each row begins with a different
    // significant digit: 0.5, 0.6, 0.7, and so on. Each value in the table
    // corresponds to a range of 0.01 in the input values, so the value is
    // multiplied by 100.
    index = Math.min(Math.round(absZ * 100), standardNormalTable.length - 1);

    // The index we calculate must be in the table as a positive value,
    // but we still pay attention to whether the input is positive
    // or negative, and flip the output value as a last step.
    if (z >= 0) {
        return standardNormalTable[index];
    } else {
        // due to floating-point arithmetic, values in the table with
        // 4 significant figures can nevertheless end up as repeating
        // fractions when they're computed here.
        return +(1 - standardNormalTable[index]).toFixed(4);
    }
}

module.exports = cumulativeStdNormalProbability;

/***/ }),
/* 574 */
/***/ (function(module, exports) {


/* @flow */

/**
 * **[Gaussian error function](http://en.wikipedia.org/wiki/Error_function)**
 *
 * The `errorFunction(x/(sd * Math.sqrt(2)))` is the probability that a value in a
 * normal distribution with standard deviation sd is within x of the mean.
 *
 * This function returns a numerical approximation to the exact value.
 *
 * @param {number} x input
 * @return {number} error estimation
 * @example
 * errorFunction(1).toFixed(2); // => '0.84'
 */
function errorFunction(x /*: number */) /*: number */{
    var t = 1 / (1 + 0.5 * Math.abs(x));
    var tau = t * Math.exp(-Math.pow(x, 2) - 1.26551223 + 1.00002368 * t + 0.37409196 * Math.pow(t, 2) + 0.09678418 * Math.pow(t, 3) - 0.18628806 * Math.pow(t, 4) + 0.27886807 * Math.pow(t, 5) - 1.13520398 * Math.pow(t, 6) + 1.48851587 * Math.pow(t, 7) - 0.82215223 * Math.pow(t, 8) + 0.17087277 * Math.pow(t, 9));
    if (x >= 0) {
        return 1 - tau;
    } else {
        return tau - 1;
    }
}

module.exports = errorFunction;

/***/ }),
/* 575 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var epsilon = __webpack_require__(70);
var inverseErrorFunction = __webpack_require__(234);

/**
 * The [Probit](http://en.wikipedia.org/wiki/Probit)
 * is the inverse of cumulativeStdNormalProbability(),
 * and is also known as the normal quantile function.
 *
 * It returns the number of standard deviations from the mean
 * where the p'th quantile of values can be found in a normal distribution.
 * So, for example, probit(0.5 + 0.6827/2) ≈ 1 because 68.27% of values are
 * normally found within 1 standard deviation above or below the mean.
 *
 * @param {number} p
 * @returns {number} probit
 */
function probit(p /*: number */) /*: number */{
    if (p === 0) {
        p = epsilon;
    } else if (p >= 1) {
        p = 1 - epsilon;
    }
    return Math.sqrt(2) * inverseErrorFunction(2 * p - 1);
}

module.exports = probit;

/***/ }),
/* 576 */
/***/ (function(module, exports, __webpack_require__) {


/* @flow */

var sign = __webpack_require__(577);
/**
 * [Bisection method](https://en.wikipedia.org/wiki/Bisection_method) is a root-finding 
 * method that repeatedly bisects an interval to find the root.
 * 
 * This function returns a numerical approximation to the exact value.
 * 
 * @param {Function} func input function
 * @param {Number} start - start of interval
 * @param {Number} end - end of interval
 * @param {Number} maxIterations - the maximum number of iterations
 * @param {Number} errorTolerance - the error tolerance
 * @returns {Number} estimated root value
 * @throws {TypeError} Argument func must be a function
 * 
 * @example
 * bisect(Math.cos,0,4,100,0.003); // => 1.572265625
 */
function bisect(func /*: (x: any) => number */
, start /*: number */
, end /*: number */
, maxIterations /*: number */
, errorTolerance /*: number */) /*:number*/{

    if (typeof func !== 'function') throw new TypeError('func must be a function');

    for (var i = 0; i < maxIterations; i++) {
        var output = (start + end) / 2;

        if (func(output) === 0 || Math.abs((end - start) / 2) < errorTolerance) {
            return output;
        }

        if (sign(func(output)) === sign(func(start))) {
            start = output;
        } else {
            end = output;
        }
    }

    throw new Error('maximum number of iterations exceeded');
}

module.exports = bisect;

/***/ }),
/* 577 */
/***/ (function(module, exports) {


/* @flow */

/**
 * [Sign](https://en.wikipedia.org/wiki/Sign_function) is a function 
 * that extracts the sign of a real number
 * 
 * @param {Number} x input value
 * @returns {Number} sign value either 1, 0 or -1
 * @throws {TypeError} if the input argument x is not a number
 * @private
 * 
 * @example
 * sign(2); // => 1
 */
function sign(x /*: number */) /*: number */{
    if (typeof x === 'number') {
        if (x < 0) {
            return -1;
        } else if (x === 0) {
            return 0;
        } else {
            return 1;
        }
    } else {
        throw new TypeError('not a number');
    }
}

module.exports = sign;

/***/ }),
/* 578 */
/***/ (function(module, exports, __webpack_require__) {

var isString = __webpack_require__(7);
var cloneItems = __webpack_require__(107);

var _require = __webpack_require__(2),
    registerConnector = _require.registerConnector;

registerConnector('default', function (dataView, dataSet) {
  if (isString(dataView)) {
    dataView = dataSet.getView(dataView);
  }
  if (!dataView) {
    throw new TypeError('Invalid dataView');
  }
  return cloneItems(dataView.rows);
});

/***/ }),
/* 579 */
/***/ (function(module, exports, __webpack_require__) {

var toString = __webpack_require__(197);

/** Used to generate unique IDs. */
var idCounter = 0;

/**
 * Generates a unique ID. If `prefix` is given, the ID is appended to it.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {string} [prefix=''] The value to prefix the ID with.
 * @returns {string} Returns the unique ID.
 * @example
 *
 * _.uniqueId('contact_');
 * // => 'contact_104'
 *
 * _.uniqueId();
 * // => '105'
 */
function uniqueId(prefix) {
  var id = ++idCounter;
  return toString(prefix) + id;
}

module.exports = uniqueId;

/***/ }),
/* 580 */
/***/ (function(module, exports) {

module.exports = {
  HIERARCHY: 'hierarchy',
  GEO: 'geo',
  GRAPH: 'graph',
  TABLE: 'table',
  GEO_GRATICULE: 'geo-graticule'
};

/***/ }),
/* 581 */
/***/ (function(module, exports, __webpack_require__) {

var isString = __webpack_require__(7);

var _require = __webpack_require__(582),
    dsvFormat = _require.dsvFormat,
    csvParse = _require.csvParse,
    tsvParse = _require.tsvParse;

var _require2 = __webpack_require__(2),
    registerConnector = _require2.registerConnector;

registerConnector('dsv', function (str) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var delimiter = options.delimiter || ',';
  if (!isString(delimiter)) {
    throw new TypeError('Invalid delimiter: must be a string!');
  }
  return dsvFormat(delimiter).parse(str);
});

registerConnector('csv', function (str) {
  return csvParse(str);
});

registerConnector('tsv', function (str) {
  return tsvParse(str);
});

/***/ }),
/* 582 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _dsv = __webpack_require__(118);

Object.defineProperty(exports, "dsvFormat", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_dsv).default;
  }
});

var _csv = __webpack_require__(583);

Object.defineProperty(exports, "csvParse", {
  enumerable: true,
  get: function get() {
    return _csv.csvParse;
  }
});
Object.defineProperty(exports, "csvParseRows", {
  enumerable: true,
  get: function get() {
    return _csv.csvParseRows;
  }
});
Object.defineProperty(exports, "csvFormat", {
  enumerable: true,
  get: function get() {
    return _csv.csvFormat;
  }
});
Object.defineProperty(exports, "csvFormatRows", {
  enumerable: true,
  get: function get() {
    return _csv.csvFormatRows;
  }
});

var _tsv = __webpack_require__(584);

Object.defineProperty(exports, "tsvParse", {
  enumerable: true,
  get: function get() {
    return _tsv.tsvParse;
  }
});
Object.defineProperty(exports, "tsvParseRows", {
  enumerable: true,
  get: function get() {
    return _tsv.tsvParseRows;
  }
});
Object.defineProperty(exports, "tsvFormat", {
  enumerable: true,
  get: function get() {
    return _tsv.tsvFormat;
  }
});
Object.defineProperty(exports, "tsvFormatRows", {
  enumerable: true,
  get: function get() {
    return _tsv.tsvFormatRows;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 583 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.csvFormatRows = exports.csvFormat = exports.csvParseRows = exports.csvParse = undefined;

var _dsv = __webpack_require__(118);

var _dsv2 = _interopRequireDefault(_dsv);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var csv = (0, _dsv2.default)(",");

var csvParse = exports.csvParse = csv.parse;
var csvParseRows = exports.csvParseRows = csv.parseRows;
var csvFormat = exports.csvFormat = csv.format;
var csvFormatRows = exports.csvFormatRows = csv.formatRows;

/***/ }),
/* 584 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.tsvFormatRows = exports.tsvFormat = exports.tsvParseRows = exports.tsvParse = undefined;

var _dsv = __webpack_require__(118);

var _dsv2 = _interopRequireDefault(_dsv);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tsv = (0, _dsv2.default)("\t");

var tsvParse = exports.tsvParse = tsv.parse;
var tsvParseRows = exports.tsvParseRows = tsv.parseRows;
var tsvFormat = exports.tsvFormat = tsv.format;
var tsvFormatRows = exports.tsvFormatRows = tsv.formatRows;

/***/ }),
/* 585 */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(0),
    geoGraticule = _require.geoGraticule;

var _require2 = __webpack_require__(2),
    registerConnector = _require2.registerConnector;

function connector(options, dataView) {
  dataView.dataType = 'geo-graticule';
  var data = geoGraticule().lines();

  data.map(function (row, index) {
    row.index = '' + index;
    return row;
  });

  dataView.rows = data;
  return data;
}

registerConnector('geo-graticule', connector);

module.exports = connector;

/***/ }),
/* 586 */
/***/ (function(module, exports) {


module.exports = parse;

/**
 * expected argument lengths
 * @type {Object}
 */

var length = { a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0

	/**
  * segment pattern
  * @type {RegExp}
  */

};var segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig;

/**
 * parse an svg path data string. Generates an Array
 * of commands where each command is an Array of the
 * form `[command, arg1, arg2, ...]`
 *
 * @param {String} path
 * @return {Array}
 */

function parse(path) {
	var data = [];
	path.replace(segment, function (_, command, args) {
		var type = command.toLowerCase();
		args = parseValues(args);

		// overloaded moveTo
		if (type == 'm' && args.length > 2) {
			data.push([command].concat(args.splice(0, 2)));
			type = 'l';
			command = command == 'm' ? 'l' : 'L';
		}

		while (true) {
			if (args.length == length[type]) {
				args.unshift(command);
				return data.push(args);
			}
			if (args.length < length[type]) throw new Error('malformed path data');
			data.push([command].concat(args.splice(0, length[type])));
		}
	});
	return data;
}

var number = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/ig;

function parseValues(args) {
	var numbers = args.match(number);
	return numbers ? numbers.map(Number) : [];
}

/***/ }),
/* 587 */
/***/ (function(module, exports) {

module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

/***/ }),
/* 588 */
/***/ (function(module, exports) {


module.exports = absolutize;

/**
 * redefine `path` with absolute coordinates
 *
 * @param {Array} path
 * @return {Array}
 */

function absolutize(path) {
	var startX = 0;
	var startY = 0;
	var x = 0;
	var y = 0;

	return path.map(function (seg) {
		seg = seg.slice();
		var type = seg[0];
		var command = type.toUpperCase();

		// is relative
		if (type != command) {
			seg[0] = command;
			switch (type) {
				case 'a':
					seg[6] += x;
					seg[7] += y;
					break;
				case 'v':
					seg[1] += y;
					break;
				case 'h':
					seg[1] += x;
					break;
				default:
					for (var i = 1; i < seg.length;) {
						seg[i++] += x;
						seg[i++] += y;
					}
			}
		}

		// update cursor state
		switch (command) {
			case 'Z':
				x = startX;
				y = startY;
				break;
			case 'H':
				x = seg[1];
				break;
			case 'V':
				y = seg[1];
				break;
			case 'M':
				x = startX = seg[1];
				y = startY = seg[2];
				break;
			default:
				x = seg[seg.length - 2];
				y = seg[seg.length - 1];
		}

		return seg;
	});
}

/***/ }),
/* 589 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var isFunction = __webpack_require__(8);

var _require = __webpack_require__(2),
    GRAPH = _require.GRAPH,
    registerConnector = _require.registerConnector;

var DEFAULT_OPTIONS = {
  nodes: function nodes(d) {
    // optional
    return d.nodes;
  },
  edges: function edges(d) {
    // optional
    return d.edges;
  }
};

function connector(data, options, dataView) {
  options = assign({}, DEFAULT_OPTIONS, options);
  dataView.dataType = GRAPH;
  var _options = options,
      nodes = _options.nodes,
      edges = _options.edges;

  if (nodes && !isFunction(nodes)) {
    throw new TypeError('Invalid nodes: must be a function!');
  }
  if (edges && !isFunction(edges)) {
    throw new TypeError('Invalid edges: must be a function!');
  }
  dataView.rows = dataView.graph = {
    nodes: nodes(data),
    edges: edges(data)
  };
  assign(dataView, dataView.graph);
  return dataView.rows;
}

registerConnector('graph', connector);
registerConnector('diagram', connector);

/***/ }),
/* 590 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(8);

var _require = __webpack_require__(119),
    hierarchy = _require.hierarchy;

var _require2 = __webpack_require__(2),
    HIERARCHY = _require2.HIERARCHY,
    registerConnector = _require2.registerConnector;

/*
 * options: {
 *   children(d) { // optional
 *     return d.children
 *   },
 * }
 */

function connector(data, options, dataView) {
  dataView.dataType = HIERARCHY;
  var children = options && options.children ? options.children : null;

  if (children && !isFunction(children)) {
    throw new TypeError('Invalid children: must be a function!');
  }

  dataView.rows = dataView.root = hierarchy(data, children);
  return data;
}

registerConnector('hierarchy', connector);
registerConnector('tree', connector);

/***/ }),
/* 591 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function () {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = false;

  function cluster(root) {
    var previousNode,
        x = 0;

    // First walk, computing the initial x & y values.
    root.eachAfter(function (node) {
      var children = node.children;
      if (children) {
        node.x = meanX(children);
        node.y = maxY(children);
      } else {
        node.x = previousNode ? x += separation(node, previousNode) : 0;
        node.y = 0;
        previousNode = node;
      }
    });

    var left = leafLeft(root),
        right = leafRight(root),
        x0 = left.x - separation(left, right) / 2,
        x1 = right.x + separation(right, left) / 2;

    // Second walk, normalizing x & y to the desired size.
    return root.eachAfter(nodeSize ? function (node) {
      node.x = (node.x - root.x) * dx;
      node.y = (root.y - node.y) * dy;
    } : function (node) {
      node.x = (node.x - x0) / (x1 - x0) * dx;
      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
    });
  }

  cluster.separation = function (x) {
    return arguments.length ? (separation = x, cluster) : separation;
  };

  cluster.size = function (x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [dx, dy];
  };

  cluster.nodeSize = function (x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [dx, dy] : null;
  };

  return cluster;
};

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

function meanX(children) {
  return children.reduce(meanXReduce, 0) / children.length;
}

function meanXReduce(x, c) {
  return x + c.x;
}

function maxY(children) {
  return 1 + children.reduce(maxYReduce, 0);
}

function maxYReduce(y, c) {
  return Math.max(y, c.y);
}

function leafLeft(node) {
  var children;
  while (children = node.children) {
    node = children[0];
  }return node;
}

function leafRight(node) {
  var children;
  while (children = node.children) {
    node = children[children.length - 1];
  }return node;
}

/***/ }),
/* 592 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function () {
  return this.eachAfter(count);
};

function count(node) {
  var sum = 0,
      children = node.children,
      i = children && children.length;
  if (!i) sum = 1;else while (--i >= 0) {
    sum += children[i].value;
  }node.value = sum;
}

/***/ }),
/* 593 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (callback) {
  var node = this,
      current,
      next = [node],
      children,
      i,
      n;
  do {
    current = next.reverse(), next = [];
    while (node = current.pop()) {
      callback(node), children = node.children;
      if (children) for (i = 0, n = children.length; i < n; ++i) {
        next.push(children[i]);
      }
    }
  } while (next.length);
  return this;
};

/***/ }),
/* 594 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (callback) {
  var node = this,
      nodes = [node],
      children,
      i;
  while (node = nodes.pop()) {
    callback(node), children = node.children;
    if (children) for (i = children.length - 1; i >= 0; --i) {
      nodes.push(children[i]);
    }
  }
  return this;
};

/***/ }),
/* 595 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (callback) {
  var node = this,
      nodes = [node],
      next = [],
      children,
      i,
      n;
  while (node = nodes.pop()) {
    next.push(node), children = node.children;
    if (children) for (i = 0, n = children.length; i < n; ++i) {
      nodes.push(children[i]);
    }
  }
  while (node = next.pop()) {
    callback(node);
  }
  return this;
};

/***/ }),
/* 596 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (value) {
  return this.eachAfter(function (node) {
    var sum = +value(node.data) || 0,
        children = node.children,
        i = children && children.length;
    while (--i >= 0) {
      sum += children[i].value;
    }node.value = sum;
  });
};

/***/ }),
/* 597 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (compare) {
  return this.eachBefore(function (node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
};

/***/ }),
/* 598 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (end) {
  var start = this,
      ancestor = leastCommonAncestor(start, end),
      nodes = [start];
  while (start !== ancestor) {
    start = start.parent;
    nodes.push(start);
  }
  var k = nodes.length;
  while (end !== ancestor) {
    nodes.splice(k, 0, end);
    end = end.parent;
  }
  return nodes;
};

function leastCommonAncestor(a, b) {
  if (a === b) return a;
  var aNodes = a.ancestors(),
      bNodes = b.ancestors(),
      c = null;
  a = aNodes.pop();
  b = bNodes.pop();
  while (a === b) {
    c = a;
    a = aNodes.pop();
    b = bNodes.pop();
  }
  return c;
}

/***/ }),
/* 599 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function () {
  var node = this,
      nodes = [node];
  while (node = node.parent) {
    nodes.push(node);
  }
  return nodes;
};

/***/ }),
/* 600 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function () {
  var nodes = [];
  this.each(function (node) {
    nodes.push(node);
  });
  return nodes;
};

/***/ }),
/* 601 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function () {
  var leaves = [];
  this.eachBefore(function (node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
};

/***/ }),
/* 602 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function () {
  var root = this,
      links = [];
  root.each(function (node) {
    if (node !== root) {
      // Don’t include the root’s parent, if any.
      links.push({ source: node.parent, target: node });
    }
  });
  return links;
};

/***/ }),
/* 603 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var radius = null,
      dx = 1,
      dy = 1,
      padding = _constant.constantZero;

  function pack(root) {
    root.x = dx / 2, root.y = dy / 2;
    if (radius) {
      root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1));
    } else {
      root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildren(_constant.constantZero, 1)).eachAfter(packChildren(padding, root.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
    }
    return root;
  }

  pack.radius = function (x) {
    return arguments.length ? (radius = (0, _accessors.optional)(x), pack) : radius;
  };

  pack.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
  };

  pack.padding = function (x) {
    return arguments.length ? (padding = typeof x === "function" ? x : (0, _constant2.default)(+x), pack) : padding;
  };

  return pack;
};

var _siblings = __webpack_require__(239);

var _accessors = __webpack_require__(121);

var _constant = __webpack_require__(241);

var _constant2 = _interopRequireDefault(_constant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultRadius(d) {
  return Math.sqrt(d.value);
}

function radiusLeaf(radius) {
  return function (node) {
    if (!node.children) {
      node.r = Math.max(0, +radius(node) || 0);
    }
  };
}

function packChildren(padding, k) {
  return function (node) {
    if (children = node.children) {
      var children,
          i,
          n = children.length,
          r = padding(node) * k || 0,
          e;

      if (r) for (i = 0; i < n; ++i) {
        children[i].r += r;
      }e = (0, _siblings.packEnclose)(children);
      if (r) for (i = 0; i < n; ++i) {
        children[i].r -= r;
      }node.r = e + r;
    }
  };
}

function translateChild(k) {
  return function (node) {
    var parent = node.parent;
    node.r *= k;
    if (parent) {
      node.x = parent.x + k * node.x;
      node.y = parent.y + k * node.y;
    }
  };
}

/***/ }),
/* 604 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.shuffle = shuffle;
var slice = exports.slice = Array.prototype.slice;

function shuffle(array) {
  var m = array.length,
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m];
    array[m] = array[i];
    array[i] = t;
  }

  return array;
}

/***/ }),
/* 605 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var dx = 1,
      dy = 1,
      padding = 0,
      round = false;

  function partition(root) {
    var n = root.height + 1;
    root.x0 = root.y0 = padding;
    root.x1 = dx;
    root.y1 = dy / n;
    root.eachBefore(positionNode(dy, n));
    if (round) root.eachBefore(_round2.default);
    return root;
  }

  function positionNode(dy, n) {
    return function (node) {
      if (node.children) {
        (0, _dice2.default)(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
      }
      var x0 = node.x0,
          y0 = node.y0,
          x1 = node.x1 - padding,
          y1 = node.y1 - padding;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      node.x0 = x0;
      node.y0 = y0;
      node.x1 = x1;
      node.y1 = y1;
    };
  }

  partition.round = function (x) {
    return arguments.length ? (round = !!x, partition) : round;
  };

  partition.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
  };

  partition.padding = function (x) {
    return arguments.length ? (padding = +x, partition) : padding;
  };

  return partition;
};

var _round = __webpack_require__(242);

var _round2 = _interopRequireDefault(_round);

var _dice = __webpack_require__(48);

var _dice2 = _interopRequireDefault(_dice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 606 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var id = defaultId,
      parentId = defaultParentId;

  function stratify(data) {
    var d,
        i,
        n = data.length,
        root,
        parent,
        node,
        nodes = new Array(n),
        nodeId,
        nodeKey,
        nodeByKey = {};

    for (i = 0; i < n; ++i) {
      d = data[i], node = nodes[i] = new _index.Node(d);
      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
        nodeKey = keyPrefix + (node.id = nodeId);
        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
      }
    }

    for (i = 0; i < n; ++i) {
      node = nodes[i], nodeId = parentId(data[i], i, data);
      if (nodeId == null || !(nodeId += "")) {
        if (root) throw new Error("multiple roots");
        root = node;
      } else {
        parent = nodeByKey[keyPrefix + nodeId];
        if (!parent) throw new Error("missing: " + nodeId);
        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
        if (parent.children) parent.children.push(node);else parent.children = [node];
        node.parent = parent;
      }
    }

    if (!root) throw new Error("no root");
    root.parent = preroot;
    root.eachBefore(function (node) {
      node.depth = node.parent.depth + 1;--n;
    }).eachBefore(_index.computeHeight);
    root.parent = null;
    if (n > 0) throw new Error("cycle");

    return root;
  }

  stratify.id = function (x) {
    return arguments.length ? (id = (0, _accessors.required)(x), stratify) : id;
  };

  stratify.parentId = function (x) {
    return arguments.length ? (parentId = (0, _accessors.required)(x), stratify) : parentId;
  };

  return stratify;
};

var _accessors = __webpack_require__(121);

var _index = __webpack_require__(120);

var keyPrefix = "$",
    // Protect against keys like “__proto__”.
preroot = { depth: -1 },
    ambiguous = {};

function defaultId(d) {
  return d.id;
}

function defaultParentId(d) {
  return d.parentId;
}

/***/ }),
/* 607 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = null;

  function tree(root) {
    var t = treeRoot(root);

    // Compute the layout using Buchheim et al.’s algorithm.
    t.eachAfter(firstWalk), t.parent.m = -t.z;
    t.eachBefore(secondWalk);

    // If a fixed node size is specified, scale x and y.
    if (nodeSize) root.eachBefore(sizeNode);

    // If a fixed tree size is specified, scale x and y based on the extent.
    // Compute the left-most, right-most, and depth-most nodes for extents.
    else {
        var left = root,
            right = root,
            bottom = root;
        root.eachBefore(function (node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var s = left === right ? 1 : separation(left, right) / 2,
            tx = s - left.x,
            kx = dx / (right.x + s + tx),
            ky = dy / (bottom.depth || 1);
        root.eachBefore(function (node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }

    return root;
  }

  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
  // applied recursively to the children of v, as well as the function
  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
  // node v is placed to the midpoint of its outermost children.
  function firstWalk(v) {
    var children = v.children,
        siblings = v.parent.children,
        w = v.i ? siblings[v.i - 1] : null;
    if (children) {
      executeShifts(v);
      var midpoint = (children[0].z + children[children.length - 1].z) / 2;
      if (w) {
        v.z = w.z + separation(v._, w._);
        v.m = v.z - midpoint;
      } else {
        v.z = midpoint;
      }
    } else if (w) {
      v.z = w.z + separation(v._, w._);
    }
    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
  }

  // Computes all real x-coordinates by summing up the modifiers recursively.
  function secondWalk(v) {
    v._.x = v.z + v.parent.m;
    v.m += v.parent.m;
  }

  // The core of the algorithm. Here, a new subtree is combined with the
  // previous subtrees. Threads are used to traverse the inside and outside
  // contours of the left and right subtree up to the highest common level. The
  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
  // superscript o means outside and i means inside, the subscript - means left
  // subtree and + means right subtree. For summing up the modifiers along the
  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
  // nodes of the inside contours conflict, we compute the left one of the
  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
  // Finally, we add a new thread (if necessary).
  function apportion(v, w, ancestor) {
    if (w) {
      var vip = v,
          vop = v,
          vim = w,
          vom = vip.parent.children[0],
          sip = vip.m,
          sop = vop.m,
          sim = vim.m,
          som = vom.m,
          shift;
      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
        vom = nextLeft(vom);
        vop = nextRight(vop);
        vop.a = v;
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
        if (shift > 0) {
          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
          sip += shift;
          sop += shift;
        }
        sim += vim.m;
        sip += vip.m;
        som += vom.m;
        sop += vop.m;
      }
      if (vim && !nextRight(vop)) {
        vop.t = vim;
        vop.m += sim - sop;
      }
      if (vip && !nextLeft(vom)) {
        vom.t = vip;
        vom.m += sip - som;
        ancestor = v;
      }
    }
    return ancestor;
  }

  function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
  }

  tree.separation = function (x) {
    return arguments.length ? (separation = x, tree) : separation;
  };

  tree.size = function (x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [dx, dy];
  };

  tree.nodeSize = function (x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [dx, dy] : null;
  };

  return tree;
};

var _index = __webpack_require__(120);

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

// function radialSeparation(a, b) {
//   return (a.parent === b.parent ? 1 : 2) / a.depth;
// }

// This function is used to traverse the left contour of a subtree (or
// subforest). It returns the successor of v on this contour. This successor is
// either given by the leftmost child of v or by the thread of v. The function
// returns null if and only if v is on the highest level of its subtree.
function nextLeft(v) {
  var children = v.children;
  return children ? children[0] : v.t;
}

// This function works analogously to nextLeft.
function nextRight(v) {
  var children = v.children;
  return children ? children[children.length - 1] : v.t;
}

// Shifts the current subtree rooted at w+. This is done by increasing
// prelim(w+) and mod(w+) by shift.
function moveSubtree(wm, wp, shift) {
  var change = shift / (wp.i - wm.i);
  wp.c -= change;
  wp.s += shift;
  wm.c += change;
  wp.z += shift;
  wp.m += shift;
}

// All other shifts, applied to the smaller subtrees between w- and w+, are
// performed by this function. To prepare the shifts, we have to adjust
// change(w+), shift(w+), and change(w-).
function executeShifts(v) {
  var shift = 0,
      change = 0,
      children = v.children,
      i = children.length,
      w;
  while (--i >= 0) {
    w = children[i];
    w.z += shift;
    w.m += shift;
    shift += w.s + (change += w.c);
  }
}

// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
// returns the specified (default) ancestor.
function nextAncestor(vim, v, ancestor) {
  return vim.a.parent === v.parent ? vim.a : ancestor;
}

function TreeNode(node, i) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null; // default ancestor
  this.a = this; // ancestor
  this.z = 0; // prelim
  this.m = 0; // mod
  this.c = 0; // change
  this.s = 0; // shift
  this.t = null; // thread
  this.i = i; // number
}

TreeNode.prototype = Object.create(_index.Node.prototype);

function treeRoot(root) {
  var tree = new TreeNode(root, 0),
      node,
      nodes = [tree],
      child,
      children,
      i,
      n;

  while (node = nodes.pop()) {
    if (children = node._.children) {
      node.children = new Array(n = children.length);
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
        child.parent = node;
      }
    }
  }

  (tree.parent = new TreeNode(null, 0)).children = [tree];
  return tree;
}

// Node-link tree diagram using the Reingold-Tilford "tidy" algorithm

/***/ }),
/* 608 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var tile = _squarify2.default,
      round = false,
      dx = 1,
      dy = 1,
      paddingStack = [0],
      paddingInner = _constant.constantZero,
      paddingTop = _constant.constantZero,
      paddingRight = _constant.constantZero,
      paddingBottom = _constant.constantZero,
      paddingLeft = _constant.constantZero;

  function treemap(root) {
    root.x0 = root.y0 = 0;
    root.x1 = dx;
    root.y1 = dy;
    root.eachBefore(positionNode);
    paddingStack = [0];
    if (round) root.eachBefore(_round2.default);
    return root;
  }

  function positionNode(node) {
    var p = paddingStack[node.depth],
        x0 = node.x0 + p,
        y0 = node.y0 + p,
        x1 = node.x1 - p,
        y1 = node.y1 - p;
    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
    node.x0 = x0;
    node.y0 = y0;
    node.x1 = x1;
    node.y1 = y1;
    if (node.children) {
      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
      x0 += paddingLeft(node) - p;
      y0 += paddingTop(node) - p;
      x1 -= paddingRight(node) - p;
      y1 -= paddingBottom(node) - p;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      tile(node, x0, y0, x1, y1);
    }
  }

  treemap.round = function (x) {
    return arguments.length ? (round = !!x, treemap) : round;
  };

  treemap.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
  };

  treemap.tile = function (x) {
    return arguments.length ? (tile = (0, _accessors.required)(x), treemap) : tile;
  };

  treemap.padding = function (x) {
    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
  };

  treemap.paddingInner = function (x) {
    return arguments.length ? (paddingInner = typeof x === "function" ? x : (0, _constant2.default)(+x), treemap) : paddingInner;
  };

  treemap.paddingOuter = function (x) {
    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
  };

  treemap.paddingTop = function (x) {
    return arguments.length ? (paddingTop = typeof x === "function" ? x : (0, _constant2.default)(+x), treemap) : paddingTop;
  };

  treemap.paddingRight = function (x) {
    return arguments.length ? (paddingRight = typeof x === "function" ? x : (0, _constant2.default)(+x), treemap) : paddingRight;
  };

  treemap.paddingBottom = function (x) {
    return arguments.length ? (paddingBottom = typeof x === "function" ? x : (0, _constant2.default)(+x), treemap) : paddingBottom;
  };

  treemap.paddingLeft = function (x) {
    return arguments.length ? (paddingLeft = typeof x === "function" ? x : (0, _constant2.default)(+x), treemap) : paddingLeft;
  };

  return treemap;
};

var _round = __webpack_require__(242);

var _round2 = _interopRequireDefault(_round);

var _squarify = __webpack_require__(122);

var _squarify2 = _interopRequireDefault(_squarify);

var _accessors = __webpack_require__(121);

var _constant = __webpack_require__(241);

var _constant2 = _interopRequireDefault(_constant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 609 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      i,
      n = nodes.length,
      sum,
      sums = new Array(n + 1);

  for (sums[0] = sum = i = 0; i < n; ++i) {
    sums[i + 1] = sum += nodes[i].value;
  }

  partition(0, n, parent.value, x0, y0, x1, y1);

  function partition(i, j, value, x0, y0, x1, y1) {
    if (i >= j - 1) {
      var node = nodes[i];
      node.x0 = x0, node.y0 = y0;
      node.x1 = x1, node.y1 = y1;
      return;
    }

    var valueOffset = sums[i],
        valueTarget = value / 2 + valueOffset,
        k = i + 1,
        hi = j - 1;

    while (k < hi) {
      var mid = k + hi >>> 1;
      if (sums[mid] < valueTarget) k = mid + 1;else hi = mid;
    }

    if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;

    var valueLeft = sums[k] - valueOffset,
        valueRight = value - valueLeft;

    if (x1 - x0 > y1 - y0) {
      var xk = (x0 * valueRight + x1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, xk, y1);
      partition(k, j, valueRight, xk, y0, x1, y1);
    } else {
      var yk = (y0 * valueRight + y1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, x1, yk);
      partition(k, j, valueRight, x0, yk, x1, y1);
    }
  }
};

/***/ }),
/* 610 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (parent, x0, y0, x1, y1) {
  (parent.depth & 1 ? _slice2.default : _dice2.default)(parent, x0, y0, x1, y1);
};

var _dice = __webpack_require__(48);

var _dice2 = _interopRequireDefault(_dice);

var _slice = __webpack_require__(71);

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 611 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _dice = __webpack_require__(48);

var _dice2 = _interopRequireDefault(_dice);

var _slice = __webpack_require__(71);

var _slice2 = _interopRequireDefault(_slice);

var _squarify = __webpack_require__(122);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function custom(ratio) {

  function resquarify(parent, x0, y0, x1, y1) {
    if ((rows = parent._squarify) && rows.ratio === ratio) {
      var rows,
          row,
          nodes,
          i,
          j = -1,
          n,
          m = rows.length,
          value = parent.value;

      while (++j < m) {
        row = rows[j], nodes = row.children;
        for (i = row.value = 0, n = nodes.length; i < n; ++i) {
          row.value += nodes[i].value;
        }if (row.dice) (0, _dice2.default)(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);else (0, _slice2.default)(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
        value -= row.value;
      }
    } else {
      parent._squarify = rows = (0, _squarify.squarifyRatio)(ratio, parent, x0, y0, x1, y1);
      rows.ratio = ratio;
    }
  }

  resquarify.ratio = function (x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return resquarify;
}(_squarify.phi);

/***/ }),
/* 612 */
/***/ (function(module, exports, __webpack_require__) {

var isString = __webpack_require__(7);

var _require = __webpack_require__(613),
    feature = _require.feature;

var GeoJSONConnector = __webpack_require__(237);

var _require2 = __webpack_require__(2),
    registerConnector = _require2.registerConnector;

function TopoJSONConnector(data, options, dataView) {
  var object = options.object;
  if (!isString(object)) {
    throw new TypeError('Invalid object: must be a string!');
  }
  var geoData = feature(data, data.objects[object]);
  return GeoJSONConnector(geoData, options, dataView);
}

registerConnector('topojson', TopoJSONConnector);
registerConnector('TopoJSON', TopoJSONConnector);

/***/ }),
/* 613 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _bbox = __webpack_require__(243);

Object.defineProperty(exports, "bbox", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_bbox).default;
  }
});

var _feature = __webpack_require__(124);

Object.defineProperty(exports, "feature", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_feature).default;
  }
});

var _mesh = __webpack_require__(615);

Object.defineProperty(exports, "mesh", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_mesh).default;
  }
});
Object.defineProperty(exports, "meshArcs", {
  enumerable: true,
  get: function get() {
    return _mesh.meshArcs;
  }
});

var _merge = __webpack_require__(616);

Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_merge).default;
  }
});
Object.defineProperty(exports, "mergeArcs", {
  enumerable: true,
  get: function get() {
    return _merge.mergeArcs;
  }
});

var _neighbors = __webpack_require__(617);

Object.defineProperty(exports, "neighbors", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_neighbors).default;
  }
});

var _quantize = __webpack_require__(619);

Object.defineProperty(exports, "quantize", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_quantize).default;
  }
});

var _transform = __webpack_require__(123);

Object.defineProperty(exports, "transform", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_transform).default;
  }
});

var _untransform = __webpack_require__(246);

Object.defineProperty(exports, "untransform", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_untransform).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 614 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (array, n) {
  var t,
      j = array.length,
      i = j - n;
  while (i < --j) {
    t = array[i], array[i++] = array[j], array[j] = t;
  }
};

/***/ }),
/* 615 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (topology) {
  return (0, _feature.object)(topology, meshArcs.apply(this, arguments));
};

exports.meshArcs = meshArcs;

var _feature = __webpack_require__(124);

var _stitch = __webpack_require__(245);

var _stitch2 = _interopRequireDefault(_stitch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function meshArcs(topology, object, filter) {
  var arcs, i, n;
  if (arguments.length > 1) arcs = extractArcs(topology, object, filter);else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) {
    arcs[i] = i;
  }return { type: "MultiLineString", arcs: (0, _stitch2.default)(topology, arcs) };
}

function extractArcs(topology, object, filter) {
  var arcs = [],
      geomsByArc = [],
      geom;

  function extract0(i) {
    var j = i < 0 ? ~i : i;
    (geomsByArc[j] || (geomsByArc[j] = [])).push({ i: i, g: geom });
  }

  function extract1(arcs) {
    arcs.forEach(extract0);
  }

  function extract2(arcs) {
    arcs.forEach(extract1);
  }

  function extract3(arcs) {
    arcs.forEach(extract2);
  }

  function geometry(o) {
    switch (geom = o, o.type) {
      case "GeometryCollection":
        o.geometries.forEach(geometry);break;
      case "LineString":
        extract1(o.arcs);break;
      case "MultiLineString":case "Polygon":
        extract2(o.arcs);break;
      case "MultiPolygon":
        extract3(o.arcs);break;
    }
  }

  geometry(object);

  geomsByArc.forEach(filter == null ? function (geoms) {
    arcs.push(geoms[0].i);
  } : function (geoms) {
    if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i);
  });

  return arcs;
}

/***/ }),
/* 616 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (topology) {
  return (0, _feature.object)(topology, mergeArcs.apply(this, arguments));
};

exports.mergeArcs = mergeArcs;

var _feature = __webpack_require__(124);

var _stitch = __webpack_require__(245);

var _stitch2 = _interopRequireDefault(_stitch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function planarRingArea(ring) {
  var i = -1,
      n = ring.length,
      a,
      b = ring[n - 1],
      area = 0;
  while (++i < n) {
    a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];
  }return Math.abs(area); // Note: doubled area!
}

function mergeArcs(topology, objects) {
  var polygonsByArc = {},
      polygons = [],
      groups = [];

  objects.forEach(geometry);

  function geometry(o) {
    switch (o.type) {
      case "GeometryCollection":
        o.geometries.forEach(geometry);break;
      case "Polygon":
        extract(o.arcs);break;
      case "MultiPolygon":
        o.arcs.forEach(extract);break;
    }
  }

  function extract(polygon) {
    polygon.forEach(function (ring) {
      ring.forEach(function (arc) {
        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
      });
    });
    polygons.push(polygon);
  }

  function area(ring) {
    return planarRingArea((0, _feature.object)(topology, { type: "Polygon", arcs: [ring] }).coordinates[0]);
  }

  polygons.forEach(function (polygon) {
    if (!polygon._) {
      var group = [],
          neighbors = [polygon];
      polygon._ = 1;
      groups.push(group);
      while (polygon = neighbors.pop()) {
        group.push(polygon);
        polygon.forEach(function (ring) {
          ring.forEach(function (arc) {
            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function (polygon) {
              if (!polygon._) {
                polygon._ = 1;
                neighbors.push(polygon);
              }
            });
          });
        });
      }
    }
  });

  polygons.forEach(function (polygon) {
    delete polygon._;
  });

  return {
    type: "MultiPolygon",
    arcs: groups.map(function (polygons) {
      var arcs = [],
          n;

      // Extract the exterior (unique) arcs.
      polygons.forEach(function (polygon) {
        polygon.forEach(function (ring) {
          ring.forEach(function (arc) {
            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {
              arcs.push(arc);
            }
          });
        });
      });

      // Stitch the arcs into one or more rings.
      arcs = (0, _stitch2.default)(topology, arcs);

      // If more than one ring is returned,
      // at most one of these rings can be the exterior;
      // choose the one with the greatest absolute area.
      if ((n = arcs.length) > 1) {
        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {
          if ((ki = area(arcs[i])) > k) {
            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;
          }
        }
      }

      return arcs;
    })
  };
}

/***/ }),
/* 617 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (objects) {
  var indexesByArc = {},
      // arc index -> array of object indexes
  neighbors = objects.map(function () {
    return [];
  });

  function line(arcs, i) {
    arcs.forEach(function (a) {
      if (a < 0) a = ~a;
      var o = indexesByArc[a];
      if (o) o.push(i);else indexesByArc[a] = [i];
    });
  }

  function polygon(arcs, i) {
    arcs.forEach(function (arc) {
      line(arc, i);
    });
  }

  function geometry(o, i) {
    if (o.type === "GeometryCollection") o.geometries.forEach(function (o) {
      geometry(o, i);
    });else if (o.type in geometryType) geometryType[o.type](o.arcs, i);
  }

  var geometryType = {
    LineString: line,
    MultiLineString: polygon,
    Polygon: polygon,
    MultiPolygon: function MultiPolygon(arcs, i) {
      arcs.forEach(function (arc) {
        polygon(arc, i);
      });
    }
  };

  objects.forEach(geometry);

  for (var i in indexesByArc) {
    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {
      for (var k = j + 1; k < m; ++k) {
        var ij = indexes[j],
            ik = indexes[k],
            n;
        if ((n = neighbors[ij])[i = (0, _bisect2.default)(n, ik)] !== ik) n.splice(i, 0, ik);
        if ((n = neighbors[ik])[i = (0, _bisect2.default)(n, ij)] !== ij) n.splice(i, 0, ij);
      }
    }
  }

  return neighbors;
};

var _bisect = __webpack_require__(618);

var _bisect2 = _interopRequireDefault(_bisect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 618 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (a, x) {
  var lo = 0,
      hi = a.length;
  while (lo < hi) {
    var mid = lo + hi >>> 1;
    if (a[mid] < x) lo = mid + 1;else hi = mid;
  }
  return lo;
};

/***/ }),
/* 619 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (topology, transform) {
  if (topology.transform) throw new Error("already quantized");

  if (!transform || !transform.scale) {
    if (!((n = Math.floor(transform)) >= 2)) throw new Error("n must be ≥2");
    box = topology.bbox || (0, _bbox2.default)(topology);
    var x0 = box[0],
        y0 = box[1],
        x1 = box[2],
        y1 = box[3],
        n;
    transform = { scale: [x1 - x0 ? (x1 - x0) / (n - 1) : 1, y1 - y0 ? (y1 - y0) / (n - 1) : 1], translate: [x0, y0] };
  } else {
    box = topology.bbox;
  }

  var t = (0, _untransform2.default)(transform),
      box,
      key,
      inputs = topology.objects,
      outputs = {};

  function quantizePoint(point) {
    return t(point);
  }

  function quantizeGeometry(input) {
    var output;
    switch (input.type) {
      case "GeometryCollection":
        output = { type: "GeometryCollection", geometries: input.geometries.map(quantizeGeometry) };break;
      case "Point":
        output = { type: "Point", coordinates: quantizePoint(input.coordinates) };break;
      case "MultiPoint":
        output = { type: "MultiPoint", coordinates: input.coordinates.map(quantizePoint) };break;
      default:
        return input;
    }
    if (input.id != null) output.id = input.id;
    if (input.bbox != null) output.bbox = input.bbox;
    if (input.properties != null) output.properties = input.properties;
    return output;
  }

  function quantizeArc(input) {
    var i = 0,
        j = 1,
        n = input.length,
        p,
        output = new Array(n); // pessimistic
    output[0] = t(input[0], 0);
    while (++i < n) {
      if ((p = t(input[i], i))[0] || p[1]) output[j++] = p;
    } // non-coincident points
    if (j === 1) output[j++] = [0, 0]; // an arc must have at least two points
    output.length = j;
    return output;
  }

  for (key in inputs) {
    outputs[key] = quantizeGeometry(inputs[key]);
  }return {
    type: "Topology",
    bbox: box,
    transform: transform,
    objects: outputs,
    arcs: topology.arcs.map(quantizeArc)
  };
};

var _bbox = __webpack_require__(243);

var _bbox2 = _interopRequireDefault(_bbox);

var _untransform = __webpack_require__(246);

var _untransform2 = _interopRequireDefault(_untransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 620 */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

registerTransform('default', function (dataView) {
  return dataView;
});

/***/ }),
/* 621 */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

/*
 * options: {
 *   type: 'filter',
 *   callback,
 * }
 */

function defaultCallback(row) {
  return !!row;
}

registerTransform('filter', function (dataView) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  dataView.rows = dataView.rows.filter(options.callback || defaultCallback);
});

/***/ }),
/* 622 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var difference = __webpack_require__(623);
var pick = __webpack_require__(69);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var _require2 = __webpack_require__(6),
    getFields = _require2.getFields;

var DEFAULT_OPTIONS = {
  fields: [],
  key: 'key',
  retains: [],
  value: 'value'
};

registerTransform('fold', function (dataView, options) {
  var columns = dataView.getColumnNames();
  options = assign({}, DEFAULT_OPTIONS, options);
  var fields = getFields(options);
  if (fields.length === 0) {
    console.warn('warning: option fields is not specified, will fold all columns.');
    fields = columns;
  }
  var key = options.key;
  var value = options.value;
  var retains = options.retains;
  if (retains.length === 0) {
    retains = difference(columns, fields);
  }
  var resultRows = [];
  dataView.rows.forEach(function (row) {
    fields.forEach(function (field) {
      var resultRow = pick(row, retains);
      resultRow[key] = field;
      resultRow[value] = row[field];
      resultRows.push(resultRow);
    });
  });
  dataView.rows = resultRows;
});

/***/ }),
/* 623 */
/***/ (function(module, exports, __webpack_require__) {

var baseDifference = __webpack_require__(624),
    baseFlatten = __webpack_require__(106),
    baseRest = __webpack_require__(77),
    isArrayLikeObject = __webpack_require__(628);

/**
 * Creates an array of `array` values not included in the other given arrays
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. The order and references of result values are
 * determined by the first array.
 *
 * **Note:** Unlike `_.pullAll`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.without, _.xor
 * @example
 *
 * _.difference([2, 1], [2, 3]);
 * // => [1]
 */
var difference = baseRest(function (array, values) {
    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
});

module.exports = difference;

/***/ }),
/* 624 */
/***/ (function(module, exports, __webpack_require__) {

var SetCache = __webpack_require__(102),
    arrayIncludes = __webpack_require__(247),
    arrayIncludesWith = __webpack_require__(248),
    arrayMap = __webpack_require__(68),
    baseUnary = __webpack_require__(82),
    cacheHas = __webpack_require__(103);

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */
function baseDifference(array, values, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;

  if (!length) {
    return result;
  }
  if (iteratee) {
    values = arrayMap(values, baseUnary(iteratee));
  }
  if (comparator) {
    includes = arrayIncludesWith;
    isCommon = false;
  } else if (values.length >= LARGE_ARRAY_SIZE) {
    includes = cacheHas;
    isCommon = false;
    values = new SetCache(values);
  }
  outer: while (++index < length) {
    var value = array[index],
        computed = iteratee == null ? value : iteratee(value);

    value = comparator || value !== 0 ? value : 0;
    if (isCommon && computed === computed) {
      var valuesIndex = valuesLength;
      while (valuesIndex--) {
        if (values[valuesIndex] === computed) {
          continue outer;
        }
      }
      result.push(value);
    } else if (!includes(values, computed, comparator)) {
      result.push(value);
    }
  }
  return result;
}

module.exports = baseDifference;

/***/ }),
/* 625 */
/***/ (function(module, exports, __webpack_require__) {

var baseFindIndex = __webpack_require__(200),
    baseIsNaN = __webpack_require__(626),
    strictIndexOf = __webpack_require__(627);

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;

/***/ }),
/* 626 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;

/***/ }),
/* 627 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;

/***/ }),
/* 628 */
/***/ (function(module, exports, __webpack_require__) {

var isArrayLike = __webpack_require__(20),
    isObjectLike = __webpack_require__(15);

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;

/***/ }),
/* 629 */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

/*
 * options: {
 *   type: 'map',
 *   callback,
 * }
 */

function defaultCallback(row) {
  return row;
}

registerTransform('map', function (dataView) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  dataView.rows = dataView.rows.map(options.callback || defaultCallback);
});

/***/ }),
/* 630 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var values = __webpack_require__(113);
var partition = __webpack_require__(18);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var DEFAULT_OPTIONS = {
  groupBy: [], // optional
  orderBy: []
};

registerTransform('partition', function (dataView) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  options = assign({}, DEFAULT_OPTIONS, options);
  dataView.rows = partition(dataView.rows, options.groupBy, options.orderBy);
});

function group(dataView) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  options = assign({}, DEFAULT_OPTIONS, options);
  dataView.rows = values(partition(dataView.rows, options.groupBy, options.orderBy));
}

registerTransform('group', group);
registerTransform('groups', group);

/***/ }),
/* 631 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var forIn = __webpack_require__(11);
var isString = __webpack_require__(7);

var _require = __webpack_require__(30),
    sum = _require.sum;

var partition = __webpack_require__(18);

var _require2 = __webpack_require__(2),
    registerTransform = _require2.registerTransform;

var _require3 = __webpack_require__(6),
    getField = _require3.getField;

var DEFAULT_OPTIONS = {
  // field: 'y', // required
  // dimension: 'x', // required
  groupBy: [], // optional
  as: '_percent'
};

function transform(dataView) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  options = assign({}, DEFAULT_OPTIONS, options);
  var field = getField(options);
  var dimension = options.dimension;
  var groupBy = options.groupBy;
  var as = options.as;
  if (!isString(dimension)) {
    throw new TypeError('Invalid dimension: must be a string!');
  }
  if (Array.isArray(as)) {
    console.warn('Invalid as: must be a string, will use the first element of the array specified.');
    as = as[0];
  }
  if (!isString(as)) {
    throw new TypeError('Invalid as: must be a string!');
  }
  var rows = dataView.rows;
  var result = [];
  var groups = partition(rows, groupBy);
  forIn(groups, function (group) {
    var totalSum = sum(group.map(function (row) {
      return row[field];
    }));
    var innerGroups = partition(group, [dimension]);
    forIn(innerGroups, function (innerGroup) {
      var innerSum = sum(innerGroup.map(function (row) {
        return row[field];
      }));
      // const resultRow = pick(innerGroup[0], union(groupBy, [ dimension ]));
      var resultRow = innerGroup[0];
      // FIXME in case dimension and field is the same
      var dimensionValue = resultRow[dimension];
      resultRow[field] = innerSum;
      resultRow[dimension] = dimensionValue;
      resultRow[as] = innerSum / totalSum;
      result.push(resultRow);
    });
  });
  dataView.rows = result;
}

registerTransform('percent', transform);

/***/ }),
/* 632 */
/***/ (function(module, exports, __webpack_require__) {

var pick = __webpack_require__(69);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var _require2 = __webpack_require__(6),
    getFields = _require2.getFields;

/*
 * options: {
 *   type: 'pick',
 *   fields: [],
 * }
 */

registerTransform('pick', function (dataView) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var columns = getFields(options, dataView.getColumnNames());
  dataView.rows = dataView.rows.map(function (row) {
    return pick(row, columns);
  });
});

/***/ }),
/* 633 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var forIn = __webpack_require__(11);
var isString = __webpack_require__(7);
var partition = __webpack_require__(18);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var _require2 = __webpack_require__(6),
    getField = _require2.getField;

var DEFAULT_OPTIONS = {
  // field: 'y', // required
  // dimension: 'x', // required
  groupBy: [], // optional
  as: '_proportion'
};

function transform(dataView) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  options = assign({}, DEFAULT_OPTIONS, options);
  var field = getField(options);
  var dimension = options.dimension;
  var groupBy = options.groupBy;
  var as = options.as;
  if (!isString(dimension)) {
    throw new TypeError('Invalid dimension: must be a string!');
  }
  if (Array.isArray(as)) {
    console.warn('Invalid as: must be a string, will use the first element of the array specified.');
    as = as[0];
  }
  if (!isString(as)) {
    throw new TypeError('Invalid as: must be a string!');
  }
  var rows = dataView.rows;
  var result = [];
  var groups = partition(rows, groupBy);
  forIn(groups, function (group) {
    var totalCount = group.length;
    var innerGroups = partition(group, [dimension]);
    forIn(innerGroups, function (innerGroup) {
      var innerCount = innerGroup.length;
      // const resultRow = pick(innerGroup[0], union(groupBy, [ dimension ]));
      var resultRow = innerGroup[0];
      // FIXME in case dimension and field is the same
      var dimensionValue = resultRow[dimension];
      resultRow[field] = innerCount;
      resultRow[dimension] = dimensionValue;
      resultRow[as] = innerCount / totalCount;
      result.push(resultRow);
    });
  });
  dataView.rows = result;
}

registerTransform('proportion', transform);

/***/ }),
/* 634 */
/***/ (function(module, exports, __webpack_require__) {

var forIn = __webpack_require__(11);
var isPlainObject = __webpack_require__(635);
var isString = __webpack_require__(7);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

/*
 * options: {
 *   type: 'pick',
 *   fields: [],
 * }
 */

function transform(dataView) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var map = options.map || {};
  var cleanMap = {};
  if (isPlainObject(map)) {
    forIn(map, function (value, key) {
      if (isString(value) && isString(key)) {
        cleanMap[key] = value;
      }
    });
  }
  dataView.rows.forEach(function (row) {
    forIn(map, function (newKey, key) {
      var temp = row[key];
      delete row[key];
      row[newKey] = temp;
    });
  });
}

registerTransform('rename', transform);
registerTransform('rename-fields', transform);

/***/ }),
/* 635 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(19),
    getPrototype = __webpack_require__(100),
    isObjectLike = __webpack_require__(15);

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;

/***/ }),
/* 636 */
/***/ (function(module, exports, __webpack_require__) {

var reverse = __webpack_require__(249);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

/*
 * options: {
 *   type: 'reverse',
 * }
 */

registerTransform('reverse', function (dataView) {
  dataView.rows = reverse(dataView.rows);
});

/***/ }),
/* 637 */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

/*
 * options: {
 *   type: 'sort',
 *   callback,
 * }
 */

registerTransform('sort', function (dataView) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var columnName = dataView.getColumnName(0);
  dataView.rows.sort(options.callback || function (a, b) {
    return a[columnName] - b[columnName];
  });
});

/***/ }),
/* 638 */
/***/ (function(module, exports, __webpack_require__) {

var reverse = __webpack_require__(249);
var sortBy = __webpack_require__(639);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var _require2 = __webpack_require__(6),
    getFields = _require2.getFields;

/*
 * options: {
 *   type: 'sort-by',
 *   fields: [],
 *   order: 'ASC' // 'DESC'
 * }
 */

var VALID_ORDERS = ['ASC', 'DESC'];

function transform(dataView) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var fields = getFields(options, [dataView.getColumnName(0)]);
  if (!Array.isArray(fields)) {
    throw new TypeError('Invalid fields: must be an array with strings!');
  }
  dataView.rows = sortBy(dataView.rows, fields);
  var order = options.order;
  if (order && VALID_ORDERS.indexOf(order) === -1) {
    throw new TypeError('Invalid order: ' + order + ' must be one of ' + VALID_ORDERS.join(', '));
  } else if (order === 'DESC') {
    dataView.rows = reverse(dataView.rows);
  }
}
registerTransform('sort-by', transform);
registerTransform('sortBy', transform);

/***/ }),
/* 639 */
/***/ (function(module, exports, __webpack_require__) {

var baseFlatten = __webpack_require__(106),
    baseOrderBy = __webpack_require__(640),
    baseRest = __webpack_require__(77),
    isIterateeCall = __webpack_require__(140);

/**
 * Creates an array of elements, sorted in ascending order by the results of
 * running each element in a collection thru each iteratee. This method
 * performs a stable sort, that is, it preserves the original sort order of
 * equal elements. The iteratees are invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {...(Function|Function[])} [iteratees=[_.identity]]
 *  The iteratees to sort by.
 * @returns {Array} Returns the new sorted array.
 * @example
 *
 * var users = [
 *   { 'user': 'fred',   'age': 48 },
 *   { 'user': 'barney', 'age': 36 },
 *   { 'user': 'fred',   'age': 40 },
 *   { 'user': 'barney', 'age': 34 }
 * ];
 *
 * _.sortBy(users, [function(o) { return o.user; }]);
 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
 *
 * _.sortBy(users, ['user', 'age']);
 * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
 */
var sortBy = baseRest(function (collection, iteratees) {
  if (collection == null) {
    return [];
  }
  var length = iteratees.length;
  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
    iteratees = [];
  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
    iteratees = [iteratees[0]];
  }
  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
});

module.exports = sortBy;

/***/ }),
/* 640 */
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__(68),
    baseIteratee = __webpack_require__(66),
    baseMap = __webpack_require__(641),
    baseSortBy = __webpack_require__(642),
    baseUnary = __webpack_require__(82),
    compareMultiple = __webpack_require__(643),
    identity = __webpack_require__(37);

/**
 * The base implementation of `_.orderBy` without param guards.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
 * @param {string[]} orders The sort orders of `iteratees`.
 * @returns {Array} Returns the new sorted array.
 */
function baseOrderBy(collection, iteratees, orders) {
  var index = -1;
  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));

  var result = baseMap(collection, function (value, key, collection) {
    var criteria = arrayMap(iteratees, function (iteratee) {
      return iteratee(value);
    });
    return { 'criteria': criteria, 'index': ++index, 'value': value };
  });

  return baseSortBy(result, function (object, other) {
    return compareMultiple(object, other, orders);
  });
}

module.exports = baseOrderBy;

/***/ }),
/* 641 */
/***/ (function(module, exports, __webpack_require__) {

var baseEach = __webpack_require__(218),
    isArrayLike = __webpack_require__(20);

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function (value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

module.exports = baseMap;

/***/ }),
/* 642 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.sortBy` which uses `comparer` to define the
 * sort order of `array` and replaces criteria objects with their corresponding
 * values.
 *
 * @private
 * @param {Array} array The array to sort.
 * @param {Function} comparer The function to define sort order.
 * @returns {Array} Returns `array`.
 */
function baseSortBy(array, comparer) {
  var length = array.length;

  array.sort(comparer);
  while (length--) {
    array[length] = array[length].value;
  }
  return array;
}

module.exports = baseSortBy;

/***/ }),
/* 643 */
/***/ (function(module, exports, __webpack_require__) {

var compareAscending = __webpack_require__(644);

/**
 * Used by `_.orderBy` to compare multiple properties of a value to another
 * and stable sort them.
 *
 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
 * specify an order of "desc" for descending or "asc" for ascending sort order
 * of corresponding values.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {boolean[]|string[]} orders The order to sort by for each property.
 * @returns {number} Returns the sort order indicator for `object`.
 */
function compareMultiple(object, other, orders) {
  var index = -1,
      objCriteria = object.criteria,
      othCriteria = other.criteria,
      length = objCriteria.length,
      ordersLength = orders.length;

  while (++index < length) {
    var result = compareAscending(objCriteria[index], othCriteria[index]);
    if (result) {
      if (index >= ordersLength) {
        return result;
      }
      var order = orders[index];
      return result * (order == 'desc' ? -1 : 1);
    }
  }
  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
  // that causes it, under certain circumstances, to provide the same value for
  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
  // for more details.
  //
  // This also ensures a stable sort in V8 and other engines.
  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
  return object.index - other.index;
}

module.exports = compareMultiple;

/***/ }),
/* 644 */
/***/ (function(module, exports, __webpack_require__) {

var isSymbol = __webpack_require__(43);

/**
 * Compares values to sort them in ascending order.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {number} Returns the sort order indicator for `value`.
 */
function compareAscending(value, other) {
  if (value !== other) {
    var valIsDefined = value !== undefined,
        valIsNull = value === null,
        valIsReflexive = value === value,
        valIsSymbol = isSymbol(value);

    var othIsDefined = other !== undefined,
        othIsNull = other === null,
        othIsReflexive = other === other,
        othIsSymbol = isSymbol(other);

    if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
      return 1;
    }
    if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
      return -1;
    }
  }
  return 0;
}

module.exports = compareAscending;

/***/ }),
/* 645 */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var _require2 = __webpack_require__(6),
    getFields = _require2.getFields;

/*
 * options: {
 *   type: 'subset',
 *   startRowIndex: 0,
 *   endRowIndex: 1,
 *   fields: [],
 * }
 */

registerTransform('subset', function (dataView) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var startIndex = options.startRowIndex || 0;
  var endIndex = options.endRowIndex || dataView.rows.length - 1;
  var columns = getFields(options, dataView.getColumnNames());
  dataView.rows = dataView.getSubset(startIndex, endIndex, columns);
});

/***/ }),
/* 646 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var forIn = __webpack_require__(11);
var partition = __webpack_require__(18);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var DEFAULT_OPTIONS = {
  fillBy: 'group', // group | order
  groupBy: [],
  orderBy: []
};

function arrayDifference(arr1, arr2) {
  // arrayDifference([1, 1, 1, 2], [1, 2]) => [1, 1]
  var shadow = arr1.map(function (item) {
    return item;
  }); // shadow copy
  arr2.forEach(function (item) {
    var index = shadow.indexOf(item);
    if (index > -1) {
      shadow.splice(index, 1);
    }
  });
  return shadow;
}

function transform(dataView) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  options = assign({}, DEFAULT_OPTIONS, options);
  var rows = dataView.rows;
  var groupBy = options.groupBy;
  var orderBy = options.orderBy;
  var groups = partition(rows, groupBy, orderBy);
  var maxLength = 0;
  var referenceGroup = [];
  forIn(groups, function (group) {
    if (group.length > maxLength) {
      maxLength = group.length;
      referenceGroup = group;
    }
  });
  var referenceOrderByKeys = [];
  var referenceRowByOrderByKey = {};
  referenceGroup.forEach(function (row) {
    var key = orderBy.map(function (col) {
      return row[col];
    }).join('-');
    referenceOrderByKeys.push(key);
    referenceRowByOrderByKey[key] = row;
  });
  if (options.fillBy === 'order') {
    var first = referenceGroup[0];
    var allOrderByKeys = [];
    var rowByOrderByKey = {};
    rows.forEach(function (row) {
      var key = orderBy.map(function (col) {
        return row[col];
      }).join('-');
      if (allOrderByKeys.indexOf(key) === -1) {
        allOrderByKeys.push(key);
        rowByOrderByKey[key] = row;
      }
    });
    var _missingOrderByKeys = arrayDifference(allOrderByKeys, referenceOrderByKeys);
    _missingOrderByKeys.forEach(function (key) {
      var row = {};
      groupBy.forEach(function (col) {
        row[col] = first[col];
      });
      orderBy.forEach(function (col) {
        row[col] = rowByOrderByKey[key][col];
      });
      rows.push(row);
      referenceGroup.push(row);
      referenceOrderByKeys.push(key);
      referenceRowByOrderByKey[key] = row;
    });
    maxLength = referenceGroup.length;
  }
  forIn(groups, function (group) {
    if (group !== referenceGroup && group.length < maxLength) {
      var _first = group[0];
      // missing orderBy keys
      var orderByKeys = [];
      group.forEach(function (row) {
        orderByKeys.push(orderBy.map(function (col) {
          return row[col];
        }).join('-'));
      });
      var missingOrderByKeys = arrayDifference(referenceOrderByKeys, orderByKeys);
      missingOrderByKeys.some(function (key, i) {
        if (i >= maxLength - group.length) {
          // group length overflow
          return true;
        }
        var referenceRow = referenceRowByOrderByKey[key];
        var row = {};
        groupBy.forEach(function (col) {
          row[col] = _first[col];
        });
        orderBy.forEach(function (col) {
          row[col] = referenceRow[col];
        });
        rows.push(row);
        return false;
      });
    }
  });
}

registerTransform('fill-rows', transform);
registerTransform('fillRows', transform);

/***/ }),
/* 647 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var forIn = __webpack_require__(11);
var has = __webpack_require__(648);
var isFunction = __webpack_require__(8);
var isUndefined = __webpack_require__(650);
var isString = __webpack_require__(7);
var simpleStatistics = __webpack_require__(30);
var partition = __webpack_require__(18);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var _require2 = __webpack_require__(6),
    getField = _require2.getField;

var DEFAULT_OPTIONS = {
  // field: '', // required
  // method: 'value', // required
  // value: 10, // required if (method === 'value')
  groupBy: []
};

function notUndefinedValues(values) {
  return values.filter(function (value) {
    return !isUndefined(value);
  });
}

var STATISTICS_METHODS = ['mean', 'median', 'max', 'min'];
var imputations = {};
STATISTICS_METHODS.forEach(function (method) {
  imputations[method] = function (row, values) {
    return simpleStatistics[method](values);
  };
});
imputations.value = function (row, values, value) {
  return value;
};

function transform(dataView) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var rows = dataView.rows;
  options = assign({}, DEFAULT_OPTIONS, options);
  var field = getField(options);
  var method = options.method;
  var groupBy = options.groupBy;
  if (!method) {
    throw new TypeError('Invalid method!');
  }
  if (method === 'value' && !has(options, 'value')) {
    throw new TypeError('Invalid value: it is nil.');
  }
  var column = notUndefinedValues(dataView.getColumn(field));
  var groups = partition(rows, groupBy);
  forIn(groups, function (group) {
    var fieldValues = notUndefinedValues(group.map(function (row) {
      return row[field];
    }));
    if (fieldValues.length === 0) {
      fieldValues = column;
    }
    group.forEach(function (row) {
      if (isUndefined(row[field])) {
        if (isFunction(method)) {
          row[field] = method(row, fieldValues, options.value, group);
        } else if (isString(method)) {
          row[field] = imputations[method](row, fieldValues, options.value);
        } else {
          throw new TypeError('Invalid method: must be a function or one of ' + STATISTICS_METHODS.join(', '));
        }
      }
    });
  });
}

registerTransform('impute', transform);

/***/ }),
/* 648 */
/***/ (function(module, exports, __webpack_require__) {

var baseHas = __webpack_require__(649),
    hasPath = __webpack_require__(199);

/**
 * Checks if `path` is a direct property of `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = { 'a': { 'b': 2 } };
 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.has(object, 'a');
 * // => true
 *
 * _.has(object, 'a.b');
 * // => true
 *
 * _.has(object, ['a', 'b']);
 * // => true
 *
 * _.has(other, 'a');
 * // => false
 */
function has(object, path) {
  return object != null && hasPath(object, path, baseHas);
}

module.exports = has;

/***/ }),
/* 649 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHas(object, key) {
  return object != null && hasOwnProperty.call(object, key);
}

module.exports = baseHas;

/***/ }),
/* 650 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */
function isUndefined(value) {
  return value === undefined;
}

module.exports = isUndefined;

/***/ }),
/* 651 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var forIn = __webpack_require__(11);
var keys = __webpack_require__(9);
var isString = __webpack_require__(7);
var uniq = __webpack_require__(652);
var simpleStatistics = __webpack_require__(30);
var partition = __webpack_require__(18);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var _require2 = __webpack_require__(6),
    getFields = _require2.getFields;

var DEFAULT_OPTIONS = {
  as: [],
  fields: [],
  groupBy: [],
  operations: []
};
var DEFAULT_OPERATION = 'count';

var aggregates = {
  count: function count(data) {
    return data.length;
  },
  distinct: function distinct(data, field) {
    var values = uniq(data.map(function (row) {
      return row[field];
    }));
    return values.length;
  }
};
var STATISTICS_METHODS = ['max', 'mean', // alias: average
'median', 'min', 'mode', 'product', 'standardDeviation', 'sum', 'sumSimple', 'variance'];
STATISTICS_METHODS.forEach(function (method) {
  aggregates[method] = function (data, field) {
    var values = data.map(function (row) {
      return row[field];
    });
    return simpleStatistics[method](values);
  };
});
aggregates.average = aggregates.mean;

function transform(dataView, options) {
  options = assign({}, DEFAULT_OPTIONS, options);
  var rows = dataView.rows;
  var dims = options.groupBy;
  var fields = getFields(options);
  if (!Array.isArray(fields)) {
    throw new TypeError('Invalid fields: it must be an array with one or more strings!');
  }
  var outputNames = options.as || [];
  if (isString(outputNames)) {
    outputNames = [outputNames];
  }
  var operations = options.operations;
  if (isString(operations)) {
    operations = [operations];
  }
  var DEFAULT_OPERATIONS = [DEFAULT_OPERATION];
  if (!Array.isArray(operations) || !operations.length) {
    console.warn('operations is not defined, will use [ "count" ] directly.');
    operations = DEFAULT_OPERATIONS;
    outputNames = operations;
  }
  if (!(operations.length === 1 && operations[0] === DEFAULT_OPERATION)) {
    if (operations.length !== fields.length) {
      throw new TypeError('Invalid operations: it\'s length must be the same as fields!');
    }
    if (outputNames.length !== fields.length) {
      throw new TypeError('Invalid as: it\'s length must be the same as fields!');
    }
  }
  var groups = partition(rows, dims);
  var results = [];
  forIn(groups, function (group) {
    // const result = pick(group[0], dims);
    var result = group[0];
    operations.forEach(function (operation, i) {
      var outputName = outputNames[i];
      var field = fields[i];
      result[outputName] = aggregates[operation](group, field);
    });
    results.push(result);
  });
  dataView.rows = results;
}

registerTransform('aggregate', transform);
registerTransform('summary', transform);

module.exports = {
  VALID_AGGREGATES: keys(aggregates)
};

/***/ }),
/* 652 */
/***/ (function(module, exports, __webpack_require__) {

var baseUniq = __webpack_require__(653);

/**
 * Creates a duplicate-free version of an array, using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons, in which only the first occurrence of each element
 * is kept. The order of result values is determined by the order they occur
 * in the array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * _.uniq([2, 1, 2]);
 * // => [2, 1]
 */
function uniq(array) {
  return array && array.length ? baseUniq(array) : [];
}

module.exports = uniq;

/***/ }),
/* 653 */
/***/ (function(module, exports, __webpack_require__) {

var SetCache = __webpack_require__(102),
    arrayIncludes = __webpack_require__(247),
    arrayIncludesWith = __webpack_require__(248),
    cacheHas = __webpack_require__(103),
    createSet = __webpack_require__(654),
    setToArray = __webpack_require__(65);

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */
function baseUniq(array, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith;
  } else if (length >= LARGE_ARRAY_SIZE) {
    var set = iteratee ? null : createSet(array);
    if (set) {
      return setToArray(set);
    }
    isCommon = false;
    includes = cacheHas;
    seen = new SetCache();
  } else {
    seen = iteratee ? [] : result;
  }
  outer: while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = comparator || value !== 0 ? value : 0;
    if (isCommon && computed === computed) {
      var seenIndex = seen.length;
      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }
      if (iteratee) {
        seen.push(computed);
      }
      result.push(value);
    } else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

module.exports = baseUniq;

/***/ }),
/* 654 */
/***/ (function(module, exports, __webpack_require__) {

var Set = __webpack_require__(187),
    noop = __webpack_require__(655),
    setToArray = __webpack_require__(65);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */
var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
  return new Set(values);
};

module.exports = createSet;

/***/ }),
/* 655 */
/***/ (function(module, exports) {

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

module.exports = noop;

/***/ }),
/* 656 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var isNumber = __webpack_require__(125);
var regression = __webpack_require__(657);
var getSeriesValues = __webpack_require__(126);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var _require2 = __webpack_require__(6),
    getFields = _require2.getFields;

var _require3 = __webpack_require__(127),
    silverman = _require3.silverman;

var DEFAULT_OPTIONS = {
  as: ['x', 'y'],
  // fields: [ 'x', 'y' ], // required two fields
  method: 'linear', // regression method: linear, exponential, logarithmic, power, polynomial
  // extent: [], // extent to execute regression function, default: [ min(x), max(x) ]
  // bandwidth: 1, // bandWidth to execute regression function
  order: 2, // order of the polynomial curve
  precision: 2 // the number of significant figures the output is rounded to
};

var REGRESSION_METHODS = ['linear', 'exponential', 'logarithmic', 'power', 'polynomial'];

function transform(dataView, options) {
  options = assign({}, DEFAULT_OPTIONS, options);
  var fields = getFields(options);
  if (!Array.isArray(fields) || fields.length !== 2) {
    throw new TypeError('invalid fields: must be an array of 2 strings.');
  }
  var xField = fields[0],
      yField = fields[1];

  var method = options.method;
  if (REGRESSION_METHODS.indexOf(method) === -1) {
    throw new TypeError('invalid method: ' + method + '. Must be one of ' + REGRESSION_METHODS.join(', '));
  }
  var points = dataView.rows.map(function (row) {
    return [row[xField], row[yField]];
  });
  var regressionResult = regression[method](points, options);
  var extent = options.extent;
  if (!Array.isArray(extent) || extent.length !== 2) {
    extent = dataView.range(xField);
  }
  var bandwidth = options.bandwidth;
  if (!isNumber(bandwidth) || bandwidth <= 0) {
    bandwidth = silverman(dataView.getColumn(xField));
  }
  var valuesToPredict = getSeriesValues(extent, bandwidth);
  var result = [];
  var _options$as = options.as,
      asX = _options$as[0],
      asY = _options$as[1];

  valuesToPredict.forEach(function (value) {
    var row = {};

    var _regressionResult$pre = regressionResult.predict(value),
        x = _regressionResult$pre[0],
        y = _regressionResult$pre[1];

    row[asX] = x;
    row[asY] = y;
    if (isFinite(y)) {
      result.push(row);
    }
  });
  dataView.rows = result;
}

registerTransform('regression', transform);

module.exports = {
  REGRESSION_METHODS: REGRESSION_METHODS
};

/***/ }),
/* 657 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports !== "undefined") {
    factory(module);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod);
    global.regression = mod.exports;
  }
})(undefined, function (module) {
  'use strict';

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  var DEFAULT_OPTIONS = { order: 2, precision: 2, period: null };

  /**
  * Determine the coefficient of determination (r^2) of a fit from the observations
  * and predictions.
  *
  * @param {Array<Array<number>>} data - Pairs of observed x-y values
  * @param {Array<Array<number>>} results - Pairs of observed predicted x-y values
  *
  * @return {number} - The r^2 value, or NaN if one cannot be calculated.
  */
  function determinationCoefficient(data, results) {
    var predictions = [];
    var observations = [];

    data.forEach(function (d, i) {
      if (d[1] !== null) {
        observations.push(d);
        predictions.push(results[i]);
      }
    });

    var sum = observations.reduce(function (a, observation) {
      return a + observation[1];
    }, 0);
    var mean = sum / observations.length;

    var ssyy = observations.reduce(function (a, observation) {
      var difference = observation[1] - mean;
      return a + difference * difference;
    }, 0);

    var sse = observations.reduce(function (accum, observation, index) {
      var prediction = predictions[index];
      var residual = observation[1] - prediction[1];
      return accum + residual * residual;
    }, 0);

    return 1 - sse / ssyy;
  }

  /**
  * Determine the solution of a system of linear equations A * x = b using
  * Gaussian elimination.
  *
  * @param {Array<Array<number>>} input - A 2-d matrix of data in row-major form [ A | b ]
  * @param {number} order - How many degrees to solve for
  *
  * @return {Array<number>} - Vector of normalized solution coefficients matrix (x)
  */
  function gaussianElimination(input, order) {
    var matrix = input;
    var n = input.length - 1;
    var coefficients = [order];

    for (var i = 0; i < n; i++) {
      var maxrow = i;
      for (var j = i + 1; j < n; j++) {
        if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxrow])) {
          maxrow = j;
        }
      }

      for (var k = i; k < n + 1; k++) {
        var tmp = matrix[k][i];
        matrix[k][i] = matrix[k][maxrow];
        matrix[k][maxrow] = tmp;
      }

      for (var _j = i + 1; _j < n; _j++) {
        for (var _k = n; _k >= i; _k--) {
          matrix[_k][_j] -= matrix[_k][i] * matrix[i][_j] / matrix[i][i];
        }
      }
    }

    for (var _j2 = n - 1; _j2 >= 0; _j2--) {
      var total = 0;
      for (var _k2 = _j2 + 1; _k2 < n; _k2++) {
        total += matrix[_k2][_j2] * coefficients[_k2];
      }

      coefficients[_j2] = (matrix[n][_j2] - total) / matrix[_j2][_j2];
    }

    return coefficients;
  }

  /**
  * Round a number to a precision, specificed in number of decimal places
  *
  * @param {number} number - The number to round
  * @param {number} precision - The number of decimal places to round to:
  *                             > 0 means decimals, < 0 means powers of 10
  *
  *
  * @return {numbr} - The number, rounded
  */
  function round(number, precision) {
    var factor = Math.pow(10, precision);
    return Math.round(number * factor) / factor;
  }

  /**
  * The set of all fitting methods
  *
  * @namespace
  */
  var methods = {
    linear: function linear(data, options) {
      var sum = [0, 0, 0, 0, 0];
      var len = 0;

      for (var n = 0; n < data.length; n++) {
        if (data[n][1] !== null) {
          len++;
          sum[0] += data[n][0];
          sum[1] += data[n][1];
          sum[2] += data[n][0] * data[n][0];
          sum[3] += data[n][0] * data[n][1];
          sum[4] += data[n][1] * data[n][1];
        }
      }

      var run = len * sum[2] - sum[0] * sum[0];
      var rise = len * sum[3] - sum[0] * sum[1];
      var gradient = run === 0 ? 0 : round(rise / run, options.precision);
      var intercept = round(sum[1] / len - gradient * sum[0] / len, options.precision);

      var predict = function predict(x) {
        return [round(x, options.precision), round(gradient * x + intercept, options.precision)];
      };

      var points = data.map(function (point) {
        return predict(point[0]);
      });

      return {
        points: points,
        predict: predict,
        equation: [gradient, intercept],
        r2: round(determinationCoefficient(data, points), options.precision),
        string: intercept === 0 ? 'y = ' + gradient + 'x' : 'y = ' + gradient + 'x + ' + intercept
      };
    },
    exponential: function exponential(data, options) {
      var sum = [0, 0, 0, 0, 0, 0];

      for (var n = 0; n < data.length; n++) {
        if (data[n][1] !== null) {
          sum[0] += data[n][0];
          sum[1] += data[n][1];
          sum[2] += data[n][0] * data[n][0] * data[n][1];
          sum[3] += data[n][1] * Math.log(data[n][1]);
          sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]);
          sum[5] += data[n][0] * data[n][1];
        }
      }

      var denominator = sum[1] * sum[2] - sum[5] * sum[5];
      var a = Math.exp((sum[2] * sum[3] - sum[5] * sum[4]) / denominator);
      var b = (sum[1] * sum[4] - sum[5] * sum[3]) / denominator;
      var coeffA = round(a, options.precision);
      var coeffB = round(b, options.precision);
      var predict = function predict(x) {
        return [round(x, options.precision), round(coeffA * Math.exp(coeffB * x), options.precision)];
      };

      var points = data.map(function (point) {
        return predict(point[0]);
      });

      return {
        points: points,
        predict: predict,
        equation: [coeffA, coeffB],
        string: 'y = ' + coeffA + 'e^(' + coeffB + 'x)',
        r2: round(determinationCoefficient(data, points), options.precision)
      };
    },
    logarithmic: function logarithmic(data, options) {
      var sum = [0, 0, 0, 0];
      var len = data.length;

      for (var n = 0; n < len; n++) {
        if (data[n][1] !== null) {
          sum[0] += Math.log(data[n][0]);
          sum[1] += data[n][1] * Math.log(data[n][0]);
          sum[2] += data[n][1];
          sum[3] += Math.pow(Math.log(data[n][0]), 2);
        }
      }

      var a = (len * sum[1] - sum[2] * sum[0]) / (len * sum[3] - sum[0] * sum[0]);
      var coeffB = round(a, options.precision);
      var coeffA = round((sum[2] - coeffB * sum[0]) / len, options.precision);

      var predict = function predict(x) {
        return [round(x, options.precision), round(round(coeffA + coeffB * Math.log(x), options.precision), options.precision)];
      };

      var points = data.map(function (point) {
        return predict(point[0]);
      });

      return {
        points: points,
        predict: predict,
        equation: [coeffA, coeffB],
        string: 'y = ' + coeffA + ' + ' + coeffB + ' ln(x)',
        r2: round(determinationCoefficient(data, points), options.precision)
      };
    },
    power: function power(data, options) {
      var sum = [0, 0, 0, 0, 0];
      var len = data.length;

      for (var n = 0; n < len; n++) {
        if (data[n][1] !== null) {
          sum[0] += Math.log(data[n][0]);
          sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);
          sum[2] += Math.log(data[n][1]);
          sum[3] += Math.pow(Math.log(data[n][0]), 2);
        }
      }

      var b = (len * sum[1] - sum[0] * sum[2]) / (len * sum[3] - Math.pow(sum[0], 2));
      var a = (sum[2] - b * sum[0]) / len;
      var coeffA = round(Math.exp(a), options.precision);
      var coeffB = round(b, options.precision);

      var predict = function predict(x) {
        return [round(x, options.precision), round(round(coeffA * Math.pow(x, coeffB), options.precision), options.precision)];
      };

      var points = data.map(function (point) {
        return predict(point[0]);
      });

      return {
        points: points,
        predict: predict,
        equation: [coeffA, coeffB],
        string: 'y = ' + coeffA + 'x^' + coeffB,
        r2: round(determinationCoefficient(data, points), options.precision)
      };
    },
    polynomial: function polynomial(data, options) {
      var lhs = [];
      var rhs = [];
      var a = 0;
      var b = 0;
      var len = data.length;
      var k = options.order + 1;

      for (var i = 0; i < k; i++) {
        for (var l = 0; l < len; l++) {
          if (data[l][1] !== null) {
            a += Math.pow(data[l][0], i) * data[l][1];
          }
        }

        lhs.push(a);
        a = 0;

        var c = [];
        for (var j = 0; j < k; j++) {
          for (var _l = 0; _l < len; _l++) {
            if (data[_l][1] !== null) {
              b += Math.pow(data[_l][0], i + j);
            }
          }
          c.push(b);
          b = 0;
        }
        rhs.push(c);
      }
      rhs.push(lhs);

      var coefficients = gaussianElimination(rhs, k).map(function (v) {
        return round(v, options.precision);
      });

      var predict = function predict(x) {
        return [round(x, options.precision), round(coefficients.reduce(function (sum, coeff, power) {
          return sum + coeff * Math.pow(x, power);
        }, 0), options.precision)];
      };

      var points = data.map(function (point) {
        return predict(point[0]);
      });

      var string = 'y = ';
      for (var _i = coefficients.length - 1; _i >= 0; _i--) {
        if (_i > 1) {
          string += coefficients[_i] + 'x^' + _i + ' + ';
        } else if (_i === 1) {
          string += coefficients[_i] + 'x + ';
        } else {
          string += coefficients[_i];
        }
      }

      return {
        string: string,
        points: points,
        predict: predict,
        equation: [].concat(_toConsumableArray(coefficients)).reverse(),
        r2: round(determinationCoefficient(data, points), options.precision)
      };
    }
  };

  function createWrapper() {
    var reduce = function reduce(accumulator, name) {
      return _extends({
        _round: round
      }, accumulator, _defineProperty({}, name, function (data, supplied) {
        return methods[name](data, _extends({}, DEFAULT_OPTIONS, supplied));
      }));
    };

    return Object.keys(methods).reduce(reduce, {});
  }

  module.exports = createWrapper();
});

/***/ }),
/* 658 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var forIn = __webpack_require__(11);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var _require2 = __webpack_require__(6),
    getFields = _require2.getFields;

var DEFAULT_OPTIONS = {
  as: ['x', 'y', 'count'],
  bins: [30, 30], // Numeric vector giving number of bins in both horizontal and vertical directions
  offset: [0, 0],
  sizeByCount: false // calculate bin size by binning count
  // fields: ['field0', 'field1'], // required
  // binWidth: [ 30, 30 ], // Numeric vector giving bin width in both horizontal and vertical directions. Overrides bins if both set.
};
var SQRT3 = Math.sqrt(3);
var THIRD_PI = Math.PI / 3;
var ANGLES = [0, THIRD_PI, 2 * THIRD_PI, 3 * THIRD_PI, 4 * THIRD_PI, 5 * THIRD_PI];

function distance(x0, y0, x1, y1) {
  return Math.sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1));
}
function nearestBinsCenters(value, scale, offset) {
  var temp = value - offset;
  scale = scale / 2;
  var div = Math.floor(temp / scale);
  var rounded = scale * (div + (Math.abs(div % 2) === 1 ? 1 : 0));
  var roundedScaled = scale * (div + (Math.abs(div % 2) === 1 ? 0 : 1));
  return [rounded + offset, roundedScaled + offset];
}
function generateBins(points) {
  var binWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [1, 1];
  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 0];
  // processing aligned data
  var bins = {};
  var binWidthX = binWidth[0],
      binWidthY = binWidth[1];
  var offsetX = offset[0],
      offsetY = offset[1];

  points.forEach(function (point) {
    var x = point[0],
        y = point[1];
    // step3.1: nearest two centers

    var _nearestBinsCenters = nearestBinsCenters(x, binWidthX, offsetX),
        xRounded = _nearestBinsCenters[0],
        xRoundedScaled = _nearestBinsCenters[1];

    var _nearestBinsCenters2 = nearestBinsCenters(y, binWidthY, offsetY),
        yRounded = _nearestBinsCenters2[0],
        yRoundedScaled = _nearestBinsCenters2[1];
    // step3.2: compare distances


    var d1 = distance(x, y, xRounded, yRounded);
    var d2 = distance(x, y, xRoundedScaled, yRoundedScaled);
    var binKey = void 0;
    var binX = void 0;
    var binY = void 0;

    if (d1 < d2) {
      binKey = 'x' + xRounded + 'y' + yRounded;
      binX = xRounded;
      binY = yRounded;
    } else {
      binKey = 'x' + xRoundedScaled + 'y' + yRoundedScaled;
      binX = xRoundedScaled;
      binY = yRoundedScaled;
    }
    bins[binKey] = bins[binKey] || {
      x: binX,
      y: binY,
      count: 0
    };
    bins[binKey].count++;
  });
  return bins;
}

function transform(dataView, options) {
  // step1: get binWidth, etc.
  options = assign({}, DEFAULT_OPTIONS, options);
  var fields = getFields(options);
  if (!Array.isArray(fields) || fields.length !== 2) {
    throw new TypeError('Invalid fields: it must be an array with 2 strings!');
  }
  var fieldX = fields[0],
      fieldY = fields[1];

  var rangeFieldX = dataView.range(fieldX);
  var rangeFieldY = dataView.range(fieldY);
  var widthX = rangeFieldX[1] - rangeFieldX[0];
  var widthY = rangeFieldY[1] - rangeFieldY[0];
  var binWidth = options.binWidth || [];
  if (binWidth.length !== 2) {
    var _options$bins = options.bins,
        binsX = _options$bins[0],
        binsY = _options$bins[1];

    if (binsX <= 0 || binsY <= 0) {
      throw new TypeError('Invalid bins: must be an array with two positive numbers (e.g. [ 30, 30 ])!');
    }
    binWidth = [widthX / binsX, widthY / binsY];
  }
  // step2: align scale (squash Y)
  /*
   * binWidthX / binWidthY should be Math.sqrt3 / 1.5
   * -: binWidthX |: binWidthY
   *           3
   *           |
   *   4       |        2
   *           |
   *           |
   *   5----------------1
   *
   *           0
   */
  var _options$offset = options.offset,
      offsetX = _options$offset[0],
      offsetY = _options$offset[1];

  var yScale = 3 * binWidth[0] / (SQRT3 * binWidth[1]);
  // const yScale = binWidth[0] / (SQRT3 * binWidth[1]);
  var points = dataView.rows.map(function (row) {
    return [row[fieldX], yScale * row[fieldY]];
  });
  // step3: binning
  var bins = generateBins(points, [binWidth[0], yScale * binWidth[1]], [offsetX, yScale * offsetY]);
  // step4: restore scale (for Y)
  var _options$as = options.as,
      asX = _options$as[0],
      asY = _options$as[1],
      asCount = _options$as[2];

  if (!asX || !asY || !asCount) {
    throw new TypeError('Invalid as: it must be an array with three elements (e.g. [ "x", "y", "count" ])!');
  }
  var radius = binWidth[0] / SQRT3;
  var hexagonPoints = ANGLES.map(function (angle) {
    return [Math.sin(angle) * radius, -Math.cos(angle) * radius];
  });
  var result = [];
  var maxCount = 0;
  if (options.sizeByCount) {
    forIn(bins, function (bin) {
      if (bin.count > maxCount) {
        maxCount = bin.count;
      }
    });
  }
  forIn(bins, function (bin) {
    var x = bin.x,
        y = bin.y,
        count = bin.count;

    var row = {};
    row[asCount] = count;
    if (options.sizeByCount) {
      row[asX] = hexagonPoints.map(function (p) {
        return x + bin.count / maxCount * p[0];
      });
      row[asY] = hexagonPoints.map(function (p) {
        return (y + bin.count / maxCount * p[1]) / yScale;
      });
    } else {
      row[asX] = hexagonPoints.map(function (p) {
        return x + p[0];
      });
      row[asY] = hexagonPoints.map(function (p) {
        return (y + p[1]) / yScale;
      });
    }
    result.push(row);
  });

  dataView.rows = result;
}

registerTransform('bin.hexagon', transform);
registerTransform('bin.hex', transform);
registerTransform('hexbin', transform);

/***/ }),
/* 659 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var forIn = __webpack_require__(11);
var pick = __webpack_require__(69);
var partition = __webpack_require__(18);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var _require2 = __webpack_require__(6),
    getField = _require2.getField;

var DEFAULT_OPTIONS = {
  as: ['x', 'count'],
  bins: 30,
  offset: 0,
  groupBy: []
  // field: '', // required
  // binWidth: 10, // override bins
};

function nearestBin(value, scale, offset) {
  var temp = value - offset;
  var div = Math.floor(temp / scale);
  return [div * scale + offset, (div + 1) * scale + offset];
}

function transform(dataView, options) {
  options = assign({}, DEFAULT_OPTIONS, options);
  var field = getField(options);
  var range = dataView.range(field);
  var width = range[1] - range[0];
  var binWidth = options.binWidth;
  if (!binWidth) {
    var bins = options.bins;
    if (bins <= 0) {
      throw new TypeError('Invalid bins: it must be a positive number!');
    }
    binWidth = width / bins;
  }
  var offset = options.offset % binWidth;

  // grouping
  var rows = [];
  var groupBy = options.groupBy;
  var groups = partition(dataView.rows, groupBy);
  forIn(groups, function (group) {
    var bins = {};
    var column = group.map(function (row) {
      return row[field];
    });
    column.forEach(function (value) {
      var _nearestBin = nearestBin(value, binWidth, offset),
          x0 = _nearestBin[0],
          x1 = _nearestBin[1];

      var binKey = x0 + '-' + x1;
      bins[binKey] = bins[binKey] || {
        x0: x0,
        x1: x1,
        count: 0
      };
      bins[binKey].count++;
    });
    var _options$as = options.as,
        asX = _options$as[0],
        asCount = _options$as[1];

    if (!asX || !asCount) {
      throw new TypeError('Invalid as: it must be an array with 2 elements (e.g. [ "x", "count" ])!');
    }

    var meta = pick(group[0], groupBy);
    forIn(bins, function (bin) {
      var row = assign({}, meta);
      row[asX] = [bin.x0, bin.x1];
      row[asCount] = bin.count;
      rows.push(row);
    });
  });
  dataView.rows = rows;
}

registerTransform('bin.histogram', transform);
registerTransform('bin.dot', transform);

/***/ }),
/* 660 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var forIn = __webpack_require__(11);
var isString = __webpack_require__(7);
// const pick = require('lodash/pick');

var _require = __webpack_require__(30),
    quantile = _require.quantile;

var partition = __webpack_require__(18);
var pByFraction = __webpack_require__(235);

var _require2 = __webpack_require__(2),
    registerTransform = _require2.registerTransform;

var _require3 = __webpack_require__(6),
    getField = _require3.getField;

var DEFAULT_OPTIONS = {
  as: '_bin',
  groupBy: [], // optional
  fraction: 4 // default
  // p: [0.5, 0.3], // array of p parameter
  // field: 'y', // required
};

function transform(dataView, options) {
  options = assign({}, DEFAULT_OPTIONS, options);
  var field = getField(options);
  var as = options.as;
  if (!isString(as)) {
    throw new TypeError('Invalid as: it must be a string (e.g. "_bin")!');
  }
  var pArray = options.p;
  var fraction = options.fraction;
  if (!Array.isArray(pArray) || pArray.length === 0) {
    pArray = pByFraction(fraction);
  }
  var rows = dataView.rows;
  var groupBy = options.groupBy;
  var groups = partition(rows, groupBy);
  var result = [];
  forIn(groups, function (group) {
    // const resultRow = pick(group[0], groupBy);
    var resultRow = group[0];
    var binningColumn = group.map(function (row) {
      return row[field];
    });
    var quantiles = pArray.map(function (p) {
      return quantile(binningColumn, p);
    });
    resultRow[as] = quantiles;
    result.push(resultRow);
  });
  dataView.rows = result;
}

registerTransform('bin.quantile', transform);

/***/ }),
/* 661 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var forIn = __webpack_require__(11);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var _require2 = __webpack_require__(6),
    getFields = _require2.getFields;

var DEFAULT_OPTIONS = {
  as: ['x', 'y', 'count'],
  bins: [30, 30], // Numeric vector giving number of bins in both horizontal and vertical directions
  offset: [0, 0],
  sizeByCount: false // calculate bin size by binning count
  // fields: ['field0', 'field1'], // required
  // binWidth: [ 30, 30 ], // Numeric vector giving bin width in both horizontal and vertical directions. Overrides bins if both set.
};

function nearestBin(value, scale, offset) {
  var temp = value - offset;
  var div = Math.floor(temp / scale);
  return [div * scale + offset, (div + 1) * scale + offset];
}

function transform(dataView, options) {
  options = assign({}, DEFAULT_OPTIONS, options);

  var _getFields = getFields(options),
      fieldX = _getFields[0],
      fieldY = _getFields[1];

  if (!fieldX || !fieldY) {
    throw new TypeError('Invalid fields: must be an array with 2 strings!');
  }
  var rangeFieldX = dataView.range(fieldX);
  var rangeFieldY = dataView.range(fieldY);
  var widthX = rangeFieldX[1] - rangeFieldX[0];
  var widthY = rangeFieldY[1] - rangeFieldY[0];
  var binWidth = options.binWidth || [];
  if (binWidth.length !== 2) {
    var _options$bins = options.bins,
        binsX = _options$bins[0],
        binsY = _options$bins[1];

    if (binsX <= 0 || binsY <= 0) {
      throw new TypeError('Invalid bins: must be an array with 2 positive numbers (e.g. [ 30, 30 ])!');
    }
    binWidth = [widthX / binsX, widthY / binsY];
  }
  var points = dataView.rows.map(function (row) {
    return [row[fieldX], row[fieldY]];
  });
  var bins = {};
  var _options$offset = options.offset,
      offsetX = _options$offset[0],
      offsetY = _options$offset[1];

  points.forEach(function (point) {
    var _nearestBin = nearestBin(point[0], binWidth[0], offsetX),
        x0 = _nearestBin[0],
        x1 = _nearestBin[1];

    var _nearestBin2 = nearestBin(point[1], binWidth[1], offsetY),
        y0 = _nearestBin2[0],
        y1 = _nearestBin2[1];

    var binKey = x0 + '-' + x1 + '-' + y0 + '-' + y1;
    bins[binKey] = bins[binKey] || {
      x0: x0,
      x1: x1,
      y0: y0,
      y1: y1,
      count: 0
    };
    bins[binKey].count++;
  });
  var rows = [];
  var _options$as = options.as,
      asX = _options$as[0],
      asY = _options$as[1],
      asCount = _options$as[2];

  if (!asX || !asY || !asCount) {
    throw new TypeError('Invalid as: it must be an array with 3 strings (e.g. [ "x", "y", "count" ])!');
  }
  /* points
   * 3---2
   * |   |
   * 0---1
   */
  if (!options.sizeByCount) {
    forIn(bins, function (bin) {
      var row = {};
      row[asX] = [bin.x0, bin.x1, bin.x1, bin.x0];
      row[asY] = [bin.y0, bin.y0, bin.y1, bin.y1];
      row[asCount] = bin.count;
      rows.push(row);
    });
  } else {
    var maxCount = 0;
    forIn(bins, function (bin) {
      if (bin.count > maxCount) {
        maxCount = bin.count;
      }
    });
    forIn(bins, function (bin) {
      var x0 = bin.x0,
          x1 = bin.x1,
          y0 = bin.y0,
          y1 = bin.y1,
          count = bin.count;

      var scale = count / maxCount;
      var cx = (x0 + x1) / 2,
          cy = (y0 + y1) / 2;

      var rx = (x1 - x0) * scale / 2;
      var ry = (y1 - y0) * scale / 2;
      var x01 = cx - rx;
      var x11 = cx + rx;
      var y01 = cy - ry;
      var y11 = cy + ry;
      var row = {};
      row[asX] = [x01, x11, x11, x01];
      row[asY] = [y01, y01, y11, y11];
      row[asCount] = count;
      rows.push(row);
    });
  }
  dataView.rows = rows;
}

registerTransform('bin.rectangle', transform);
registerTransform('bin.rect', transform);

/***/ }),
/* 662 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var isString = __webpack_require__(7);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var _require2 = __webpack_require__(6),
    getField = _require2.getField;

var DEFAULT_OPTIONS = {
  // field: 'name', // required
  // geoView: view, // required
  // geoDataView: view, // alias
  as: ['_centroid_x', '_centroid_y']
};

function transform(view, options) {
  options = assign({}, DEFAULT_OPTIONS, options);
  var field = getField(options);
  var geoView = options.geoView || options.geoDataView; // alias
  if (isString(geoView)) {
    geoView = view.dataSet.getView(geoView);
  }
  if (!geoView || geoView.dataType !== 'geo') {
    throw new TypeError('Invalid geoView: must be a DataView of GEO dataType!');
  }
  var as = options.as;
  if (!Array.isArray(as) || as.length !== 2) {
    throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "cX", "cY" ])!');
  }

  var centroidX = as[0];
  var centroidY = as[1];
  view.rows.forEach(function (row) {
    var feature = geoView.geoFeatureByName(row[field]);
    if (feature) {
      if (geoView._projectedAs) {
        row[centroidX] = feature[geoView._projectedAs[2]];
        row[centroidY] = feature[geoView._projectedAs[3]];
      } else {
        row[centroidX] = feature.centroidX;
        row[centroidY] = feature.centroidY;
      }
    }
  });
}

registerTransform('geo.centroid', transform);

/***/ }),
/* 663 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var d3Geo = __webpack_require__(0);
var getPointAtLength = __webpack_require__(238);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var getGeoProjection = __webpack_require__(202);

var geoPath = d3Geo.geoPath;

var DEFAULT_OPTIONS = {
  // projection: '', // default to null
  as: ['_x', '_y', '_centroid_x', '_centroid_y']
};

function transform(dataView, options) {
  if (dataView.dataType !== 'geo' && dataView.dataType !== 'geo-graticule') {
    throw new TypeError('Invalid dataView: this transform is for Geo data only!');
  }
  options = assign({}, DEFAULT_OPTIONS, options);
  var projection = options.projection;
  if (!projection) {
    throw new TypeError('Invalid projection!');
  }
  projection = getGeoProjection(projection);
  var geoPathGenerator = geoPath(projection);
  var as = options.as;
  if (!Array.isArray(as) || as.length !== 4) {
    throw new TypeError('Invalid as: it must be an array with 4 strings (e.g. [ "x", "y", "cX", "cY" ])!');
  }
  dataView._projectedAs = as;
  var lonField = as[0],
      latField = as[1],
      centroidX = as[2],
      centroidY = as[3];

  dataView.rows.forEach(function (row) {
    row[lonField] = [];
    row[latField] = [];
    var pathData = geoPathGenerator(row);
    if (pathData) {
      // TODO projection returns null
      var points = getPointAtLength(pathData);
      points._path.forEach(function (point) {
        row[lonField].push(point[1]);
        row[latField].push(point[2]);
      });
      var centroid = geoPathGenerator.centroid(row);
      row[centroidX] = centroid[0];
      row[centroidY] = centroid[1];
    }
  });
  dataView.rows = dataView.rows.filter(function (row) {
    return row[lonField].length !== 0;
  });
}

registerTransform('geo.projection', transform);

/***/ }),
/* 664 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var isString = __webpack_require__(7);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var _require2 = __webpack_require__(6),
    getField = _require2.getField;

var DEFAULT_OPTIONS = {
  // field: 'name', // required
  // geoView: view, // required
  // geoDataView: view, // alias
  as: ['_x', '_y']
};

function transform(view, options) {
  options = assign({}, DEFAULT_OPTIONS, options);
  var field = getField(options);
  var geoView = options.geoView || options.geoDataView; // alias
  if (isString(geoView)) {
    geoView = view.dataSet.getView(geoView);
  }
  if (!geoView || geoView.dataType !== 'geo') {
    throw new TypeError('Invalid geoView: must be a DataView of GEO dataType!');
  }
  var as = options.as;
  if (!Array.isArray(as) || as.length !== 2) {
    throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "x", "y" ])!');
  }
  var lonField = as[0];
  var latField = as[1];
  view.rows.forEach(function (row) {
    var feature = geoView.geoFeatureByName(row[field]);
    if (feature) {
      if (geoView._projectedAs) {
        row[lonField] = feature[geoView._projectedAs[0]];
        row[latField] = feature[geoView._projectedAs[1]];
      } else {
        row[lonField] = feature.longitude;
        row[latField] = feature.latitude;
      }
    }
  });
}

registerTransform('geo.region', transform);

/***/ }),
/* 665 */
/***/ (function(module, exports, __webpack_require__) {

/*
 * for Arc Diagram (edges without weight) / Chord Diagram (edges with source and target weight)
 * graph data required (nodes, edges)
 */
var assign = __webpack_require__(5);
var forIn = __webpack_require__(11);
var values = __webpack_require__(113);
var isFunction = __webpack_require__(8);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var DEFAULT_OPTIONS = {
  y: 0,
  thickness: 0.05, // thickness of the node, (0, 1)
  weight: false,
  marginRatio: 0.1, // margin ratio, [0, 1)
  id: function id(node) {
    return node.id;
  },
  source: function source(edge) {
    return edge.source;
  },
  target: function target(edge) {
    return edge.target;
  },
  sourceWeight: function sourceWeight(edge) {
    return edge.value || 1;
  },
  targetWeight: function targetWeight(edge) {
    return edge.value || 1;
  },
  sortBy: null // optional, id | weight | frequency | {function}
};

function _nodesFromEdges(edges, options) {
  var map = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  edges.forEach(function (edge) {
    var sId = options.edgeSource(edge);
    var tId = options.edgeTarget(edge);
    if (!map[sId]) {
      map[sId] = {
        id: sId
      };
    }
    if (!map[tId]) {
      map[tId] = {
        id: tId
      };
    }
  });
  return values(map);
}

function _processGraph(nodeById, edges, options) {
  forIn(nodeById, function (node, id) {
    // in edges, out edges
    node.inEdges = edges.filter(function (edge) {
      return '' + options.target(edge) === '' + id;
    });
    node.outEdges = edges.filter(function (edge) {
      return '' + options.source(edge) === '' + id;
    });
    // frequency
    node.edges = node.outEdges.concat(node.inEdges);
    node.frequency = node.edges.length;
    // weight
    node.value = 0;
    node.inEdges.forEach(function (edge) {
      node.value += options.targetWeight(edge);
    });
    node.outEdges.forEach(function (edge) {
      node.value += options.sourceWeight(edge);
    });
  });
}

function _sortNodes(nodes, options) {
  var sortMethods = {
    weight: function weight(a, b) {
      return b.value - a.value;
    },
    frequency: function frequency(a, b) {
      return b.frequency - a.frequency;
    },
    id: function id(a, b) {
      return ('' + options.id(a)).localeCompare('' + options.id(b));
    }
  };
  var method = sortMethods[options.sortBy];
  if (!method && isFunction(options.sortBy)) {
    method = options.sortBy;
  }
  if (method) {
    nodes.sort(method);
  }
}

function _layoutNodes(nodes, options) {
  var len = nodes.length;
  if (!len) {
    throw new TypeError('Invalid nodes: it\'s empty!');
  }
  if (options.weight) {
    var marginRatio = options.marginRatio;
    if (marginRatio < 0 || marginRatio >= 1) {
      throw new TypeError('Invalid marginRatio: it must be in range [0, 1)!');
    }
    var margin = marginRatio / (2 * len);
    var thickness = options.thickness;
    if (thickness <= 0 || thickness >= 1) {
      throw new TypeError('Invalid thickness: it must be in range (0, 1)!');
    }
    var totalValue = 0;
    nodes.forEach(function (node) {
      totalValue += node.value;
    });
    nodes.forEach(function (node) {
      node.weight = node.value / totalValue;
      node.width = node.weight * (1 - marginRatio);
      node.height = thickness;
    });
    nodes.forEach(function (node, index) {
      // x
      var deltaX = 0;
      for (var i = index - 1; i >= 0; i--) {
        deltaX += nodes[i].width + 2 * margin;
      }
      var minX = node.minX = margin + deltaX;
      var maxX = node.maxX = node.minX + node.width;
      var minY = node.minY = options.y - thickness / 2;
      var maxY = node.maxY = minY + thickness;
      node.x = [minX, maxX, maxX, minX];
      node.y = [minY, minY, maxY, maxY];
      /* points
       * 3---2
       * |   |
       * 0---1
       */
      // node.x = minX + 0.5 * node.width;
      // node.y = options.y;
    });
  } else {
    var deltaX = 1 / len;
    nodes.forEach(function (node, index) {
      node.x = (index + 0.5) * deltaX;
      node.y = options.y;
    });
  }
}

function _locatingEdges(nodeById, edges, options) {
  if (options.weight) {
    var valueById = {};
    forIn(nodeById, function (node, id) {
      valueById[id] = node.value;
    });
    edges.forEach(function (edge) {
      var sId = options.source(edge);
      var tId = options.target(edge);
      var sNode = nodeById[sId];
      var tNode = nodeById[tId];
      if (sNode && tNode) {
        var sValue = valueById[sId];
        var currentSValue = options.sourceWeight(edge);
        var sStart = sNode.minX + (sNode.value - sValue) / sNode.value * sNode.width;
        var sEnd = sStart + currentSValue / sNode.value * sNode.width;
        valueById[sId] -= currentSValue;

        var tValue = valueById[tId];
        var currentTValue = options.targetWeight(edge);
        var tStart = tNode.minX + (tNode.value - tValue) / tNode.value * tNode.width;
        var tEnd = tStart + currentTValue / tNode.value * tNode.width;
        valueById[tId] -= currentTValue;

        var y = options.y;
        edge.x = [sStart, sEnd, tStart, tEnd];
        edge.y = [y, y, y, y];
      }
    });
  } else {
    edges.forEach(function (edge) {
      var sNode = nodeById[options.source(edge)];
      var tNode = nodeById[options.target(edge)];
      if (sNode && tNode) {
        edge.x = [sNode.x, tNode.x];
        edge.y = [sNode.y, tNode.y];
      }
    });
  }
}

function transform(dv, options) {
  options = assign({}, DEFAULT_OPTIONS, options);
  var nodeById = {};
  var nodes = dv.nodes;
  var edges = dv.edges;
  if (!Array.isArray(nodes) || nodes.length === 0) {
    nodes = _nodesFromEdges(edges, options, nodeById);
  }
  nodes.forEach(function (node) {
    var id = options.id(node);
    nodeById[id] = node;
  });
  _processGraph(nodeById, edges, options);
  _sortNodes(nodes, options);
  _layoutNodes(nodes, options);
  _locatingEdges(nodeById, edges, options);
  dv.nodes = nodes;
  dv.edges = edges;
}

registerTransform('diagram.arc', transform);
registerTransform('arc', transform);

/***/ }),
/* 666 */
/***/ (function(module, exports, __webpack_require__) {

/*
 * for Sankey Diagram
 * graph data required (nodes, edges)
 */
var assign = __webpack_require__(5);
var isString = __webpack_require__(7);
var isFunction = __webpack_require__(8);

var _require = __webpack_require__(667),
    sankey = _require.sankey,
    sankeyLeft = _require.sankeyLeft,
    sankeyRight = _require.sankeyRight,
    sankeyCenter = _require.sankeyCenter,
    sankeyJustify = _require.sankeyJustify;

var _require2 = __webpack_require__(2),
    registerTransform = _require2.registerTransform;

var ALIGN_METHOD = {
  sankeyLeft: sankeyLeft,
  sankeyRight: sankeyRight,
  sankeyCenter: sankeyCenter,
  sankeyJustify: sankeyJustify
};

var DEFAULT_OPTIONS = {
  // nodeId: node => node.index,
  value: function value(node) {
    return node.value;
  },
  source: function source(edge) {
    return edge.source;
  },
  target: function target(edge) {
    return edge.target;
  },
  nodeAlign: 'sankeyJustify',
  nodeWidth: 0.02,
  nodePadding: 0.02
};

function transform(dv, options) {
  options = assign({}, DEFAULT_OPTIONS, options);
  var nodeAlign = null;
  if (isString(options.nodeAlign)) {
    nodeAlign = ALIGN_METHOD[options.nodeAlign];
  } else if (isFunction(options.nodeAlign)) {
    nodeAlign = options.nodeAlign;
  }
  var sankeyProcessor = sankey().links(function (d) {
    return d.edges;
  }).nodeWidth(options.nodeWidth).nodePadding(options.nodePadding).extent([[0, 0], [1, 1]]);
  if (isFunction(options.nodeId)) {
    sankeyProcessor.nodeId(options.nodeId);
  }
  if (nodeAlign) {
    sankeyProcessor.nodeAlign(nodeAlign);
  }
  sankeyProcessor(dv);
  // post process (x, y), etc.
  dv.nodes.forEach(function (node) {
    var x0 = node.x0,
        x1 = node.x1,
        y0 = node.y0,
        y1 = node.y1;
    /* points
     * 3---2
     * |   |
     * 0---1
     */

    node.x = [x0, x1, x1, x0];
    node.y = [y0, y0, y1, y1];
  });
  dv.edges.forEach(function (edge) {
    var source = edge.source,
        target = edge.target;

    var sx = source.x1;
    var tx = target.x0;
    edge.x = [sx, sx, tx, tx];
    var offset = edge.width / 2;
    edge.y = [edge.y0 + offset, edge.y0 - offset, edge.y1 + offset, edge.y1 - offset];
  });
}

registerTransform('diagram.sankey', transform);
registerTransform('sankey', transform);

/***/ }),
/* 667 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _sankey = __webpack_require__(668);

Object.defineProperty(exports, "sankey", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sankey).default;
  }
});

var _align = __webpack_require__(250);

Object.defineProperty(exports, "sankeyCenter", {
  enumerable: true,
  get: function get() {
    return _align.center;
  }
});
Object.defineProperty(exports, "sankeyLeft", {
  enumerable: true,
  get: function get() {
    return _align.left;
  }
});
Object.defineProperty(exports, "sankeyRight", {
  enumerable: true,
  get: function get() {
    return _align.right;
  }
});
Object.defineProperty(exports, "sankeyJustify", {
  enumerable: true,
  get: function get() {
    return _align.justify;
  }
});

var _sankeyLinkHorizontal = __webpack_require__(676);

Object.defineProperty(exports, "sankeyLinkHorizontal", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sankeyLinkHorizontal).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 668 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = function () {
  var x0 = 0,
      y0 = 0,
      x1 = 1,
      y1 = 1,
      // extent
  dx = 24,
      // nodeWidth
  py = 8,
      // nodePadding
  id = defaultId,
      align = _align.justify,
      nodes = defaultNodes,
      links = defaultLinks,
      iterations = 32;

  function sankey() {
    var graph = { nodes: nodes.apply(null, arguments), links: links.apply(null, arguments) };
    computeNodeLinks(graph);
    computeNodeValues(graph);
    computeNodeDepths(graph);
    computeNodeBreadths(graph, iterations);
    computeLinkBreadths(graph);
    return graph;
  }

  sankey.update = function (graph) {
    computeLinkBreadths(graph);
    return graph;
  };

  sankey.nodeId = function (_) {
    return arguments.length ? (id = typeof _ === "function" ? _ : (0, _constant2.default)(_), sankey) : id;
  };

  sankey.nodeAlign = function (_) {
    return arguments.length ? (align = typeof _ === "function" ? _ : (0, _constant2.default)(_), sankey) : align;
  };

  sankey.nodeWidth = function (_) {
    return arguments.length ? (dx = +_, sankey) : dx;
  };

  sankey.nodePadding = function (_) {
    return arguments.length ? (py = +_, sankey) : py;
  };

  sankey.nodes = function (_) {
    return arguments.length ? (nodes = typeof _ === "function" ? _ : (0, _constant2.default)(_), sankey) : nodes;
  };

  sankey.links = function (_) {
    return arguments.length ? (links = typeof _ === "function" ? _ : (0, _constant2.default)(_), sankey) : links;
  };

  sankey.size = function (_) {
    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];
  };

  sankey.extent = function (_) {
    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];
  };

  sankey.iterations = function (_) {
    return arguments.length ? (iterations = +_, sankey) : iterations;
  };

  // Populate the sourceLinks and targetLinks for each node.
  // Also, if the source and target are not objects, assume they are indices.
  function computeNodeLinks(graph) {
    graph.nodes.forEach(function (node, i) {
      node.index = i;
      node.sourceLinks = [];
      node.targetLinks = [];
    });
    var nodeById = (0, _d3Collection.map)(graph.nodes, id);
    graph.links.forEach(function (link, i) {
      link.index = i;
      var source = link.source,
          target = link.target;
      if ((typeof source === "undefined" ? "undefined" : _typeof(source)) !== "object") source = link.source = find(nodeById, source);
      if ((typeof target === "undefined" ? "undefined" : _typeof(target)) !== "object") target = link.target = find(nodeById, target);
      source.sourceLinks.push(link);
      target.targetLinks.push(link);
    });
  }

  // Compute the value (size) of each node by summing the associated links.
  function computeNodeValues(graph) {
    graph.nodes.forEach(function (node) {
      node.value = Math.max((0, _d3Array.sum)(node.sourceLinks, value), (0, _d3Array.sum)(node.targetLinks, value));
    });
  }

  // Iteratively assign the depth (x-position) for each node.
  // Nodes are assigned the maximum depth of incoming neighbors plus one;
  // nodes with no incoming links are assigned depth zero, while
  // nodes with no outgoing links are assigned the maximum depth.
  function computeNodeDepths(graph) {
    var nodes, next, x;

    for (nodes = graph.nodes, next = [], x = 0; nodes.length; ++x, nodes = next, next = []) {
      nodes.forEach(function (node) {
        node.depth = x;
        node.sourceLinks.forEach(function (link) {
          if (next.indexOf(link.target) < 0) {
            next.push(link.target);
          }
        });
      });
    }

    for (nodes = graph.nodes, next = [], x = 0; nodes.length; ++x, nodes = next, next = []) {
      nodes.forEach(function (node) {
        node.height = x;
        node.targetLinks.forEach(function (link) {
          if (next.indexOf(link.source) < 0) {
            next.push(link.source);
          }
        });
      });
    }

    var kx = (x1 - x0 - dx) / (x - 1);
    graph.nodes.forEach(function (node) {
      node.x1 = (node.x0 = x0 + Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x)))) * kx) + dx;
    });
  }

  function computeNodeBreadths(graph) {
    var columns = (0, _d3Collection.nest)().key(function (d) {
      return d.x0;
    }).sortKeys(_d3Array.ascending).entries(graph.nodes).map(function (d) {
      return d.values;
    });

    //
    initializeNodeBreadth();
    resolveCollisions();
    for (var alpha = 1, n = iterations; n > 0; --n) {
      relaxRightToLeft(alpha *= 0.99);
      resolveCollisions();
      relaxLeftToRight(alpha);
      resolveCollisions();
    }

    function initializeNodeBreadth() {
      var ky = (0, _d3Array.min)(columns, function (nodes) {
        return (y1 - y0 - (nodes.length - 1) * py) / (0, _d3Array.sum)(nodes, value);
      });

      columns.forEach(function (nodes) {
        nodes.forEach(function (node, i) {
          node.y1 = (node.y0 = i) + node.value * ky;
        });
      });

      graph.links.forEach(function (link) {
        link.width = link.value * ky;
      });
    }

    function relaxLeftToRight(alpha) {
      columns.forEach(function (nodes) {
        nodes.forEach(function (node) {
          if (node.targetLinks.length) {
            var dy = ((0, _d3Array.sum)(node.targetLinks, weightedSource) / (0, _d3Array.sum)(node.targetLinks, value) - nodeCenter(node)) * alpha;
            node.y0 += dy, node.y1 += dy;
          }
        });
      });
    }

    function relaxRightToLeft(alpha) {
      columns.slice().reverse().forEach(function (nodes) {
        nodes.forEach(function (node) {
          if (node.sourceLinks.length) {
            var dy = ((0, _d3Array.sum)(node.sourceLinks, weightedTarget) / (0, _d3Array.sum)(node.sourceLinks, value) - nodeCenter(node)) * alpha;
            node.y0 += dy, node.y1 += dy;
          }
        });
      });
    }

    function resolveCollisions() {
      columns.forEach(function (nodes) {
        var node,
            dy,
            y = y0,
            n = nodes.length,
            i;

        // Push any overlapping nodes down.
        nodes.sort(ascendingBreadth);
        for (i = 0; i < n; ++i) {
          node = nodes[i];
          dy = y - node.y0;
          if (dy > 0) node.y0 += dy, node.y1 += dy;
          y = node.y1 + py;
        }

        // If the bottommost node goes outside the bounds, push it back up.
        dy = y - py - y1;
        if (dy > 0) {
          y = node.y0 -= dy, node.y1 -= dy;

          // Push any overlapping nodes back up.
          for (i = n - 2; i >= 0; --i) {
            node = nodes[i];
            dy = node.y1 + py - y;
            if (dy > 0) node.y0 -= dy, node.y1 -= dy;
            y = node.y0;
          }
        }
      });
    }
  }

  function computeLinkBreadths(graph) {
    graph.nodes.forEach(function (node) {
      node.sourceLinks.sort(ascendingTargetBreadth);
      node.targetLinks.sort(ascendingSourceBreadth);
    });
    graph.nodes.forEach(function (node) {
      var y0 = node.y0,
          y1 = y0;
      node.sourceLinks.forEach(function (link) {
        link.y0 = y0 + link.width / 2, y0 += link.width;
      });
      node.targetLinks.forEach(function (link) {
        link.y1 = y1 + link.width / 2, y1 += link.width;
      });
    });
  }

  return sankey;
};

var _d3Array = __webpack_require__(14);

var _d3Collection = __webpack_require__(669);

var _align = __webpack_require__(250);

var _constant = __webpack_require__(675);

var _constant2 = _interopRequireDefault(_constant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ascendingSourceBreadth(a, b) {
  return ascendingBreadth(a.source, b.source) || a.index - b.index;
}

function ascendingTargetBreadth(a, b) {
  return ascendingBreadth(a.target, b.target) || a.index - b.index;
}

function ascendingBreadth(a, b) {
  return a.y0 - b.y0;
}

function value(d) {
  return d.value;
}

function nodeCenter(node) {
  return (node.y0 + node.y1) / 2;
}

function weightedSource(link) {
  return nodeCenter(link.source) * link.value;
}

function weightedTarget(link) {
  return nodeCenter(link.target) * link.value;
}

function defaultId(d) {
  return d.index;
}

function defaultNodes(graph) {
  return graph.nodes;
}

function defaultLinks(graph) {
  return graph.links;
}

function find(nodeById, id) {
  var node = nodeById.get(id);
  if (!node) throw new Error("missing: " + id);
  return node;
}

/***/ }),
/* 669 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _nest = __webpack_require__(670);

Object.defineProperty(exports, "nest", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_nest).default;
  }
});

var _set = __webpack_require__(671);

Object.defineProperty(exports, "set", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_set).default;
  }
});

var _map = __webpack_require__(128);

Object.defineProperty(exports, "map", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_map).default;
  }
});

var _keys = __webpack_require__(672);

Object.defineProperty(exports, "keys", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_keys).default;
  }
});

var _values = __webpack_require__(673);

Object.defineProperty(exports, "values", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_values).default;
  }
});

var _entries = __webpack_require__(674);

Object.defineProperty(exports, "entries", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_entries).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 670 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var keys = [],
      _sortKeys = [],
      _sortValues,
      _rollup,
      nest;

  function apply(array, depth, createResult, setResult) {
    if (depth >= keys.length) {
      if (_sortValues != null) array.sort(_sortValues);
      return _rollup != null ? _rollup(array) : array;
    }

    var i = -1,
        n = array.length,
        key = keys[depth++],
        keyValue,
        value,
        valuesByKey = (0, _map2.default)(),
        values,
        result = createResult();

    while (++i < n) {
      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
        values.push(value);
      } else {
        valuesByKey.set(keyValue, [value]);
      }
    }

    valuesByKey.each(function (values, key) {
      setResult(result, key, apply(values, depth, createResult, setResult));
    });

    return result;
  }

  function _entries(map, depth) {
    if (++depth > keys.length) return map;
    var array,
        sortKey = _sortKeys[depth - 1];
    if (_rollup != null && depth >= keys.length) array = map.entries();else array = [], map.each(function (v, k) {
      array.push({ key: k, values: _entries(v, depth) });
    });
    return sortKey != null ? array.sort(function (a, b) {
      return sortKey(a.key, b.key);
    }) : array;
  }

  return nest = {
    object: function object(array) {
      return apply(array, 0, createObject, setObject);
    },
    map: function map(array) {
      return apply(array, 0, createMap, setMap);
    },
    entries: function entries(array) {
      return _entries(apply(array, 0, createMap, setMap), 0);
    },
    key: function key(d) {
      keys.push(d);return nest;
    },
    sortKeys: function sortKeys(order) {
      _sortKeys[keys.length - 1] = order;return nest;
    },
    sortValues: function sortValues(order) {
      _sortValues = order;return nest;
    },
    rollup: function rollup(f) {
      _rollup = f;return nest;
    }
  };
};

var _map = __webpack_require__(128);

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createObject() {
  return {};
}

function setObject(object, key, value) {
  object[key] = value;
}

function createMap() {
  return (0, _map2.default)();
}

function setMap(map, key, value) {
  map.set(key, value);
}

/***/ }),
/* 671 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _map = __webpack_require__(128);

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Set() {}

var proto = _map2.default.prototype;

Set.prototype = set.prototype = {
  constructor: Set,
  has: proto.has,
  add: function add(value) {
    value += "";
    this[_map.prefix + value] = value;
    return this;
  },
  remove: proto.remove,
  clear: proto.clear,
  values: proto.keys,
  size: proto.size,
  empty: proto.empty,
  each: proto.each
};

function set(object, f) {
  var set = new Set();

  // Copy constructor.
  if (object instanceof Set) object.each(function (value) {
    set.add(value);
  });

  // Otherwise, assume it’s an array.
  else if (object) {
      var i = -1,
          n = object.length;
      if (f == null) while (++i < n) {
        set.add(object[i]);
      } else while (++i < n) {
        set.add(f(object[i], i, object));
      }
    }

  return set;
}

exports.default = set;

/***/ }),
/* 672 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (map) {
  var keys = [];
  for (var key in map) {
    keys.push(key);
  }return keys;
};

/***/ }),
/* 673 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (map) {
  var values = [];
  for (var key in map) {
    values.push(map[key]);
  }return values;
};

/***/ }),
/* 674 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (map) {
  var entries = [];
  for (var key in map) {
    entries.push({ key: key, value: map[key] });
  }return entries;
};

/***/ }),
/* 675 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.default = constant;
function constant(x) {
  return function () {
    return x;
  };
}

/***/ }),
/* 676 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  return (0, _d3Shape.linkHorizontal)().source(horizontalSource).target(horizontalTarget);
};

var _d3Shape = __webpack_require__(677);

function horizontalSource(d) {
  return [d.source.x1, d.y0];
}

function horizontalTarget(d) {
  return [d.target.x0, d.y1];
}

/***/ }),
/* 677 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _arc = __webpack_require__(678);

Object.defineProperty(exports, "arc", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_arc).default;
  }
});

var _area = __webpack_require__(251);

Object.defineProperty(exports, "area", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_area).default;
  }
});

var _line = __webpack_require__(129);

Object.defineProperty(exports, "line", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_line).default;
  }
});

var _pie = __webpack_require__(679);

Object.defineProperty(exports, "pie", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_pie).default;
  }
});

var _areaRadial = __webpack_require__(682);

Object.defineProperty(exports, "areaRadial", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_areaRadial).default;
  }
});
Object.defineProperty(exports, "radialArea", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_areaRadial).default;
  }
});

var _lineRadial = __webpack_require__(253);

Object.defineProperty(exports, "lineRadial", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_lineRadial).default;
  }
});
Object.defineProperty(exports, "radialLine", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_lineRadial).default;
  }
});

var _pointRadial = __webpack_require__(254);

Object.defineProperty(exports, "pointRadial", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_pointRadial).default;
  }
});

var _index = __webpack_require__(683);

Object.defineProperty(exports, "linkHorizontal", {
  enumerable: true,
  get: function get() {
    return _index.linkHorizontal;
  }
});
Object.defineProperty(exports, "linkVertical", {
  enumerable: true,
  get: function get() {
    return _index.linkVertical;
  }
});
Object.defineProperty(exports, "linkRadial", {
  enumerable: true,
  get: function get() {
    return _index.linkRadial;
  }
});

var _symbol = __webpack_require__(684);

Object.defineProperty(exports, "symbol", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_symbol).default;
  }
});
Object.defineProperty(exports, "symbols", {
  enumerable: true,
  get: function get() {
    return _symbol.symbols;
  }
});

var _circle = __webpack_require__(256);

Object.defineProperty(exports, "symbolCircle", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_circle).default;
  }
});

var _cross = __webpack_require__(257);

Object.defineProperty(exports, "symbolCross", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_cross).default;
  }
});

var _diamond = __webpack_require__(258);

Object.defineProperty(exports, "symbolDiamond", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_diamond).default;
  }
});

var _square = __webpack_require__(260);

Object.defineProperty(exports, "symbolSquare", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_square).default;
  }
});

var _star = __webpack_require__(259);

Object.defineProperty(exports, "symbolStar", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_star).default;
  }
});

var _triangle = __webpack_require__(261);

Object.defineProperty(exports, "symbolTriangle", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_triangle).default;
  }
});

var _wye = __webpack_require__(262);

Object.defineProperty(exports, "symbolWye", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_wye).default;
  }
});

var _basisClosed = __webpack_require__(685);

Object.defineProperty(exports, "curveBasisClosed", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_basisClosed).default;
  }
});

var _basisOpen = __webpack_require__(686);

Object.defineProperty(exports, "curveBasisOpen", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_basisOpen).default;
  }
});

var _basis = __webpack_require__(74);

Object.defineProperty(exports, "curveBasis", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_basis).default;
  }
});

var _bundle = __webpack_require__(687);

Object.defineProperty(exports, "curveBundle", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_bundle).default;
  }
});

var _cardinalClosed = __webpack_require__(263);

Object.defineProperty(exports, "curveCardinalClosed", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_cardinalClosed).default;
  }
});

var _cardinalOpen = __webpack_require__(264);

Object.defineProperty(exports, "curveCardinalOpen", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_cardinalOpen).default;
  }
});

var _cardinal = __webpack_require__(75);

Object.defineProperty(exports, "curveCardinal", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_cardinal).default;
  }
});

var _catmullRomClosed = __webpack_require__(688);

Object.defineProperty(exports, "curveCatmullRomClosed", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_catmullRomClosed).default;
  }
});

var _catmullRomOpen = __webpack_require__(689);

Object.defineProperty(exports, "curveCatmullRomOpen", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_catmullRomOpen).default;
  }
});

var _catmullRom = __webpack_require__(131);

Object.defineProperty(exports, "curveCatmullRom", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_catmullRom).default;
  }
});

var _linearClosed = __webpack_require__(690);

Object.defineProperty(exports, "curveLinearClosed", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_linearClosed).default;
  }
});

var _linear = __webpack_require__(72);

Object.defineProperty(exports, "curveLinear", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_linear).default;
  }
});

var _monotone = __webpack_require__(691);

Object.defineProperty(exports, "curveMonotoneX", {
  enumerable: true,
  get: function get() {
    return _monotone.monotoneX;
  }
});
Object.defineProperty(exports, "curveMonotoneY", {
  enumerable: true,
  get: function get() {
    return _monotone.monotoneY;
  }
});

var _natural = __webpack_require__(692);

Object.defineProperty(exports, "curveNatural", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_natural).default;
  }
});

var _step = __webpack_require__(693);

Object.defineProperty(exports, "curveStep", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_step).default;
  }
});
Object.defineProperty(exports, "curveStepAfter", {
  enumerable: true,
  get: function get() {
    return _step.stepAfter;
  }
});
Object.defineProperty(exports, "curveStepBefore", {
  enumerable: true,
  get: function get() {
    return _step.stepBefore;
  }
});

var _stack = __webpack_require__(694);

Object.defineProperty(exports, "stack", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_stack).default;
  }
});

var _expand = __webpack_require__(695);

Object.defineProperty(exports, "stackOffsetExpand", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_expand).default;
  }
});

var _diverging = __webpack_require__(696);

Object.defineProperty(exports, "stackOffsetDiverging", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_diverging).default;
  }
});

var _none = __webpack_require__(50);

Object.defineProperty(exports, "stackOffsetNone", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_none).default;
  }
});

var _silhouette = __webpack_require__(697);

Object.defineProperty(exports, "stackOffsetSilhouette", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_silhouette).default;
  }
});

var _wiggle = __webpack_require__(698);

Object.defineProperty(exports, "stackOffsetWiggle", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_wiggle).default;
  }
});

var _ascending = __webpack_require__(132);

Object.defineProperty(exports, "stackOrderAscending", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ascending).default;
  }
});

var _descending = __webpack_require__(699);

Object.defineProperty(exports, "stackOrderDescending", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_descending).default;
  }
});

var _insideOut = __webpack_require__(700);

Object.defineProperty(exports, "stackOrderInsideOut", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_insideOut).default;
  }
});

var _none2 = __webpack_require__(51);

Object.defineProperty(exports, "stackOrderNone", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_none2).default;
  }
});

var _reverse = __webpack_require__(701);

Object.defineProperty(exports, "stackOrderReverse", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_reverse).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 678 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var innerRadius = arcInnerRadius,
      outerRadius = arcOuterRadius,
      cornerRadius = (0, _constant2.default)(0),
      padRadius = null,
      startAngle = arcStartAngle,
      endAngle = arcEndAngle,
      padAngle = arcPadAngle,
      context = null;

  function arc() {
    var buffer,
        r,
        r0 = +innerRadius.apply(this, arguments),
        r1 = +outerRadius.apply(this, arguments),
        a0 = startAngle.apply(this, arguments) - _math.halfPi,
        a1 = endAngle.apply(this, arguments) - _math.halfPi,
        da = (0, _math.abs)(a1 - a0),
        cw = a1 > a0;

    if (!context) context = buffer = (0, _d3Path.path)();

    // Ensure that the outer radius is always larger than the inner radius.
    if (r1 < r0) r = r1, r1 = r0, r0 = r;

    // Is it a point?
    if (!(r1 > _math.epsilon)) context.moveTo(0, 0);

    // Or is it a circle or annulus?
    else if (da > _math.tau - _math.epsilon) {
        context.moveTo(r1 * (0, _math.cos)(a0), r1 * (0, _math.sin)(a0));
        context.arc(0, 0, r1, a0, a1, !cw);
        if (r0 > _math.epsilon) {
          context.moveTo(r0 * (0, _math.cos)(a1), r0 * (0, _math.sin)(a1));
          context.arc(0, 0, r0, a1, a0, cw);
        }
      }

      // Or is it a circular or annular sector?
      else {
          var a01 = a0,
              a11 = a1,
              a00 = a0,
              a10 = a1,
              da0 = da,
              da1 = da,
              ap = padAngle.apply(this, arguments) / 2,
              rp = ap > _math.epsilon && (padRadius ? +padRadius.apply(this, arguments) : (0, _math.sqrt)(r0 * r0 + r1 * r1)),
              rc = (0, _math.min)((0, _math.abs)(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
              rc0 = rc,
              rc1 = rc,
              t0,
              t1;

          // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
          if (rp > _math.epsilon) {
            var p0 = (0, _math.asin)(rp / r0 * (0, _math.sin)(ap)),
                p1 = (0, _math.asin)(rp / r1 * (0, _math.sin)(ap));
            if ((da0 -= p0 * 2) > _math.epsilon) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;else da0 = 0, a00 = a10 = (a0 + a1) / 2;
            if ((da1 -= p1 * 2) > _math.epsilon) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;else da1 = 0, a01 = a11 = (a0 + a1) / 2;
          }

          var x01 = r1 * (0, _math.cos)(a01),
              y01 = r1 * (0, _math.sin)(a01),
              x10 = r0 * (0, _math.cos)(a10),
              y10 = r0 * (0, _math.sin)(a10);

          // Apply rounded corners?
          if (rc > _math.epsilon) {
            var x11 = r1 * (0, _math.cos)(a11),
                y11 = r1 * (0, _math.sin)(a11),
                x00 = r0 * (0, _math.cos)(a00),
                y00 = r0 * (0, _math.sin)(a00);

            // Restrict the corner radius according to the sector angle.
            if (da < _math.pi) {
              var oc = da0 > _math.epsilon ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],
                  ax = x01 - oc[0],
                  ay = y01 - oc[1],
                  bx = x11 - oc[0],
                  by = y11 - oc[1],
                  kc = 1 / (0, _math.sin)((0, _math.acos)((ax * bx + ay * by) / ((0, _math.sqrt)(ax * ax + ay * ay) * (0, _math.sqrt)(bx * bx + by * by))) / 2),
                  lc = (0, _math.sqrt)(oc[0] * oc[0] + oc[1] * oc[1]);
              rc0 = (0, _math.min)(rc, (r0 - lc) / (kc - 1));
              rc1 = (0, _math.min)(rc, (r1 - lc) / (kc + 1));
            }
          }

          // Is the sector collapsed to a line?
          if (!(da1 > _math.epsilon)) context.moveTo(x01, y01);

          // Does the sector’s outer ring have rounded corners?
          else if (rc1 > _math.epsilon) {
              t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
              t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

              context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

              // Have the corners merged?
              if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t1.y01, t1.x01), !cw);

              // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc1, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r1, (0, _math.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, _math.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                  context.arc(t1.cx, t1.cy, rc1, (0, _math.atan2)(t1.y11, t1.x11), (0, _math.atan2)(t1.y01, t1.x01), !cw);
                }
            }

            // Or is the outer ring just a circular arc?
            else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

          // Is there no inner ring, and it’s a circular sector?
          // Or perhaps it’s an annular sector collapsed due to padding?
          if (!(r0 > _math.epsilon) || !(da0 > _math.epsilon)) context.lineTo(x10, y10);

          // Does the sector’s inner ring (or point) have rounded corners?
          else if (rc0 > _math.epsilon) {
              t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
              t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

              context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

              // Have the corners merged?
              if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t1.y01, t1.x01), !cw);

              // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc0, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r0, (0, _math.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, _math.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                  context.arc(t1.cx, t1.cy, rc0, (0, _math.atan2)(t1.y11, t1.x11), (0, _math.atan2)(t1.y01, t1.x01), !cw);
                }
            }

            // Or is the inner ring just a circular arc?
            else context.arc(0, 0, r0, a10, a00, cw);
        }

    context.closePath();

    if (buffer) return context = null, buffer + "" || null;
  }

  arc.centroid = function () {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - _math.pi / 2;
    return [(0, _math.cos)(a) * r, (0, _math.sin)(a) * r];
  };

  arc.innerRadius = function (_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : (0, _constant2.default)(+_), arc) : innerRadius;
  };

  arc.outerRadius = function (_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : (0, _constant2.default)(+_), arc) : outerRadius;
  };

  arc.cornerRadius = function (_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : (0, _constant2.default)(+_), arc) : cornerRadius;
  };

  arc.padRadius = function (_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : (0, _constant2.default)(+_), arc) : padRadius;
  };

  arc.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant2.default)(+_), arc) : startAngle;
  };

  arc.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant2.default)(+_), arc) : endAngle;
  };

  arc.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, _constant2.default)(+_), arc) : padAngle;
  };

  arc.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };

  return arc;
};

var _d3Path = __webpack_require__(29);

var _constant = __webpack_require__(31);

var _constant2 = _interopRequireDefault(_constant);

var _math = __webpack_require__(49);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function arcInnerRadius(d) {
  return d.innerRadius;
}

function arcOuterRadius(d) {
  return d.outerRadius;
}

function arcStartAngle(d) {
  return d.startAngle;
}

function arcEndAngle(d) {
  return d.endAngle;
}

function arcPadAngle(d) {
  return d && d.padAngle; // Note: optional!
}

function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0,
      y10 = y1 - y0,
      x32 = x3 - x2,
      y32 = y3 - y2,
      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
  return [x0 + t * x10, y0 + t * y10];
}

// Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1,
      y01 = y0 - y1,
      lo = (cw ? rc : -rc) / (0, _math.sqrt)(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x11 = x0 + ox,
      y11 = y0 + oy,
      x10 = x1 + ox,
      y10 = y1 + oy,
      x00 = (x11 + x10) / 2,
      y00 = (y11 + y10) / 2,
      dx = x10 - x11,
      dy = y10 - y11,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x11 * y10 - x10 * y11,
      d = (dy < 0 ? -1 : 1) * (0, _math.sqrt)((0, _math.max)(0, r * r * d2 - D * D)),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x00,
      dy0 = cy0 - y00,
      dx1 = cx1 - x00,
      dy1 = cy1 - y00;

  // Pick the closer of the two intersection points.
  // TODO Is there a faster way to determine which intersection to use?
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}

/***/ }),
/* 679 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var value = _identity2.default,
      sortValues = _descending2.default,
      sort = null,
      startAngle = (0, _constant2.default)(0),
      endAngle = (0, _constant2.default)(_math.tau),
      padAngle = (0, _constant2.default)(0);

  function pie(data) {
    var i,
        n = data.length,
        j,
        k,
        sum = 0,
        index = new Array(n),
        arcs = new Array(n),
        a0 = +startAngle.apply(this, arguments),
        da = Math.min(_math.tau, Math.max(-_math.tau, endAngle.apply(this, arguments) - a0)),
        a1,
        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
        pa = p * (da < 0 ? -1 : 1),
        v;

    for (i = 0; i < n; ++i) {
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
        sum += v;
      }
    }

    // Optionally sort the arcs by previously-computed values or by data.
    if (sortValues != null) index.sort(function (i, j) {
      return sortValues(arcs[i], arcs[j]);
    });else if (sort != null) index.sort(function (i, j) {
      return sort(data[i], data[j]);
    });

    // Compute the arcs! They are stored in the original data's order.
    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }

    return arcs;
  }

  pie.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant2.default)(+_), pie) : value;
  };

  pie.sortValues = function (_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };

  pie.sort = function (_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };

  pie.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant2.default)(+_), pie) : startAngle;
  };

  pie.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant2.default)(+_), pie) : endAngle;
  };

  pie.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, _constant2.default)(+_), pie) : padAngle;
  };

  return pie;
};

var _constant = __webpack_require__(31);

var _constant2 = _interopRequireDefault(_constant);

var _descending = __webpack_require__(680);

var _descending2 = _interopRequireDefault(_descending);

var _identity = __webpack_require__(681);

var _identity2 = _interopRequireDefault(_identity);

var _math = __webpack_require__(49);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 680 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
};

/***/ }),
/* 681 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (d) {
  return d;
};

/***/ }),
/* 682 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var a = (0, _area2.default)().curve(_radial.curveRadialLinear),
      c = a.curve,
      x0 = a.lineX0,
      x1 = a.lineX1,
      y0 = a.lineY0,
      y1 = a.lineY1;

  a.angle = a.x, delete a.x;
  a.startAngle = a.x0, delete a.x0;
  a.endAngle = a.x1, delete a.x1;
  a.radius = a.y, delete a.y;
  a.innerRadius = a.y0, delete a.y0;
  a.outerRadius = a.y1, delete a.y1;
  a.lineStartAngle = function () {
    return (0, _lineRadial.lineRadial)(x0());
  }, delete a.lineX0;
  a.lineEndAngle = function () {
    return (0, _lineRadial.lineRadial)(x1());
  }, delete a.lineX1;
  a.lineInnerRadius = function () {
    return (0, _lineRadial.lineRadial)(y0());
  }, delete a.lineY0;
  a.lineOuterRadius = function () {
    return (0, _lineRadial.lineRadial)(y1());
  }, delete a.lineY1;

  a.curve = function (_) {
    return arguments.length ? c((0, _radial2.default)(_)) : c()._curve;
  };

  return a;
};

var _radial = __webpack_require__(252);

var _radial2 = _interopRequireDefault(_radial);

var _area = __webpack_require__(251);

var _area2 = _interopRequireDefault(_area);

var _lineRadial = __webpack_require__(253);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 683 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.linkHorizontal = linkHorizontal;
exports.linkVertical = linkVertical;
exports.linkRadial = linkRadial;

var _d3Path = __webpack_require__(29);

var _array = __webpack_require__(255);

var _constant = __webpack_require__(31);

var _constant2 = _interopRequireDefault(_constant);

var _point = __webpack_require__(130);

var _pointRadial = __webpack_require__(254);

var _pointRadial2 = _interopRequireDefault(_pointRadial);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function linkSource(d) {
  return d.source;
}

function linkTarget(d) {
  return d.target;
}

function link(curve) {
  var source = linkSource,
      target = linkTarget,
      x = _point.x,
      y = _point.y,
      context = null;

  function link() {
    var buffer,
        argv = _array.slice.call(arguments),
        s = source.apply(this, argv),
        t = target.apply(this, argv);
    if (!context) context = buffer = (0, _d3Path.path)();
    curve(context, +x.apply(this, (argv[0] = s, argv)), +y.apply(this, argv), +x.apply(this, (argv[0] = t, argv)), +y.apply(this, argv));
    if (buffer) return context = null, buffer + "" || null;
  }

  link.source = function (_) {
    return arguments.length ? (source = _, link) : source;
  };

  link.target = function (_) {
    return arguments.length ? (target = _, link) : target;
  };

  link.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant2.default)(+_), link) : x;
  };

  link.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant2.default)(+_), link) : y;
  };

  link.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, link) : context;
  };

  return link;
}

function curveHorizontal(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
}

function curveVertical(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
}

function curveRadial(context, x0, y0, x1, y1) {
  var p0 = (0, _pointRadial2.default)(x0, y0),
      p1 = (0, _pointRadial2.default)(x0, y0 = (y0 + y1) / 2),
      p2 = (0, _pointRadial2.default)(x1, y0),
      p3 = (0, _pointRadial2.default)(x1, y1);
  context.moveTo(p0[0], p0[1]);
  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
}

function linkHorizontal() {
  return link(curveHorizontal);
}

function linkVertical() {
  return link(curveVertical);
}

function linkRadial() {
  var l = link(curveRadial);
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;
  return l;
}

/***/ }),
/* 684 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.symbols = undefined;

exports.default = function () {
  var type = (0, _constant2.default)(_circle2.default),
      size = (0, _constant2.default)(64),
      context = null;

  function symbol() {
    var buffer;
    if (!context) context = buffer = (0, _d3Path.path)();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer) return context = null, buffer + "" || null;
  }

  symbol.type = function (_) {
    return arguments.length ? (type = typeof _ === "function" ? _ : (0, _constant2.default)(_), symbol) : type;
  };

  symbol.size = function (_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : (0, _constant2.default)(+_), symbol) : size;
  };

  symbol.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  };

  return symbol;
};

var _d3Path = __webpack_require__(29);

var _circle = __webpack_require__(256);

var _circle2 = _interopRequireDefault(_circle);

var _cross = __webpack_require__(257);

var _cross2 = _interopRequireDefault(_cross);

var _diamond = __webpack_require__(258);

var _diamond2 = _interopRequireDefault(_diamond);

var _star = __webpack_require__(259);

var _star2 = _interopRequireDefault(_star);

var _square = __webpack_require__(260);

var _square2 = _interopRequireDefault(_square);

var _triangle = __webpack_require__(261);

var _triangle2 = _interopRequireDefault(_triangle);

var _wye = __webpack_require__(262);

var _wye2 = _interopRequireDefault(_wye);

var _constant = __webpack_require__(31);

var _constant2 = _interopRequireDefault(_constant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var symbols = exports.symbols = [_circle2.default, _cross2.default, _diamond2.default, _square2.default, _star2.default, _triangle2.default, _wye2.default];

/***/ }),
/* 685 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (context) {
  return new BasisClosed(context);
};

var _noop = __webpack_require__(73);

var _noop2 = _interopRequireDefault(_noop);

var _basis = __webpack_require__(74);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function BasisClosed(context) {
  this._context = context;
}

BasisClosed.prototype = {
  areaStart: _noop2.default,
  areaEnd: _noop2.default,
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x2, this._y2);
          this._context.closePath();
          break;
        }
      case 2:
        {
          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
          this._context.closePath();
          break;
        }
      case 3:
        {
          this.point(this._x2, this._y2);
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          break;
        }
    }
  },
  point: function point(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0:
        this._point = 1;this._x2 = x, this._y2 = y;break;
      case 1:
        this._point = 2;this._x3 = x, this._y3 = y;break;
      case 2:
        this._point = 3;this._x4 = x, this._y4 = y;this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);break;
      default:
        (0, _basis.point)(this, x, y);break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

/***/ }),
/* 686 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (context) {
  return new BasisOpen(context);
};

var _basis = __webpack_require__(74);

function BasisOpen(context) {
  this._context = context;
}

BasisOpen.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function point(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0:
        this._point = 1;break;
      case 1:
        this._point = 2;break;
      case 2:
        this._point = 3;var x0 = (this._x0 + 4 * this._x1 + x) / 6,
            y0 = (this._y0 + 4 * this._y1 + y) / 6;this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);break;
      case 3:
        this._point = 4; // proceed
      default:
        (0, _basis.point)(this, x, y);break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

/***/ }),
/* 687 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _basis = __webpack_require__(74);

function Bundle(context, beta) {
  this._basis = new _basis.Basis(context);
  this._beta = beta;
}

Bundle.prototype = {
  lineStart: function lineStart() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function lineEnd() {
    var x = this._x,
        y = this._y,
        j = x.length - 1;

    if (j > 0) {
      var x0 = x[0],
          y0 = y[0],
          dx = x[j] - x0,
          dy = y[j] - y0,
          i = -1,
          t;

      while (++i <= j) {
        t = i / j;
        this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
      }
    }

    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function point(x, y) {
    this._x.push(+x);
    this._y.push(+y);
  }
};

exports.default = function custom(beta) {

  function bundle(context) {
    return beta === 1 ? new _basis.Basis(context) : new Bundle(context, beta);
  }

  bundle.beta = function (beta) {
    return custom(+beta);
  };

  return bundle;
}(0.85);

/***/ }),
/* 688 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _cardinalClosed = __webpack_require__(263);

var _noop = __webpack_require__(73);

var _noop2 = _interopRequireDefault(_noop);

var _catmullRom = __webpack_require__(131);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomClosed.prototype = {
  areaStart: _noop2.default,
  areaEnd: _noop2.default,
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function lineEnd() {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
      case 2:
        {
          this._context.lineTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
      case 3:
        {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
    }
  },
  point: function point(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;this._x3 = x, this._y3 = y;break;
      case 1:
        this._point = 2;this._context.moveTo(this._x4 = x, this._y4 = y);break;
      case 2:
        this._point = 3;this._x5 = x, this._y5 = y;break;
      default:
        (0, _catmullRom.point)(this, x, y);break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

exports.default = function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new _cardinalClosed.CardinalClosed(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

/***/ }),
/* 689 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _cardinalOpen = __webpack_require__(264);

var _catmullRom = __webpack_require__(131);

function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomOpen.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function lineEnd() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function point(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;break;
      case 1:
        this._point = 2;break;
      case 2:
        this._point = 3;this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);break;
      case 3:
        this._point = 4; // proceed
      default:
        (0, _catmullRom.point)(this, x, y);break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

exports.default = function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new _cardinalOpen.CardinalOpen(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

/***/ }),
/* 690 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (context) {
  return new LinearClosed(context);
};

var _noop = __webpack_require__(73);

var _noop2 = _interopRequireDefault(_noop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function LinearClosed(context) {
  this._context = context;
}

LinearClosed.prototype = {
  areaStart: _noop2.default,
  areaEnd: _noop2.default,
  lineStart: function lineStart() {
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    if (this._point) this._context.closePath();
  },
  point: function point(x, y) {
    x = +x, y = +y;
    if (this._point) this._context.lineTo(x, y);else this._point = 1, this._context.moveTo(x, y);
  }
};

/***/ }),
/* 691 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.monotoneX = monotoneX;
exports.monotoneY = monotoneY;
function sign(x) {
  return x < 0 ? -1 : 1;
}

// Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.
function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}

// Calculate a one-sided slope.
function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}

// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
function _point(that, t0, t1) {
  var x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}

function MonotoneX(context) {
  this._context = context;
}

MonotoneX.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);break;
      case 3:
        _point(this, this._t0, slope2(this, this._t0));break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function point(x, y) {
    var t1 = NaN;

    x = +x, y = +y;
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
    switch (this._point) {
      case 0:
        this._point = 1;this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);break;
      case 1:
        this._point = 2;break;
      case 2:
        this._point = 3;_point(this, slope2(this, t1 = slope3(this, x, y)), t1);break;
      default:
        _point(this, this._t0, t1 = slope3(this, x, y));break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
    this._t0 = t1;
  }
};

function MonotoneY(context) {
  this._context = new ReflectContext(context);
}

(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {
  MonotoneX.prototype.point.call(this, y, x);
};

function ReflectContext(context) {
  this._context = context;
}

ReflectContext.prototype = {
  moveTo: function moveTo(x, y) {
    this._context.moveTo(y, x);
  },
  closePath: function closePath() {
    this._context.closePath();
  },
  lineTo: function lineTo(x, y) {
    this._context.lineTo(y, x);
  },
  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {
    this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
  }
};

function monotoneX(context) {
  return new MonotoneX(context);
}

function monotoneY(context) {
  return new MonotoneY(context);
}

/***/ }),
/* 692 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (context) {
  return new Natural(context);
};

function Natural(context) {
  this._context = context;
}

Natural.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function lineEnd() {
    var x = this._x,
        y = this._y,
        n = x.length;

    if (n) {
      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
      if (n === 2) {
        this._context.lineTo(x[1], y[1]);
      } else {
        var px = controlPoints(x),
            py = controlPoints(y);
        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
        }
      }
    }

    if (this._line || this._line !== 0 && n === 1) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function point(x, y) {
    this._x.push(+x);
    this._y.push(+y);
  }
};

// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
function controlPoints(x) {
  var i,
      n = x.length - 1,
      m,
      a = new Array(n),
      b = new Array(n),
      r = new Array(n);
  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
  for (i = 1; i < n - 1; ++i) {
    a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
  }a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
  for (i = 1; i < n; ++i) {
    m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
  }a[n - 1] = r[n - 1] / b[n - 1];
  for (i = n - 2; i >= 0; --i) {
    a[i] = (r[i] - a[i + 1]) / b[i];
  }b[n - 1] = (x[n] + a[n - 1]) / 2;
  for (i = 0; i < n - 1; ++i) {
    b[i] = 2 * x[i + 1] - a[i + 1];
  }return [a, b];
}

/***/ }),
/* 693 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (context) {
  return new Step(context, 0.5);
};

exports.stepBefore = stepBefore;
exports.stepAfter = stepAfter;
function Step(context, t) {
  this._context = context;
  this._t = t;
}

Step.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function point(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0:
        this._point = 1;this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);break;
      case 1:
        this._point = 2; // proceed
      default:
        {
          if (this._t <= 0) {
            this._context.lineTo(this._x, y);
            this._context.lineTo(x, y);
          } else {
            var x1 = this._x * (1 - this._t) + x * this._t;
            this._context.lineTo(x1, this._y);
            this._context.lineTo(x1, y);
          }
          break;
        }
    }
    this._x = x, this._y = y;
  }
};

function stepBefore(context) {
  return new Step(context, 0);
}

function stepAfter(context) {
  return new Step(context, 1);
}

/***/ }),
/* 694 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var keys = (0, _constant2.default)([]),
      order = _none4.default,
      offset = _none2.default,
      value = stackValue;

  function stack(data) {
    var kz = keys.apply(this, arguments),
        i,
        m = data.length,
        n = kz.length,
        sz = new Array(n),
        oz;

    for (i = 0; i < n; ++i) {
      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
        si[j] = sij = [0, +value(data[j], ki, j, data)];
        sij.data = data[j];
      }
      si.key = ki;
    }

    for (i = 0, oz = order(sz); i < n; ++i) {
      sz[oz[i]].index = i;
    }

    offset(sz, oz);
    return sz;
  }

  stack.keys = function (_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : (0, _constant2.default)(_array.slice.call(_)), stack) : keys;
  };

  stack.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant2.default)(+_), stack) : value;
  };

  stack.order = function (_) {
    return arguments.length ? (order = _ == null ? _none4.default : typeof _ === "function" ? _ : (0, _constant2.default)(_array.slice.call(_)), stack) : order;
  };

  stack.offset = function (_) {
    return arguments.length ? (offset = _ == null ? _none2.default : _, stack) : offset;
  };

  return stack;
};

var _array = __webpack_require__(255);

var _constant = __webpack_require__(31);

var _constant2 = _interopRequireDefault(_constant);

var _none = __webpack_require__(50);

var _none2 = _interopRequireDefault(_none);

var _none3 = __webpack_require__(51);

var _none4 = _interopRequireDefault(_none3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stackValue(d, key) {
  return d[key];
}

/***/ }),
/* 695 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (series, order) {
  if (!((n = series.length) > 0)) return;
  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
    for (y = i = 0; i < n; ++i) {
      y += series[i][j][1] || 0;
    }if (y) for (i = 0; i < n; ++i) {
      series[i][j][1] /= y;
    }
  }
  (0, _none2.default)(series, order);
};

var _none = __webpack_require__(50);

var _none2 = _interopRequireDefault(_none);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 696 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (series, order) {
  if (!((n = series.length) > 1)) return;
  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
    for (yp = yn = 0, i = 0; i < n; ++i) {
      if ((dy = (d = series[order[i]][j])[1] - d[0]) >= 0) {
        d[0] = yp, d[1] = yp += dy;
      } else if (dy < 0) {
        d[1] = yn, d[0] = yn += dy;
      } else {
        d[0] = yp;
      }
    }
  }
};

/***/ }),
/* 697 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (series, order) {
  if (!((n = series.length) > 0)) return;
  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y = 0; i < n; ++i) {
      y += series[i][j][1] || 0;
    }s0[j][1] += s0[j][0] = -y / 2;
  }
  (0, _none2.default)(series, order);
};

var _none = __webpack_require__(50);

var _none2 = _interopRequireDefault(_none);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 698 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (series, order) {
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
      var si = series[order[i]],
          sij0 = si[j][1] || 0,
          sij1 = si[j - 1][1] || 0,
          s3 = (sij0 - sij1) / 2;
      for (var k = 0; k < i; ++k) {
        var sk = series[order[k]],
            skj0 = sk[j][1] || 0,
            skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }
      s1 += sij0, s2 += s3 * sij0;
    }
    s0[j - 1][1] += s0[j - 1][0] = y;
    if (s1) y -= s2 / s1;
  }
  s0[j - 1][1] += s0[j - 1][0] = y;
  (0, _none2.default)(series, order);
};

var _none = __webpack_require__(50);

var _none2 = _interopRequireDefault(_none);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 699 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (series) {
  return (0, _ascending2.default)(series).reverse();
};

var _ascending = __webpack_require__(132);

var _ascending2 = _interopRequireDefault(_ascending);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 700 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (series) {
  var n = series.length,
      i,
      j,
      sums = series.map(_ascending.sum),
      order = (0, _none2.default)(series).sort(function (a, b) {
    return sums[b] - sums[a];
  }),
      top = 0,
      bottom = 0,
      tops = [],
      bottoms = [];

  for (i = 0; i < n; ++i) {
    j = order[i];
    if (top < bottom) {
      top += sums[j];
      tops.push(j);
    } else {
      bottom += sums[j];
      bottoms.push(j);
    }
  }

  return bottoms.reverse().concat(tops);
};

var _none = __webpack_require__(51);

var _none2 = _interopRequireDefault(_none);

var _ascending = __webpack_require__(132);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 701 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function (series) {
  return (0, _none2.default)(series).reverse();
};

var _none = __webpack_require__(51);

var _none2 = _interopRequireDefault(_none);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 702 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var d3Voronoi = __webpack_require__(703);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var _require2 = __webpack_require__(6),
    getFields = _require2.getFields;

var DEFAULT_OPTIONS = {
  // fields: [ 'x', 'y' ] // field x and field y, required
  // extend: [[x0, y0], [x1, y1]], // optional
  // size: [width, height], // optional
  as: ['_x', '_y']
};

function transform(dataView, options) {
  options = assign({}, DEFAULT_OPTIONS, options);

  var as = options.as;
  if (!Array.isArray(as) || as.length !== 2) {
    throw new TypeError('Invalid as: must be an array with two strings!');
  }
  var xField = as[0];
  var yField = as[1];

  var fields = getFields(options);
  if (!Array.isArray(fields) && fields.length !== 2) {
    throw new TypeError('Invalid fields: must be an array with two strings!');
  }
  var x = fields[0];
  var y = fields[1];

  var rows = dataView.rows;
  var data = rows.map(function (row) {
    return [row[x], row[y]];
  });
  var voronoi = d3Voronoi.voronoi();
  if (options.extend) {
    voronoi.extent(options.extend);
  }
  if (options.size) {
    voronoi.size(options.size);
  }
  var polygons = voronoi(data).polygons();
  rows.forEach(function (row, i) {
    var polygon = polygons[i].filter(function (point) {
      return !!point;
    }); // some points are null
    row[xField] = polygon.map(function (point) {
      return point[0];
    });
    row[yField] = polygon.map(function (point) {
      return point[1];
    });
  });
}

registerTransform('diagram.voronoi', transform);
registerTransform('voronoi', transform);

/***/ }),
/* 703 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

var _voronoi = __webpack_require__(704);

Object.defineProperty(exports, "voronoi", {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_voronoi).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 704 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;

exports.default = function () {
  var x = _point.x,
      y = _point.y,
      extent = null;

  function voronoi(data) {
    return new _Diagram2.default(data.map(function (d, i) {
      var s = [Math.round(x(d, i, data) / _Diagram.epsilon) * _Diagram.epsilon, Math.round(y(d, i, data) / _Diagram.epsilon) * _Diagram.epsilon];
      s.index = i;
      s.data = d;
      return s;
    }), extent);
  }

  voronoi.polygons = function (data) {
    return voronoi(data).polygons();
  };

  voronoi.links = function (data) {
    return voronoi(data).links();
  };

  voronoi.triangles = function (data) {
    return voronoi(data).triangles();
  };

  voronoi.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant2.default)(+_), voronoi) : x;
  };

  voronoi.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant2.default)(+_), voronoi) : y;
  };

  voronoi.extent = function (_) {
    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
  };

  voronoi.size = function (_) {
    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
  };

  return voronoi;
};

var _constant = __webpack_require__(705);

var _constant2 = _interopRequireDefault(_constant);

var _point = __webpack_require__(706);

var _Diagram = __webpack_require__(52);

var _Diagram2 = _interopRequireDefault(_Diagram);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 705 */
/***/ (function(module, exports) {

exports.__esModule = true;

exports.default = function (x) {
  return function () {
    return x;
  };
};

/***/ }),
/* 706 */
/***/ (function(module, exports) {

exports.__esModule = true;
exports.x = x;
exports.y = y;
function x(d) {
  return d[0];
}

function y(d) {
  return d[1];
}

/***/ }),
/* 707 */
/***/ (function(module, exports, __webpack_require__) {

exports.__esModule = true;
exports.removeBeach = removeBeach;
exports.addBeach = addBeach;

var _RedBlackTree = __webpack_require__(133);

var _Cell = __webpack_require__(265);

var _Circle = __webpack_require__(266);

var _Edge = __webpack_require__(134);

var _Diagram = __webpack_require__(52);

var beachPool = [];

function Beach() {
  (0, _RedBlackTree.RedBlackNode)(this);
  this.edge = this.site = this.circle = null;
}

function createBeach(site) {
  var beach = beachPool.pop() || new Beach();
  beach.site = site;
  return beach;
}

function detachBeach(beach) {
  (0, _Circle.detachCircle)(beach);
  _Diagram.beaches.remove(beach);
  beachPool.push(beach);
  (0, _RedBlackTree.RedBlackNode)(beach);
}

function removeBeach(beach) {
  var circle = beach.circle,
      x = circle.x,
      y = circle.cy,
      vertex = [x, y],
      previous = beach.P,
      next = beach.N,
      disappearing = [beach];

  detachBeach(beach);

  var lArc = previous;
  while (lArc.circle && Math.abs(x - lArc.circle.x) < _Diagram.epsilon && Math.abs(y - lArc.circle.cy) < _Diagram.epsilon) {
    previous = lArc.P;
    disappearing.unshift(lArc);
    detachBeach(lArc);
    lArc = previous;
  }

  disappearing.unshift(lArc);
  (0, _Circle.detachCircle)(lArc);

  var rArc = next;
  while (rArc.circle && Math.abs(x - rArc.circle.x) < _Diagram.epsilon && Math.abs(y - rArc.circle.cy) < _Diagram.epsilon) {
    next = rArc.N;
    disappearing.push(rArc);
    detachBeach(rArc);
    rArc = next;
  }

  disappearing.push(rArc);
  (0, _Circle.detachCircle)(rArc);

  var nArcs = disappearing.length,
      iArc;
  for (iArc = 1; iArc < nArcs; ++iArc) {
    rArc = disappearing[iArc];
    lArc = disappearing[iArc - 1];
    (0, _Edge.setEdgeEnd)(rArc.edge, lArc.site, rArc.site, vertex);
  }

  lArc = disappearing[0];
  rArc = disappearing[nArcs - 1];
  rArc.edge = (0, _Edge.createEdge)(lArc.site, rArc.site, null, vertex);

  (0, _Circle.attachCircle)(lArc);
  (0, _Circle.attachCircle)(rArc);
}

function addBeach(site) {
  var x = site[0],
      directrix = site[1],
      lArc,
      rArc,
      dxl,
      dxr,
      node = _Diagram.beaches._;

  while (node) {
    dxl = leftBreakPoint(node, directrix) - x;
    if (dxl > _Diagram.epsilon) node = node.L;else {
      dxr = x - rightBreakPoint(node, directrix);
      if (dxr > _Diagram.epsilon) {
        if (!node.R) {
          lArc = node;
          break;
        }
        node = node.R;
      } else {
        if (dxl > -_Diagram.epsilon) {
          lArc = node.P;
          rArc = node;
        } else if (dxr > -_Diagram.epsilon) {
          lArc = node;
          rArc = node.N;
        } else {
          lArc = rArc = node;
        }
        break;
      }
    }
  }

  (0, _Cell.createCell)(site);
  var newArc = createBeach(site);
  _Diagram.beaches.insert(lArc, newArc);

  if (!lArc && !rArc) return;

  if (lArc === rArc) {
    (0, _Circle.detachCircle)(lArc);
    rArc = createBeach(lArc.site);
    _Diagram.beaches.insert(newArc, rArc);
    newArc.edge = rArc.edge = (0, _Edge.createEdge)(lArc.site, newArc.site);
    (0, _Circle.attachCircle)(lArc);
    (0, _Circle.attachCircle)(rArc);
    return;
  }

  if (!rArc) {
    // && lArc
    newArc.edge = (0, _Edge.createEdge)(lArc.site, newArc.site);
    return;
  }

  // else lArc !== rArc
  (0, _Circle.detachCircle)(lArc);
  (0, _Circle.detachCircle)(rArc);

  var lSite = lArc.site,
      ax = lSite[0],
      ay = lSite[1],
      bx = site[0] - ax,
      by = site[1] - ay,
      rSite = rArc.site,
      cx = rSite[0] - ax,
      cy = rSite[1] - ay,
      d = 2 * (bx * cy - by * cx),
      hb = bx * bx + by * by,
      hc = cx * cx + cy * cy,
      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];

  (0, _Edge.setEdgeEnd)(rArc.edge, lSite, rSite, vertex);
  newArc.edge = (0, _Edge.createEdge)(lSite, site, null, vertex);
  rArc.edge = (0, _Edge.createEdge)(site, rSite, null, vertex);
  (0, _Circle.attachCircle)(lArc);
  (0, _Circle.attachCircle)(rArc);
}

function leftBreakPoint(arc, directrix) {
  var site = arc.site,
      rfocx = site[0],
      rfocy = site[1],
      pby2 = rfocy - directrix;

  if (!pby2) return rfocx;

  var lArc = arc.P;
  if (!lArc) return -Infinity;

  site = lArc.site;
  var lfocx = site[0],
      lfocy = site[1],
      plby2 = lfocy - directrix;

  if (!plby2) return lfocx;

  var hl = lfocx - rfocx,
      aby2 = 1 / pby2 - 1 / plby2,
      b = hl / plby2;

  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;

  return (rfocx + lfocx) / 2;
}

function rightBreakPoint(arc, directrix) {
  var rArc = arc.N;
  if (rArc) return leftBreakPoint(rArc, directrix);
  var site = arc.site;
  return site[1] === directrix ? site[0] : Infinity;
}

/***/ }),
/* 708 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var d3Hierarchy = __webpack_require__(119);

var _require = __webpack_require__(2),
    HIERARCHY = _require.HIERARCHY,
    registerTransform = _require.registerTransform;

var _require2 = __webpack_require__(6),
    getField = _require2.getField;

var DEFAULT_OPTIONS = {
  field: 'value',
  tile: 'treemapSquarify', // treemapBinary, treemapDice, treemapSlice, treemapSliceDice, treemapSquarify, treemapResquarify
  size: [1, 1], // width, height
  round: false,
  // ratio: 1.618033988749895, // golden ratio
  padding: 0,
  paddingInner: 0,
  paddingOuter: 0,
  paddingTop: 0,
  paddingRight: 0,
  paddingBottom: 0,
  paddingLeft: 0,
  as: ['x', 'y']
};

function transform(dataView, options) {
  if (dataView.dataType !== HIERARCHY) {
    throw new TypeError('Invalid DataView: This transform is for Hierarchy data only!');
  }
  var root = dataView.root;
  options = assign({}, DEFAULT_OPTIONS, options);

  var as = options.as;
  if (!Array.isArray(as) || as.length !== 2) {
    throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "x", "y" ])!');
  }

  var field = void 0;
  try {
    field = getField(options);
  } catch (e) {
    console.warn(e);
  }
  if (field) {
    root.sum(function (d) {
      return d[field];
    });
  }

  var treemapLayout = d3Hierarchy.treemap();
  treemapLayout.tile(d3Hierarchy[options.tile]).size(options.size).round(options.round).padding(options.padding).paddingInner(options.paddingInner).paddingOuter(options.paddingOuter).paddingTop(options.paddingTop).paddingRight(options.paddingRight).paddingBottom(options.paddingBottom).paddingLeft(options.paddingLeft);
  treemapLayout(root);

  /*
   * points:
   *   3  2
   *   0  1
   */
  var x = as[0];
  var y = as[1];
  root.each(function (node) {
    node[x] = [node.x0, node.x1, node.x1, node.x0];
    node[y] = [node.y1, node.y1, node.y0, node.y0];
    ['x0', 'x1', 'y0', 'y1'].forEach(function (prop) {
      if (as.indexOf(prop) === -1) {
        delete node[prop];
      }
    });
  });
}

registerTransform('hierarchy.treemap', transform);
registerTransform('treemap', transform);

/***/ }),
/* 709 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var d3Hierarchy = __webpack_require__(119);

var _require = __webpack_require__(2),
    HIERARCHY = _require.HIERARCHY,
    registerTransform = _require.registerTransform;

var _require2 = __webpack_require__(6),
    getField = _require2.getField;

var DEFAULT_OPTIONS = {
  field: 'value',
  size: [1, 1], // width, height
  round: false,
  // ratio: 1.618033988749895, // golden ratio
  padding: 0,
  sort: true,
  as: ['x', 'y']
};

function transform(dataView, options) {
  if (dataView.dataType !== HIERARCHY) {
    throw new TypeError('Invalid DataView: This transform is for Hierarchy data only!');
  }
  var root = dataView.root;
  options = assign({}, DEFAULT_OPTIONS, options);

  var as = options.as;
  if (!Array.isArray(as) || as.length !== 2) {
    throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "x", "y" ])!');
  }

  var field = void 0;
  try {
    field = getField(options);
  } catch (e) {
    console.warn(e);
  }
  if (field) {
    root.sum(function (d) {
      return d[field];
    });
  }

  var partitionLayout = d3Hierarchy.partition();
  partitionLayout.size(options.size).round(options.round).padding(options.padding);
  partitionLayout(root);

  /*
   * points:
   *   3  2
   *   0  1
   */
  var x = as[0];
  var y = as[1];
  root.each(function (node) {
    node[x] = [node.x0, node.x1, node.x1, node.x0];
    node[y] = [node.y1, node.y1, node.y0, node.y0];
    ['x0', 'x1', 'y0', 'y1'].forEach(function (prop) {
      if (as.indexOf(prop) === -1) {
        delete node[prop];
      }
    });
  });
}

registerTransform('hierarchy.partition', transform);
registerTransform('adjacency', transform);

/***/ }),
/* 710 */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(5);
var isString = __webpack_require__(7);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var tagCloud = __webpack_require__(711);

var _require2 = __webpack_require__(6),
    getFields = _require2.getFields;

var DEFAULT_OPTIONS = {
  fields: ['text', 'value'], // fields to keep
  font: 'serif',
  padding: 1,
  size: [500, 500],
  spiral: 'archimedean', // 'archimedean' || 'rectangular' || {function}
  timeInterval: Infinity // max execute time
  // imageMask: '', // instance of Image, must be loaded
};

function transform(dataView, options) {
  options = assign({}, DEFAULT_OPTIONS, options);
  var layout = tagCloud();
  ['font', 'padding', 'size', 'spiral', 'timeInterval'].forEach(function (key) {
    layout[key](options[key]);
  });
  var fields = getFields(options);
  var text = fields[0],
      value = fields[1];

  if (!isString(text) || !isString(value)) {
    throw new TypeError('Invalid fields: must be an array with 2 strings (e.g. [ "text", "value" ])!');
  }
  var words = dataView.rows.map(function (row) {
    var word = {};
    word.text = row[text];
    word.value = row[value];
    return word;
  });
  layout.words(words);
  if (options.imageMask) {
    layout.createMask(options.imageMask);
  }

  var _layout$execute = layout.execute(),
      tags = _layout$execute.tags;

  dataView.rows = tags;
}

registerTransform('tag-cloud', transform);
registerTransform('word-cloud', transform);

/***/ }),
/* 711 */
/***/ (function(module, exports) {

/*
 * Synchronous version of d3-cloud
 */
// Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/
// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf
/* eslint-disable no-return-assign, no-cond-assign */

var cloudRadians = Math.PI / 180;
var cw = 1 << 11 >> 5;
var ch = 1 << 11;

function cloudText(d) {
  return d.text;
}

function cloudFont() {
  return 'serif';
}

function cloudFontNormal() {
  return 'normal';
}

function cloudFontSize(d) {
  return Math.sqrt(d.value);
}

function cloudRotate() {
  return (~~(Math.random() * 6) - 3) * 30;
}

function cloudPadding() {
  return 1;
}

// Fetches a monochrome sprite bitmap for the specified text.
// Load in batches for speed.
function cloudSprite(contextAndRatio, d, data, di) {
  if (d.sprite) return;
  var c = contextAndRatio.context;
  var ratio = contextAndRatio.ratio;

  c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);
  var x = 0;
  var y = 0;
  var maxh = 0;
  var n = data.length;
  --di;
  while (++di < n) {
    d = data[di];
    c.save();
    c.font = d.style + ' ' + d.weight + ' ' + ~~((d.size + 1) / ratio) + 'px ' + d.font;
    var w = c.measureText(d.text + 'm').width * ratio,
        h = d.size << 1;
    if (d.rotate) {
      var sr = Math.sin(d.rotate * cloudRadians);
      var cr = Math.cos(d.rotate * cloudRadians);
      var wcr = w * cr;
      var wsr = w * sr;
      var hcr = h * cr;
      var hsr = h * sr;
      w = Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f >> 5 << 5;
      h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));
    } else {
      w = w + 0x1f >> 5 << 5;
    }
    if (h > maxh) maxh = h;
    if (x + w >= cw << 5) {
      x = 0;
      y += maxh;
      maxh = 0;
    }
    if (y + h >= ch) break;
    c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);
    if (d.rotate) c.rotate(d.rotate * cloudRadians);
    c.fillText(d.text, 0, 0);
    if (d.padding) {
      c.lineWidth = 2 * d.padding;
      c.strokeText(d.text, 0, 0);
    }
    c.restore();
    d.width = w;
    d.height = h;
    d.xoff = x;
    d.yoff = y;
    d.x1 = w >> 1;
    d.y1 = h >> 1;
    d.x0 = -d.x1;
    d.y0 = -d.y1;
    d.hasText = true;
    x += w;
  }
  var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data;
  var sprite = [];
  while (--di >= 0) {
    d = data[di];
    if (!d.hasText) continue;
    var _w = d.width;
    var w32 = _w >> 5;
    var _h = d.y1 - d.y0;
    // Zero the buffer
    for (var i = 0; i < _h * w32; i++) {
      sprite[i] = 0;
    }x = d.xoff;
    if (x == null) return;
    y = d.yoff;
    var seen = 0,
        seenRow = -1;
    for (var j = 0; j < _h; j++) {
      for (var _i = 0; _i < _w; _i++) {
        var k = w32 * j + (_i >> 5);
        var m = pixels[(y + j) * (cw << 5) + (x + _i) << 2] ? 1 << 31 - _i % 32 : 0;
        sprite[k] |= m;
        seen |= m;
      }
      if (seen) seenRow = j;else {
        d.y0++;
        _h--;
        j--;
        y++;
      }
    }
    d.y1 = d.y0 + seenRow;
    d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);
  }
}

// Use mask-based collision detection.
function cloudCollide(tag, board, sw) {
  sw >>= 5;
  var sprite = tag.sprite;
  var w = tag.width >> 5;
  var lx = tag.x - (w << 4);
  var sx = lx & 0x7f;
  var msx = 32 - sx;
  var h = tag.y1 - tag.y0;
  var x = (tag.y + tag.y0) * sw + (lx >> 5);
  var last = void 0;
  for (var j = 0; j < h; j++) {
    last = 0;
    for (var i = 0; i <= w; i++) {
      if ((last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0)) & board[x + i]) return true;
    }
    x += sw;
  }
  return false;
}

function cloudBounds(bounds, d) {
  var b0 = bounds[0];
  var b1 = bounds[1];
  if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;
  if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;
  if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;
  if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;
}

function collideRects(a, b) {
  return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;
}

function archimedeanSpiral(size) {
  var e = size[0] / size[1];
  return function (t) {
    return [e * (t *= 0.1) * Math.cos(t), t * Math.sin(t)];
  };
}

function rectangularSpiral(size) {
  var dy = 4;
  var dx = dy * size[0] / size[1];
  var x = 0;
  var y = 0;
  return function (t) {
    var sign = t < 0 ? -1 : 1;
    // See triangular numbers: T_n = n * (n + 1) / 2.
    switch (Math.sqrt(1 + 4 * sign * t) - sign & 3) {
      case 0:
        x += dx;break;
      case 1:
        y += dy;break;
      case 2:
        x -= dx;break;
      default:
        y -= dy;break;
    }
    return [x, y];
  };
}

// TODO reuse arrays?
function zeroArray(n) {
  var a = [];
  var i = -1;
  while (++i < n) {
    a[i] = 0;
  }return a;
}

function cloudCanvas() {
  return document.createElement('canvas');
}

function functor(d) {
  return typeof d === 'function' ? d : function () {
    return d;
  };
}

var spirals = {
  archimedean: archimedeanSpiral,
  rectangular: rectangularSpiral
};

var tagCloud = function tagCloud() {
  // TODO image mask

  var size = [256, 256];
  var text = cloudText;
  var font = cloudFont;
  var fontSize = cloudFontSize;
  var fontStyle = cloudFontNormal;
  var fontWeight = cloudFontNormal;
  var rotate = cloudRotate;
  var padding = cloudPadding;
  var spiral = archimedeanSpiral;
  var words = [];
  var timeInterval = Infinity;
  var random = Math.random;
  var cloud = {};
  var canvas = cloudCanvas;

  cloud.canvas = function (_) {
    return arguments.length ? (canvas = functor(_), cloud) : canvas;
  };

  cloud.start = cloud.exec = cloud.execute = function () {
    // origin: cloud.start
    var contextAndRatio = getContext(canvas());
    var board = cloud.board || zeroArray((size[0] >> 5) * size[1]);
    var bounds = null;
    var n = words.length;
    var tags = [];
    var data = words.map(function (d, i) {
      d.text = text.call(this, d, i);
      d.font = font.call(this, d, i);
      d.style = fontStyle.call(this, d, i);
      d.weight = fontWeight.call(this, d, i);
      d.rotate = rotate.call(this, d, i);
      d.size = ~~fontSize.call(this, d, i);
      d.padding = padding.call(this, d, i);
      return d;
    }).sort(function (a, b) {
      return b.size - a.size;
    });
    var i = -1;

    step();

    cloud.tags = tags;
    cloud.bounds = bounds;

    return cloud;

    function step() {
      var start = Date.now();
      while (Date.now() - start < timeInterval && ++i < n) {
        var d = data[i];
        d.x = size[0] * (random() + 0.5) >> 1;
        d.y = size[1] * (random() + 0.5) >> 1;
        cloudSprite(contextAndRatio, d, data, i);
        if (d.hasText && place(board, d, bounds)) {
          tags.push(d);
          if (bounds) cloudBounds(bounds, d);else bounds = [{ x: d.x + d.x0, y: d.y + d.y0 }, { x: d.x + d.x1, y: d.y + d.y1 }];
          // Temporary hack
          d.x -= size[0] >> 1;
          d.y -= size[1] >> 1;
        }
      }
    }
  };

  function getContext(canvas) {
    canvas.width = canvas.height = 1;
    var ratio = Math.sqrt(canvas.getContext('2d').getImageData(0, 0, 1, 1).data.length >> 2);
    canvas.width = (cw << 5) / ratio;
    canvas.height = ch / ratio;

    var context = canvas.getContext('2d');
    context.fillStyle = context.strokeStyle = 'red';
    context.textAlign = 'center';

    return { context: context, ratio: ratio };
  }

  function place(board, tag, bounds) {
    // const perimeter = [{ x: 0, y: 0 }, { x: size[0], y: size[1] }];
    var startX = tag.x;
    var startY = tag.y;
    var maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]);
    var s = spiral(size);
    var dt = random() < 0.5 ? 1 : -1;
    var t = -dt;
    var dxdy = void 0;
    var dx = void 0;
    var dy = void 0;

    while (dxdy = s(t += dt)) {
      dx = ~~dxdy[0];
      dy = ~~dxdy[1];

      if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;

      tag.x = startX + dx;
      tag.y = startY + dy;

      if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 || tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue;
      // TODO only check for collisions within current bounds.
      if (!bounds || !cloudCollide(tag, board, size[0])) {
        if (!bounds || collideRects(tag, bounds)) {
          var sprite = tag.sprite;
          var w = tag.width >> 5;
          var sw = size[0] >> 5;
          var lx = tag.x - (w << 4);
          var sx = lx & 0x7f;
          var msx = 32 - sx;
          var h = tag.y1 - tag.y0;
          var x = (tag.y + tag.y0) * sw + (lx >> 5);
          var last = void 0;
          for (var j = 0; j < h; j++) {
            last = 0;
            for (var i = 0; i <= w; i++) {
              board[x + i] |= last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);
            }
            x += sw;
          }
          delete tag.sprite;
          return true;
        }
      }
    }
    return false;
  }

  cloud.createMask = function (img) {
    var can = document.createElement('canvas');
    var _size = size,
        width = _size[0],
        height = _size[1];

    var w32 = width >> 5;
    var board = zeroArray((width >> 5) * height);
    can.width = width;
    can.height = height;
    var cxt = can.getContext('2d');
    cxt.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);
    var imageData = cxt.getImageData(0, 0, can.width, can.height).data;
    // 将图片的空白区域填充
    for (var j = 0; j < height; j++) {
      for (var i = 0; i < width; i++) {
        var k = w32 * j + (i >> 5);
        var tmp = j * width + i << 2;
        var flag = imageData[tmp] >= 250 && imageData[tmp + 1] >= 250 && imageData[tmp + 2] >= 250;
        var m = flag ? 1 << 31 - i % 32 : 0;
        board[k] |= m;
      }
    }
    cloud.board = board;
    cloud.hasImage = true;
  };

  cloud.timeInterval = function (_) {
    return arguments.length ? (timeInterval = _ == null ? Infinity : _, cloud) : timeInterval;
  };

  cloud.words = function (_) {
    return arguments.length ? (words = _, cloud) : words;
  };

  cloud.size = function (_) {
    return arguments.length ? (size = [+_[0], +_[1]], cloud) : size;
  };

  cloud.font = function (_) {
    return arguments.length ? (font = functor(_), cloud) : font;
  };

  cloud.fontStyle = function (_) {
    return arguments.length ? (fontStyle = functor(_), cloud) : fontStyle;
  };

  cloud.fontWeight = function (_) {
    return arguments.length ? (fontWeight = functor(_), cloud) : fontWeight;
  };

  cloud.rotate = function (_) {
    return arguments.length ? (rotate = functor(_), cloud) : rotate;
  };

  cloud.text = function (_) {
    return arguments.length ? (text = functor(_), cloud) : text;
  };

  cloud.spiral = function (_) {
    return arguments.length ? (spiral = spirals[_] || _, cloud) : spiral;
  };

  cloud.fontSize = function (_) {
    return arguments.length ? (fontSize = functor(_), cloud) : fontSize;
  };

  cloud.padding = function (_) {
    return arguments.length ? (padding = functor(_), cloud) : padding;
  };

  cloud.random = function (_) {
    return arguments.length ? (random = _, cloud) : random;
  };

  return cloud;
};

module.exports = tagCloud;

/***/ }),
/* 712 */
/***/ (function(module, exports, __webpack_require__) {

/*
 * @reference: https://github.com/Planeshifter/kernel-smooth/blob/master/lib/index.js
 */
var assign = __webpack_require__(5);
var isFunction = __webpack_require__(8);
var isNumber = __webpack_require__(125);
var isString = __webpack_require__(7);
var keys = __webpack_require__(9);
// const regression = require('regression');
var getSeriesValues = __webpack_require__(126);
// const enclideanDistance = require('../../util/euclidean-distance');
var kernel = __webpack_require__(267);

var _require = __webpack_require__(2),
    registerTransform = _require.registerTransform;

var _require2 = __webpack_require__(6),
    getFields = _require2.getFields;

var _require3 = __webpack_require__(127),
    silverman = _require3.silverman;

var isArray = Array.isArray;

var DEFAULT_OPTIONS = {
  as: ['x', 'y', 'z'],
  // fields: [ 'x', 'y' ], // required, one or two fields
  method: 'gaussian', // kernel method: should be one of _.keys(kernel)
  extent: [], // extent to execute regression function, default: [ [ min(x), max(x) ], [ min(y), max(y) ] ]
  bandwidth: [] // bandWidth to execute kernel function
};

var KERNEL_METHODS = keys(kernel);

function transform(dv, options) {
  options = assign({}, DEFAULT_OPTIONS, options);
  var fields = getFields(options);
  if (!isArray(fields) || fields.length !== 2) {
    throw new TypeError('invalid fields: must be an array of 2 strings!');
  }
  var _options$as = options.as,
      asX = _options$as[0],
      asY = _options$as[1],
      asZ = _options$as[2];

  if (!isString(asX) || !isString(asY) || !isString(asZ)) {
    throw new TypeError('invalid as: must be an array of 3 strings!');
  }
  var method = options.method;
  if (isString(method)) {
    if (KERNEL_METHODS.indexOf(method) === -1) {
      throw new TypeError('invalid method: ' + method + '. Must be one of ' + KERNEL_METHODS.join(', '));
    }
    method = kernel[method];
  }
  if (!isFunction(method)) {
    throw new TypeError('invalid method: kernel method must be a function!');
  }

  var xField = fields[0],
      yField = fields[1];
  var _options$extent = options.extent,
      extentX = _options$extent[0],
      extentY = _options$extent[1];

  if (!isArray(extentX) || !isArray(extentY)) {
    extentX = dv.range(xField);
    extentY = dv.range(yField);
  }
  var _options$bandwidth = options.bandwidth,
      bwX = _options$bandwidth[0],
      bwY = _options$bandwidth[1];

  if (!isNumber(bwX) || bwX <= 0 || !isNumber(bwY) || bwY <= 0) {
    bwX = silverman(dv.getColumn(xField));
    bwY = silverman(dv.getColumn(yField));
  }
  var seriesValuesX = getSeriesValues(extentX, bwX);
  var seriesValuesY = getSeriesValues(extentY, bwY);
  var count = dv.rows.length;
  var result = [];

  for (var i = 0; i < seriesValuesX.length; i++) {
    for (var j = 0; j < seriesValuesY.length; j++) {
      var sum = 0;
      var x = seriesValuesX[i];
      var y = seriesValuesY[j];
      for (var k = 0; k < count; k++) {
        sum += method((x - dv.rows[k][xField]) / bwX) * method((y - dv.rows[k][yField]) / bwY);
      }
      var z = 1 / (count * bwX * bwY) * sum;
      var row = {};
      row[asX] = x;
      row[asY] = y;
      row[asZ] = z;
      result.push(row);
    }
  }

  dv.rows = result;
}

registerTransform('kernel-smooth.density', transform);
registerTransform('kernel.density', transform);

module.exports = {
  KERNEL_METHODS: KERNEL_METHODS
};

/***/ }),
/* 713 */
/***/ (function(module, exports, __webpack_require__) {

/*
 * @reference: https://github.com/Planeshifter/kernel-smooth/blob/master/lib/index.js
 */
var assign = __webpack_require__(5);
var isFunction = __webpack_require__(8);
var isNil = __webpack_require__(236);
var isNumber = __webpack_require__(125);
var isString = __webpack_require__(7);
var keys = __webpack_require__(9);
// const regression = require('regression');

var _require = __webpack_require__(30),
    sum = _require.sum;

var getSeriesValues = __webpack_require__(126);
// const enclideanDistance = require('../../util/euclidean-distance');
var kernel = __webpack_require__(267);

var _require2 = __webpack_require__(2),
    registerTransform = _require2.registerTransform;

var _require3 = __webpack_require__(6),
    getFields = _require3.getFields;

var _require4 = __webpack_require__(127),
    silverman = _require4.silverman;

var isArray = Array.isArray;

var DEFAULT_OPTIONS = {
  as: ['x', 'y'],
  // fields: [ 'x', 'y' ], // required, one or two fields
  method: 'gaussian' // kernel method: should be one of _.keys(kernel)
  // extent: [], // extent to execute regression function, default: [ min(x), max(x) ]
  // bandwidth: 0.5 // bandWidth to execute kernel function
};

var KERNEL_METHODS = keys(kernel);

// calculates weight for i-th obs
function weight(kernel, bandwidth, x_0, x_i) {
  var arg = (x_i - x_0) / bandwidth;
  return kernel(arg);
}
// calculates weight for i-th obs when p > 1
// function weight_vectors(kernel, bandwidth, x_0, x_i) {
//   const arg = enclideanDistance(x_i, x_0) / bandwidth;
//   return kernel(arg);
// }
function vectorize(fun) {
  return function (x) {
    if (!isArray(x)) {
      return fun(x);
    }
    return x.map(function (x) {
      return fun(x);
    });
  };
}

function transform(dv, options) {
  options = assign({}, DEFAULT_OPTIONS, options);
  var fields = getFields(options);
  if (!isArray(fields) || fields.length !== 1 && fields.length !== 2) {
    throw new TypeError('invalid fields: must be an array of 1 or 2 strings!');
  }
  var _options$as = options.as,
      asX = _options$as[0],
      asY = _options$as[1];

  if (!isString(asX) || !isString(asY)) {
    throw new TypeError('invalid as: must be an array of 2 strings!');
  }
  var method = options.method;
  if (isString(method)) {
    if (KERNEL_METHODS.indexOf(method) === -1) {
      throw new TypeError('invalid method: ' + method + '. Must be one of ' + KERNEL_METHODS.join(', '));
    }
    method = kernel[method];
  }
  if (!isFunction(method)) {
    throw new TypeError('invalid method: kernel method must be a function!');
  }

  var xField = fields[0],
      yField = fields[1];

  var xs = dv.getColumn(xField);

  var extent = options.extent;
  if (!isArray(extent)) {
    extent = dv.range(xField);
  }
  var bandwidth = options.bandwidth;
  if (!isNumber(bandwidth) || bandwidth <= 0) {
    bandwidth = silverman(xs);
  }
  var seriesValues = getSeriesValues(extent, bandwidth);
  var xCount = xs.length;
  var weightFunc = weight.bind(null, method, bandwidth);
  var kernelSmoother = void 0;

  if (isNil(yField)) {
    // KDE
    kernelSmoother = vectorize(function (x) {
      var weights = xs.map(function (x_i) {
        return weightFunc(x, x_i);
      });
      var num = sum(weights);
      var denom = xCount * bandwidth;
      if (!num || !denom) return 0;
      return num / denom;
    });
  } else {
    // kernel regression smoothing
    var ys = dv.getColumn(yField);
    kernelSmoother = vectorize(function (x) {
      var weights = xs.map(function (x_i) {
        return weightFunc(x, x_i);
      });
      var num = sum(weights.map(function (w, i) {
        return w * ys[i];
      }));
      var denom = sum(weights);
      if (!num || !denom) return 0;
      return num / denom;
    });
  }

  var result = seriesValues.map(function (x) {
    var row = {};
    row[asX] = x;
    row[asY] = kernelSmoother(x);
    return row;
  });
  dv.rows = result;
}

registerTransform('kernel-smooth.regression', transform);
registerTransform('kernel.regression', transform);

module.exports = {
  KERNEL_METHODS: KERNEL_METHODS
};

/***/ })
/******/ ]);
});

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.process = undefined;

var _cloneDeep2 = __webpack_require__(4);

var _cloneDeep3 = _interopRequireDefault(_cloneDeep2);

var _PolarUtils = __webpack_require__(177);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var __assign = undefined && undefined.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
    }
    return t;
};

function setPolarCoord(chart, coord) {
    var newCoord = {};
    if (coord.radius && (coord.radius < 0 || coord.radius > 1) || coord.innerRadius && (coord.innerRadius < 0 || coord.innerRadius > 1)) {
        throw new Error('please set correct radius or innerRadius');
    }
    if (coord.radius) {
        newCoord = __assign({}, newCoord, { radius: coord.radius });
    }
    if (coord.innerRadius) {
        newCoord = __assign({}, newCoord, { innerRadius: coord.innerRadius });
    }
    if (coord.startAngle || coord.endAngle) {
        if (!coord.startAngle || coord.startAngle && (coord.startAngle < -360 || coord.startAngle > 360) || !coord.endAngle || coord.endAngle && (coord.endAngle < -360 || coord.endAngle > 360)) {
            throw new Error('please set correct starAngle and endAngle');
        }
        newCoord = __assign({}, newCoord, { startAngle: (0, _PolarUtils.degreeToRadian)(coord.startAngle), endAngle: (0, _PolarUtils.degreeToRadian)(coord.endAngle) });
    }
    var polarCoord = chart.coord(coord.type, __assign({}, newCoord));
    switch (coord.direction) {
        case 'rotate':
            polarCoord.transpose();
            break;
        case 'xReverse':
            polarCoord.reflect('x');
            break;
        case 'yReverse':
            polarCoord.reflect('y');
            break;
        case 'reverse':
            polarCoord.reflect();
            break;
        default:
            break;
    }
    return polarCoord;
}
function setRectCoord(chart, coord) {
    if (!coord.direction) {
        return chart.coord('rect');
    }
    switch (coord.direction) {
        case 'BL':
            chart.coord('rect');
            break;
        case 'BR':
            chart.coord('rect').scale(-1, 1);
            break;
        case 'LT':
            chart.coord('rect').transpose().scale(1, -1);
            break;
        case 'LB':
            chart.coord('rect').transpose();
            break;
        case 'RB':
            chart.coord('rect').transpose().reflect();
            break;
        case 'RT':
            chart.coord('rect').transpose().reflect().scale(-1, 1);
            break;
        case 'TL':
            chart.coord('rect').reflect();
            break;
        case 'TR':
            chart.coord('rect').reflect().scale(-1, 1);
            break;
        default:
            chart.coord('rect');
            break;
    }
    return chart;
}
var process = exports.process = function process(chart, config) {
    var cCoord = (0, _cloneDeep3.default)(config.coord);
    if (!cCoord || !cCoord.type) {
        return chart.coord('rect');
    }
    var type = cCoord.type;
    if (type === 'polar' || type === 'theta') {
        return setPolarCoord(chart, cCoord);
    }
    if (type === 'rect') {
        return setRectCoord(chart, cCoord);
    }
    return chart.coord(type);
};
//# sourceMappingURL=setCoordConfig.js.map

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var degreeToRadian = exports.degreeToRadian = function degreeToRadian(angle) {
    return angle * Math.PI / 180;
};
var radianToDegree = exports.radianToDegree = function radianToDegree(angleInRadian) {
    return angleInRadian * 180 / Math.PI;
};
var polarToCartesian = exports.polarToCartesian = function polarToCartesian(cx, cy, radius, angle) {
    var radian = degreeToRadian(angle);
    return {
        x: cx + Math.cos(radian) * radius,
        y: cy + Math.sin(radian) * radius
    };
};
//# sourceMappingURL=PolarUtils.js.map

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.process = undefined;

var _omit2 = __webpack_require__(15);

var _omit3 = _interopRequireDefault(_omit2);

var _isNil2 = __webpack_require__(8);

var _isNil3 = _interopRequireDefault(_isNil2);

var _isArray2 = __webpack_require__(0);

var _isArray3 = _interopRequireDefault(_isArray2);

var _cloneDeep2 = __webpack_require__(4);

var _cloneDeep3 = _interopRequireDefault(_cloneDeep2);

var _get2 = __webpack_require__(11);

var _get3 = _interopRequireDefault(_get2);

var _setCustomFormatter = __webpack_require__(74);

var setCustomFormatter = _interopRequireWildcard(_setCustomFormatter);

var _EventUtils = __webpack_require__(12);

var EventUtils = _interopRequireWildcard(_EventUtils);

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var __assign = undefined && undefined.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
    }
    return t;
};

function setRotatePolarAxis(chart, axisItem, coord, data) {
    var polarLabel = (0, _get3.default)(axisItem, 'polarLabel');
    var rotate = (0, _get3.default)(axisItem, 'polarLabel.rotate');
    if (!rotate) {
        return;
    }
    var tickStyle = {};
    if (rotate === 'parallel') {
        tickStyle = {
            rotate: coord.startAngle,
            textAlign: 'center'
        };
    } else if (rotate === 'normal') {
        tickStyle = {
            rotate: coord.startAngle + 90,
            textAlign: 'right'
        };
    }
    var offsetX = (0, _get3.default)(axisItem, 'polarLabel.offsetX');
    var offsetY = (0, _get3.default)(axisItem, 'polarLabel.offsetY');
    data.forEach(function (res, i) {
        chart.guide().text(__assign({ position: [i, 0], content: data[i][axisItem.dataKey], style: __assign({ polarLabel: polarLabel }, tickStyle) }, offsetX, offsetY));
    });
}
var process = exports.process = function process(chart, config) {
    var cAxis = (0, _cloneDeep3.default)(config.axis);
    var isArr = (0, _isArray3.default)(cAxis);
    if ((0, _isNil3.default)(cAxis) || cAxis === false || isArr && cAxis.length === 0) {
        return chart.axis(false);
    }
    if (cAxis === true) {
        return chart.axis();
    }
    var arrAxis = isArr ? cAxis : [cAxis];
    var coord = config.coord,
        data = config.data;
    for (var _i = 0, arrAxis_1 = arrAxis; _i < arrAxis_1.length; _i++) {
        var res = arrAxis_1[_i];
        if (coord && coord.type === 'polar' && coord.direction === 'rotate') {
            setRotatePolarAxis(chart, res, coord, data);
        }
        if (res.label) {
            res.label = setCustomFormatter.supportD3Formatter(res.label);
        }
        for (var item in res) {
            if (res.hasOwnProperty(item)) {
                var name_1 = "axis-" + item;
                if (item === 'tickLine') {
                    name_1 = 'axis-ticks';
                }
                EventUtils.setEvent(chart, name_1, res[item]);
            }
        }
        if (res.dataKey) {
            if (res.show === false) {
                return chart.axis(res.dataKey, false);
            }
            var options = (0, _omit3.default)(res, ['show', 'dataKey']);
            chart.axis(res.dataKey, options);
        } else {
            chart.axis(res);
        }
    }
    return chart;
};
//# sourceMappingURL=setAxisConfig.js.map

/***/ }),
/* 179 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_defaultLocale__ = __webpack_require__(180);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "formatDefaultLocale", function() { return __WEBPACK_IMPORTED_MODULE_0__src_defaultLocale__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "format", function() { return __WEBPACK_IMPORTED_MODULE_0__src_defaultLocale__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "formatPrefix", function() { return __WEBPACK_IMPORTED_MODULE_0__src_defaultLocale__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_locale__ = __webpack_require__(76);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "formatLocale", function() { return __WEBPACK_IMPORTED_MODULE_1__src_locale__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_formatSpecifier__ = __webpack_require__(77);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "formatSpecifier", function() { return __WEBPACK_IMPORTED_MODULE_2__src_formatSpecifier__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_precisionFixed__ = __webpack_require__(186);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "precisionFixed", function() { return __WEBPACK_IMPORTED_MODULE_3__src_precisionFixed__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_precisionPrefix__ = __webpack_require__(187);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "precisionPrefix", function() { return __WEBPACK_IMPORTED_MODULE_4__src_precisionPrefix__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_precisionRound__ = __webpack_require__(188);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "precisionRound", function() { return __WEBPACK_IMPORTED_MODULE_5__src_precisionRound__["a"]; });








/***/ }),
/* 180 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return formatPrefix; });
/* harmony export (immutable) */ __webpack_exports__["a"] = defaultLocale;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__locale__ = __webpack_require__(76);


var locale;
var format;
var formatPrefix;

defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});

function defaultLocale(definition) {
  locale = Object(__WEBPACK_IMPORTED_MODULE_0__locale__["a" /* default */])(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}


/***/ }),
/* 181 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(grouping, thousands) {
  return function(value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
});


/***/ }),
/* 182 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
});


/***/ }),
/* 183 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x, p) {
  x = x.toPrecision(p);

  out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (x[i]) {
      case ".": i0 = i1 = i; break;
      case "0": if (i0 === 0) i0 = i; i1 = i; break;
      case "e": break out;
      default: if (i0 > 0) i0 = 0; break;
    }
  }

  return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;
});


/***/ }),
/* 184 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__formatDecimal__ = __webpack_require__(48);


/* harmony default export */ __webpack_exports__["a"] = (function(x, p) {
  var d = Object(__WEBPACK_IMPORTED_MODULE_0__formatDecimal__["a" /* default */])(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
});


/***/ }),
/* 185 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return x;
});


/***/ }),
/* 186 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__exponent__ = __webpack_require__(29);


/* harmony default export */ __webpack_exports__["a"] = (function(step) {
  return Math.max(0, -Object(__WEBPACK_IMPORTED_MODULE_0__exponent__["a" /* default */])(Math.abs(step)));
});


/***/ }),
/* 187 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__exponent__ = __webpack_require__(29);


/* harmony default export */ __webpack_exports__["a"] = (function(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(Object(__WEBPACK_IMPORTED_MODULE_0__exponent__["a" /* default */])(value) / 3))) * 3 - Object(__WEBPACK_IMPORTED_MODULE_0__exponent__["a" /* default */])(Math.abs(step)));
});


/***/ }),
/* 188 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__exponent__ = __webpack_require__(29);


/* harmony default export */ __webpack_exports__["a"] = (function(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, Object(__WEBPACK_IMPORTED_MODULE_0__exponent__["a" /* default */])(max) - Object(__WEBPACK_IMPORTED_MODULE_0__exponent__["a" /* default */])(step)) + 1;
});


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.process = undefined;

var _sortBy2 = __webpack_require__(190);

var _sortBy3 = _interopRequireDefault(_sortBy2);

var _cloneDeep2 = __webpack_require__(4);

var _cloneDeep3 = _interopRequireDefault(_cloneDeep2);

var _isEmpty2 = __webpack_require__(5);

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _isBoolean2 = __webpack_require__(214);

var _isBoolean3 = _interopRequireDefault(_isBoolean2);

var _isPlainObject2 = __webpack_require__(70);

var _isPlainObject3 = _interopRequireDefault(_isPlainObject2);

var _isNumber2 = __webpack_require__(215);

var _isNumber3 = _interopRequireDefault(_isNumber2);

var _isArray2 = __webpack_require__(0);

var _isArray3 = _interopRequireDefault(_isArray2);

var _isString2 = __webpack_require__(75);

var _isString3 = _interopRequireDefault(_isString2);

var _isNil2 = __webpack_require__(8);

var _isNil3 = _interopRequireDefault(_isNil2);

var _setQuickType = __webpack_require__(216);

var setQuickType = _interopRequireWildcard(_setQuickType);

var _EventUtils = __webpack_require__(12);

var EventUtils = _interopRequireWildcard(_EventUtils);

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function setSeriesGemo(chart, currSeries) {
    var gemo = currSeries.gemo;
    switch (gemo) {
        case 'line':
            chart = chart.line();
            break;
        case 'area':
            chart = chart.area();
            break;
        case 'bar':
        case 'interval':
            chart = chart.interval();
            break;
        case 'point':
            chart = chart.point();
            break;
        case 'schema':
            chart = chart.schema();
            break;
        case 'polygon':
            chart = chart.polygon();
            break;
        case 'contour':
            chart = chart.contour();
            break;
        case 'heatmap':
            chart = chart.heatmap();
            break;
        case 'edge':
            chart = chart.edge();
            break;
        default:
            chart = chart.line();
    }
    return chart;
}
function setSeriesPosition(chart, currSeries) {
    var position = currSeries.position;
    if (!(0, _isNil3.default)(position)) {
        return chart.position(position);
    }
    return chart;
}
function setSeriesAdjust(chart, currSeries) {
    var adjust = currSeries.adjust;
    if (!(0, _isNil3.default)(adjust)) {
        return chart.adjust(adjust);
    }
    return chart;
}
function setSeriesShape(chart, currSeries) {
    var shape = currSeries.shape;
    if ((0, _isString3.default)(shape)) {
        return chart.shape(shape);
    }
    if ((0, _isArray3.default)(shape) && shape.length >= 1) {
        if (shape[1]) {
            return chart.shape(shape[0], shape[1]);
        }
        return chart.shape(shape[0]);
    }
    return chart;
}
function setSeriesColor(chart, currSeries) {
    var color = currSeries.color;
    if ((0, _isString3.default)(color)) {
        return chart.color(color);
    }
    if ((0, _isArray3.default)(color) && color.length >= 1) {
        if (color[1]) {
            return chart.color(color[0], color[1]);
        }
        return chart.color(color[0]);
    }
    return chart;
}
function setSeriesSize(chart, currSeries) {
    var size = currSeries.size;
    if ((0, _isNumber3.default)(size) || (0, _isString3.default)(size)) {
        return chart.size(size);
    }
    if ((0, _isArray3.default)(size) && size.length >= 1) {
        if (size[1]) {
            return chart.size(size[0], size[1]);
        }
        return chart.size(size[0]);
    }
    return chart;
}
function setSeriesOpacity(chart, currSeries) {
    var opacity = currSeries.opacity;
    if ((0, _isNumber3.default)(opacity) || (0, _isString3.default)(opacity)) {
        return chart.opacity(opacity);
    }
    if ((0, _isArray3.default)(opacity) && opacity.length >= 1) {
        if (opacity[1]) {
            return chart.opacity(opacity[0], opacity[1]);
        }
        return chart.opacity(opacity[0]);
    }
    return chart;
}
function setSeriesLabel(chart, currSeries) {
    var label = currSeries.label;
    if ((0, _isString3.default)(label)) {
        return chart.label(label);
    }
    if ((0, _isArray3.default)(label) && label.length >= 1) {
        if (label[1]) {
            EventUtils.setEvent(chart, 'label', label[1]);
            return chart.label(label[0], label[1]);
        }
        return chart.label(label[0]);
    }
    return chart;
}
function setSeriesStyle(chart, currSeries) {
    var style = currSeries.style;
    if ((0, _isArray3.default)(style) && style.length >= 1) {
        if (style[1]) {
            return chart.style(style[0], style[1]);
        }
        return chart.style(style[0]);
    }
    if ((0, _isPlainObject3.default)(style)) {
        return chart.style(style);
    }
    return chart;
}
function setSeriesTooltip(chart, currSeries) {
    var tooltip = currSeries.tooltip;
    if ((0, _isBoolean3.default)(tooltip) || (0, _isString3.default)(tooltip)) {
        return chart.tooltip(tooltip);
    }
    if ((0, _isArray3.default)(tooltip) && tooltip.length >= 1) {
        if (tooltip[1]) {
            return chart.tooltip(tooltip[0], tooltip[1]);
        }
        return chart.tooltip(tooltip[0]);
    }
    return chart;
}
function setSeriesSelect(chart, currSeries) {
    var select = currSeries.select;
    if ((0, _isBoolean3.default)(select)) {
        return chart.select(select);
    }
    if ((0, _isArray3.default)(select) && select.length >= 1) {
        if (select[1]) {
            return chart.select(select[0], select[1]);
        }
        return chart.select(select[0]);
    }
    return chart;
}
function setSeriesActive(chart, currSeries) {
    var active = currSeries.active;
    if ((0, _isBoolean3.default)(active)) {
        return chart.active(active);
    }
    return chart;
}
function setSeriesAnimate(chart, currSeries) {
    var animate = currSeries.animate;
    if (!(0, _isEmpty3.default)(animate)) {
        return chart.animate(animate);
    }
    return chart;
}
var process = exports.process = function process(chart, config) {
    var cSeries = (0, _cloneDeep3.default)(config.series);
    var isArr = (0, _isArray3.default)(cSeries);
    if ((0, _isNil3.default)(cSeries) || (0, _isEmpty3.default)(cSeries)) {
        return chart;
    }
    var arrSeries = isArr ? cSeries : [cSeries];
    arrSeries = setQuickType.process(arrSeries, config.coord);
    arrSeries = (0, _sortBy3.default)(arrSeries, 'zIndex');
    var chartInstance;
    arrSeries.forEach(function (currSeries) {
        EventUtils.setEvent(chart, currSeries.gemo, currSeries);
        chartInstance = setSeriesGemo(chart, currSeries);
        chartInstance = setSeriesPosition(chartInstance, currSeries);
        chartInstance = setSeriesAdjust(chartInstance, currSeries);
        chartInstance = setSeriesShape(chartInstance, currSeries);
        chartInstance = setSeriesColor(chartInstance, currSeries);
        chartInstance = setSeriesOpacity(chartInstance, currSeries);
        chartInstance = setSeriesSize(chartInstance, currSeries);
        chartInstance = setSeriesLabel(chartInstance, currSeries);
        chartInstance = setSeriesTooltip(chartInstance, currSeries);
        chartInstance = setSeriesStyle(chartInstance, currSeries);
        chartInstance = setSeriesSelect(chartInstance, currSeries);
        chartInstance = setSeriesActive(chartInstance, currSeries);
        chartInstance = setSeriesAnimate(chartInstance, currSeries);
    });
    return chartInstance;
};
//# sourceMappingURL=setSeriesConfig.js.map

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

var baseFlatten = __webpack_require__(71),
    baseOrderBy = __webpack_require__(191),
    baseRest = __webpack_require__(212),
    isIterateeCall = __webpack_require__(213);

/**
 * Creates an array of elements, sorted in ascending order by the results of
 * running each element in a collection thru each iteratee. This method
 * performs a stable sort, that is, it preserves the original sort order of
 * equal elements. The iteratees are invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {...(Function|Function[])} [iteratees=[_.identity]]
 *  The iteratees to sort by.
 * @returns {Array} Returns the new sorted array.
 * @example
 *
 * var users = [
 *   { 'user': 'fred',   'age': 48 },
 *   { 'user': 'barney', 'age': 36 },
 *   { 'user': 'fred',   'age': 40 },
 *   { 'user': 'barney', 'age': 34 }
 * ];
 *
 * _.sortBy(users, [function(o) { return o.user; }]);
 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
 *
 * _.sortBy(users, ['user', 'age']);
 * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
 */
var sortBy = baseRest(function(collection, iteratees) {
  if (collection == null) {
    return [];
  }
  var length = iteratees.length;
  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
    iteratees = [];
  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
    iteratees = [iteratees[0]];
  }
  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
});

module.exports = sortBy;


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__(43),
    baseIteratee = __webpack_require__(192),
    baseMap = __webpack_require__(203),
    baseSortBy = __webpack_require__(209),
    baseUnary = __webpack_require__(53),
    compareMultiple = __webpack_require__(210),
    identity = __webpack_require__(28);

/**
 * The base implementation of `_.orderBy` without param guards.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
 * @param {string[]} orders The sort orders of `iteratees`.
 * @returns {Array} Returns the new sorted array.
 */
function baseOrderBy(collection, iteratees, orders) {
  var index = -1;
  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));

  var result = baseMap(collection, function(value, key, collection) {
    var criteria = arrayMap(iteratees, function(iteratee) {
      return iteratee(value);
    });
    return { 'criteria': criteria, 'index': ++index, 'value': value };
  });

  return baseSortBy(result, function(object, other) {
    return compareMultiple(object, other, orders);
  });
}

module.exports = baseOrderBy;


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

var baseMatches = __webpack_require__(193),
    baseMatchesProperty = __webpack_require__(196),
    identity = __webpack_require__(28),
    isArray = __webpack_require__(0),
    property = __webpack_require__(200);

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsMatch = __webpack_require__(194),
    getMatchData = __webpack_require__(195),
    matchesStrictComparable = __webpack_require__(81);

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(36),
    baseIsEqual = __webpack_require__(35);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

var isStrictComparable = __webpack_require__(80),
    keys = __webpack_require__(13);

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

module.exports = getMatchData;


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqual = __webpack_require__(35),
    get = __webpack_require__(11),
    hasIn = __webpack_require__(197),
    isKey = __webpack_require__(42),
    isStrictComparable = __webpack_require__(80),
    matchesStrictComparable = __webpack_require__(81),
    toKey = __webpack_require__(14);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

var baseHasIn = __webpack_require__(198),
    hasPath = __webpack_require__(199);

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;


/***/ }),
/* 198 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(26),
    isArguments = __webpack_require__(19),
    isArray = __webpack_require__(0),
    isIndex = __webpack_require__(40),
    isLength = __webpack_require__(32),
    toKey = __webpack_require__(14);

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

var baseProperty = __webpack_require__(201),
    basePropertyDeep = __webpack_require__(202),
    isKey = __webpack_require__(42),
    toKey = __webpack_require__(14);

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;


/***/ }),
/* 201 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(41);

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

var baseEach = __webpack_require__(204),
    isArrayLike = __webpack_require__(10);

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

module.exports = baseMap;


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

var baseForOwn = __webpack_require__(205),
    createBaseEach = __webpack_require__(208);

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

var baseFor = __webpack_require__(206),
    keys = __webpack_require__(13);

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

var createBaseFor = __webpack_require__(207);

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;


/***/ }),
/* 207 */
/***/ (function(module, exports) {

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

var isArrayLike = __webpack_require__(10);

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;


/***/ }),
/* 209 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.sortBy` which uses `comparer` to define the
 * sort order of `array` and replaces criteria objects with their corresponding
 * values.
 *
 * @private
 * @param {Array} array The array to sort.
 * @param {Function} comparer The function to define sort order.
 * @returns {Array} Returns `array`.
 */
function baseSortBy(array, comparer) {
  var length = array.length;

  array.sort(comparer);
  while (length--) {
    array[length] = array[length].value;
  }
  return array;
}

module.exports = baseSortBy;


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

var compareAscending = __webpack_require__(211);

/**
 * Used by `_.orderBy` to compare multiple properties of a value to another
 * and stable sort them.
 *
 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
 * specify an order of "desc" for descending or "asc" for ascending sort order
 * of corresponding values.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {boolean[]|string[]} orders The order to sort by for each property.
 * @returns {number} Returns the sort order indicator for `object`.
 */
function compareMultiple(object, other, orders) {
  var index = -1,
      objCriteria = object.criteria,
      othCriteria = other.criteria,
      length = objCriteria.length,
      ordersLength = orders.length;

  while (++index < length) {
    var result = compareAscending(objCriteria[index], othCriteria[index]);
    if (result) {
      if (index >= ordersLength) {
        return result;
      }
      var order = orders[index];
      return result * (order == 'desc' ? -1 : 1);
    }
  }
  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
  // that causes it, under certain circumstances, to provide the same value for
  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
  // for more details.
  //
  // This also ensures a stable sort in V8 and other engines.
  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
  return object.index - other.index;
}

module.exports = compareMultiple;


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

var isSymbol = __webpack_require__(27);

/**
 * Compares values to sort them in ascending order.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {number} Returns the sort order indicator for `value`.
 */
function compareAscending(value, other) {
  if (value !== other) {
    var valIsDefined = value !== undefined,
        valIsNull = value === null,
        valIsReflexive = value === value,
        valIsSymbol = isSymbol(value);

    var othIsDefined = other !== undefined,
        othIsNull = other === null,
        othIsReflexive = other === other,
        othIsSymbol = isSymbol(other);

    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
        (valIsNull && othIsDefined && othIsReflexive) ||
        (!valIsDefined && othIsReflexive) ||
        !valIsReflexive) {
      return 1;
    }
    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
        (othIsNull && valIsDefined && valIsReflexive) ||
        (!othIsDefined && valIsReflexive) ||
        !othIsReflexive) {
      return -1;
    }
  }
  return 0;
}

module.exports = compareAscending;


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__(28),
    overRest = __webpack_require__(72),
    setToString = __webpack_require__(73);

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__(23),
    isArrayLike = __webpack_require__(10),
    isIndex = __webpack_require__(40),
    isObject = __webpack_require__(7);

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(2),
    isObjectLike = __webpack_require__(3);

/** `Object#toString` result references. */
var boolTag = '[object Boolean]';

/**
 * Checks if `value` is classified as a boolean primitive or object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
 * @example
 *
 * _.isBoolean(false);
 * // => true
 *
 * _.isBoolean(null);
 * // => false
 */
function isBoolean(value) {
  return value === true || value === false ||
    (isObjectLike(value) && baseGetTag(value) == boolTag);
}

module.exports = isBoolean;


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(2),
    isObjectLike = __webpack_require__(3);

/** `Object#toString` result references. */
var numberTag = '[object Number]';

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */
function isNumber(value) {
  return typeof value == 'number' ||
    (isObjectLike(value) && baseGetTag(value) == numberTag);
}

module.exports = isNumber;


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.process = undefined;

var _get2 = __webpack_require__(11);

var _get3 = _interopRequireDefault(_get2);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var __assign = undefined && undefined.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
    }
    return t;
};

var QUICK_TYPE = [{
    type: 'pie',
    series: {
        gemo: 'interval',
        adjust: 'stack'
    },
    coord: {
        type: 'theta'
    }
}, {
    type: 'sector',
    series: {
        gemo: 'interval'
    },
    coord: {
        type: 'polar'
    }
}, {
    type: 'line',
    series: {
        gemo: 'line'
    }
}, {
    type: 'smoothLine',
    series: {
        gemo: 'line',
        shape: 'smooth'
    }
}, {
    type: 'dashLine',
    series: {
        gemo: 'line',
        shape: 'dash'
    }
}, {
    type: 'stackLine',
    series: {
        gemo: 'line',
        adjust: 'stack'
    }
}, {
    type: 'area',
    series: {
        gemo: 'area'
    }
}, {
    type: 'stackArea',
    series: {
        gemo: 'area',
        adjust: 'stack'
    }
}, {
    type: 'smoothArea',
    series: {
        gemo: 'area',
        shape: 'smooth'
    }
}, {
    type: 'interval',
    series: {
        gemo: 'interval'
    }
}, {
    type: 'stackInterval',
    series: {
        gemo: 'interval',
        shape: 'interval',
        adjust: 'stack'
    }
}, {
    type: 'dodgeInterval',
    series: {
        gemo: 'interval',
        shape: 'interval',
        adjust: 'dodge'
    }
}, {
    type: 'bar',
    series: {
        gemo: 'interval'
    }
}, {
    type: 'stackBar',
    series: {
        gemo: 'interval',
        shape: 'interval',
        adjust: 'stack'
    }
}, {
    type: 'dodgeBar',
    series: {
        gemo: 'interval',
        shape: 'interval',
        adjust: 'dodge'
    }
}, {
    type: 'point',
    series: {
        gemo: 'point',
        shape: 'circle'
    }
}, {
    type: 'funnel',
    series: {
        gemo: 'interval',
        adjust: 'symmetric',
        shape: 'funnel'
    }
}, {
    type: 'pyramid',
    series: {
        gemo: 'interval',
        adjust: 'symmetric',
        shape: 'pyramid'
    }
}, {
    type: 'schema',
    series: {
        gemo: 'schema',
        shape: 'box'
    }
}, {
    type: 'box',
    series: {
        gemo: 'schema',
        shape: 'box'
    }
}, {
    type: 'candle',
    series: {
        gemo: 'schema',
        shape: 'candle'
    }
}, {
    type: 'polygon',
    series: {
        gemo: 'polygon'
    }
}, {
    type: 'contour',
    series: {
        gemo: 'contour'
    }
}, {
    type: 'heatmap',
    series: {
        gemo: 'heatmap'
    }
}, {
    type: 'edge',
    series: {
        gemo: 'edge'
    }
}, {
    type: 'sankey',
    series: {
        gemo: 'edge',
        shape: 'sankey'
    }
}, {
    type: 'errorBar',
    series: {
        gemo: 'schema',
        shape: 'errorbar'
    }
}];
var process = exports.process = function process(series, coord) {
    var quickType = {};
    for (var _i = 0, QUICK_TYPE_1 = QUICK_TYPE; _i < QUICK_TYPE_1.length; _i++) {
        var item = QUICK_TYPE_1[_i];
        quickType[item.type] = item;
    }
    for (var i = 0; i < series.length; i++) {
        var currType = quickType[series[i].quickType];
        if (currType) {
            series[i] = __assign({}, series[i], currType.series);
            if (coord && coord.type && (0, _get3.default)(currType, 'coord.type') && (0, _get3.default)(currType, 'coord.type') !== coord.type) {
                throw new Error('quickType and coord had conflicted.');
            }
        }
    }
    return series;
};
//# sourceMappingURL=setQuickType.js.map

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.process = undefined;

var _omit2 = __webpack_require__(15);

var _omit3 = _interopRequireDefault(_omit2);

var _isNil2 = __webpack_require__(8);

var _isNil3 = _interopRequireDefault(_isNil2);

var _cloneDeep2 = __webpack_require__(4);

var _cloneDeep3 = _interopRequireDefault(_cloneDeep2);

var _EventUtils = __webpack_require__(12);

var EventUtils = _interopRequireWildcard(_EventUtils);

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function setHighlight(item) {
    item.onHover = function (ev) {
        var shapes = ev.shapes;
        var geom = ev.geom;
        geom.highlightShapes(shapes);
    };
    return item;
}
var process = exports.process = function process(chart, config) {
    var cLegend = (0, _cloneDeep3.default)(config.legend);
    var isArr = Array.isArray(cLegend);
    if ((0, _isNil3.default)(cLegend) || cLegend === false || isArr && cLegend.length === 0) {
        return chart.legend(false);
    }
    if (cLegend === true) {
        return chart.legend();
    }
    var arrLegend = isArr ? cLegend : [cLegend];
    for (var _i = 0, arrLegend_1 = arrLegend; _i < arrLegend_1.length; _i++) {
        var res = arrLegend_1[_i];
        if (res.highlight) {
            res = setHighlight(res);
        }
        for (var item in res) {
            if (res.hasOwnProperty(item)) {
                EventUtils.setSEvent(chart, 'legend', item, res[item]);
            }
        }
        if (res.dataKey) {
            if (res.show === false) {
                return chart.legend(res.dataKey, false);
            }
            var option = (0, _omit3.default)(res, ['dataKey', 'show']);
            return chart.legend(res.dataKey, option);
        } else {
            return chart.legend(res);
        }
    }
};
//# sourceMappingURL=setLengendConfig.js.map

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.process = undefined;

var _isEmpty2 = __webpack_require__(5);

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _isNil2 = __webpack_require__(8);

var _isNil3 = _interopRequireDefault(_isNil2);

var _cloneDeep2 = __webpack_require__(4);

var _cloneDeep3 = _interopRequireDefault(_cloneDeep2);

var _EventUtils = __webpack_require__(12);

var EventUtils = _interopRequireWildcard(_EventUtils);

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var __assign = undefined && undefined.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
    }
    return t;
};

function setGuideLine(chart, item) {
    if (item.quickType === 'parallel') {
        var data = item.data;
        chart.guide().line(__assign({ start: ['min', data], end: ['max', data] }, item));
    } else if (item.quickType === 'normal') {
        var data = item.data;
        chart.guide().line(__assign({ start: [data, 'min'], end: [data, 'max'] }, item));
    } else {
        chart.guide().line(item);
    }
}
function setGuideArc(chart, item) {
    if (item.quickType === 'parallel') {
        var data = item.data;
        chart.guide().arc(__assign({ start: ['min', data], end: ['max', data] }, item));
        chart.guide().arc(__assign({ start: ['max', data], end: ['min', data] }, item));
    } else if (item.quickType === 'normal') {
        var data = item.data;
        chart.guide().line(__assign({ start: [data, 'min'], end: [data, 'max'] }, item));
    } else {
        chart.guide().arc(item);
    }
}
var process = exports.process = function process(chart, config) {
    var cGuide = (0, _cloneDeep3.default)(config.guide);
    var isArr = Array.isArray(cGuide);
    if ((0, _isNil3.default)(cGuide) || (0, _isEmpty3.default)(cGuide)) {
        return;
    }
    var arrGuide = isArr ? cGuide : [cGuide];
    arrGuide.forEach(function (res) {
        EventUtils.setEvent(chart, "guide-" + res.type, res);
        if (res.type === 'line') {
            setGuideLine(chart, res);
        } else if (res.type === 'region') {
            chart.guide().region(res);
        } else if (res.type === 'arc') {
            setGuideArc(chart, res);
        } else if (res.type === 'text') {
            chart.guide().text(res);
        } else if (res.type === 'image') {
            chart.guide().image(res);
        } else if (res.type === 'html') {
            chart.guide().html(res);
        }
    });
    return chart;
};
//# sourceMappingURL=setGuideConfig.js.map

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.process = undefined;

var _omit2 = __webpack_require__(15);

var _omit3 = _interopRequireDefault(_omit2);

var _isNil2 = __webpack_require__(8);

var _isNil3 = _interopRequireDefault(_isNil2);

var _cloneDeep2 = __webpack_require__(4);

var _cloneDeep3 = _interopRequireDefault(_cloneDeep2);

var _EventUtils = __webpack_require__(12);

var EventUtils = _interopRequireWildcard(_EventUtils);

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var process = exports.process = function process(chart, config) {
    var cTooltip = (0, _cloneDeep3.default)(config.tooltip);
    if ((0, _isNil3.default)(cTooltip) || cTooltip === false || cTooltip.show === false) {
        return chart.tooltip(false);
    }
    for (var item in cTooltip) {
        if (item === 'g2Tooltip') {
            cTooltip['g2-tooltip'] = cTooltip[item];
            cTooltip = (0, _omit3.default)(cTooltip, 'g2Tooltip');
        }
        if (cTooltip.hasOwnProperty(item)) {
            EventUtils.setEvent(chart, 'tooltip', item);
        }
    }
    return chart.tooltip(cTooltip);
};
//# sourceMappingURL=setTooltipConfig.js.map

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.process = undefined;

var _omit2 = __webpack_require__(15);

var _omit3 = _interopRequireDefault(_omit2);

var _isEmpty2 = __webpack_require__(5);

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _isArray2 = __webpack_require__(0);

var _isArray3 = _interopRequireDefault(_isArray2);

var _cloneDeep2 = __webpack_require__(4);

var _cloneDeep3 = _interopRequireDefault(_cloneDeep2);

var _setCustomFormatter = __webpack_require__(74);

var setCustomFormatter = _interopRequireWildcard(_setCustomFormatter);

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var process = exports.process = function process(chart, config) {
    var cScale = (0, _cloneDeep3.default)(config.scale);
    var isArr = (0, _isArray3.default)(cScale);
    if ((0, _isEmpty3.default)(cScale)) {
        return;
    }
    var arrScale = isArr ? cScale : [cScale];
    var options = {};
    for (var _i = 0, arrScale_1 = arrScale; _i < arrScale_1.length; _i++) {
        var res = arrScale_1[_i];
        if (res.dataKey) {
            var currOption = (0, _omit3.default)(res, 'dataKey');
            options[res.dataKey] = currOption;
        }
    }
    options = setCustomFormatter.supportD3Formatter(options);
    return chart.scale(options);
};
//# sourceMappingURL=setScaleConfig.js.map

/***/ })
/******/ ]);
});