'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _isEqual2 = require('lodash/isEqual');

var _isEqual3 = _interopRequireDefault(_isEqual2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _isFunction2 = require('lodash/isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _cloneDeep2 = require('lodash/cloneDeep');

var _cloneDeep3 = _interopRequireDefault(_cloneDeep2);

var _loadShapes = require('../shapes/loadShapes');

var _loadShapes2 = _interopRequireDefault(_loadShapes);

var _CommonDataSet = require('./CommonDataSet');

var _CommonDataSet2 = _interopRequireDefault(_CommonDataSet);

var _EventUtils = require('../utils/EventUtils');

var EventUtils = _interopRequireWildcard(_EventUtils);

var _setCoordConfig = require('../components/setCoordConfig');

var setCoordConfig = _interopRequireWildcard(_setCoordConfig);

var _setAxisConfig = require('../components/setAxisConfig');

var setAxisConfig = _interopRequireWildcard(_setAxisConfig);

var _setSeriesConfig = require('../components/setSeriesConfig');

var setSeriesConfig = _interopRequireWildcard(_setSeriesConfig);

var _setLengendConfig = require('../components/setLengendConfig');

var setLengendConfig = _interopRequireWildcard(_setLengendConfig);

var _setGuideConfig = require('../components/setGuideConfig');

var setGuideConfig = _interopRequireWildcard(_setGuideConfig);

var _setTooltipConfig = require('../components/setTooltipConfig');

var setTooltipConfig = _interopRequireWildcard(_setTooltipConfig);

var _setScaleConfig = require('../components/setScaleConfig');

var setScaleConfig = _interopRequireWildcard(_setScaleConfig);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var G2 = require('@antv/g2');
var CommonChart = function () {
    function CommonChart(config) {
        this.viewInstance = {};
        this.config = (0, _cloneDeep3.default)(config);
        this.checkChartConfig(this.config);
        var chart = this.chartInstance = new G2.Chart(this.config.chart);
        var dataSet = this.datasetInstance = new _CommonDataSet2.default();
    }
    CommonChart.prototype.getWidth = function () {
        return this.chartInstance.get('width');
    };
    CommonChart.prototype.getHeight = function () {
        return this.chartInstance.get('height');
    };
    CommonChart.prototype.render = function () {
        var config = this.config;
        var chart = this.chartInstance;
        (0, _loadShapes2.default)();
        this.setEvents(chart, config);
        if (!(0, _isEmpty3.default)(config.data)) {
            var data = config.data,
                dataPre = config.dataPre,
                dataView = config.dataView;
            var processedData = this.datasetInstance.getProcessedData(data, dataPre, 'main');
            if (!(0, _isEmpty3.default)(config.series) || !(0, _isEmpty3.default)(config.facet)) {
                var calData = this.datasetInstance.getDataView(processedData, dataView);
                this.setDataSource(chart, calData);
            }
        }
        this.setCoord(chart, config);
        this.setTooltip(chart, config);
        this.setAxis(chart, config);
        this.setContent(chart, config);
        this.setLegend(chart, config);
        this.setViews(chart, config);
        this.setFacet(chart, config);
        this.oriConfig = config;
        chart.render();
    };
    CommonChart.prototype.repaint = function (config) {
        var newConfig = (0, _cloneDeep3.default)(config);
        this.checkChartConfig(newConfig);
        this.renderDiffConfig(newConfig);
        this.oriConfig = newConfig;
    };
    CommonChart.prototype.destroy = function (chart) {
        chart && chart.destroy();
    };
    CommonChart.prototype.clear = function (chart) {
        chart && chart.clear();
    };
    CommonChart.prototype.checkChartConfig = function (config) {
        var chart = config.chart;
        if ((0, _isNil3.default)(chart.height)) {
            throw new Error('please set correct chart option');
        }
    };
    CommonChart.prototype.createView = function (chart, config) {
        var view = chart.view();
        if (!config.viewId) {
            throw new Error('you must set viewId');
        }
        this.viewInstance[config.viewId] = view;
        return view;
    };
    CommonChart.prototype.setEvents = function (chart, config) {
        EventUtils.setEvent(chart, null, config.chart);
    };
    CommonChart.prototype.setDataSource = function (chart, data) {
        chart.source(data);
    };
    CommonChart.prototype.setScale = function (chart, config) {
        return setScaleConfig.process(chart, config);
    };
    CommonChart.prototype.setCoord = function (chart, config) {
        return setCoordConfig.process(chart, config);
    };
    CommonChart.prototype.setSeries = function (chart, config) {
        return setSeriesConfig.process(chart, config);
    };
    CommonChart.prototype.setAxis = function (chart, config) {
        return setAxisConfig.process(chart, config);
    };
    CommonChart.prototype.setTooltip = function (chart, config) {
        return setTooltipConfig.process(chart, config);
    };
    CommonChart.prototype.setGuide = function (chart, config) {
        return setGuideConfig.process(chart, config);
    };
    CommonChart.prototype.setLegend = function (chart, config) {
        return setLengendConfig.process(chart, config);
    };
    CommonChart.prototype.setContent = function (chart, config) {
        this.setScale(chart, config);
        this.setSeries(chart, config);
        this.setGuide(chart, config);
    };
    CommonChart.prototype.setView = function (item, chart, config) {
        var view = this.createView(chart, item);
        var viewData = item.data;
        var processedData;
        if (item.data) {
            processedData = this.datasetInstance.getProcessedData(item.data, item.dataPre, item.viewId);
        } else if (!item.data && item.dataPre) {
            processedData = this.datasetInstance.getProcessedData(config.data, item.dataPre, item.viewId);
        } else if (!item.data && !item.dataPre) {
            processedData = this.datasetInstance.copyData('main', item.viewId);
        }
        var calData = this.datasetInstance.getDataView(processedData, item.dataView);
        this.setDataSource(view, calData);
        if (!(0, _isNil3.default)(item.coord)) {
            this.setCoord(view, item);
        }
        if (!(0, _isNil3.default)(item.tooltip)) {
            this.setTooltip(view, item);
        }
        if (!(0, _isNil3.default)(item.axis)) {
            this.setAxis(view, item);
        }
        this.setContent(view, item);
        return view;
    };
    CommonChart.prototype.setViews = function (chart, config) {
        var cViews = (0, _cloneDeep3.default)(config.views);
        var isArr = Array.isArray(cViews);
        if ((0, _isNil3.default)(cViews) || (0, _isEmpty3.default)(cViews)) {
            return;
        }
        var arrViews = isArr ? cViews : [cViews];
        for (var _i = 0, arrViews_1 = arrViews; _i < arrViews_1.length; _i++) {
            var item = arrViews_1[_i];
            this.setView(item, chart, config);
        }
    };
    CommonChart.prototype.setFacetViews = function (chart, facet, views) {
        var processedData = this.datasetInstance.getProcessedData(facet.data, views.dataPre);
        var calData = this.datasetInstance.getDataView(processedData, views.dataView);
        this.setDataSource(chart, calData);
        this.setContent(chart, views);
    };
    CommonChart.prototype.setFacet = function (chart, config) {
        var _this = this;
        var cFacet = (0, _cloneDeep3.default)(config.facet);
        if ((0, _isNil3.default)(cFacet) || (0, _isEmpty3.default)(cFacet)) {
            return;
        }
        var options = (0, _omit3.default)(cFacet, ['type', 'views']);
        if ((0, _isEmpty3.default)(cFacet.views) && !(0, _isFunction3.default)(cFacet.views)) {
            return chart.facet(cFacet.type, options);
        }
        if ((0, _isFunction3.default)(cFacet.views)) {
            options.eachView = function (v, f) {
                var options = cFacet.views(v, f);
                _this.setFacetViews(v, f, options);
            };
        } else {
            cFacet.views = Array.isArray(cFacet.views) ? cFacet.views : [cFacet.views];
            options.eachView = function (v, f) {
                _this.setFacetViews(v, f, cFacet.views[0]);
            };
        }
        return chart.facet(cFacet.type, options);
    };
    CommonChart.prototype.repaintWidthHeight = function (chart, config) {
        var oriConfig = this.oriConfig;
        var width = (0, _get3.default)(config, 'chart.width');
        var oWidth = (0, _get3.default)(oriConfig, 'chart.width');
        if ((!(0, _isNil3.default)(width) || !(0, _isNil3.default)(oWidth)) && !(0, _isEqual3.default)(oWidth, width)) {
            chart.changeWidth(width);
        }
        var height = (0, _get3.default)(config, 'chart.height');
        var oHeight = (0, _get3.default)(oriConfig, 'chart.height');
        if ((!(0, _isNil3.default)(height) || !(0, _isNil3.default)(oHeight)) && !(0, _isEqual3.default)(oHeight, height)) {
            chart.changeHeight(height);
        }
    };
    CommonChart.prototype.repaintData = function (chart, oriConfig, config) {
        if ((!(0, _isNil3.default)(oriConfig.data) || !(0, _isNil3.default)(config.data)) && !(0, _isEqual3.default)(oriConfig.data, config.data)) {
            var viewId = config.viewId || 'main';
            var processedData = this.datasetInstance.getProcessedData(config.data, config.dataPre, viewId);
            var calData = this.datasetInstance.getDataView(processedData, config.dataView);
            chart.changeData(calData);
        }
    };
    CommonChart.prototype.repaintContent = function (chart, oriConfig, config) {
        var hasChartChange = false;
        if ((!(0, _isNil3.default)(oriConfig.scale) || !(0, _isNil3.default)(config.scale)) && !(0, _isEqual3.default)(oriConfig.scale, config.scale)) {
            this.setScale(chart, config);
            hasChartChange = true;
        }
        if ((!(0, _isNil3.default)(oriConfig.coord) || !(0, _isNil3.default)(config.coord)) && !(0, _isEqual3.default)(oriConfig.coord, config.coord)) {
            this.setCoord(chart, config);
            hasChartChange = true;
        }
        if ((!(0, _isNil3.default)(oriConfig.axis) || !(0, _isNil3.default)(config.axis)) && !(0, _isEqual3.default)(oriConfig.axis, config.axis)) {
            this.setAxis(chart, config);
            hasChartChange = true;
        }
        if ((!(0, _isNil3.default)(oriConfig.series) || !(0, _isNil3.default)(config.series)) && !(0, _isEqual3.default)(oriConfig.series, config.series)) {
            this.setSeries(chart, config);
            hasChartChange = true;
        }
        if ((!(0, _isNil3.default)(oriConfig.tooltip) || !(0, _isNil3.default)(config.tooltip)) && !(0, _isEqual3.default)(oriConfig.tooltip, config.tooltip)) {
            this.setTooltip(chart, config);
            hasChartChange = true;
        }
        if ((!(0, _isNil3.default)(oriConfig.guide) || !(0, _isNil3.default)(config.guide)) && !(0, _isEqual3.default)(oriConfig.guide, config.guide)) {
            this.setGuide(chart, config);
            hasChartChange = true;
        }
        return hasChartChange;
    };
    CommonChart.prototype.repaintViews = function (chart, oriConfig, config) {
        var oViewsConfig = oriConfig.views;
        var cViews = (0, _cloneDeep3.default)(config.views);
        var isArr = Array.isArray(cViews);
        if ((!(0, _isNil3.default)(oriConfig.views) || !(0, _isNil3.default)(config.views)) && !(0, _isEqual3.default)(oriConfig.views, config.views)) {
            var arrViews = isArr ? cViews : [cViews];
            var _loop_1 = function _loop_1(item) {
                var oriView = oViewsConfig.filter(function (res) {
                    return res.viewId === item.viewId;
                });
                var view = void 0;
                if (oriView.length) {
                    view = this_1.viewInstance[item.viewId];
                    this_1.repaintData(view, oriView[0], item);
                    this_1.repaintContent(view, oriView[0], item);
                } else {
                    view = this_1.setView(item, chart, config);
                }
                view.repaint();
            };
            var this_1 = this;
            for (var _i = 0, arrViews_2 = arrViews; _i < arrViews_2.length; _i++) {
                var item = arrViews_2[_i];
                _loop_1(item);
            }
        }
    };
    CommonChart.prototype.renderDiffConfig = function (config) {
        var oriConfig = this.oriConfig;
        var chart = this.chartInstance;
        this.repaintWidthHeight(chart, config);
        this.repaintData(chart, oriConfig, config);
        var hasContentChange = this.repaintContent(chart, oriConfig, config);
        this.repaintViews(chart, oriConfig, config);
        var hasChartPartChange = false;
        if ((!(0, _isNil3.default)(oriConfig.legend) || !(0, _isNil3.default)(config.legend)) && !(0, _isEqual3.default)(oriConfig.legend, config.legend)) {
            this.setLegend(chart, config);
            hasChartPartChange = true;
        }
        if ((!(0, _isNil3.default)(oriConfig.facet) || !(0, _isNil3.default)(config.facet)) && !(0, _isEqual3.default)(oriConfig.facet, config.facet)) {
            this.setFacet(chart, config);
            hasChartPartChange = true;
        }
        if (hasContentChange || hasChartPartChange) {
            chart.repaint();
        }
    };
    return CommonChart;
}();
exports.default = CommonChart;
//# sourceMappingURL=CommonChart.js.map