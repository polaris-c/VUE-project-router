import loadShapes from '../shapes/loadShapes';
import CommonDataSet from './CommonDataSet';
import * as _ from 'lodash';
import * as EventUtils from '../utils/EventUtils';
import * as setCoordConfig from '../components/setCoordConfig';
import * as setAxisConfig from '../components/setAxisConfig';
import * as setSeriesConfig from '../components/setSeriesConfig';
import * as setLengendConfig from '../components/setLengendConfig';
import * as setGuideConfig from '../components/setGuideConfig';
import * as setTooltipConfig from '../components/setTooltipConfig';
import * as setScaleConfig from '../components/setScaleConfig';
var G2 = require('@antv/g2');
var CommonChart = (function () {
    function CommonChart(config) {
        this.viewInstance = {};
        this.config = _.cloneDeep(config);
        this.checkChartConfig(this.config);
        var chart = this.chartInstance = new G2.Chart(this.config.chart);
        var dataSet = this.datasetInstance = new CommonDataSet();
    }
    CommonChart.prototype.getWidth = function () {
        return this.chartInstance.get('width');
    };
    CommonChart.prototype.getHeight = function () {
        return this.chartInstance.get('height');
    };
    CommonChart.prototype.render = function () {
        var config = this.config;
        var chart = this.chartInstance;
        loadShapes();
        this.setEvents(chart, config);
        if (!_.isEmpty(config.data)) {
            var data = config.data, dataPre = config.dataPre, dataView = config.dataView;
            var processedData = this.datasetInstance.getProcessedData(data, dataPre, 'main');
            if (!_.isEmpty(config.series) || !_.isEmpty(config.facet)) {
                var calData = this.datasetInstance.getDataView(processedData, dataView);
                this.setDataSource(chart, calData);
            }
        }
        this.setCoord(chart, config);
        this.setTooltip(chart, config);
        this.setAxis(chart, config);
        this.setContent(chart, config);
        this.setLegend(chart, config);
        this.setViews(chart, config);
        this.setFacet(chart, config);
        this.oriConfig = config;
        chart.render();
    };
    CommonChart.prototype.repaint = function (config) {
        var newConfig = _.cloneDeep(config);
        this.checkChartConfig(newConfig);
        this.renderDiffConfig(newConfig);
        this.oriConfig = newConfig;
    };
    CommonChart.prototype.destroy = function (chart) {
        chart && chart.destroy();
    };
    CommonChart.prototype.clear = function (chart) {
        chart && chart.clear();
    };
    CommonChart.prototype.checkChartConfig = function (config) {
        var chart = config.chart;
        if (_.isNil(chart.height)) {
            throw new Error('please set correct chart option');
        }
    };
    CommonChart.prototype.createView = function (chart, config) {
        var view = chart.view();
        if (!config.viewId) {
            throw new Error('you must set viewId');
        }
        this.viewInstance[config.viewId] = view;
        return view;
    };
    CommonChart.prototype.setEvents = function (chart, config) {
        EventUtils.setEvent(chart, null, config.chart);
    };
    CommonChart.prototype.setDataSource = function (chart, data) {
        chart.source(data);
    };
    CommonChart.prototype.setScale = function (chart, config) {
        return setScaleConfig.process(chart, config);
    };
    CommonChart.prototype.setCoord = function (chart, config) {
        return setCoordConfig.process(chart, config);
    };
    CommonChart.prototype.setSeries = function (chart, config) {
        return setSeriesConfig.process(chart, config);
    };
    CommonChart.prototype.setAxis = function (chart, config) {
        return setAxisConfig.process(chart, config);
    };
    CommonChart.prototype.setTooltip = function (chart, config) {
        return setTooltipConfig.process(chart, config);
    };
    CommonChart.prototype.setGuide = function (chart, config) {
        return setGuideConfig.process(chart, config);
    };
    CommonChart.prototype.setLegend = function (chart, config) {
        return setLengendConfig.process(chart, config);
    };
    CommonChart.prototype.setContent = function (chart, config) {
        this.setScale(chart, config);
        this.setSeries(chart, config);
        this.setGuide(chart, config);
    };
    CommonChart.prototype.setView = function (item, chart, config) {
        var view = this.createView(chart, item);
        var viewData = item.data;
        var processedData;
        if (item.data) {
            processedData = this.datasetInstance.getProcessedData(item.data, item.dataPre, item.viewId);
        }
        else if (!item.data && item.dataPre) {
            processedData = this.datasetInstance.getProcessedData(config.data, item.dataPre, item.viewId);
        }
        else if (!item.data && !item.dataPre) {
            processedData = this.datasetInstance.copyData('main', item.viewId);
        }
        var calData = this.datasetInstance.getDataView(processedData, item.dataView);
        this.setDataSource(view, calData);
        if (!_.isNil(item.coord)) {
            this.setCoord(view, item);
        }
        if (!_.isNil(item.tooltip)) {
            this.setTooltip(view, item);
        }
        if (!_.isNil(item.axis)) {
            this.setAxis(view, item);
        }
        this.setContent(view, item);
        return view;
    };
    CommonChart.prototype.setViews = function (chart, config) {
        var cViews = _.cloneDeep(config.views);
        var isArr = Array.isArray(cViews);
        if (_.isNil(cViews) || _.isEmpty(cViews)) {
            return;
        }
        var arrViews = isArr ? cViews : [cViews];
        for (var _i = 0, arrViews_1 = arrViews; _i < arrViews_1.length; _i++) {
            var item = arrViews_1[_i];
            this.setView(item, chart, config);
        }
    };
    CommonChart.prototype.setFacetViews = function (chart, facet, views) {
        var processedData = this.datasetInstance.getProcessedData(facet.data, views.dataPre);
        var calData = this.datasetInstance.getDataView(processedData, views.dataView);
        this.setDataSource(chart, calData);
        this.setContent(chart, views);
    };
    CommonChart.prototype.setFacet = function (chart, config) {
        var _this = this;
        var cFacet = _.cloneDeep(config.facet);
        if (_.isNil(cFacet) || _.isEmpty(cFacet)) {
            return;
        }
        var options = _.omit(cFacet, ['type', 'views']);
        if (_.isEmpty(cFacet.views) && !_.isFunction(cFacet.views)) {
            return chart.facet(cFacet.type, options);
        }
        if (_.isFunction(cFacet.views)) {
            options.eachView = function (v, f) {
                var options = cFacet.views(v, f);
                _this.setFacetViews(v, f, options);
            };
        }
        else {
            cFacet.views = Array.isArray(cFacet.views) ? cFacet.views : [cFacet.views];
            options.eachView = function (v, f) {
                _this.setFacetViews(v, f, cFacet.views[0]);
            };
        }
        return chart.facet(cFacet.type, options);
    };
    CommonChart.prototype.repaintWidthHeight = function (chart, config) {
        var oriConfig = this.oriConfig;
        var width = _.get(config, 'chart.width');
        var oWidth = _.get(oriConfig, 'chart.width');
        if ((!_.isNil(width) || !_.isNil(oWidth)) && !_.isEqual(oWidth, width)) {
            chart.changeWidth(width);
        }
        var height = _.get(config, 'chart.height');
        var oHeight = _.get(oriConfig, 'chart.height');
        if ((!_.isNil(height) || !_.isNil(oHeight)) && !_.isEqual(oHeight, height)) {
            chart.changeHeight(height);
        }
    };
    CommonChart.prototype.repaintData = function (chart, oriConfig, config) {
        if ((!_.isNil(oriConfig.data) || !_.isNil(config.data)) &&
            !_.isEqual(oriConfig.data, config.data)) {
            var viewId = config.viewId || 'main';
            var processedData = this.datasetInstance.getProcessedData(config.data, config.dataPre, viewId);
            var calData = this.datasetInstance.getDataView(processedData, config.dataView);
            chart.changeData(calData);
        }
    };
    CommonChart.prototype.repaintContent = function (chart, oriConfig, config) {
        var hasChartChange = false;
        if ((!_.isNil(oriConfig.scale) || !_.isNil(config.scale)) &&
            !_.isEqual(oriConfig.scale, config.scale)) {
            this.setScale(chart, config);
            hasChartChange = true;
        }
        if ((!_.isNil(oriConfig.coord) || !_.isNil(config.coord)) &&
            !_.isEqual(oriConfig.coord, config.coord)) {
            this.setCoord(chart, config);
            hasChartChange = true;
        }
        if ((!_.isNil(oriConfig.axis) || !_.isNil(config.axis)) &&
            !_.isEqual(oriConfig.axis, config.axis)) {
            this.setAxis(chart, config);
            hasChartChange = true;
        }
        if ((!_.isNil(oriConfig.series) || !_.isNil(config.series)) &&
            !_.isEqual(oriConfig.series, config.series)) {
            this.setSeries(chart, config);
            hasChartChange = true;
        }
        if ((!_.isNil(oriConfig.tooltip) || !_.isNil(config.tooltip)) &&
            !_.isEqual(oriConfig.tooltip, config.tooltip)) {
            this.setTooltip(chart, config);
            hasChartChange = true;
        }
        if ((!_.isNil(oriConfig.guide) || !_.isNil(config.guide)) &&
            !_.isEqual(oriConfig.guide, config.guide)) {
            this.setGuide(chart, config);
            hasChartChange = true;
        }
        return hasChartChange;
    };
    CommonChart.prototype.repaintViews = function (chart, oriConfig, config) {
        var oViewsConfig = oriConfig.views;
        var cViews = _.cloneDeep(config.views);
        var isArr = Array.isArray(cViews);
        if ((!_.isNil(oriConfig.views) || !_.isNil(config.views)) &&
            !_.isEqual(oriConfig.views, config.views)) {
            var arrViews = isArr ? cViews : [cViews];
            var _loop_1 = function (item) {
                var oriView = oViewsConfig.filter(function (res) { return (res.viewId === item.viewId); });
                var view = void 0;
                if (oriView.length) {
                    view = this_1.viewInstance[item.viewId];
                    this_1.repaintData(view, oriView[0], item);
                    this_1.repaintContent(view, oriView[0], item);
                }
                else {
                    view = this_1.setView(item, chart, config);
                }
                view.repaint();
            };
            var this_1 = this;
            for (var _i = 0, arrViews_2 = arrViews; _i < arrViews_2.length; _i++) {
                var item = arrViews_2[_i];
                _loop_1(item);
            }
        }
    };
    CommonChart.prototype.renderDiffConfig = function (config) {
        var oriConfig = this.oriConfig;
        var chart = this.chartInstance;
        this.repaintWidthHeight(chart, config);
        this.repaintData(chart, oriConfig, config);
        var hasContentChange = this.repaintContent(chart, oriConfig, config);
        this.repaintViews(chart, oriConfig, config);
        var hasChartPartChange = false;
        if ((!_.isNil(oriConfig.legend) || !_.isNil(config.legend)) &&
            !_.isEqual(oriConfig.legend, config.legend)) {
            this.setLegend(chart, config);
            hasChartPartChange = true;
        }
        if ((!_.isNil(oriConfig.facet) || !_.isNil(config.facet)) &&
            !_.isEqual(oriConfig.facet, config.facet)) {
            this.setFacet(chart, config);
            hasChartPartChange = true;
        }
        if (hasContentChange || hasChartPartChange) {
            chart.repaint();
        }
    };
    return CommonChart;
}());
export default CommonChart;
//# sourceMappingURL=CommonChart.js.map