import * as _ from 'lodash';
var DataSet = require('@antv/data-set');
var CommonDataSet = (function () {
    function CommonDataSet() {
        this.dataSet = {};
        this.ds = new DataSet();
    }
    CommonDataSet.prototype.copyData = function (viewId, copyId) {
        this.setDataSet(this.dataSet[viewId], copyId);
        return this.dataSet[viewId];
    };
    CommonDataSet.prototype.getProcessedData = function (data, dataPre, viewId) {
        var cData = _.cloneDeep(data);
        var cDataPre = _.isFunction ? dataPre : _.cloneDeep(dataPre);
        var currData;
        if (viewId && this.dataSet[viewId]) {
            return;
        }
        if (_.isEmpty(cData)) {
            currData = [];
            this.setDataSet(currData, viewId);
            return currData;
        }
        if (_.isFunction(cDataPre)) {
            cDataPre = cDataPre(this.dataSet);
        }
        if (_.isEmpty(cDataPre) || _.isEmpty(cDataPre.transform)) {
            currData = this.createSource(cData, cDataPre);
            this.setDataSet(currData, viewId);
            return currData;
        }
        cDataPre.transform = Array.isArray(cDataPre.transform) ? cDataPre.transform : [cDataPre.transform];
        var transform = cDataPre.transform;
        if (transform && transform.length) {
            var exchangeType = transform[0].exchangeType;
            if (exchangeType === 'type-1') {
                cData = this.processExchangeColumnToRowOne(cData, transform[0]);
            }
            else if (exchangeType === 'type-2') {
                cData = this.processExchangeColumnToRowTwo(cData, transform[0]);
            }
            else if (exchangeType === 'type-3') {
                cData = this.processExchangeColumnToRowThree(cData, transform[0]);
            }
        }
        var dv = this.createSource(cData, cDataPre);
        var ds;
        for (var _i = 0, transform_1 = transform; _i < transform_1.length; _i++) {
            var item = transform_1[_i];
            if (item.exchangeType) {
                continue;
            }
            ds = this.processCommonTransform(dv, item);
        }
        currData = ds;
        this.setDataSet(currData, viewId);
        return currData;
    };
    CommonDataSet.prototype.getDataView = function (data, dataView) {
        if (dataView === void 0) { dataView = 'rows'; }
        if (_.isArray(dataView) && dataView.length >= 2) {
            var type = dataView[0];
            if (_.isFunction(dataView[1])) {
                if (type === 'nodes') {
                    return dataView[1](data.getAllNodes());
                }
                else if (type === 'edges') {
                    return dataView[1](data.getAllLinks());
                }
            }
        }
        return data[dataView];
    };
    CommonDataSet.prototype.setDataSet = function (data, viewId) {
        if (viewId) {
            this.dataSet[viewId] = data;
        }
    };
    CommonDataSet.prototype.transformData = function (data, dataPre) {
        dataPre.transform = Array.isArray(dataPre.transform) ? dataPre.transform : [dataPre.transform];
        var transform = dataPre.transform;
        if (transform && transform.length) {
            var exchangeType = transform[0].exchangeType;
            if (exchangeType === 'type-1') {
                data = this.processExchangeColumnToRowOne(data, transform[0]);
            }
            else if (exchangeType === 'type-2') {
                data = this.processExchangeColumnToRowTwo(data, transform[0]);
            }
            else if (exchangeType === 'type-3') {
                data = this.processExchangeColumnToRowThree(data, transform[0]);
            }
        }
        var dv = this.createSource(data, dataPre);
        var ds;
        for (var _i = 0, transform_2 = transform; _i < transform_2.length; _i++) {
            var item = transform_2[_i];
            if (item.exchangeType) {
                continue;
            }
            ds = this.processCommonTransform(dv, item);
        }
    };
    CommonDataSet.prototype.handleToNumber = function (row, def) {
        var fields = Array.isArray(def.fields) ? def.fields : [def.fields];
        for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {
            var item = fields_1[_i];
            row[item] = parseFloat(row[item]);
        }
        return row;
    };
    CommonDataSet.prototype.handleMergeFields = function (row, item) {
        var fields = item.fields;
        if (!Array.isArray(fields) || fields.length === 0) {
            throw new Error("The merge fields of DataPre must be greater than 0.");
        }
        var newItem = [];
        for (var _i = 0, fields_2 = fields; _i < fields_2.length; _i++) {
            var field = fields_2[_i];
            newItem.push(row[field]);
        }
        row[item.as] = newItem;
        return row;
    };
    CommonDataSet.prototype.processExchangeColumnToRowOne = function (data, item) {
        var itemArr = Array.isArray(item.fields) ? item.fields : [item.fields];
        var finalData = [];
        for (var res in data) {
            if (data.hasOwnProperty(res) && itemArr.indexOf(res) >= 0) {
                for (var i = 0; i < data[res].length; i++) {
                    if (!finalData[i]) {
                        finalData[i] = {};
                    }
                    if (data[res][i]) {
                        finalData[i][res] = data[res][i];
                    }
                }
            }
        }
        return finalData;
    };
    CommonDataSet.prototype.processExchangeColumnToRowTwo = function (data, item) {
        var itemArr = Array.isArray(item.fields) ? item.fields : [item.fields];
        var finalData = [];
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var res = data_1[_i];
            var key = res[0];
            if (itemArr.indexOf(key) >= 0) {
                for (var i = 1; i < res.length; i++) {
                    if (!finalData[i - 1]) {
                        finalData[i - 1] = {};
                    }
                    if (res[i]) {
                        finalData[i - 1][key] = res[i];
                    }
                }
            }
        }
        return finalData;
    };
    CommonDataSet.prototype.processExchangeColumnToRowThree = function (data, item) {
        var itemArr = Array.isArray(item.fields) ? item.fields : [item.fields];
        var finalData = [];
        var i = 0;
        for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
            var res = data_2[_i];
            var key = itemArr[i];
            for (var i_1 = 0; i_1 < res.length; i_1++) {
                if (!finalData[i_1]) {
                    finalData[i_1] = {};
                }
                if (res[i_1]) {
                    finalData[i_1][key] = res[i_1];
                }
            }
            i++;
        }
        return finalData;
    };
    CommonDataSet.prototype.processCommonTransform = function (dv, item) {
        if (item.type === 'toNumber') {
            dv = dv.transform({
                type: 'map',
                callback: function (row) {
                    return this.handleToNumber(row, item);
                }
            });
        }
        else if (item.type === 'merge') {
            dv = dv.transform({
                type: 'map',
                callback: function (row) {
                    return this.handleMergeFields(row, item);
                }
            });
        }
        else {
            dv = dv.transform(item);
        }
        return dv;
    };
    CommonDataSet.prototype.createSource = function (data, dataPre) {
        var dv;
        if (!_.get(dataPre, 'connector')) {
            dv = this.ds.createView().source(data);
        }
        else {
            dv = this.ds.createView().source(data, dataPre.connector);
        }
        return dv;
    };
    return CommonDataSet;
}());
export default CommonDataSet;
//# sourceMappingURL=CommonDataSet.js.map